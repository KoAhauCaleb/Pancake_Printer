
Pancake_Printer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  08010cd0  08010cd0  00020cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114f8  080114f8  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080114f8  080114f8  000214f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011500  08011500  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011500  08011500  00021500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011504  08011504  00021504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011508  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002af0  20000208  08011710  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cf8  08011710  00032cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228ec  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e67  00000000  00000000  00052b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  000579d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174d  00000000  00000000  000597f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb1b  00000000  00000000  0005af3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e03  00000000  00000000  00087a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001032ab  00000000  00000000  000ad85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000925c  00000000  00000000  001b0b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001b9d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010cb4 	.word	0x08010cb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08010cb4 	.word	0x08010cb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b9a6 	b.w	8000fc0 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f83c 	bl	8000cf8 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2lz>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	f7ff ff21 	bl	8000adc <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x1c>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc97 	bl	80005f8 <__aeabi_dmul>
 8000cca:	f7ff ff57 	bl	8000b7c <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc18 	bl	8000504 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc8e 	bl	80005f8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fad0 	bl	8000288 <__aeabi_dsub>
 8000ce8:	f7ff ff48 	bl	8000b7c <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <delayms>:
float speed = 20.0; //mm/s
float extrude_speed = 2.0; //mm/s

bool extrusion_on = false;

void delayms(uint16_t ms){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  osDelay(ms);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f009 f9ed 	bl	800a3b0 <osDelay>
  //delayus(ms * 1000);
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <delayus>:

void delayus(uint16_t us){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <delayus+0x34>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim1);
 8000ff2:	4808      	ldr	r0, [pc, #32]	; (8001014 <delayus+0x34>)
 8000ff4:	f004 f8da 	bl	80051ac <HAL_TIM_Base_Start>
  while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000ff8:	bf00      	nop
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <delayus+0x34>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3f9      	bcc.n	8000ffa <delayus+0x1a>
  HAL_TIM_Base_Stop(&htim1);// wait for the counter to reach the us input in the parameter
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <delayus+0x34>)
 8001008:	f004 f938 	bl	800527c <HAL_TIM_Base_Stop>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000394 	.word	0x20000394

08001018 <motor_init>:

void motor_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  //For some reason non-syncronus delay needed before synchronous delay will work.
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	4848      	ldr	r0, [pc, #288]	; (8001144 <motor_init+0x12c>)
 8001024:	f001 ff62 	bl	8002eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4845      	ldr	r0, [pc, #276]	; (8001144 <motor_init+0x12c>)
 8001030:	f001 ff5c 	bl	8002eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 ff55 	bl	8002eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f001 ff4e 	bl	8002eec <HAL_GPIO_WritePin>
  delayus(2);
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ffc5 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f001 ff44 	bl	8002eec <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <motor_init+0x130>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800114c <motor_init+0x134>
 800106e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001072:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001150 <motor_init+0x138>
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107e:	ee17 3a90 	vmov	r3, s15
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ffab 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2108      	movs	r1, #8
 800108e:	482d      	ldr	r0, [pc, #180]	; (8001144 <motor_init+0x12c>)
 8001090:	f001 ff2c 	bl	8002eec <HAL_GPIO_WritePin>
  delayus(2);
 8001094:	2002      	movs	r0, #2
 8001096:	f7ff ffa3 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2108      	movs	r1, #8
 800109e:	4829      	ldr	r0, [pc, #164]	; (8001144 <motor_init+0x12c>)
 80010a0:	f001 ff24 	bl	8002eec <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <motor_init+0x130>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800114c <motor_init+0x134>
 80010ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010b2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001150 <motor_init+0x138>
 80010b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010be:	ee17 3a90 	vmov	r3, s15
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff8b 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2120      	movs	r1, #32
 80010ce:	481d      	ldr	r0, [pc, #116]	; (8001144 <motor_init+0x12c>)
 80010d0:	f001 ff0c 	bl	8002eec <HAL_GPIO_WritePin>
  delayus(2);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff ff83 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	4819      	ldr	r0, [pc, #100]	; (8001144 <motor_init+0x12c>)
 80010e0:	f001 ff04 	bl	8002eec <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <motor_init+0x130>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800114c <motor_init+0x134>
 80010ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001150 <motor_init+0x138>
 80010f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	b29b      	uxth	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff6b 	bl	8000fe0 <delayus>

  uint16_t ccr1 = (uint16_t) ((crr1_2ms - crr1_1ms) * servo_off_duty / 100) + crr1_1ms;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <motor_init+0x13c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <motor_init+0x140>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4a11      	ldr	r2, [pc, #68]	; (800115c <motor_init+0x144>)
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	4a10      	ldr	r2, [pc, #64]	; (8001160 <motor_init+0x148>)
 800111e:	fb82 1203 	smull	r1, r2, r2, r3
 8001122:	1152      	asrs	r2, r2, #5
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	b29a      	uxth	r2, r3
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <motor_init+0x140>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4413      	add	r3, r2
 8001132:	80fb      	strh	r3, [r7, #6]
  TIM4->CCR1 = ccr1;
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <motor_init+0x14c>)
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	6353      	str	r3, [r2, #52]	; 0x34
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000400 	.word	0x48000400
 8001148:	20000014 	.word	0x20000014
 800114c:	42480000 	.word	0x42480000
 8001150:	49742400 	.word	0x49742400
 8001154:	20000004 	.word	0x20000004
 8001158:	20000000 	.word	0x20000000
 800115c:	2000000c 	.word	0x2000000c
 8001160:	51eb851f 	.word	0x51eb851f
 8001164:	40000800 	.word	0x40000800

08001168 <move>:

void set_speed(float new_speed){
  speed = new_speed;
}

void move(float x, float y){
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001172:	edc7 0a00 	vstr	s1, [r7]
  int x_steps = (x - current_x) * X_STEPS_PER_MM;
 8001176:	4b71      	ldr	r3, [pc, #452]	; (800133c <move+0x1d4>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  int y_steps = (y - current_y) * Y_STEPS_PER_MM;
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <move+0x1d8>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ed97 7a00 	vldr	s14, [r7]
 80011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b0:	ee17 3a90 	vmov	r3, s15
 80011b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2110      	movs	r1, #16
 80011ba:	4862      	ldr	r0, [pc, #392]	; (8001344 <move+0x1dc>)
 80011bc:	f001 fe96 	bl	8002eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c6:	485f      	ldr	r0, [pc, #380]	; (8001344 <move+0x1dc>)
 80011c8:	f001 fe90 	bl	8002eec <HAL_GPIO_WritePin>
  if(x_steps < 0){
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da07      	bge.n	80011e2 <move+0x7a>
    HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2110      	movs	r1, #16
 80011d6:	485b      	ldr	r0, [pc, #364]	; (8001344 <move+0x1dc>)
 80011d8:	f001 fe88 	bl	8002eec <HAL_GPIO_WritePin>
    x_steps *= -1;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	425b      	negs	r3, r3
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if(y_steps < 0){
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da08      	bge.n	80011fa <move+0x92>
    HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4855      	ldr	r0, [pc, #340]	; (8001344 <move+0x1dc>)
 80011f0:	f001 fe7c 	bl	8002eec <HAL_GPIO_WritePin>
    y_steps *= -1;
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	425b      	negs	r3, r3
 80011f8:	623b      	str	r3, [r7, #32]
  }

  int max_steps = x_steps;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	61fb      	str	r3, [r7, #28]
  if(y_steps > x_steps){
 80011fe:	6a3a      	ldr	r2, [r7, #32]
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	429a      	cmp	r2, r3
 8001204:	dd01      	ble.n	800120a <move+0xa2>
    max_steps = y_steps;
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	61fb      	str	r3, [r7, #28]
  }

  int x_step_ratio = max_steps / x_steps;
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
  int y_step_ratio = max_steps / y_steps;
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	fb92 f3f3 	sdiv	r3, r2, r3
 800121c:	60bb      	str	r3, [r7, #8]

  int x_taken = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  int y_taken = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < max_steps; i++){
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	e04a      	b.n	80012c2 <move+0x15a>
    if(i % x_step_ratio == 0){
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	fb93 f2f2 	sdiv	r2, r3, r2
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	fb01 f202 	mul.w	r2, r1, r2
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <move+0xec>
      HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f001 fe4f 	bl	8002eec <HAL_GPIO_WritePin>
      x_taken++;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	3301      	adds	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
    }
    if(i % y_step_ratio == 0){
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	fb93 f2f2 	sdiv	r2, r3, r2
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	fb01 f202 	mul.w	r2, r1, r2
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d107      	bne.n	8001278 <move+0x110>
      HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	2108      	movs	r1, #8
 800126c:	4835      	ldr	r0, [pc, #212]	; (8001344 <move+0x1dc>)
 800126e:	f001 fe3d 	bl	8002eec <HAL_GPIO_WritePin>
      y_taken++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
    }
    delayus(2);
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff feb1 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f001 fe30 	bl	8002eec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2108      	movs	r1, #8
 8001290:	482c      	ldr	r0, [pc, #176]	; (8001344 <move+0x1dc>)
 8001292:	f001 fe2b 	bl	8002eec <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed)); // 1000000us/1s / (step/mm * mm/s)
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <move+0x1e0>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80012a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012a4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800134c <move+0x1e4>
 80012a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b0:	ee17 3a90 	vmov	r3, s15
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe84 	bl	8000fc4 <delayms>
  for(int i = 0; i < max_steps; i++){
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3301      	adds	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbb0      	blt.n	800122c <move+0xc4>
  }

  while (x_steps > x_taken){
 80012ca:	e013      	b.n	80012f4 <move+0x18c>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f001 fe09 	bl	8002eec <HAL_GPIO_WritePin>
    delayus(2);
 80012da:	2002      	movs	r0, #2
 80012dc:	f7ff fe80 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fdff 	bl	8002eec <HAL_GPIO_WritePin>
    x_taken++;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  while (x_steps > x_taken){
 80012f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dce7      	bgt.n	80012cc <move+0x164>
  }
  while (y_steps > y_taken){
 80012fc:	e00f      	b.n	800131e <move+0x1b6>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	2108      	movs	r1, #8
 8001302:	4810      	ldr	r0, [pc, #64]	; (8001344 <move+0x1dc>)
 8001304:	f001 fdf2 	bl	8002eec <HAL_GPIO_WritePin>
    delayus(2);
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff fe69 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2108      	movs	r1, #8
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <move+0x1dc>)
 8001314:	f001 fdea 	bl	8002eec <HAL_GPIO_WritePin>
    y_taken++;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  while (y_steps > y_taken){
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	429a      	cmp	r2, r3
 8001324:	dceb      	bgt.n	80012fe <move+0x196>
  }
  current_x = x;
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <move+0x1d4>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6013      	str	r3, [r2, #0]
  current_y = y;
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <move+0x1d8>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	6013      	str	r3, [r2, #0]
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000224 	.word	0x20000224
 8001340:	20000228 	.word	0x20000228
 8001344:	48000400 	.word	0x48000400
 8001348:	20000010 	.word	0x20000010
 800134c:	447a0000 	.word	0x447a0000

08001350 <wait>:

void wait(int ms){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  delayms(ms);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe31 	bl	8000fc4 <delayms>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <home>:

void home() {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2110      	movs	r1, #16
 8001374:	4859      	ldr	r0, [pc, #356]	; (80014dc <home+0x170>)
 8001376:	f001 fdb9 	bl	8002eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001380:	4856      	ldr	r0, [pc, #344]	; (80014dc <home+0x170>)
 8001382:	f001 fdb3 	bl	8002eec <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8001386:	e023      	b.n	80013d0 <home+0x64>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f001 fdab 	bl	8002eec <HAL_GPIO_WritePin>
    delayus(2);
 8001396:	2002      	movs	r0, #2
 8001398:	f7ff fe22 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f001 fda1 	bl	8002eec <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 80013aa:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <home+0x174>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80013b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b8:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80014e4 <home+0x178>
 80013bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c4:	ee17 3a90 	vmov	r3, s15
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fdfa 	bl	8000fc4 <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	4845      	ldr	r0, [pc, #276]	; (80014e8 <home+0x17c>)
 80013d4:	f001 fd72 	bl	8002ebc <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0d4      	beq.n	8001388 <home+0x1c>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80013de:	e01f      	b.n	8001420 <home+0xb4>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2108      	movs	r1, #8
 80013e4:	483d      	ldr	r0, [pc, #244]	; (80014dc <home+0x170>)
 80013e6:	f001 fd81 	bl	8002eec <HAL_GPIO_WritePin>
    delayus(2);
 80013ea:	2002      	movs	r0, #2
 80013ec:	f7ff fdf8 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2108      	movs	r1, #8
 80013f4:	4839      	ldr	r0, [pc, #228]	; (80014dc <home+0x170>)
 80013f6:	f001 fd79 	bl	8002eec <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <home+0x174>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001404:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001408:	eddf 6a36 	vldr	s13, [pc, #216]	; 80014e4 <home+0x178>
 800140c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001414:	ee17 3a90 	vmov	r3, s15
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fdd2 	bl	8000fc4 <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	482e      	ldr	r0, [pc, #184]	; (80014dc <home+0x170>)
 8001424:	f001 fd4a 	bl	8002ebc <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0d8      	beq.n	80013e0 <home+0x74>
  }

  current_x = 0;
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <home+0x180>)
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  current_y = 0;
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <home+0x184>)
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

  //move away from limit switch by small distance
  move(10,10);
 800143e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001442:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001446:	f7ff fe8f 	bl	8001168 <move>

  //move slow towards limit switch
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2110      	movs	r1, #16
 800144e:	4823      	ldr	r0, [pc, #140]	; (80014dc <home+0x170>)
 8001450:	f001 fd4c 	bl	8002eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145a:	4820      	ldr	r0, [pc, #128]	; (80014dc <home+0x170>)
 800145c:	f001 fd46 	bl	8002eec <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8001460:	e013      	b.n	800148a <home+0x11e>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f001 fd3e 	bl	8002eec <HAL_GPIO_WritePin>
    delayus(2);
 8001470:	2002      	movs	r0, #2
 8001472:	f7ff fdb5 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f001 fd34 	bl	8002eec <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 8001484:	2005      	movs	r0, #5
 8001486:	f7ff fd9d 	bl	8000fc4 <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	4816      	ldr	r0, [pc, #88]	; (80014e8 <home+0x17c>)
 800148e:	f001 fd15 	bl	8002ebc <HAL_GPIO_ReadPin>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0e4      	beq.n	8001462 <home+0xf6>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8001498:	e00f      	b.n	80014ba <home+0x14e>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2108      	movs	r1, #8
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <home+0x170>)
 80014a0:	f001 fd24 	bl	8002eec <HAL_GPIO_WritePin>
    delayus(2);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff fd9b 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2108      	movs	r1, #8
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <home+0x170>)
 80014b0:	f001 fd1c 	bl	8002eec <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 80014b4:	2005      	movs	r0, #5
 80014b6:	f7ff fd85 	bl	8000fc4 <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <home+0x170>)
 80014be:	f001 fcfd 	bl	8002ebc <HAL_GPIO_ReadPin>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0e8      	beq.n	800149a <home+0x12e>
  }

  current_x = 0;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <home+0x180>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
  current_y = 0;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <home+0x184>)
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	48000400 	.word	0x48000400
 80014e0:	20000010 	.word	0x20000010
 80014e4:	447a0000 	.word	0x447a0000
 80014e8:	48000800 	.word	0x48000800
 80014ec:	20000224 	.word	0x20000224
 80014f0:	20000228 	.word	0x20000228

080014f4 <start_extrusion>:

void start_extrusion(){
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  extrusion_on = true;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <start_extrusion+0x7c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]

  uint16_t ccr1 = (uint16_t) (((crr1_2ms - crr1_1ms) * (servo_on_duty / 100.0)) + crr1_1ms);
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <start_extrusion+0x80>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <start_extrusion+0x84>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f80a 	bl	8000524 <__aeabi_i2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <start_extrusion+0x88>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f803 	bl	8000524 <__aeabi_i2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <start_extrusion+0x8c>)
 8001524:	f7ff f992 	bl	800084c <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7ff f862 	bl	80005f8 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4614      	mov	r4, r2
 800153a:	461d      	mov	r5, r3
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <start_extrusion+0x84>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffef 	bl	8000524 <__aeabi_i2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7fe fe9d 	bl	800028c <__adddf3>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb0f 	bl	8000b7c <__aeabi_d2uiz>
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  TIM4->CCR3 = ccr1;
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <start_extrusion+0x90>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bdb0      	pop	{r4, r5, r7, pc}
 8001570:	2000022c 	.word	0x2000022c
 8001574:	20000004 	.word	0x20000004
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008
 8001580:	40590000 	.word	0x40590000
 8001584:	40000800 	.word	0x40000800

08001588 <stop_extrusion>:

void stop_extrusion(){
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  extrusion_on = false;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <stop_extrusion+0x68>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]

  uint16_t ccr1 = (uint16_t) ((crr1_2ms - crr1_1ms) * (servo_off_duty / 100.0)) + crr1_1ms;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <stop_extrusion+0x6c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <stop_extrusion+0x70>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffc0 	bl	8000524 <__aeabi_i2d>
 80015a4:	4604      	mov	r4, r0
 80015a6:	460d      	mov	r5, r1
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <stop_extrusion+0x74>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffb9 	bl	8000524 <__aeabi_i2d>
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <stop_extrusion+0x78>)
 80015b8:	f7ff f948 	bl	800084c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7ff f818 	bl	80005f8 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fad4 	bl	8000b7c <__aeabi_d2uiz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <stop_extrusion+0x70>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4413      	add	r3, r2
 80015e0:	80fb      	strh	r3, [r7, #6]
  TIM4->CCR3 = ccr1;
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <stop_extrusion+0x7c>)
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}
 80015f0:	2000022c 	.word	0x2000022c
 80015f4:	20000004 	.word	0x20000004
 80015f8:	20000000 	.word	0x20000000
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	40590000 	.word	0x40590000
 8001604:	40000800 	.word	0x40000800

08001608 <extrude>:

void extrude(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    if(extrusion_on){
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <extrude+0x60>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d026      	beq.n	8001662 <extrude+0x5a>
      HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f001 fc65 	bl	8002eec <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2120      	movs	r1, #32
 8001626:	4811      	ldr	r0, [pc, #68]	; (800166c <extrude+0x64>)
 8001628:	f001 fc60 	bl	8002eec <HAL_GPIO_WritePin>
      delayus(2);
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff fcd7 	bl	8000fe0 <delayus>
      HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2120      	movs	r1, #32
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <extrude+0x64>)
 8001638:	f001 fc58 	bl	8002eec <HAL_GPIO_WritePin>
      delayms(1000 / (Z_STEPS_PER_MM * extrude_speed));
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <extrude+0x68>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001674 <extrude+0x6c>
 8001646:	ee27 7a87 	vmul.f32	s14, s15, s14
 800164a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001678 <extrude+0x70>
 800164e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001656:	ee17 3a90 	vmov	r3, s15
 800165a:	b29b      	uxth	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fcb1 	bl	8000fc4 <delayms>
    }
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000022c 	.word	0x2000022c
 800166c:	48000400 	.word	0x48000400
 8001670:	20000014 	.word	0x20000014
 8001674:	42480000 	.word	0x42480000
 8001678:	447a0000 	.word	0x447a0000

0800167c <myprintc>:
extern osMessageQueueId_t commandQueueHandle;
extern osMessageQueueId_t coordQueueHandle;
extern UART_HandleTypeDef huart2;

void myprintc(const char *fmt, ...)
{
 800167c:	b40f      	push	{r0, r1, r2, r3}
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	480b      	ldr	r0, [pc, #44]	; (80016c0 <myprintc+0x44>)
 8001694:	f00d f9e2 	bl	800ea5c <vsniprintf>
  va_end(args);
  int len = strlen(buffer);
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <myprintc+0x44>)
 800169a:	f7fe fd99 	bl	80001d0 <strlen>
 800169e:	4603      	mov	r3, r0
 80016a0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	4905      	ldr	r1, [pc, #20]	; (80016c0 <myprintc+0x44>)
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <myprintc+0x48>)
 80016ae:	f005 f807 	bl	80066c0 <HAL_UART_Transmit>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016bc:	b004      	add	sp, #16
 80016be:	4770      	bx	lr
 80016c0:	20000230 	.word	0x20000230
 80016c4:	2000042c 	.word	0x2000042c

080016c8 <InterpretLine>:

void InterpretLine(const char* line) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a2      	sub	sp, #136	; 0x88
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  myprintc("ran");
 80016d0:	48b4      	ldr	r0, [pc, #720]	; (80019a4 <InterpretLine+0x2dc>)
 80016d2:	f7ff ffd3 	bl	800167c <myprintc>
    // Copy the line to a mutable buffer for modification
    char buffer[100];
    strncpy(buffer, line, sizeof(buffer));
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2264      	movs	r2, #100	; 0x64
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f00d f9e4 	bl	800eaac <strncpy>

    // Tokenize the line using space as a delimiter
    char* token = strtok(buffer, " ");
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	49af      	ldr	r1, [pc, #700]	; (80019a8 <InterpretLine+0x2e0>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00d f9f2 	bl	800ead4 <strtok>
 80016f0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

    int gCode = -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	61fb      	str	r3, [r7, #28]
    int mCode = -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	61bb      	str	r3, [r7, #24]

    float xCoord = 0.0;
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
    float yCoord = 0.0;
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	613b      	str	r3, [r7, #16]

    int speedSet = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
    int pauseDur = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]

    // Iterate through tokens
    while (token != NULL) {
 8001714:	e094      	b.n	8001840 <InterpretLine+0x178>
        // Check for G-code command
        if (strncmp(token, "G", 1) == 0) {
 8001716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	4ba3      	ldr	r3, [pc, #652]	; (80019ac <InterpretLine+0x2e4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <InterpretLine+0x70>
            // Extract the G-code command
            gCode = atoi(token + 1); // Skip the 'G' character
 8001726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800172a:	3301      	adds	r3, #1
 800172c:	4618      	mov	r0, r3
 800172e:	f00c f9a8 	bl	800da82 <atoi>
 8001732:	4603      	mov	r3, r0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e07d      	b.n	8001834 <InterpretLine+0x16c>
        }
        // Check for X-coordinate
        else if (strncmp(token, "X", 1) == 0) {
 8001738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4b9c      	ldr	r3, [pc, #624]	; (80019b0 <InterpretLine+0x2e8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10e      	bne.n	8001766 <InterpretLine+0x9e>
            // Extract the X-coordinate
            xCoord = atof(token + 1); // Skip the 'X' character
 8001748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800174c:	3301      	adds	r3, #1
 800174e:	4618      	mov	r0, r3
 8001750:	f00c f994 	bl	800da7c <atof>
 8001754:	ec53 2b10 	vmov	r2, r3, d0
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa2e 	bl	8000bbc <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e066      	b.n	8001834 <InterpretLine+0x16c>
        }
        // Check for Y-coordinate
        else if (strncmp(token, "Y", 1) == 0) {
 8001766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	4b91      	ldr	r3, [pc, #580]	; (80019b4 <InterpretLine+0x2ec>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10e      	bne.n	8001794 <InterpretLine+0xcc>
            // Extract the Y-coordinate
            yCoord = atof(token + 1); // Skip the 'Y' character
 8001776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800177a:	3301      	adds	r3, #1
 800177c:	4618      	mov	r0, r3
 800177e:	f00c f97d 	bl	800da7c <atof>
 8001782:	ec53 2b10 	vmov	r2, r3, d0
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa17 	bl	8000bbc <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e04f      	b.n	8001834 <InterpretLine+0x16c>
        }
        else if (strncmp(token, "F", 1) == 0) {
 8001794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	4b87      	ldr	r3, [pc, #540]	; (80019b8 <InterpretLine+0x2f0>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10e      	bne.n	80017c2 <InterpretLine+0xfa>
			// Extract the speed
			speedSet = atof(token + 1); // Skip the 'F' character
 80017a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017a8:	3301      	adds	r3, #1
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00c f966 	bl	800da7c <atof>
 80017b0:	ec53 2b10 	vmov	r2, r3, d0
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f9b8 	bl	8000b2c <__aeabi_d2iz>
 80017bc:	4603      	mov	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e038      	b.n	8001834 <InterpretLine+0x16c>
		}
        else if (strncmp(token, "P", 1) == 0) {
 80017c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <InterpretLine+0x2f4>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10e      	bne.n	80017f0 <InterpretLine+0x128>
			// Extract the pause duration
			pauseDur = atof(token + 1); // Skip the 'P' character
 80017d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017d6:	3301      	adds	r3, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f00c f94f 	bl	800da7c <atof>
 80017de:	ec53 2b10 	vmov	r2, r3, d0
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9a1 	bl	8000b2c <__aeabi_d2iz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	e021      	b.n	8001834 <InterpretLine+0x16c>
		}
        else if (strncmp(token, "M", 1) == 0) {
 80017f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <InterpretLine+0x2f8>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <InterpretLine+0x156>
			// Extract the pause duration
			mCode = atof(token + 1); // Skip the 'M' character
 8001800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001804:	3301      	adds	r3, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f00c f938 	bl	800da7c <atof>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f98a 	bl	8000b2c <__aeabi_d2iz>
 8001818:	4603      	mov	r3, r0
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	e00a      	b.n	8001834 <InterpretLine+0x16c>
		}
        else if (strncmp(token, ";", 1) == 0) {
 800181e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <InterpretLine+0x2fc>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <InterpretLine+0x16c>
			// if we hit a ';', end parsing
			token = NULL;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		}

        // Get the next token
        token = strtok(NULL, " ");
 8001834:	495c      	ldr	r1, [pc, #368]	; (80019a8 <InterpretLine+0x2e0>)
 8001836:	2000      	movs	r0, #0
 8001838:	f00d f94c 	bl	800ead4 <strtok>
 800183c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    while (token != NULL) {
 8001840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f af66 	bne.w	8001716 <InterpretLine+0x4e>
    }



    //TODO: will this wait like it is expected to when the queue is full
    switch (gCode) {
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	2b1c      	cmp	r3, #28
 800184e:	f200 8081 	bhi.w	8001954 <InterpretLine+0x28c>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <InterpretLine+0x190>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	08001911 	.word	0x08001911
 800185c:	080018cd 	.word	0x080018cd
 8001860:	08001955 	.word	0x08001955
 8001864:	08001955 	.word	0x08001955
 8001868:	080018ef 	.word	0x080018ef
 800186c:	08001955 	.word	0x08001955
 8001870:	08001955 	.word	0x08001955
 8001874:	08001955 	.word	0x08001955
 8001878:	08001955 	.word	0x08001955
 800187c:	08001955 	.word	0x08001955
 8001880:	08001955 	.word	0x08001955
 8001884:	08001955 	.word	0x08001955
 8001888:	08001955 	.word	0x08001955
 800188c:	08001955 	.word	0x08001955
 8001890:	08001955 	.word	0x08001955
 8001894:	08001955 	.word	0x08001955
 8001898:	08001955 	.word	0x08001955
 800189c:	08001955 	.word	0x08001955
 80018a0:	08001955 	.word	0x08001955
 80018a4:	08001955 	.word	0x08001955
 80018a8:	08001955 	.word	0x08001955
 80018ac:	08001955 	.word	0x08001955
 80018b0:	08001955 	.word	0x08001955
 80018b4:	08001955 	.word	0x08001955
 80018b8:	08001955 	.word	0x08001955
 80018bc:	08001955 	.word	0x08001955
 80018c0:	08001955 	.word	0x08001955
 80018c4:	08001955 	.word	0x08001955
 80018c8:	08001943 	.word	0x08001943
      case 1:

        // Add code to handle G1 Set Speed
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <InterpretLine+0x300>)
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	f107 011c 	add.w	r1, r7, #28
 80018d4:	2300      	movs	r3, #0
 80018d6:	2264      	movs	r2, #100	; 0x64
 80018d8:	f008 ff3c 	bl	800a754 <osMessageQueuePut>
        osMessageQueuePut(commandQueueHandle, &speedSet, 100, 0U);
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <InterpretLine+0x300>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f107 010c 	add.w	r1, r7, #12
 80018e4:	2300      	movs	r3, #0
 80018e6:	2264      	movs	r2, #100	; 0x64
 80018e8:	f008 ff34 	bl	800a754 <osMessageQueuePut>
        break;
 80018ec:	e038      	b.n	8001960 <InterpretLine+0x298>
      case 4:

        // Add code to handle G4 Pause
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <InterpretLine+0x300>)
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	f107 011c 	add.w	r1, r7, #28
 80018f6:	2300      	movs	r3, #0
 80018f8:	2264      	movs	r2, #100	; 0x64
 80018fa:	f008 ff2b 	bl	800a754 <osMessageQueuePut>
        osMessageQueuePut(commandQueueHandle, &pauseDur, 100, 0U);
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <InterpretLine+0x300>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f107 0108 	add.w	r1, r7, #8
 8001906:	2300      	movs	r3, #0
 8001908:	2264      	movs	r2, #100	; 0x64
 800190a:	f008 ff23 	bl	800a754 <osMessageQueuePut>
        break;
 800190e:	e027      	b.n	8001960 <InterpretLine+0x298>
      case 0:
        // Add command to queue or call move(xCoord, yCoord)
        // osMessageQueuePut(commandQueueHandle, &msg, 0U, 0U);
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <InterpretLine+0x300>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	f107 011c 	add.w	r1, r7, #28
 8001918:	2300      	movs	r3, #0
 800191a:	2264      	movs	r2, #100	; 0x64
 800191c:	f008 ff1a 	bl	800a754 <osMessageQueuePut>
        osMessageQueuePut(coordQueueHandle, &xCoord, 100, 0U);
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <InterpretLine+0x304>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f107 0114 	add.w	r1, r7, #20
 8001928:	2300      	movs	r3, #0
 800192a:	2264      	movs	r2, #100	; 0x64
 800192c:	f008 ff12 	bl	800a754 <osMessageQueuePut>
        osMessageQueuePut(coordQueueHandle, &yCoord, 100, 0U);
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <InterpretLine+0x304>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	f107 0110 	add.w	r1, r7, #16
 8001938:	2300      	movs	r3, #0
 800193a:	2264      	movs	r2, #100	; 0x64
 800193c:	f008 ff0a 	bl	800a754 <osMessageQueuePut>
        break;
 8001940:	e00e      	b.n	8001960 <InterpretLine+0x298>
      case 28:

        // Add code to handle G28 Home
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <InterpretLine+0x300>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f107 011c 	add.w	r1, r7, #28
 800194a:	2300      	movs	r3, #0
 800194c:	2264      	movs	r2, #100	; 0x64
 800194e:	f008 ff01 	bl	800a754 <osMessageQueuePut>
        break;
 8001952:	e005      	b.n	8001960 <InterpretLine+0x298>

      default:
        printf("Unknown G-code command: %d\n", gCode);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4619      	mov	r1, r3
 8001958:	481d      	ldr	r0, [pc, #116]	; (80019d0 <InterpretLine+0x308>)
 800195a:	f00c ffff 	bl	800e95c <iprintf>
        break;
 800195e:	bf00      	nop
    }

    switch (mCode) {
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b6a      	cmp	r3, #106	; 0x6a
 8001964:	d002      	beq.n	800196c <InterpretLine+0x2a4>
 8001966:	2b6b      	cmp	r3, #107	; 0x6b
 8001968:	d009      	beq.n	800197e <InterpretLine+0x2b6>
 800196a:	e011      	b.n	8001990 <InterpretLine+0x2c8>
		case 106:

			// Add code to handle M106 Start Extrusion
			// Add command to queue or start_extrusion()
		  osMessageQueuePut(commandQueueHandle, &mCode, 100, 0U);
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <InterpretLine+0x300>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f107 0118 	add.w	r1, r7, #24
 8001974:	2300      	movs	r3, #0
 8001976:	2264      	movs	r2, #100	; 0x64
 8001978:	f008 feec 	bl	800a754 <osMessageQueuePut>
			break;
 800197c:	e00e      	b.n	800199c <InterpretLine+0x2d4>
		case 107:

			// Add code to handle M107 Stop Extrusion
			// Add command to queue or call stop_extrusion()
		  osMessageQueuePut(commandQueueHandle, &mCode, 100, 0U);
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <InterpretLine+0x300>)
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	f107 0118 	add.w	r1, r7, #24
 8001986:	2300      	movs	r3, #0
 8001988:	2264      	movs	r2, #100	; 0x64
 800198a:	f008 fee3 	bl	800a754 <osMessageQueuePut>
			break;
 800198e:	e005      	b.n	800199c <InterpretLine+0x2d4>
		default:
			printf("Unknown M command: %d\n", mCode);
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	4619      	mov	r1, r3
 8001994:	480f      	ldr	r0, [pc, #60]	; (80019d4 <InterpretLine+0x30c>)
 8001996:	f00c ffe1 	bl	800e95c <iprintf>
			break;
 800199a:	bf00      	nop
    }
}
 800199c:	bf00      	nop
 800199e:	3788      	adds	r7, #136	; 0x88
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	08010cd0 	.word	0x08010cd0
 80019a8:	08010cd4 	.word	0x08010cd4
 80019ac:	08010cd8 	.word	0x08010cd8
 80019b0:	08010cdc 	.word	0x08010cdc
 80019b4:	08010ce0 	.word	0x08010ce0
 80019b8:	08010ce4 	.word	0x08010ce4
 80019bc:	08010ce8 	.word	0x08010ce8
 80019c0:	08010cec 	.word	0x08010cec
 80019c4:	08010cf0 	.word	0x08010cf0
 80019c8:	200004c4 	.word	0x200004c4
 80019cc:	200004c8 	.word	0x200004c8
 80019d0:	08010cf4 	.word	0x08010cf4
 80019d4:	08010d10 	.word	0x08010d10

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019dc:	f000 ff7e 	bl	80028dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e0:	f000 f86e 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e4:	f000 f9dc 	bl	8001da0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019e8:	f000 f9aa 	bl	8001d40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80019ec:	f000 f8f8 	bl	8001be0 <MX_TIM1_Init>
  MX_SPI1_Init();
 80019f0:	f000 f8b8 	bl	8001b64 <MX_SPI1_Init>
  MX_FATFS_Init();
 80019f4:	f005 fbbc 	bl	8007170 <MX_FATFS_Init>
  MX_TIM4_Init();
 80019f8:	f000 f946 	bl	8001c88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019fc:	2108      	movs	r1, #8
 80019fe:	481e      	ldr	r0, [pc, #120]	; (8001a78 <main+0xa0>)
 8001a00:	f003 fd2c 	bl	800545c <HAL_TIM_PWM_Start>
  motor_init();
 8001a04:	f7ff fb08 	bl	8001018 <motor_init>
  //reset_extruder();
  OpenFile("test.gcode");
 8001a08:	481c      	ldr	r0, [pc, #112]	; (8001a7c <main+0xa4>)
 8001a0a:	f000 fc31 	bl	8002270 <OpenFile>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a0e:	f008 fbf3 	bl	800a1f8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (15, sizeof(int), &commandQueue_attributes);
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <main+0xa8>)
 8001a14:	2104      	movs	r1, #4
 8001a16:	200f      	movs	r0, #15
 8001a18:	f008 fe28 	bl	800a66c <osMessageQueueNew>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <main+0xac>)
 8001a20:	6013      	str	r3, [r2, #0]

  /* creation of coordQueue */
  coordQueueHandle = osMessageQueueNew (15, sizeof(float), &coordQueue_attributes);
 8001a22:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <main+0xb0>)
 8001a24:	2104      	movs	r1, #4
 8001a26:	200f      	movs	r0, #15
 8001a28:	f008 fe20 	bl	800a66c <osMessageQueueNew>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <main+0xb4>)
 8001a30:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <main+0xb8>)
 8001a34:	2100      	movs	r1, #0
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <main+0xbc>)
 8001a38:	f008 fc28 	bl	800a28c <osThreadNew>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <main+0xc0>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 8001a42:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <main+0xc4>)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <main+0xc8>)
 8001a48:	f008 fc20 	bl	800a28c <osThreadNew>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <main+0xcc>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* creation of parserTask */
  parserTaskHandle = osThreadNew(StartParserTask, NULL, &parserTask_attributes);
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <main+0xd0>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4815      	ldr	r0, [pc, #84]	; (8001aac <main+0xd4>)
 8001a58:	f008 fc18 	bl	800a28c <osThreadNew>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <main+0xd8>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* creation of extruderTask */
  extruderTaskHandle = osThreadNew(StartExtruderTask, NULL, &extruderTask_attributes);
 8001a62:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <main+0xdc>)
 8001a64:	2100      	movs	r1, #0
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <main+0xe0>)
 8001a68:	f008 fc10 	bl	800a28c <osThreadNew>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <main+0xe4>)
 8001a70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a72:	f008 fbe5 	bl	800a240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001a76:	e7fe      	b.n	8001a76 <main+0x9e>
 8001a78:	200003e0 	.word	0x200003e0
 8001a7c:	08010d78 	.word	0x08010d78
 8001a80:	08010fec 	.word	0x08010fec
 8001a84:	200004c4 	.word	0x200004c4
 8001a88:	08011004 	.word	0x08011004
 8001a8c:	200004c8 	.word	0x200004c8
 8001a90:	08010f5c 	.word	0x08010f5c
 8001a94:	08001f91 	.word	0x08001f91
 8001a98:	200004b4 	.word	0x200004b4
 8001a9c:	08010f80 	.word	0x08010f80
 8001aa0:	08001fa1 	.word	0x08001fa1
 8001aa4:	200004b8 	.word	0x200004b8
 8001aa8:	08010fa4 	.word	0x08010fa4
 8001aac:	08002115 	.word	0x08002115
 8001ab0:	200004bc 	.word	0x200004bc
 8001ab4:	08010fc8 	.word	0x08010fc8
 8001ab8:	08002189 	.word	0x08002189
 8001abc:	200004c0 	.word	0x200004c0

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b096      	sub	sp, #88	; 0x58
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2244      	movs	r2, #68	; 0x44
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00c ffd2 	bl	800ea78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ae2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ae6:	f001 fa27 	bl	8002f38 <HAL_PWREx_ControlVoltageScaling>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001af0:	f000 fb60 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af4:	2302      	movs	r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001afe:	2310      	movs	r3, #16
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2302      	movs	r3, #2
 8001b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b06:	2302      	movs	r3, #2
 8001b08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b0e:	230a      	movs	r3, #10
 8001b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b12:	2307      	movs	r3, #7
 8001b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fa5e 	bl	8002fe4 <HAL_RCC_OscConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b2e:	f000 fb41 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b32:	230f      	movs	r3, #15
 8001b34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b36:	2303      	movs	r3, #3
 8001b38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	2104      	movs	r1, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 fe26 	bl	800379c <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b56:	f000 fb2d 	bl	80021b4 <Error_Handler>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3758      	adds	r7, #88	; 0x58
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_SPI1_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bc4:	f002 fcfc 	bl	80045c0 <HAL_SPI_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bce:	f000 faf1 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000330 	.word	0x20000330
 8001bdc:	40013000 	.word	0x40013000

08001be0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c00:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <MX_TIM1_Init+0xa4>)
 8001c02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c06:	224f      	movs	r2, #79	; 0x4f
 8001c08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c2a:	4815      	ldr	r0, [pc, #84]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c2c:	f003 fa66 	bl	80050fc <HAL_TIM_Base_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c36:	f000 fabd 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	480e      	ldr	r0, [pc, #56]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c48:	f003 ff24 	bl	8005a94 <HAL_TIM_ConfigClockSource>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c52:	f000 faaf 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <MX_TIM1_Init+0xa0>)
 8001c68:	f004 fc36 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c72:	f000 fa9f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000394 	.word	0x20000394
 8001c84:	40012c00 	.word	0x40012c00

08001c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
 8001ca8:	615a      	str	r2, [r3, #20]
 8001caa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cae:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <MX_TIM4_Init+0xb4>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cb4:	2264      	movs	r2, #100	; 0x64
 8001cb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cc0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001cc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cd4:	f003 fb6a 	bl	80053ac <HAL_TIM_PWM_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001cde:	f000 fa69 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4811      	ldr	r0, [pc, #68]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001cf2:	f004 fbf1 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001cfc:	f000 fa5a 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8001d04:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001d08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	2208      	movs	r2, #8
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001d1a:	f003 fda7 	bl	800586c <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001d24:	f000 fa46 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_TIM4_Init+0xb0>)
 8001d2a:	f000 fba9 	bl	8002480 <HAL_TIM_MspPostInit>

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200003e0 	.word	0x200003e0
 8001d3c:	40000800 	.word	0x40000800

08001d40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <MX_USART2_UART_Init+0x5c>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d84:	f004 fc4e 	bl	8006624 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d8e:	f000 fa11 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000042c 	.word	0x2000042c
 8001d9c:	40004400 	.word	0x40004400

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	4b72      	ldr	r3, [pc, #456]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a71      	ldr	r2, [pc, #452]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dce:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	4a6b      	ldr	r2, [pc, #428]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dda:	4b69      	ldr	r3, [pc, #420]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a65      	ldr	r2, [pc, #404]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b60      	ldr	r3, [pc, #384]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a5f      	ldr	r2, [pc, #380]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e16:	4b5a      	ldr	r3, [pc, #360]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a59      	ldr	r2, [pc, #356]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|X_STEP_Pin
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f249 7101 	movw	r1, #38657	; 0x9701
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e38:	f001 f858 	bl	8002eec <HAL_GPIO_WritePin>
                          |SD_CS_Pin|Screen_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Touch_CS_Pin|Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f240 41ba 	movw	r1, #1210	; 0x4ba
 8001e42:	4850      	ldr	r0, [pc, #320]	; (8001f84 <MX_GPIO_Init+0x1e4>)
 8001e44:	f001 f852 	bl	8002eec <HAL_GPIO_WritePin>
                          |Z_STEP_Pin|Screen_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_RST_GPIO_Port, Screen_RST_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	484e      	ldr	r0, [pc, #312]	; (8001f88 <MX_GPIO_Init+0x1e8>)
 8001e4e:	f001 f84d 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4848      	ldr	r0, [pc, #288]	; (8001f8c <MX_GPIO_Init+0x1ec>)
 8001e6a:	f000 fe7d 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_CS_Pin Z_DIR_Pin ENABLE_Pin SD_CS_Pin
                           Screen_DC_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|SD_CS_Pin
 8001e6e:	f249 3301 	movw	r3, #37633	; 0x9301
 8001e72:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8a:	f000 fe6d 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_CS_Pin Y_DIR_Pin X_DIR_Pin Screen_LED_Pin */
  GPIO_InitStruct.Pin = Touch_CS_Pin|Y_DIR_Pin|X_DIR_Pin|Screen_LED_Pin;
 8001e8e:	f240 4392 	movw	r3, #1170	; 0x492
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4837      	ldr	r0, [pc, #220]	; (8001f84 <MX_GPIO_Init+0x1e4>)
 8001ea8:	f000 fe5e 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_IRQ_Pin Y_STOP_Pin */
  GPIO_InitStruct.Pin = Touch_IRQ_Pin|Y_STOP_Pin;
 8001eac:	2344      	movs	r3, #68	; 0x44
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4831      	ldr	r0, [pc, #196]	; (8001f84 <MX_GPIO_Init+0x1e4>)
 8001ec0:	f000 fe52 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_SCK_Pin Touch_MISO_Pin Touch_MOSI_Pin */
  GPIO_InitStruct.Pin = Touch_SCK_Pin|Touch_MISO_Pin|Touch_MOSI_Pin;
 8001ec4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4828      	ldr	r0, [pc, #160]	; (8001f84 <MX_GPIO_Init+0x1e4>)
 8001ee2:	f000 fe41 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STOP_Pin */
  GPIO_InitStruct.Pin = X_STOP_Pin;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(X_STOP_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4824      	ldr	r0, [pc, #144]	; (8001f8c <MX_GPIO_Init+0x1ec>)
 8001efa:	f000 fe35 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STEP_Pin */
  GPIO_InitStruct.Pin = X_STEP_Pin;
 8001efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f000 fe25 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_SCK_Pin Screen_MISO_Pin Screen_MOSI_Pin */
  GPIO_InitStruct.Pin = Screen_SCK_Pin|Screen_MISO_Pin|Screen_MOSI_Pin;
 8001f1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f30:	2306      	movs	r3, #6
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4814      	ldr	r0, [pc, #80]	; (8001f8c <MX_GPIO_Init+0x1ec>)
 8001f3c:	f000 fe14 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_RST_Pin */
  GPIO_InitStruct.Pin = Screen_RST_Pin;
 8001f40:	2304      	movs	r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Screen_RST_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_GPIO_Init+0x1e8>)
 8001f58:	f000 fe06 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_STEP_Pin Z_STEP_Pin */
  GPIO_InitStruct.Pin = Y_STEP_Pin|Z_STEP_Pin;
 8001f5c:	2328      	movs	r3, #40	; 0x28
 8001f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_GPIO_Init+0x1e4>)
 8001f74:	f000 fdf8 	bl	8002b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000c00 	.word	0x48000c00
 8001f8c:	48000800 	.word	0x48000800

08001f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f008 fa09 	bl	800a3b0 <osDelay>
 8001f9e:	e7fb      	b.n	8001f98 <StartDefaultTask+0x8>

08001fa0 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
    /* Infinite loop */
    uint8_t  prio = 100;
 8001fa8:	2364      	movs	r3, #100	; 0x64
 8001faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    int cmd = -1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	61fb      	str	r3, [r7, #28]

    float xCoord = -1;
 8001fb4:	4b54      	ldr	r3, [pc, #336]	; (8002108 <StartCommandTask+0x168>)
 8001fb6:	61bb      	str	r3, [r7, #24]
    float yCoord = -1;
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <StartCommandTask+0x168>)
 8001fba:	617b      	str	r3, [r7, #20]

    int speedSet = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
    int pauseDur = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

    int rres;

    while(1){
      rres = osMessageQueueGet(commandQueueHandle, &cmd, &prio, (uint32_t) 1);
 8001fc4:	4b51      	ldr	r3, [pc, #324]	; (800210c <StartCommandTask+0x16c>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001fcc:	f107 011c 	add.w	r1, r7, #28
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f008 fc1f 	bl	800a814 <osMessageQueueGet>
 8001fd6:	6278      	str	r0, [r7, #36]	; 0x24
      if(rres == osOK){
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 808d 	bne.w	80020fa <StartCommandTask+0x15a>
        switch (cmd) {
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b6b      	cmp	r3, #107	; 0x6b
 8001fe4:	f000 8086 	beq.w	80020f4 <StartCommandTask+0x154>
 8001fe8:	2b6b      	cmp	r3, #107	; 0x6b
 8001fea:	f300 808a 	bgt.w	8002102 <StartCommandTask+0x162>
 8001fee:	2b1c      	cmp	r3, #28
 8001ff0:	dc42      	bgt.n	8002078 <StartCommandTask+0xd8>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f2c0 8085 	blt.w	8002102 <StartCommandTask+0x162>
 8001ff8:	2b1c      	cmp	r3, #28
 8001ffa:	f200 8082 	bhi.w	8002102 <StartCommandTask+0x162>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <StartCommandTask+0x64>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	080020af 	.word	0x080020af
 8002008:	0800207f 	.word	0x0800207f
 800200c:	08002103 	.word	0x08002103
 8002010:	08002103 	.word	0x08002103
 8002014:	08002093 	.word	0x08002093
 8002018:	08002103 	.word	0x08002103
 800201c:	08002103 	.word	0x08002103
 8002020:	08002103 	.word	0x08002103
 8002024:	08002103 	.word	0x08002103
 8002028:	08002103 	.word	0x08002103
 800202c:	08002103 	.word	0x08002103
 8002030:	08002103 	.word	0x08002103
 8002034:	08002103 	.word	0x08002103
 8002038:	08002103 	.word	0x08002103
 800203c:	08002103 	.word	0x08002103
 8002040:	08002103 	.word	0x08002103
 8002044:	08002103 	.word	0x08002103
 8002048:	08002103 	.word	0x08002103
 800204c:	08002103 	.word	0x08002103
 8002050:	08002103 	.word	0x08002103
 8002054:	08002103 	.word	0x08002103
 8002058:	08002103 	.word	0x08002103
 800205c:	08002103 	.word	0x08002103
 8002060:	08002103 	.word	0x08002103
 8002064:	08002103 	.word	0x08002103
 8002068:	08002103 	.word	0x08002103
 800206c:	08002103 	.word	0x08002103
 8002070:	08002103 	.word	0x08002103
 8002074:	080020e9 	.word	0x080020e9
 8002078:	2b6a      	cmp	r3, #106	; 0x6a
 800207a:	d038      	beq.n	80020ee <StartCommandTask+0x14e>
          case 107:
            // handle M107 Stop Extrusion
            stop_extrusion();
            break;
          default:
            break;
 800207c:	e041      	b.n	8002102 <StartCommandTask+0x162>
            osMessageQueueGet(commandQueueHandle, &speedSet, &prio, 1);
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <StartCommandTask+0x16c>)
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8002086:	f107 0110 	add.w	r1, r7, #16
 800208a:	2301      	movs	r3, #1
 800208c:	f008 fbc2 	bl	800a814 <osMessageQueueGet>
            break;
 8002090:	e038      	b.n	8002104 <StartCommandTask+0x164>
            osMessageQueueGet(commandQueueHandle, &pauseDur, &prio, 1);
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <StartCommandTask+0x16c>)
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800209a:	f107 010c 	add.w	r1, r7, #12
 800209e:	2301      	movs	r3, #1
 80020a0:	f008 fbb8 	bl	800a814 <osMessageQueueGet>
            wait(pauseDur);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f952 	bl	8001350 <wait>
            break;
 80020ac:	e02a      	b.n	8002104 <StartCommandTask+0x164>
            osMessageQueueGet(coordQueueHandle, &xCoord, &prio, 1);
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <StartCommandTask+0x170>)
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80020b6:	f107 0118 	add.w	r1, r7, #24
 80020ba:	2301      	movs	r3, #1
 80020bc:	f008 fbaa 	bl	800a814 <osMessageQueueGet>
            osMessageQueueGet(coordQueueHandle, &yCoord, &prio, 1);
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <StartCommandTask+0x170>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80020c8:	f107 0114 	add.w	r1, r7, #20
 80020cc:	2301      	movs	r3, #1
 80020ce:	f008 fba1 	bl	800a814 <osMessageQueueGet>
            move(xCoord, yCoord);
 80020d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80020da:	eef0 0a47 	vmov.f32	s1, s14
 80020de:	eeb0 0a67 	vmov.f32	s0, s15
 80020e2:	f7ff f841 	bl	8001168 <move>
            break;
 80020e6:	e00d      	b.n	8002104 <StartCommandTask+0x164>
            home();
 80020e8:	f7ff f940 	bl	800136c <home>
            break;
 80020ec:	e00a      	b.n	8002104 <StartCommandTask+0x164>
            start_extrusion();
 80020ee:	f7ff fa01 	bl	80014f4 <start_extrusion>
            break;
 80020f2:	e007      	b.n	8002104 <StartCommandTask+0x164>
            stop_extrusion();
 80020f4:	f7ff fa48 	bl	8001588 <stop_extrusion>
            break;
 80020f8:	e004      	b.n	8002104 <StartCommandTask+0x164>
        }
      }
      else{
        osDelay(20);
 80020fa:	2014      	movs	r0, #20
 80020fc:	f008 f958 	bl	800a3b0 <osDelay>
 8002100:	e760      	b.n	8001fc4 <StartCommandTask+0x24>
            break;
 8002102:	bf00      	nop
      rres = osMessageQueueGet(commandQueueHandle, &cmd, &prio, (uint32_t) 1);
 8002104:	e75e      	b.n	8001fc4 <StartCommandTask+0x24>
 8002106:	bf00      	nop
 8002108:	bf800000 	.word	0xbf800000
 800210c:	200004c4 	.word	0x200004c4
 8002110:	200004c8 	.word	0x200004c8

08002114 <StartParserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParserTask */
void StartParserTask(void *argument)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b090      	sub	sp, #64	; 0x40
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParserTask */
  /* Infinite loop */

  BYTE line[50];

  bool complete = false;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  do {
    if(osMessageQueueGetCount(commandQueueHandle) < 30){
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <StartParserTask+0x70>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f008 fbd2 	bl	800a8d0 <osMessageQueueGetCount>
 800212c:	4603      	mov	r3, r0
 800212e:	2b1d      	cmp	r3, #29
 8002130:	d818      	bhi.n	8002164 <StartParserTask+0x50>
      GetLine(line);
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f87a 	bl	8002230 <GetLine>
      complete = eof();
 800213c:	f000 f866 	bl	800220c <eof>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf14      	ite	ne
 8002146:	2301      	movne	r3, #1
 8002148:	2300      	moveq	r3, #0
 800214a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      myprintf((const char*)line);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f834 	bl	80021c0 <myprintf>
      InterpretLine((const char*)line);
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fab3 	bl	80016c8 <InterpretLine>
 8002162:	e002      	b.n	800216a <StartParserTask+0x56>
    }
    else{
      osDelay(1);
 8002164:	2001      	movs	r0, #1
 8002166:	f008 f923 	bl	800a3b0 <osDelay>
    }
  }
  while(!complete);
 800216a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1d4      	bne.n	8002122 <StartParserTask+0xe>

  CloseFile();
 8002178:	f000 f8ce 	bl	8002318 <CloseFile>
  for(;;)
  {
    osDelay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f008 f917 	bl	800a3b0 <osDelay>
 8002182:	e7fb      	b.n	800217c <StartParserTask+0x68>
 8002184:	200004c4 	.word	0x200004c4

08002188 <StartExtruderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExtruderTask */
void StartExtruderTask(void *argument)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartExtruderTask */
  /* Infinite loop */
  while(true){
    extrude();
 8002190:	f7ff fa3a 	bl	8001608 <extrude>
 8002194:	e7fc      	b.n	8002190 <StartExtruderTask+0x8>

08002196 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021a8:	f000 fbb8 	bl	800291c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	e7fe      	b.n	80021bc <Error_Handler+0x8>
	...

080021c0 <myprintf>:
volatile uint8_t dequeueNumber = 1;
volatile uint8_t queueFlag = 1;
volatile uint8_t isPrinting = 1;

void myprintf(const char *fmt, ...)
{
 80021c0:	b40f      	push	{r0, r1, r2, r3}
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d6:	480b      	ldr	r0, [pc, #44]	; (8002204 <myprintf+0x44>)
 80021d8:	f00c fc40 	bl	800ea5c <vsniprintf>
  va_end(args);
  int len = strlen(buffer);
 80021dc:	4809      	ldr	r0, [pc, #36]	; (8002204 <myprintf+0x44>)
 80021de:	f7fd fff7 	bl	80001d0 <strlen>
 80021e2:	4603      	mov	r3, r0
 80021e4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	4905      	ldr	r1, [pc, #20]	; (8002204 <myprintf+0x44>)
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <myprintf+0x48>)
 80021f2:	f004 fa65 	bl	80066c0 <HAL_UART_Transmit>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002200:	b004      	add	sp, #16
 8002202:	4770      	bx	lr
 8002204:	20000938 	.word	0x20000938
 8002208:	2000042c 	.word	0x2000042c

0800220c <eof>:
  	  //Be a tidy kiwi - don't forget to close your file!
  	  f_close(&fil);


  }
int eof(){
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
    return f_eof(&fil);
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <eof+0x20>)
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <eof+0x20>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000700 	.word	0x20000700

08002230 <GetLine>:

TCHAR* rres;

void GetLine(BYTE readBuf[50]){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  rres = f_gets((TCHAR*)readBuf, 50, &fil);
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <GetLine+0x34>)
 800223a:	2132      	movs	r1, #50	; 0x32
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f007 feb8 	bl	8009fb2 <f_gets>
 8002242:	4603      	mov	r3, r0
 8002244:	4a08      	ldr	r2, [pc, #32]	; (8002268 <GetLine+0x38>)
 8002246:	6013      	str	r3, [r2, #0]
  if(rres == 0){
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <GetLine+0x38>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <GetLine+0x2c>
    myprintf("f_gets error (%i)\r\n", rres);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <GetLine+0x38>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <GetLine+0x3c>)
 8002258:	f7ff ffb2 	bl	80021c0 <myprintf>
  }
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000700 	.word	0x20000700
 8002268:	20000934 	.word	0x20000934
 800226c:	08010ea0 	.word	0x08010ea0

08002270 <OpenFile>:

bool OpenFile(char* file_name){
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_Delay(2000);
 8002278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800227c:	f000 fb6e 	bl	800295c <HAL_Delay>
  fres = f_mount(&FatFs, "", 1);
 8002280:	2201      	movs	r2, #1
 8002282:	491b      	ldr	r1, [pc, #108]	; (80022f0 <OpenFile+0x80>)
 8002284:	481b      	ldr	r0, [pc, #108]	; (80022f4 <OpenFile+0x84>)
 8002286:	f007 fa45 	bl	8009714 <f_mount>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <OpenFile+0x88>)
 8002290:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <OpenFile+0x88>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <OpenFile+0x3a>
    myprintf("1 - f_mount error (%i)\r\n", fres);
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <OpenFile+0x88>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <OpenFile+0x8c>)
 80022a2:	f7ff ff8d 	bl	80021c0 <myprintf>
    return false;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e01e      	b.n	80022e8 <OpenFile+0x78>
  }
  myprintf("mounted\n");
 80022aa:	4815      	ldr	r0, [pc, #84]	; (8002300 <OpenFile+0x90>)
 80022ac:	f7ff ff88 	bl	80021c0 <myprintf>

  myprintf("opening file\n");
 80022b0:	4814      	ldr	r0, [pc, #80]	; (8002304 <OpenFile+0x94>)
 80022b2:	f7ff ff85 	bl	80021c0 <myprintf>
  fres = f_open(&fil, "test.txt", FA_READ);
 80022b6:	2201      	movs	r2, #1
 80022b8:	4913      	ldr	r1, [pc, #76]	; (8002308 <OpenFile+0x98>)
 80022ba:	4814      	ldr	r0, [pc, #80]	; (800230c <OpenFile+0x9c>)
 80022bc:	f007 fa8e 	bl	80097dc <f_open>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <OpenFile+0x88>)
 80022c6:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <OpenFile+0x88>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <OpenFile+0x70>
      myprintf("f_open error (%i)\r\n", fres);
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <OpenFile+0x88>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <OpenFile+0xa0>)
 80022d8:	f7ff ff72 	bl	80021c0 <myprintf>
      return false;
 80022dc:	2300      	movs	r3, #0
 80022de:	e003      	b.n	80022e8 <OpenFile+0x78>
  }
  myprintf("File open success\r\n");
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <OpenFile+0xa4>)
 80022e2:	f7ff ff6d 	bl	80021c0 <myprintf>
  return true;
 80022e6:	2301      	movs	r3, #1
 }
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	08010d84 	.word	0x08010d84
 80022f4:	200004cc 	.word	0x200004cc
 80022f8:	20000930 	.word	0x20000930
 80022fc:	08010eb4 	.word	0x08010eb4
 8002300:	08010ed0 	.word	0x08010ed0
 8002304:	08010edc 	.word	0x08010edc
 8002308:	08010e30 	.word	0x08010e30
 800230c:	20000700 	.word	0x20000700
 8002310:	08010e3c 	.word	0x08010e3c
 8002314:	08010eec 	.word	0x08010eec

08002318 <CloseFile>:

void CloseFile(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    f_close(&fil);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <CloseFile+0x10>)
 800231e:	f007 fe19 	bl	8009f54 <f_close>
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000700 	.word	0x20000700

0800232c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_MspInit+0x4c>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_MspInit+0x4c>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6613      	str	r3, [r2, #96]	; 0x60
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_MspInit+0x4c>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_MspInit+0x4c>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_MspInit+0x4c>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_MspInit+0x4c>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	210f      	movs	r1, #15
 8002366:	f06f 0001 	mvn.w	r0, #1
 800236a:	f000 fbd3 	bl	8002b14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_SPI_MspInit+0x7c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d128      	bne.n	80023f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_SPI_MspInit+0x80>)
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_SPI_MspInit+0x80>)
 80023a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a8:	6613      	str	r3, [r2, #96]	; 0x60
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_SPI_MspInit+0x80>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_SPI_MspInit+0x80>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <HAL_SPI_MspInit+0x80>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_SPI_MspInit+0x80>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80023ce:	23e0      	movs	r3, #224	; 0xe0
 80023d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023de:	2305      	movs	r3, #5
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f000 fbbc 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40013000 	.word	0x40013000
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_TIM_Base_MspInit+0x38>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10b      	bne.n	800242a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_TIM_Base_MspInit+0x3c>)
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_TIM_Base_MspInit+0x3c>)
 8002418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800241c:	6613      	str	r3, [r2, #96]	; 0x60
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_TIM_Base_MspInit+0x3c>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_TIM_PWM_MspInit+0x38>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10b      	bne.n	800246a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_TIM_PWM_MspInit+0x3c>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_TIM_PWM_MspInit+0x3c>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6593      	str	r3, [r2, #88]	; 0x58
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_TIM_PWM_MspInit+0x3c>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40000800 	.word	0x40000800
 800247c:	40021000 	.word	0x40021000

08002480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_TIM_MspPostInit+0x64>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d11c      	bne.n	80024dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_TIM_MspPostInit+0x68>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <HAL_TIM_MspPostInit+0x68>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_TIM_MspPostInit+0x68>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Valve_Servo_Pin;
 80024ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Valve_Servo_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4619      	mov	r1, r3
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_TIM_MspPostInit+0x6c>)
 80024d8:	f000 fb46 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	48000400 	.word	0x48000400

080024f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0ac      	sub	sp, #176	; 0xb0
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2288      	movs	r2, #136	; 0x88
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f00c fab1 	bl	800ea78 <memset>
  if(huart->Instance==USART2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_UART_MspInit+0xb0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d13b      	bne.n	8002598 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002520:	2302      	movs	r3, #2
 8002522:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002524:	2300      	movs	r3, #0
 8002526:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4618      	mov	r0, r3
 800252e:	f001 fb8b 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002538:	f7ff fe3c 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_UART_MspInit+0xb4>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_UART_MspInit+0xb4>)
 8002542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_UART_MspInit+0xb4>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_UART_MspInit+0xb4>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <HAL_UART_MspInit+0xb4>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_UART_MspInit+0xb4>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800256c:	230c      	movs	r3, #12
 800256e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002584:	2307      	movs	r3, #7
 8002586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002594:	f000 fae8 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	37b0      	adds	r7, #176	; 0xb0
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40004400 	.word	0x40004400
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <HAL_InitTick+0xe0>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a33      	ldr	r2, [pc, #204]	; (8002688 <HAL_InitTick+0xe0>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_InitTick+0xe0>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ce:	f107 0210 	add.w	r2, r7, #16
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 faa3 	bl	8003b24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025e8:	f001 fa70 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80025ec:	6378      	str	r0, [r7, #52]	; 0x34
 80025ee:	e004      	b.n	80025fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025f0:	f001 fa6c 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80025f4:	4603      	mov	r3, r0
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_InitTick+0xe4>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0c9b      	lsrs	r3, r3, #18
 8002604:	3b01      	subs	r3, #1
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_InitTick+0xe8>)
 800260a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800260e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_InitTick+0xe8>)
 8002612:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002616:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_InitTick+0xe8>)
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_InitTick+0xe8>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_InitTick+0xe8>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_InitTick+0xe8>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002630:	4817      	ldr	r0, [pc, #92]	; (8002690 <HAL_InitTick+0xe8>)
 8002632:	f002 fd63 	bl	80050fc <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800263c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11b      	bne.n	800267c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002644:	4812      	ldr	r0, [pc, #72]	; (8002690 <HAL_InitTick+0xe8>)
 8002646:	f002 fe41 	bl	80052cc <HAL_TIM_Base_Start_IT>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002658:	201c      	movs	r0, #28
 800265a:	f000 fa77 	bl	8002b4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0f      	cmp	r3, #15
 8002662:	d808      	bhi.n	8002676 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	201c      	movs	r0, #28
 800266a:	f000 fa53 	bl	8002b14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_InitTick+0xec>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e002      	b.n	800267c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800267c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002680:	4618      	mov	r0, r3
 8002682:	3738      	adds	r7, #56	; 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	431bde83 	.word	0x431bde83
 8002690:	20000a38 	.word	0x20000a38
 8002694:	2000001c 	.word	0x2000001c

08002698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800269c:	e7fe      	b.n	800269c <NMI_Handler+0x4>

0800269e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <HardFault_Handler+0x4>

080026a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <MemManage_Handler+0x4>

080026aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <BusFault_Handler+0x4>

080026b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <UsageFault_Handler+0x4>

080026b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <TIM2_IRQHandler+0x10>)
 80026ca:	f002 ffcd 	bl	8005668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000a38 	.word	0x20000a38

080026d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return 1;
 80026dc:	2301      	movs	r3, #1
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_kill>:

int _kill(int pid, int sig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026f2:	f00c fa91 	bl	800ec18 <__errno>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2216      	movs	r2, #22
 80026fa:	601a      	str	r2, [r3, #0]
  return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_exit>:

void _exit (int status)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ffe7 	bl	80026e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800271a:	e7fe      	b.n	800271a <_exit+0x12>

0800271c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e00a      	b.n	8002744 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800272e:	f3af 8000 	nop.w
 8002732:	4601      	mov	r1, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	60ba      	str	r2, [r7, #8]
 800273a:	b2ca      	uxtb	r2, r1
 800273c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	dbf0      	blt.n	800272e <_read+0x12>
  }

  return len;
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e009      	b.n	800277c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	60ba      	str	r2, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf1      	blt.n	8002768 <_write+0x12>
  }
  return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_close>:

int _close(int file)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b6:	605a      	str	r2, [r3, #4]
  return 0;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_isatty>:

int _isatty(int file)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <_sbrk+0x5c>)
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <_sbrk+0x60>)
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <_sbrk+0x64>)
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <_sbrk+0x68>)
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d207      	bcs.n	8002838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002828:	f00c f9f6 	bl	800ec18 <__errno>
 800282c:	4603      	mov	r3, r0
 800282e:	220c      	movs	r2, #12
 8002830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
 8002836:	e009      	b.n	800284c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <_sbrk+0x64>)
 8002848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20018000 	.word	0x20018000
 8002858:	00000400 	.word	0x00000400
 800285c:	20000a84 	.word	0x20000a84
 8002860:	20002cf8 	.word	0x20002cf8

08002864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <SystemInit+0x20>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <SystemInit+0x20>)
 8002870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800288c:	f7ff ffea 	bl	8002864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002892:	490d      	ldr	r1, [pc, #52]	; (80028c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <LoopForever+0xe>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002898:	e002      	b.n	80028a0 <LoopCopyDataInit>

0800289a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800289c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289e:	3304      	adds	r3, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a4:	d3f9      	bcc.n	800289a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a8:	4c0a      	ldr	r4, [pc, #40]	; (80028d4 <LoopForever+0x16>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ac:	e001      	b.n	80028b2 <LoopFillZerobss>

080028ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b0:	3204      	adds	r2, #4

080028b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b4:	d3fb      	bcc.n	80028ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028b6:	f00c f9b5 	bl	800ec24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ba:	f7ff f88d 	bl	80019d8 <main>

080028be <LoopForever>:

LoopForever:
    b LoopForever
 80028be:	e7fe      	b.n	80028be <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 80028c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80028cc:	08011508 	.word	0x08011508
  ldr r2, =_sbss
 80028d0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80028d4:	20002cf8 	.word	0x20002cf8

080028d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028d8:	e7fe      	b.n	80028d8 <ADC1_2_IRQHandler>
	...

080028dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_Init+0x3c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_Init+0x3c>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f2:	2003      	movs	r0, #3
 80028f4:	f000 f903 	bl	8002afe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f8:	200f      	movs	r0, #15
 80028fa:	f7ff fe55 	bl	80025a8 <HAL_InitTick>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	71fb      	strb	r3, [r7, #7]
 8002908:	e001      	b.n	800290e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800290a:	f7ff fd0f 	bl	800232c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800290e:	79fb      	ldrb	r3, [r7, #7]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40022000 	.word	0x40022000

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000020 	.word	0x20000020
 8002940:	20000a88 	.word	0x20000a88

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000a88 	.word	0x20000a88

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff ffee 	bl	8002944 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d005      	beq.n	8002982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_Delay+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002982:	bf00      	nop
 8002984:	f7ff ffde 	bl	8002944 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d8f7      	bhi.n	8002984 <HAL_Delay+0x28>
  {
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000020 	.word	0x20000020

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <__NVIC_EnableIRQ+0x38>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff4c 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b26:	f7ff ff61 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f7ff ffb1 	bl	8002a98 <NVIC_EncodePriority>
 8002b36:	4602      	mov	r2, r0
 8002b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff80 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff54 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b76:	e17f      	b.n	8002e78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8171 	beq.w	8002e72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d005      	beq.n	8002ba8 <HAL_GPIO_Init+0x40>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d130      	bne.n	8002c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bde:	2201      	movs	r2, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 0201 	and.w	r2, r3, #1
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d118      	bne.n	8002c48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	6939      	ldr	r1, [r7, #16]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80ac 	beq.w	8002e72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	; (8002e98 <HAL_GPIO_Init+0x330>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	4a5e      	ldr	r2, [pc, #376]	; (8002e98 <HAL_GPIO_Init+0x330>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6613      	str	r3, [r2, #96]	; 0x60
 8002d26:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <HAL_GPIO_Init+0x330>)
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d32:	4a5a      	ldr	r2, [pc, #360]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d5c:	d025      	beq.n	8002daa <HAL_GPIO_Init+0x242>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x338>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <HAL_GPIO_Init+0x23e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_GPIO_Init+0x33c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_GPIO_Init+0x23a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <HAL_GPIO_Init+0x340>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x236>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_GPIO_Init+0x344>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x232>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x348>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x22e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_GPIO_Init+0x34c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x22a>
 8002d8e:	2306      	movs	r3, #6
 8002d90:	e00c      	b.n	8002dac <HAL_GPIO_Init+0x244>
 8002d92:	2307      	movs	r3, #7
 8002d94:	e00a      	b.n	8002dac <HAL_GPIO_Init+0x244>
 8002d96:	2305      	movs	r3, #5
 8002d98:	e008      	b.n	8002dac <HAL_GPIO_Init+0x244>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x244>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e004      	b.n	8002dac <HAL_GPIO_Init+0x244>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_Init+0x244>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x244>
 8002daa:	2300      	movs	r3, #0
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	f002 0203 	and.w	r2, r2, #3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4093      	lsls	r3, r2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dbc:	4937      	ldr	r1, [pc, #220]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dee:	4a32      	ldr	r2, [pc, #200]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e42:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e6c:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <HAL_GPIO_Init+0x350>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f47f ae78 	bne.w	8002b78 <HAL_GPIO_Init+0x10>
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	48000400 	.word	0x48000400
 8002ea4:	48000800 	.word	0x48000800
 8002ea8:	48000c00 	.word	0x48000c00
 8002eac:	48001000 	.word	0x48001000
 8002eb0:	48001400 	.word	0x48001400
 8002eb4:	48001800 	.word	0x48001800
 8002eb8:	40010400 	.word	0x40010400

08002ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e001      	b.n	8002ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002efc:	787b      	ldrb	r3, [r7, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f08:	e002      	b.n	8002f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40007000 	.word	0x40007000

08002f38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f46:	d130      	bne.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f54:	d038      	beq.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2232      	movs	r2, #50	; 0x32
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0c9b      	lsrs	r3, r3, #18
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f7c:	e002      	b.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d102      	bne.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f2      	bne.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa4:	d110      	bne.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e00f      	b.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb6:	d007      	beq.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fc0:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	20000018 	.word	0x20000018
 8002fe0:	431bde83 	.word	0x431bde83

08002fe4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e3ca      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff6:	4b97      	ldr	r3, [pc, #604]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003000:	4b94      	ldr	r3, [pc, #592]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80e4 	beq.w	80031e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <HAL_RCC_OscConfig+0x4a>
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	f040 808b 	bne.w	800313c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b01      	cmp	r3, #1
 800302a:	f040 8087 	bne.w	800313c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800302e:	4b89      	ldr	r3, [pc, #548]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e3a2      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1a      	ldr	r2, [r3, #32]
 800304a:	4b82      	ldr	r3, [pc, #520]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_RCC_OscConfig+0x7c>
 8003056:	4b7f      	ldr	r3, [pc, #508]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305e:	e005      	b.n	800306c <HAL_RCC_OscConfig+0x88>
 8003060:	4b7c      	ldr	r3, [pc, #496]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306c:	4293      	cmp	r3, r2
 800306e:	d223      	bcs.n	80030b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fd87 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e383      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003084:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a72      	ldr	r2, [pc, #456]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b70      	ldr	r3, [pc, #448]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	496d      	ldr	r1, [pc, #436]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a2:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	4968      	ldr	r1, [pc, #416]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
 80030b6:	e025      	b.n	8003104 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b8:	4b66      	ldr	r3, [pc, #408]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a65      	ldr	r2, [pc, #404]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4960      	ldr	r1, [pc, #384]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d6:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	495b      	ldr	r1, [pc, #364]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fd47 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e343      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003104:	f000 fc4a 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b52      	ldr	r3, [pc, #328]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	4950      	ldr	r1, [pc, #320]	; (8003258 <HAL_RCC_OscConfig+0x274>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	4a4e      	ldr	r2, [pc, #312]	; (800325c <HAL_RCC_OscConfig+0x278>)
 8003122:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003124:	4b4e      	ldr	r3, [pc, #312]	; (8003260 <HAL_RCC_OscConfig+0x27c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fa3d 	bl	80025a8 <HAL_InitTick>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d052      	beq.n	80031de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	e327      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d032      	beq.n	80031aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003144:	4b43      	ldr	r3, [pc, #268]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a42      	ldr	r2, [pc, #264]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003150:	f7ff fbf8 	bl	8002944 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003158:	f7ff fbf4 	bl	8002944 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e310      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316a:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a36      	ldr	r2, [pc, #216]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4931      	ldr	r1, [pc, #196]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003194:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	492c      	ldr	r1, [pc, #176]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
 80031a8:	e01a      	b.n	80031e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b6:	f7ff fbc5 	bl	8002944 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031be:	f7ff fbc1 	bl	8002944 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e2dd      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x1da>
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d074      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d005      	beq.n	80031fe <HAL_RCC_OscConfig+0x21a>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d10e      	bne.n	8003216 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d10b      	bne.n	8003216 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d064      	beq.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d160      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e2ba      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x24a>
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e026      	b.n	800327c <HAL_RCC_OscConfig+0x298>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003236:	d115      	bne.n	8003264 <HAL_RCC_OscConfig+0x280>
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a05      	ldr	r2, [pc, #20]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800323e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a02      	ldr	r2, [pc, #8]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x298>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	0801101c 	.word	0x0801101c
 800325c:	20000018 	.word	0x20000018
 8003260:	2000001c 	.word	0x2000001c
 8003264:	4ba0      	ldr	r3, [pc, #640]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a9f      	ldr	r2, [pc, #636]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b9d      	ldr	r3, [pc, #628]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a9c      	ldr	r2, [pc, #624]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7ff fb5e 	bl	8002944 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7ff fb5a 	bl	8002944 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e276      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329e:	4b92      	ldr	r3, [pc, #584]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x2a8>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7ff fb4a 	bl	8002944 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b4:	f7ff fb46 	bl	8002944 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e262      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2d0>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d060      	beq.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_OscConfig+0x310>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d119      	bne.n	8003322 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d116      	bne.n	8003322 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f4:	4b7c      	ldr	r3, [pc, #496]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_OscConfig+0x328>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e23f      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330c:	4b76      	ldr	r3, [pc, #472]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	4973      	ldr	r1, [pc, #460]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003320:	e040      	b.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d023      	beq.n	8003372 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332a:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7ff fb05 	bl	8002944 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7ff fb01 	bl	8002944 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e21d      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003350:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b62      	ldr	r3, [pc, #392]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	495f      	ldr	r1, [pc, #380]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
 8003370:	e018      	b.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5c      	ldr	r2, [pc, #368]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7ff fae1 	bl	8002944 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003386:	f7ff fadd 	bl	8002944 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e1f9      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f0      	bne.n	8003386 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03c      	beq.n	800342a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033be:	4a4a      	ldr	r2, [pc, #296]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7ff fabc 	bl	8002944 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7ff fab8 	bl	8002944 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1d4      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCC_OscConfig+0x3ec>
 80033f0:	e01b      	b.n	800342a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f2:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80033f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f8:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7ff fa9f 	bl	8002944 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340a:	f7ff fa9b 	bl	8002944 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1b7      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800341c:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80a6 	beq.w	8003584 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800343c:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6593      	str	r3, [r2, #88]	; 0x58
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003460:	2301      	movs	r3, #1
 8003462:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <HAL_RCC_OscConfig+0x508>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d118      	bne.n	80034a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_OscConfig+0x508>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_RCC_OscConfig+0x508>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347c:	f7ff fa62 	bl	8002944 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7ff fa5e 	bl	8002944 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e17a      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_RCC_OscConfig+0x508>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d108      	bne.n	80034bc <HAL_RCC_OscConfig+0x4d8>
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ba:	e029      	b.n	8003510 <HAL_RCC_OscConfig+0x52c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d115      	bne.n	80034f0 <HAL_RCC_OscConfig+0x50c>
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x52c>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
 80034f0:	4b9c      	ldr	r3, [pc, #624]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	4a9b      	ldr	r2, [pc, #620]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003500:	4b98      	ldr	r3, [pc, #608]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	4a97      	ldr	r2, [pc, #604]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d016      	beq.n	8003546 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7ff fa14 	bl	8002944 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7ff fa10 	bl	8002944 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e12a      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003536:	4b8b      	ldr	r3, [pc, #556]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0ed      	beq.n	8003520 <HAL_RCC_OscConfig+0x53c>
 8003544:	e015      	b.n	8003572 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7ff f9fd 	bl	8002944 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7ff f9f9 	bl	8002944 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e113      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003564:	4b7f      	ldr	r3, [pc, #508]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ed      	bne.n	800354e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003572:	7ffb      	ldrb	r3, [r7, #31]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003578:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	4a79      	ldr	r2, [pc, #484]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 800357e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003582:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80fe 	beq.w	800378a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	2b02      	cmp	r3, #2
 8003594:	f040 80d0 	bne.w	8003738 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003598:	4b72      	ldr	r3, [pc, #456]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0203 	and.w	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d130      	bne.n	800360e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	3b01      	subs	r3, #1
 80035b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d127      	bne.n	800360e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d11f      	bne.n	800360e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035d8:	2a07      	cmp	r2, #7
 80035da:	bf14      	ite	ne
 80035dc:	2201      	movne	r2, #1
 80035de:	2200      	moveq	r2, #0
 80035e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d113      	bne.n	800360e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d109      	bne.n	800360e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d06e      	beq.n	80036ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d069      	beq.n	80036e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0ad      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003630:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800363c:	f7ff f982 	bl	8002944 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7ff f97e 	bl	8002944 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e09a      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003656:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	4b40      	ldr	r3, [pc, #256]	; (8003768 <HAL_RCC_OscConfig+0x784>)
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003672:	3a01      	subs	r2, #1
 8003674:	0112      	lsls	r2, r2, #4
 8003676:	4311      	orrs	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800367c:	0212      	lsls	r2, r2, #8
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003684:	0852      	lsrs	r2, r2, #1
 8003686:	3a01      	subs	r2, #1
 8003688:	0552      	lsls	r2, r2, #21
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003690:	0852      	lsrs	r2, r2, #1
 8003692:	3a01      	subs	r2, #1
 8003694:	0652      	lsls	r2, r2, #25
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800369c:	0912      	lsrs	r2, r2, #4
 800369e:	0452      	lsls	r2, r2, #17
 80036a0:	430a      	orrs	r2, r1
 80036a2:	4930      	ldr	r1, [pc, #192]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036a8:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c0:	f7ff f940 	bl	8002944 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7ff f93c 	bl	8002944 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e058      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036e6:	e050      	b.n	800378a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e04f      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d148      	bne.n	800378a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 80036fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003702:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003710:	f7ff f918 	bl	8002944 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7ff f914 	bl	8002944 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e030      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x734>
 8003736:	e028      	b.n	800378a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d023      	beq.n	8003786 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <HAL_RCC_OscConfig+0x780>)
 8003744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7ff f8fb 	bl	8002944 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003750:	e00c      	b.n	800376c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003752:	f7ff f8f7 	bl	8002944 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d905      	bls.n	800376c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e013      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
 8003764:	40021000 	.word	0x40021000
 8003768:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_OscConfig+0x7b0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ec      	bne.n	8003752 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCC_OscConfig+0x7b0>)
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	4905      	ldr	r1, [pc, #20]	; (8003794 <HAL_RCC_OscConfig+0x7b0>)
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x7b4>)
 8003780:	4013      	ands	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
 8003784:	e001      	b.n	800378a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	feeefffc 	.word	0xfeeefffc

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0e7      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b75      	ldr	r3, [pc, #468]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d910      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b72      	ldr	r3, [pc, #456]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4970      	ldr	r1, [pc, #448]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b6e      	ldr	r3, [pc, #440]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0cf      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d908      	bls.n	800380e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4960      	ldr	r1, [pc, #384]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d04c      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	4b5a      	ldr	r3, [pc, #360]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d121      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0a6      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	4b54      	ldr	r3, [pc, #336]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d115      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e09a      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003852:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e08e      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e086      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b46      	ldr	r3, [pc, #280]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4943      	ldr	r1, [pc, #268]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003884:	f7ff f85e 	bl	8002944 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7ff f85a 	bl	8002944 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e06e      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d208      	bcs.n	80038e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	492b      	ldr	r1, [pc, #172]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d210      	bcs.n	8003912 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 0207 	bic.w	r2, r3, #7
 80038f8:	4923      	ldr	r1, [pc, #140]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d001      	beq.n	8003912 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e036      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4918      	ldr	r1, [pc, #96]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4910      	ldr	r1, [pc, #64]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003950:	f000 f824 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	490b      	ldr	r1, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1f4>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	4a09      	ldr	r2, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1f8>)
 800396e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1fc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fe17 	bl	80025a8 <HAL_InitTick>
 800397a:	4603      	mov	r3, r0
 800397c:	72fb      	strb	r3, [r7, #11]

  return status;
 800397e:	7afb      	ldrb	r3, [r7, #11]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40022000 	.word	0x40022000
 800398c:	40021000 	.word	0x40021000
 8003990:	0801101c 	.word	0x0801101c
 8003994:	20000018 	.word	0x20000018
 8003998:	2000001c 	.word	0x2000001c

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	; 0x24
 80039a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039aa:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b4:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x34>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d121      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d11e      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039d0:	4b34      	ldr	r3, [pc, #208]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	e005      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039f8:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10d      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d102      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_GetSysClockFreq+0x110>)
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e004      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a20:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d134      	bne.n	8003a94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xac>
 8003a40:	e005      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a42:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_RCC_GetSysClockFreq+0x110>)
 8003a44:	617b      	str	r3, [r7, #20]
      break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a4a:	617b      	str	r3, [r7, #20]
      break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	617b      	str	r3, [r7, #20]
      break;
 8003a52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	3301      	adds	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	fb03 f202 	mul.w	r2, r3, r2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	0e5b      	lsrs	r3, r3, #25
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	3301      	adds	r3, #1
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a94:	69bb      	ldr	r3, [r7, #24]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	; 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08011034 	.word	0x08011034
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	007a1200 	.word	0x007a1200

08003ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000018 	.word	0x20000018

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ad0:	f7ff fff0 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4904      	ldr	r1, [pc, #16]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	0801102c 	.word	0x0801102c

08003af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003afc:	f7ff ffda 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0adb      	lsrs	r3, r3, #11
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4904      	ldr	r1, [pc, #16]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	0801102c 	.word	0x0801102c

08003b24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	220f      	movs	r2, #15
 8003b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_RCC_GetClockConfig+0x5c>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0203 	and.w	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <HAL_RCC_GetClockConfig+0x5c>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_RCC_GetClockConfig+0x5c>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCC_GetClockConfig+0x5c>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <HAL_RCC_GetClockConfig+0x60>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0207 	and.w	r2, r3, #7
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40022000 	.word	0x40022000

08003b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b94:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ba0:	f7ff f9bc 	bl	8002f1c <HAL_PWREx_GetVoltageRange>
 8003ba4:	6178      	str	r0, [r7, #20]
 8003ba6:	e014      	b.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bc0:	f7ff f9ac 	bl	8002f1c <HAL_PWREx_GetVoltageRange>
 8003bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd8:	d10b      	bne.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d919      	bls.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2ba0      	cmp	r3, #160	; 0xa0
 8003be4:	d902      	bls.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be6:	2302      	movs	r3, #2
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e013      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bec:	2301      	movs	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e010      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d902      	bls.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e00a      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d102      	bne.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c04:	2302      	movs	r3, #2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	e004      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b70      	cmp	r3, #112	; 0x70
 8003c0e:	d101      	bne.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c10:	2301      	movs	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 0207 	bic.w	r2, r3, #7
 8003c1c:	4909      	ldr	r1, [pc, #36]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d001      	beq.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40022000 	.word	0x40022000

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c50:	2300      	movs	r3, #0
 8003c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c54:	2300      	movs	r3, #0
 8003c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d041      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c6c:	d02a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c72:	d824      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c78:	d008      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c7e:	d81e      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c88:	d010      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c8a:	e018      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c8c:	4b86      	ldr	r3, [pc, #536]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a85      	ldr	r2, [pc, #532]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c98:	e015      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fabb 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003caa:	e00c      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3320      	adds	r3, #32
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fba6 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc6:	7cfb      	ldrb	r3, [r7, #19]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ccc:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cda:	4973      	ldr	r1, [pc, #460]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d041      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cfc:	d02a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d02:	d824      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d08:	d008      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d0e:	d81e      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d18:	d010      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d1a:	e018      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d1c:	4b62      	ldr	r3, [pc, #392]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a61      	ldr	r2, [pc, #388]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fa73 	bl	800421c <RCCEx_PLLSAI1_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3320      	adds	r3, #32
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fb5e 	bl	8004404 <RCCEx_PLLSAI2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	74fb      	strb	r3, [r7, #19]
      break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d5c:	4b52      	ldr	r3, [pc, #328]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6a:	494f      	ldr	r1, [pc, #316]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d72:	e001      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a0 	beq.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dac:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a3a      	ldr	r2, [pc, #232]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc8:	f7fe fdbc 	bl	8002944 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dce:	e009      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fe fdb8 	bl	8002944 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d902      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	74fb      	strb	r3, [r7, #19]
        break;
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de4:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ef      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d15c      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003df6:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01f      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d019      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e14:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a20      	ldr	r2, [pc, #128]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	4a1c      	ldr	r2, [pc, #112]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fe fd77 	bl	8002944 <HAL_GetTick>
 8003e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e58:	e00b      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe fd73 	bl	8002944 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d902      	bls.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ec      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e9e:	e009      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	74bb      	strb	r3, [r7, #18]
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb4:	7c7b      	ldrb	r3, [r7, #17]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eba:	4b9e      	ldr	r3, [pc, #632]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	4a9d      	ldr	r2, [pc, #628]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed2:	4b98      	ldr	r3, [pc, #608]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 0203 	bic.w	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	4994      	ldr	r1, [pc, #592]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 020c 	bic.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	498c      	ldr	r1, [pc, #560]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f16:	4b87      	ldr	r3, [pc, #540]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	4983      	ldr	r1, [pc, #524]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f38:	4b7e      	ldr	r3, [pc, #504]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	497b      	ldr	r1, [pc, #492]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5a:	4b76      	ldr	r3, [pc, #472]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	4972      	ldr	r1, [pc, #456]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f7c:	4b6d      	ldr	r3, [pc, #436]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	496a      	ldr	r1, [pc, #424]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	4961      	ldr	r1, [pc, #388]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc0:	4b5c      	ldr	r3, [pc, #368]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	4959      	ldr	r1, [pc, #356]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe2:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	4950      	ldr	r1, [pc, #320]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004004:	4b4b      	ldr	r3, [pc, #300]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	4948      	ldr	r1, [pc, #288]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004026:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	493f      	ldr	r1, [pc, #252]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d028      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004048:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	4937      	ldr	r1, [pc, #220]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004066:	d106      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004072:	60d3      	str	r3, [r2, #12]
 8004074:	e011      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800407e:	d10c      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f8c8 	bl	800421c <RCCEx_PLLSAI1_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d028      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040a6:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	491f      	ldr	r1, [pc, #124]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c4:	d106      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d0:	60d3      	str	r3, [r2, #12]
 80040d2:	e011      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f899 	bl	800421c <RCCEx_PLLSAI1_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02b      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	4908      	ldr	r1, [pc, #32]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004122:	d109      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a02      	ldr	r2, [pc, #8]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
 8004130:	e014      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004140:	d10c      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f867 	bl	800421c <RCCEx_PLLSAI1_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02f      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004176:	4928      	ldr	r1, [pc, #160]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004186:	d10d      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f844 	bl	800421c <RCCEx_PLLSAI1_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	74bb      	strb	r3, [r7, #18]
 80041a2:	e011      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3320      	adds	r3, #32
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f925 	bl	8004404 <RCCEx_PLLSAI2_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e2:	490d      	ldr	r1, [pc, #52]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004206:	4904      	ldr	r1, [pc, #16]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800420e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000

0800421c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800422a:	4b75      	ldr	r3, [pc, #468]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004236:	4b72      	ldr	r3, [pc, #456]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0203 	and.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d10d      	bne.n	8004262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
       ||
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800424e:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
       ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d047      	beq.n	80042f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e044      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d018      	beq.n	80042a2 <RCCEx_PLLSAI1_Config+0x86>
 8004270:	2b03      	cmp	r3, #3
 8004272:	d825      	bhi.n	80042c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004274:	2b01      	cmp	r3, #1
 8004276:	d002      	beq.n	800427e <RCCEx_PLLSAI1_Config+0x62>
 8004278:	2b02      	cmp	r3, #2
 800427a:	d009      	beq.n	8004290 <RCCEx_PLLSAI1_Config+0x74>
 800427c:	e020      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800427e:	4b60      	ldr	r3, [pc, #384]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11d      	bne.n	80042c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428e:	e01a      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004290:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a0:	e013      	b.n	80042ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042a2:	4b57      	ldr	r3, [pc, #348]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ae:	4b54      	ldr	r3, [pc, #336]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042be:	e006      	b.n	80042ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      break;
 80042c4:	e004      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10d      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	430b      	orrs	r3, r1
 80042ec:	4944      	ldr	r1, [pc, #272]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d17d      	bne.n	80043f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042f8:	4b41      	ldr	r3, [pc, #260]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a40      	ldr	r2, [pc, #256]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004304:	f7fe fb1e 	bl	8002944 <HAL_GetTick>
 8004308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800430a:	e009      	b.n	8004320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800430c:	f7fe fb1a 	bl	8002944 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d902      	bls.n	8004320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	73fb      	strb	r3, [r7, #15]
        break;
 800431e:	e005      	b.n	800432c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004320:	4b37      	ldr	r3, [pc, #220]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ef      	bne.n	800430c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d160      	bne.n	80043f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d111      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004338:	4b31      	ldr	r3, [pc, #196]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6892      	ldr	r2, [r2, #8]
 8004348:	0211      	lsls	r1, r2, #8
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	0912      	lsrs	r2, r2, #4
 8004350:	0452      	lsls	r2, r2, #17
 8004352:	430a      	orrs	r2, r1
 8004354:	492a      	ldr	r1, [pc, #168]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	610b      	str	r3, [r1, #16]
 800435a:	e027      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d112      	bne.n	8004388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004362:	4b27      	ldr	r3, [pc, #156]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800436a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6892      	ldr	r2, [r2, #8]
 8004372:	0211      	lsls	r1, r2, #8
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6912      	ldr	r2, [r2, #16]
 8004378:	0852      	lsrs	r2, r2, #1
 800437a:	3a01      	subs	r2, #1
 800437c:	0552      	lsls	r2, r2, #21
 800437e:	430a      	orrs	r2, r1
 8004380:	491f      	ldr	r1, [pc, #124]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	610b      	str	r3, [r1, #16]
 8004386:	e011      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004388:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6892      	ldr	r2, [r2, #8]
 8004398:	0211      	lsls	r1, r2, #8
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6952      	ldr	r2, [r2, #20]
 800439e:	0852      	lsrs	r2, r2, #1
 80043a0:	3a01      	subs	r2, #1
 80043a2:	0652      	lsls	r2, r2, #25
 80043a4:	430a      	orrs	r2, r1
 80043a6:	4916      	ldr	r1, [pc, #88]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fe fac4 	bl	8002944 <HAL_GetTick>
 80043bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043be:	e009      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c0:	f7fe fac0 	bl	8002944 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d902      	bls.n	80043d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	73fb      	strb	r3, [r7, #15]
          break;
 80043d2:	e005      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ef      	beq.n	80043c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	4904      	ldr	r1, [pc, #16]	; (8004400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000

08004404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800441e:	4b67      	ldr	r3, [pc, #412]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0203 	and.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d10d      	bne.n	800444a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
       ||
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004436:	4b61      	ldr	r3, [pc, #388]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
       ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d047      	beq.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e044      	b.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d018      	beq.n	800448a <RCCEx_PLLSAI2_Config+0x86>
 8004458:	2b03      	cmp	r3, #3
 800445a:	d825      	bhi.n	80044a8 <RCCEx_PLLSAI2_Config+0xa4>
 800445c:	2b01      	cmp	r3, #1
 800445e:	d002      	beq.n	8004466 <RCCEx_PLLSAI2_Config+0x62>
 8004460:	2b02      	cmp	r3, #2
 8004462:	d009      	beq.n	8004478 <RCCEx_PLLSAI2_Config+0x74>
 8004464:	e020      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004466:	4b55      	ldr	r3, [pc, #340]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11d      	bne.n	80044ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004476:	e01a      	b.n	80044ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004478:	4b50      	ldr	r3, [pc, #320]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d116      	bne.n	80044b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004488:	e013      	b.n	80044b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800448a:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004496:	4b49      	ldr	r3, [pc, #292]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044a6:	e006      	b.n	80044b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e004      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044be:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	430b      	orrs	r3, r1
 80044d4:	4939      	ldr	r1, [pc, #228]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d167      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a35      	ldr	r2, [pc, #212]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ec:	f7fe fa2a 	bl	8002944 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044f2:	e009      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f4:	f7fe fa26 	bl	8002944 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	73fb      	strb	r3, [r7, #15]
        break;
 8004506:	e005      	b.n	8004514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004508:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ef      	bne.n	80044f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d14a      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d111      	bne.n	8004544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004520:	4b26      	ldr	r3, [pc, #152]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6892      	ldr	r2, [r2, #8]
 8004530:	0211      	lsls	r1, r2, #8
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d2      	ldr	r2, [r2, #12]
 8004536:	0912      	lsrs	r2, r2, #4
 8004538:	0452      	lsls	r2, r2, #17
 800453a:	430a      	orrs	r2, r1
 800453c:	491f      	ldr	r1, [pc, #124]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	4313      	orrs	r3, r2
 8004540:	614b      	str	r3, [r1, #20]
 8004542:	e011      	b.n	8004568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800454c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
 8004554:	0211      	lsls	r1, r2, #8
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6912      	ldr	r2, [r2, #16]
 800455a:	0852      	lsrs	r2, r2, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	0652      	lsls	r2, r2, #25
 8004560:	430a      	orrs	r2, r1
 8004562:	4916      	ldr	r1, [pc, #88]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fe f9e6 	bl	8002944 <HAL_GetTick>
 8004578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800457a:	e009      	b.n	8004590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800457c:	f7fe f9e2 	bl	8002944 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d902      	bls.n	8004590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	73fb      	strb	r3, [r7, #15]
          break;
 800458e:	e005      	b.n	800459c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ef      	beq.n	800457c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4904      	ldr	r1, [pc, #16]	; (80045bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000

080045c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e095      	b.n	80046fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d108      	bne.n	80045ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e2:	d009      	beq.n	80045f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
 80045ea:	e005      	b.n	80045f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd feb2 	bl	800237c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004638:	d902      	bls.n	8004640 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e002      	b.n	8004646 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004644:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800464e:	d007      	beq.n	8004660 <HAL_SPI_Init+0xa0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004658:	d002      	beq.n	8004660 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	ea42 0103 	orr.w	r1, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	f003 0204 	and.w	r2, r3, #4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046dc:	ea42 0103 	orr.w	r1, r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b088      	sub	sp, #32
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_SPI_Transmit+0x22>
 8004724:	2302      	movs	r3, #2
 8004726:	e15f      	b.n	80049e8 <HAL_SPI_Transmit+0x2e2>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004730:	f7fe f908 	bl	8002944 <HAL_GetTick>
 8004734:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d002      	beq.n	800474c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004746:	2302      	movs	r3, #2
 8004748:	77fb      	strb	r3, [r7, #31]
    goto error;
 800474a:	e148      	b.n	80049de <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SPI_Transmit+0x52>
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800475c:	e13f      	b.n	80049de <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2203      	movs	r2, #3
 8004762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a8:	d10f      	bne.n	80047ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d007      	beq.n	80047e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f0:	d94f      	bls.n	8004892 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_SPI_Transmit+0xfa>
 80047fa:	8afb      	ldrh	r3, [r7, #22]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d142      	bne.n	8004886 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	1c9a      	adds	r2, r3, #2
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004824:	e02f      	b.n	8004886 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b02      	cmp	r3, #2
 8004832:	d112      	bne.n	800485a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	881a      	ldrh	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	1c9a      	adds	r2, r3, #2
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004858:	e015      	b.n	8004886 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485a:	f7fe f873 	bl	8002944 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d803      	bhi.n	8004872 <HAL_SPI_Transmit+0x16c>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d102      	bne.n	8004878 <HAL_SPI_Transmit+0x172>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004884:	e0ab      	b.n	80049de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ca      	bne.n	8004826 <HAL_SPI_Transmit+0x120>
 8004890:	e080      	b.n	8004994 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_SPI_Transmit+0x19a>
 800489a:	8afb      	ldrh	r3, [r7, #22]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d174      	bne.n	800498a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d912      	bls.n	80048d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	1c9a      	adds	r2, r3, #2
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b02      	subs	r3, #2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ce:	e05c      	b.n	800498a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80048f6:	e048      	b.n	800498a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d12b      	bne.n	800495e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d912      	bls.n	8004936 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	881a      	ldrh	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	1c9a      	adds	r2, r3, #2
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b02      	subs	r3, #2
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004934:	e029      	b.n	800498a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	7812      	ldrb	r2, [r2, #0]
 8004942:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495c:	e015      	b.n	800498a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495e:	f7fd fff1 	bl	8002944 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d803      	bhi.n	8004976 <HAL_SPI_Transmit+0x270>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d102      	bne.n	800497c <HAL_SPI_Transmit+0x276>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004988:	e029      	b.n	80049de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1b1      	bne.n	80048f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fb69 	bl	8005070 <SPI_EndRxTxTransaction>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e003      	b.n	80049de <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049fe:	2301      	movs	r3, #1
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x26>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e20a      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x43c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a1e:	f7fd ff91 	bl	8002944 <HAL_GetTick>
 8004a22:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a2a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d00e      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x6e>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a46:	d106      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x66>
 8004a50:	7efb      	ldrb	r3, [r7, #27]
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a5c:	e1e0      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x80>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x80>
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a76:	e1d3      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d003      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2205      	movs	r2, #5
 8004a88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	887a      	ldrh	r2, [r7, #2]
 8004aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ace:	d802      	bhi.n	8004ad6 <HAL_SPI_TransmitReceive+0xe6>
 8004ad0:	8a3b      	ldrh	r3, [r7, #16]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d908      	bls.n	8004ae8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	e007      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d007      	beq.n	8004b16 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b1e:	f240 8081 	bls.w	8004c24 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x140>
 8004b2a:	8a7b      	ldrh	r3, [r7, #18]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d16d      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b54:	e05a      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d11b      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x1ac>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d016      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x1ac>
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d113      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d11c      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x1f4>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004be0:	2301      	movs	r3, #1
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004be4:	f7fd feae 	bl	8002944 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d80b      	bhi.n	8004c0c <HAL_SPI_TransmitReceive+0x21c>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d007      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004c0a:	e109      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d19f      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x166>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d199      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x166>
 8004c22:	e0e3      	b.n	8004dec <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x244>
 8004c2c:	8a7b      	ldrh	r3, [r7, #18]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	f040 80cf 	bne.w	8004dd2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d912      	bls.n	8004c64 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b02      	subs	r3, #2
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c62:	e0b6      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c8a:	e0a2      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d134      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x314>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02f      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x314>
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d12c      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d912      	bls.n	8004cda <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	881a      	ldrh	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	1c9a      	adds	r2, r3, #2
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b02      	subs	r3, #2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cd8:	e012      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d148      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x3b4>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d042      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d923      	bls.n	8004d72 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	b292      	uxth	r2, r2
 8004d36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b02      	subs	r3, #2
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d81f      	bhi.n	8004da0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d6e:	605a      	str	r2, [r3, #4]
 8004d70:	e016      	b.n	8004da0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f103 020c 	add.w	r2, r3, #12
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	7812      	ldrb	r2, [r2, #0]
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004da0:	2301      	movs	r3, #1
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004da4:	f7fd fdce 	bl	8002944 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d803      	bhi.n	8004dbc <HAL_SPI_TransmitReceive+0x3cc>
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d102      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x3d2>
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004dd0:	e026      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f47f af57 	bne.w	8004c8c <HAL_SPI_TransmitReceive+0x29c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f47f af50 	bne.w	8004c8c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f93d 	bl	8005070 <SPI_EndRxTxTransaction>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e003      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e44:	f7fd fd7e 	bl	8002944 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e54:	f7fd fd76 	bl	8002944 <HAL_GetTick>
 8004e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e5a:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	015b      	lsls	r3, r3, #5
 8004e60:	0d1b      	lsrs	r3, r3, #20
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6a:	e054      	b.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d050      	beq.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e74:	f7fd fd66 	bl	8002944 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d902      	bls.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d13d      	bne.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea2:	d111      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eac:	d004      	beq.n	8004eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb6:	d107      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed0:	d10f      	bne.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e017      	b.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d19b      	bne.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000018 	.word	0x20000018

08004f44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f56:	f7fd fcf5 	bl	8002944 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f66:	f7fd fced 	bl	8002944 <HAL_GetTick>
 8004f6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f74:	4b3d      	ldr	r3, [pc, #244]	; (800506c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00da      	lsls	r2, r3, #3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	0d1b      	lsrs	r3, r3, #20
 8004f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f8c:	e060      	b.n	8005050 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f94:	d107      	bne.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d050      	beq.n	8005050 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fae:	f7fd fcc9 	bl	8002944 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d902      	bls.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d13d      	bne.n	8005040 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fdc:	d111      	bne.n	8005002 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d004      	beq.n	8004ff2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d107      	bne.n	8005002 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500a:	d10f      	bne.n	800502c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800502a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e010      	b.n	8005062 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	3b01      	subs	r3, #1
 800504e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d196      	bne.n	8004f8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3728      	adds	r7, #40	; 0x28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000018 	.word	0x20000018

08005070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff ff5b 	bl	8004f44 <SPI_WaitFifoStateUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e027      	b.n	80050f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2200      	movs	r2, #0
 80050ac:	2180      	movs	r1, #128	; 0x80
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff fec0 	bl	8004e34 <SPI_WaitFlagStateUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050be:	f043 0220 	orr.w	r2, r3, #32
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e014      	b.n	80050f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff ff34 	bl	8004f44 <SPI_WaitFifoStateUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e000      	b.n	80050f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e049      	b.n	80051a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fd f96c 	bl	8002400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 fd9c 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e047      	b.n	8005254 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a23      	ldr	r2, [pc, #140]	; (8005260 <HAL_TIM_Base_Start+0xb4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d01d      	beq.n	8005212 <HAL_TIM_Base_Start+0x66>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051de:	d018      	beq.n	8005212 <HAL_TIM_Base_Start+0x66>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_TIM_Base_Start+0xb8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <HAL_TIM_Base_Start+0x66>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_TIM_Base_Start+0xbc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00e      	beq.n	8005212 <HAL_TIM_Base_Start+0x66>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_TIM_Base_Start+0xc0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d009      	beq.n	8005212 <HAL_TIM_Base_Start+0x66>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <HAL_TIM_Base_Start+0xc4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d004      	beq.n	8005212 <HAL_TIM_Base_Start+0x66>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a19      	ldr	r2, [pc, #100]	; (8005274 <HAL_TIM_Base_Start+0xc8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d115      	bne.n	800523e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <HAL_TIM_Base_Start+0xcc>)
 800521a:	4013      	ands	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b06      	cmp	r3, #6
 8005222:	d015      	beq.n	8005250 <HAL_TIM_Base_Start+0xa4>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522a:	d011      	beq.n	8005250 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523c:	e008      	b.n	8005250 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e000      	b.n	8005252 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40013400 	.word	0x40013400
 8005274:	40014000 	.word	0x40014000
 8005278:	00010007 	.word	0x00010007

0800527c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	f241 1311 	movw	r3, #4369	; 0x1111
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10f      	bne.n	80052b4 <HAL_TIM_Base_Stop+0x38>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	f240 4344 	movw	r3, #1092	; 0x444
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d107      	bne.n	80052b4 <HAL_TIM_Base_Stop+0x38>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d001      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e04f      	b.n	8005384 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a23      	ldr	r2, [pc, #140]	; (8005390 <HAL_TIM_Base_Start_IT+0xc4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01d      	beq.n	8005342 <HAL_TIM_Base_Start_IT+0x76>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d018      	beq.n	8005342 <HAL_TIM_Base_Start_IT+0x76>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_TIM_Base_Start_IT+0xc8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_TIM_Base_Start_IT+0x76>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_TIM_Base_Start_IT+0xcc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIM_Base_Start_IT+0x76>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1c      	ldr	r2, [pc, #112]	; (800539c <HAL_TIM_Base_Start_IT+0xd0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_TIM_Base_Start_IT+0x76>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIM_Base_Start_IT+0x76>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d115      	bne.n	800536e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800534a:	4013      	ands	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b06      	cmp	r3, #6
 8005352:	d015      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0xb4>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535a:	d011      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536c:	e008      	b.n	8005380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e000      	b.n	8005382 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005380:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40013400 	.word	0x40013400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	00010007 	.word	0x00010007

080053ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e049      	b.n	8005452 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd f834 	bl	8002440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f000 fc44 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d109      	bne.n	8005480 <HAL_TIM_PWM_Start+0x24>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e03c      	b.n	80054fa <HAL_TIM_PWM_Start+0x9e>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b04      	cmp	r3, #4
 8005484:	d109      	bne.n	800549a <HAL_TIM_PWM_Start+0x3e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	e02f      	b.n	80054fa <HAL_TIM_PWM_Start+0x9e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d109      	bne.n	80054b4 <HAL_TIM_PWM_Start+0x58>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e022      	b.n	80054fa <HAL_TIM_PWM_Start+0x9e>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d109      	bne.n	80054ce <HAL_TIM_PWM_Start+0x72>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e015      	b.n	80054fa <HAL_TIM_PWM_Start+0x9e>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x8c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e008      	b.n	80054fa <HAL_TIM_PWM_Start+0x9e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e09c      	b.n	800563c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <HAL_TIM_PWM_Start+0xb6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005510:	e023      	b.n	800555a <HAL_TIM_PWM_Start+0xfe>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Start+0xc6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005520:	e01b      	b.n	800555a <HAL_TIM_PWM_Start+0xfe>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0xd6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005530:	e013      	b.n	800555a <HAL_TIM_PWM_Start+0xfe>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0xe6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005540:	e00b      	b.n	800555a <HAL_TIM_PWM_Start+0xfe>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0xf6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005550:	e003      	b.n	800555a <HAL_TIM_PWM_Start+0xfe>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2201      	movs	r2, #1
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 ff92 	bl	800648c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a35      	ldr	r2, [pc, #212]	; (8005644 <HAL_TIM_PWM_Start+0x1e8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_TIM_PWM_Start+0x13e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a34      	ldr	r2, [pc, #208]	; (8005648 <HAL_TIM_PWM_Start+0x1ec>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIM_PWM_Start+0x13e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a32      	ldr	r2, [pc, #200]	; (800564c <HAL_TIM_PWM_Start+0x1f0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_TIM_PWM_Start+0x13e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a31      	ldr	r2, [pc, #196]	; (8005650 <HAL_TIM_PWM_Start+0x1f4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIM_PWM_Start+0x13e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <HAL_TIM_PWM_Start+0x1f8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_TIM_PWM_Start+0x142>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <HAL_TIM_PWM_Start+0x144>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <HAL_TIM_PWM_Start+0x1e8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01d      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d018      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a22      	ldr	r2, [pc, #136]	; (8005658 <HAL_TIM_PWM_Start+0x1fc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a21      	ldr	r2, [pc, #132]	; (800565c <HAL_TIM_PWM_Start+0x200>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <HAL_TIM_PWM_Start+0x204>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a17      	ldr	r2, [pc, #92]	; (8005648 <HAL_TIM_PWM_Start+0x1ec>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIM_PWM_Start+0x19e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <HAL_TIM_PWM_Start+0x1f0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d115      	bne.n	8005626 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <HAL_TIM_PWM_Start+0x208>)
 8005602:	4013      	ands	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b06      	cmp	r3, #6
 800560a:	d015      	beq.n	8005638 <HAL_TIM_PWM_Start+0x1dc>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005612:	d011      	beq.n	8005638 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005624:	e008      	b.n	8005638 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e000      	b.n	800563a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40013400 	.word	0x40013400
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	00010007 	.word	0x00010007

08005668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01b      	beq.n	80056cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0202 	mvn.w	r2, #2
 800569c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fac1 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fab3 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fac4 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d020      	beq.n	8005718 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0204 	mvn.w	r2, #4
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa9b 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa8d 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fa9e 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d020      	beq.n	8005764 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01b      	beq.n	8005764 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0208 	mvn.w	r2, #8
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2204      	movs	r2, #4
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa75 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa67 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fa78 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d020      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0210 	mvn.w	r2, #16
 8005780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2208      	movs	r2, #8
 8005786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fa4f 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa41 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa52 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0201 	mvn.w	r2, #1
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fc fce1 	bl	8002196 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 ff02 	bl	80065fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fefa 	bl	8006610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00c      	beq.n	8005840 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa11 	bl	8005c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00c      	beq.n	8005864 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0220 	mvn.w	r2, #32
 800585c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fec2 	bl	80065e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005886:	2302      	movs	r3, #2
 8005888:	e0ff      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b14      	cmp	r3, #20
 8005896:	f200 80f0 	bhi.w	8005a7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	08005a7b 	.word	0x08005a7b
 80058a8:	08005a7b 	.word	0x08005a7b
 80058ac:	08005a7b 	.word	0x08005a7b
 80058b0:	08005935 	.word	0x08005935
 80058b4:	08005a7b 	.word	0x08005a7b
 80058b8:	08005a7b 	.word	0x08005a7b
 80058bc:	08005a7b 	.word	0x08005a7b
 80058c0:	08005977 	.word	0x08005977
 80058c4:	08005a7b 	.word	0x08005a7b
 80058c8:	08005a7b 	.word	0x08005a7b
 80058cc:	08005a7b 	.word	0x08005a7b
 80058d0:	080059b7 	.word	0x080059b7
 80058d4:	08005a7b 	.word	0x08005a7b
 80058d8:	08005a7b 	.word	0x08005a7b
 80058dc:	08005a7b 	.word	0x08005a7b
 80058e0:	080059f9 	.word	0x080059f9
 80058e4:	08005a7b 	.word	0x08005a7b
 80058e8:	08005a7b 	.word	0x08005a7b
 80058ec:	08005a7b 	.word	0x08005a7b
 80058f0:	08005a39 	.word	0x08005a39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fa56 	bl	8005dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0208 	orr.w	r2, r2, #8
 800590e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0204 	bic.w	r2, r2, #4
 800591e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6999      	ldr	r1, [r3, #24]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	619a      	str	r2, [r3, #24]
      break;
 8005932:	e0a5      	b.n	8005a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fac6 	bl	8005ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	021a      	lsls	r2, r3, #8
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	619a      	str	r2, [r3, #24]
      break;
 8005974:	e084      	b.n	8005a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fb2f 	bl	8005fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0208 	orr.w	r2, r2, #8
 8005990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0204 	bic.w	r2, r2, #4
 80059a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69d9      	ldr	r1, [r3, #28]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	61da      	str	r2, [r3, #28]
      break;
 80059b4:	e064      	b.n	8005a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fb97 	bl	80060f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	021a      	lsls	r2, r3, #8
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	61da      	str	r2, [r3, #28]
      break;
 80059f6:	e043      	b.n	8005a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fbe0 	bl	80061c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0208 	orr.w	r2, r2, #8
 8005a12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0204 	bic.w	r2, r2, #4
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a36:	e023      	b.n	8005a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fc24 	bl	800628c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a78:	e002      	b.n	8005a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop

08005a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e0b6      	b.n	8005c1e <HAL_TIM_ConfigClockSource+0x18a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aec:	d03e      	beq.n	8005b6c <HAL_TIM_ConfigClockSource+0xd8>
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af2:	f200 8087 	bhi.w	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afa:	f000 8086 	beq.w	8005c0a <HAL_TIM_ConfigClockSource+0x176>
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b02:	d87f      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b04:	2b70      	cmp	r3, #112	; 0x70
 8005b06:	d01a      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0xaa>
 8005b08:	2b70      	cmp	r3, #112	; 0x70
 8005b0a:	d87b      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b0c:	2b60      	cmp	r3, #96	; 0x60
 8005b0e:	d050      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x11e>
 8005b10:	2b60      	cmp	r3, #96	; 0x60
 8005b12:	d877      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b14:	2b50      	cmp	r3, #80	; 0x50
 8005b16:	d03c      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0xfe>
 8005b18:	2b50      	cmp	r3, #80	; 0x50
 8005b1a:	d873      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d058      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x13e>
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d86f      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b24:	2b30      	cmp	r3, #48	; 0x30
 8005b26:	d064      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
 8005b28:	2b30      	cmp	r3, #48	; 0x30
 8005b2a:	d86b      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d060      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d867      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d05c      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d05a      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
 8005b3c:	e062      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b4e:	f000 fc7d 	bl	800644c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	609a      	str	r2, [r3, #8]
      break;
 8005b6a:	e04f      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b7c:	f000 fc66 	bl	800644c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b8e:	609a      	str	r2, [r3, #8]
      break;
 8005b90:	e03c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f000 fbda 	bl	8006358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2150      	movs	r1, #80	; 0x50
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fc33 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e02c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f000 fbf9 	bl	80063b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2160      	movs	r1, #96	; 0x60
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fc23 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e01c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 fbba 	bl	8006358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2140      	movs	r1, #64	; 0x40
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fc13 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e00c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f000 fc0a 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005c02:	e003      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      break;
 8005c08:	e000      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a40      	ldr	r2, [pc, #256]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d00f      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3d      	ldr	r2, [pc, #244]	; (8005d90 <TIM_Base_SetConfig+0x118>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a3c      	ldr	r2, [pc, #240]	; (8005d94 <TIM_Base_SetConfig+0x11c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a3b      	ldr	r2, [pc, #236]	; (8005d98 <TIM_Base_SetConfig+0x120>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a3a      	ldr	r2, [pc, #232]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d108      	bne.n	8005cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01f      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d01b      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <TIM_Base_SetConfig+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d017      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a2b      	ldr	r2, [pc, #172]	; (8005d94 <TIM_Base_SetConfig+0x11c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <TIM_Base_SetConfig+0x120>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a29      	ldr	r2, [pc, #164]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a28      	ldr	r2, [pc, #160]	; (8005da0 <TIM_Base_SetConfig+0x128>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a27      	ldr	r2, [pc, #156]	; (8005da4 <TIM_Base_SetConfig+0x12c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0x9a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <TIM_Base_SetConfig+0x130>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a10      	ldr	r2, [pc, #64]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0xf8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a12      	ldr	r2, [pc, #72]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0xf8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <TIM_Base_SetConfig+0x128>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0xf8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a10      	ldr	r2, [pc, #64]	; (8005da4 <TIM_Base_SetConfig+0x12c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0xf8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a0f      	ldr	r2, [pc, #60]	; (8005da8 <TIM_Base_SetConfig+0x130>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d103      	bne.n	8005d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800

08005dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0201 	bic.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f023 0302 	bic.w	r3, r3, #2
 8005df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a2c      	ldr	r2, [pc, #176]	; (8005eb8 <TIM_OC1_SetConfig+0x10c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a2b      	ldr	r2, [pc, #172]	; (8005ebc <TIM_OC1_SetConfig+0x110>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a2a      	ldr	r2, [pc, #168]	; (8005ec0 <TIM_OC1_SetConfig+0x114>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a29      	ldr	r2, [pc, #164]	; (8005ec4 <TIM_OC1_SetConfig+0x118>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a28      	ldr	r2, [pc, #160]	; (8005ec8 <TIM_OC1_SetConfig+0x11c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d10c      	bne.n	8005e46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0308 	bic.w	r3, r3, #8
 8005e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f023 0304 	bic.w	r3, r3, #4
 8005e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <TIM_OC1_SetConfig+0x10c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <TIM_OC1_SetConfig+0x110>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a19      	ldr	r2, [pc, #100]	; (8005ec0 <TIM_OC1_SetConfig+0x114>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <TIM_OC1_SetConfig+0x118>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <TIM_OC1_SetConfig+0x11c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f023 0210 	bic.w	r2, r3, #16
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0320 	bic.w	r3, r3, #32
 8005f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a28      	ldr	r2, [pc, #160]	; (8005fcc <TIM_OC2_SetConfig+0x100>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC2_SetConfig+0x6c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <TIM_OC2_SetConfig+0x104>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10d      	bne.n	8005f54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <TIM_OC2_SetConfig+0x100>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00f      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <TIM_OC2_SetConfig+0x104>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <TIM_OC2_SetConfig+0x108>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <TIM_OC2_SetConfig+0x10c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <TIM_OC2_SetConfig+0x110>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d113      	bne.n	8005fa4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	621a      	str	r2, [r3, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40013400 	.word	0x40013400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40014400 	.word	0x40014400
 8005fdc:	40014800 	.word	0x40014800

08005fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800602c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a27      	ldr	r2, [pc, #156]	; (80060dc <TIM_OC3_SetConfig+0xfc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_OC3_SetConfig+0x6a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a26      	ldr	r2, [pc, #152]	; (80060e0 <TIM_OC3_SetConfig+0x100>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d10d      	bne.n	8006066 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <TIM_OC3_SetConfig+0xfc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00f      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <TIM_OC3_SetConfig+0x100>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <TIM_OC3_SetConfig+0x104>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <TIM_OC3_SetConfig+0x108>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a18      	ldr	r2, [pc, #96]	; (80060ec <TIM_OC3_SetConfig+0x10c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d113      	bne.n	80060b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800609c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800613e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <TIM_OC4_SetConfig+0xc0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00f      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <TIM_OC4_SetConfig+0xc4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC4_SetConfig+0xc8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC4_SetConfig+0xcc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <TIM_OC4_SetConfig+0xd0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d109      	bne.n	8006188 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800617a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	019b      	lsls	r3, r3, #6
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a17      	ldr	r2, [pc, #92]	; (8006278 <TIM_OC5_SetConfig+0xb4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00f      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <TIM_OC5_SetConfig+0xb8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00b      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a15      	ldr	r2, [pc, #84]	; (8006280 <TIM_OC5_SetConfig+0xbc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a14      	ldr	r2, [pc, #80]	; (8006284 <TIM_OC5_SetConfig+0xc0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a13      	ldr	r2, [pc, #76]	; (8006288 <TIM_OC5_SetConfig+0xc4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d109      	bne.n	8006252 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006244:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40013400 	.word	0x40013400
 8006280:	40014000 	.word	0x40014000
 8006284:	40014400 	.word	0x40014400
 8006288:	40014800 	.word	0x40014800

0800628c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	051b      	lsls	r3, r3, #20
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a18      	ldr	r2, [pc, #96]	; (8006344 <TIM_OC6_SetConfig+0xb8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00f      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <TIM_OC6_SetConfig+0xbc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a16      	ldr	r2, [pc, #88]	; (800634c <TIM_OC6_SetConfig+0xc0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a15      	ldr	r2, [pc, #84]	; (8006350 <TIM_OC6_SetConfig+0xc4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a14      	ldr	r2, [pc, #80]	; (8006354 <TIM_OC6_SetConfig+0xc8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d109      	bne.n	800631c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	029b      	lsls	r3, r3, #10
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800

08006358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f023 030a 	bic.w	r3, r3, #10
 8006394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f023 0210 	bic.w	r2, r3, #16
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	f043 0307 	orr.w	r3, r3, #7
 8006438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	021a      	lsls	r2, r3, #8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	431a      	orrs	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4313      	orrs	r3, r2
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2201      	movs	r2, #1
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e068      	b.n	80065c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800652a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01d      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006562:	d018      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a14      	ldr	r2, [pc, #80]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10c      	bne.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	40013400 	.word	0x40013400
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40014000 	.word	0x40014000

080065e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e040      	b.n	80066b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fb ff52 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2224      	movs	r2, #36	; 0x24
 8006650:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fb6a 	bl	8006d44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8af 	bl	80067d4 <UART_SetConfig>
 8006676:	4603      	mov	r3, r0
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e01b      	b.n	80066b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800668e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800669e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fbe9 	bl	8006e88 <UART_CheckIdleState>
 80066b6:	4603      	mov	r3, r0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4613      	mov	r3, r2
 80066ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d178      	bne.n	80067ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_UART_Transmit+0x24>
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e071      	b.n	80067cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2221      	movs	r2, #33	; 0x21
 80066f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066f6:	f7fc f925 	bl	8002944 <HAL_GetTick>
 80066fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006714:	d108      	bne.n	8006728 <HAL_UART_Transmit+0x68>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	e003      	b.n	8006730 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006730:	e030      	b.n	8006794 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2200      	movs	r2, #0
 800673a:	2180      	movs	r1, #128	; 0x80
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fc4b 	bl	8006fd8 <UART_WaitOnFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e03c      	b.n	80067cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10b      	bne.n	8006770 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	881a      	ldrh	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006764:	b292      	uxth	r2, r2
 8006766:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	3302      	adds	r3, #2
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	e008      	b.n	8006782 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	b292      	uxth	r2, r2
 800677a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3301      	adds	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1c8      	bne.n	8006732 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2200      	movs	r2, #0
 80067a8:	2140      	movs	r1, #64	; 0x40
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fc14 	bl	8006fd8 <UART_WaitOnFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e005      	b.n	80067cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2220      	movs	r2, #32
 80067c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e000      	b.n	80067cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80067ca:	2302      	movs	r3, #2
  }
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d8:	b08a      	sub	sp, #40	; 0x28
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4ba4      	ldr	r3, [pc, #656]	; (8006a94 <UART_SetConfig+0x2c0>)
 8006804:	4013      	ands	r3, r2
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800680c:	430b      	orrs	r3, r1
 800680e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a99      	ldr	r2, [pc, #612]	; (8006a98 <UART_SetConfig+0x2c4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683c:	4313      	orrs	r3, r2
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006850:	430a      	orrs	r2, r1
 8006852:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a90      	ldr	r2, [pc, #576]	; (8006a9c <UART_SetConfig+0x2c8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d126      	bne.n	80068ac <UART_SetConfig+0xd8>
 800685e:	4b90      	ldr	r3, [pc, #576]	; (8006aa0 <UART_SetConfig+0x2cc>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	2b03      	cmp	r3, #3
 800686a:	d81b      	bhi.n	80068a4 <UART_SetConfig+0xd0>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <UART_SetConfig+0xa0>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	08006885 	.word	0x08006885
 8006878:	08006895 	.word	0x08006895
 800687c:	0800688d 	.word	0x0800688d
 8006880:	0800689d 	.word	0x0800689d
 8006884:	2301      	movs	r3, #1
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688a:	e116      	b.n	8006aba <UART_SetConfig+0x2e6>
 800688c:	2302      	movs	r3, #2
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006892:	e112      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006894:	2304      	movs	r3, #4
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689a:	e10e      	b.n	8006aba <UART_SetConfig+0x2e6>
 800689c:	2308      	movs	r3, #8
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a2:	e10a      	b.n	8006aba <UART_SetConfig+0x2e6>
 80068a4:	2310      	movs	r3, #16
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068aa:	e106      	b.n	8006aba <UART_SetConfig+0x2e6>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a7c      	ldr	r2, [pc, #496]	; (8006aa4 <UART_SetConfig+0x2d0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d138      	bne.n	8006928 <UART_SetConfig+0x154>
 80068b6:	4b7a      	ldr	r3, [pc, #488]	; (8006aa0 <UART_SetConfig+0x2cc>)
 80068b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068bc:	f003 030c 	and.w	r3, r3, #12
 80068c0:	2b0c      	cmp	r3, #12
 80068c2:	d82d      	bhi.n	8006920 <UART_SetConfig+0x14c>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0xf8>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	08006901 	.word	0x08006901
 80068d0:	08006921 	.word	0x08006921
 80068d4:	08006921 	.word	0x08006921
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006911 	.word	0x08006911
 80068e0:	08006921 	.word	0x08006921
 80068e4:	08006921 	.word	0x08006921
 80068e8:	08006921 	.word	0x08006921
 80068ec:	08006909 	.word	0x08006909
 80068f0:	08006921 	.word	0x08006921
 80068f4:	08006921 	.word	0x08006921
 80068f8:	08006921 	.word	0x08006921
 80068fc:	08006919 	.word	0x08006919
 8006900:	2300      	movs	r3, #0
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006906:	e0d8      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006908:	2302      	movs	r3, #2
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690e:	e0d4      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006910:	2304      	movs	r3, #4
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006916:	e0d0      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006918:	2308      	movs	r3, #8
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691e:	e0cc      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006920:	2310      	movs	r3, #16
 8006922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006926:	e0c8      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a5e      	ldr	r2, [pc, #376]	; (8006aa8 <UART_SetConfig+0x2d4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d125      	bne.n	800697e <UART_SetConfig+0x1aa>
 8006932:	4b5b      	ldr	r3, [pc, #364]	; (8006aa0 <UART_SetConfig+0x2cc>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800693c:	2b30      	cmp	r3, #48	; 0x30
 800693e:	d016      	beq.n	800696e <UART_SetConfig+0x19a>
 8006940:	2b30      	cmp	r3, #48	; 0x30
 8006942:	d818      	bhi.n	8006976 <UART_SetConfig+0x1a2>
 8006944:	2b20      	cmp	r3, #32
 8006946:	d00a      	beq.n	800695e <UART_SetConfig+0x18a>
 8006948:	2b20      	cmp	r3, #32
 800694a:	d814      	bhi.n	8006976 <UART_SetConfig+0x1a2>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <UART_SetConfig+0x182>
 8006950:	2b10      	cmp	r3, #16
 8006952:	d008      	beq.n	8006966 <UART_SetConfig+0x192>
 8006954:	e00f      	b.n	8006976 <UART_SetConfig+0x1a2>
 8006956:	2300      	movs	r3, #0
 8006958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695c:	e0ad      	b.n	8006aba <UART_SetConfig+0x2e6>
 800695e:	2302      	movs	r3, #2
 8006960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006964:	e0a9      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006966:	2304      	movs	r3, #4
 8006968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696c:	e0a5      	b.n	8006aba <UART_SetConfig+0x2e6>
 800696e:	2308      	movs	r3, #8
 8006970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006974:	e0a1      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006976:	2310      	movs	r3, #16
 8006978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697c:	e09d      	b.n	8006aba <UART_SetConfig+0x2e6>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a4a      	ldr	r2, [pc, #296]	; (8006aac <UART_SetConfig+0x2d8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d125      	bne.n	80069d4 <UART_SetConfig+0x200>
 8006988:	4b45      	ldr	r3, [pc, #276]	; (8006aa0 <UART_SetConfig+0x2cc>)
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006992:	2bc0      	cmp	r3, #192	; 0xc0
 8006994:	d016      	beq.n	80069c4 <UART_SetConfig+0x1f0>
 8006996:	2bc0      	cmp	r3, #192	; 0xc0
 8006998:	d818      	bhi.n	80069cc <UART_SetConfig+0x1f8>
 800699a:	2b80      	cmp	r3, #128	; 0x80
 800699c:	d00a      	beq.n	80069b4 <UART_SetConfig+0x1e0>
 800699e:	2b80      	cmp	r3, #128	; 0x80
 80069a0:	d814      	bhi.n	80069cc <UART_SetConfig+0x1f8>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <UART_SetConfig+0x1d8>
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d008      	beq.n	80069bc <UART_SetConfig+0x1e8>
 80069aa:	e00f      	b.n	80069cc <UART_SetConfig+0x1f8>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b2:	e082      	b.n	8006aba <UART_SetConfig+0x2e6>
 80069b4:	2302      	movs	r3, #2
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ba:	e07e      	b.n	8006aba <UART_SetConfig+0x2e6>
 80069bc:	2304      	movs	r3, #4
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c2:	e07a      	b.n	8006aba <UART_SetConfig+0x2e6>
 80069c4:	2308      	movs	r3, #8
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ca:	e076      	b.n	8006aba <UART_SetConfig+0x2e6>
 80069cc:	2310      	movs	r3, #16
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d2:	e072      	b.n	8006aba <UART_SetConfig+0x2e6>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a35      	ldr	r2, [pc, #212]	; (8006ab0 <UART_SetConfig+0x2dc>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d12a      	bne.n	8006a34 <UART_SetConfig+0x260>
 80069de:	4b30      	ldr	r3, [pc, #192]	; (8006aa0 <UART_SetConfig+0x2cc>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ec:	d01a      	beq.n	8006a24 <UART_SetConfig+0x250>
 80069ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f2:	d81b      	bhi.n	8006a2c <UART_SetConfig+0x258>
 80069f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f8:	d00c      	beq.n	8006a14 <UART_SetConfig+0x240>
 80069fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069fe:	d815      	bhi.n	8006a2c <UART_SetConfig+0x258>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <UART_SetConfig+0x238>
 8006a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a08:	d008      	beq.n	8006a1c <UART_SetConfig+0x248>
 8006a0a:	e00f      	b.n	8006a2c <UART_SetConfig+0x258>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a12:	e052      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a14:	2302      	movs	r3, #2
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1a:	e04e      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a22:	e04a      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a24:	2308      	movs	r3, #8
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2a:	e046      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a32:	e042      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <UART_SetConfig+0x2c4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d13a      	bne.n	8006ab4 <UART_SetConfig+0x2e0>
 8006a3e:	4b18      	ldr	r3, [pc, #96]	; (8006aa0 <UART_SetConfig+0x2cc>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a4c:	d01a      	beq.n	8006a84 <UART_SetConfig+0x2b0>
 8006a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a52:	d81b      	bhi.n	8006a8c <UART_SetConfig+0x2b8>
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a58:	d00c      	beq.n	8006a74 <UART_SetConfig+0x2a0>
 8006a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5e:	d815      	bhi.n	8006a8c <UART_SetConfig+0x2b8>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <UART_SetConfig+0x298>
 8006a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a68:	d008      	beq.n	8006a7c <UART_SetConfig+0x2a8>
 8006a6a:	e00f      	b.n	8006a8c <UART_SetConfig+0x2b8>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a72:	e022      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e01e      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e01a      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a84:	2308      	movs	r3, #8
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e016      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e012      	b.n	8006aba <UART_SetConfig+0x2e6>
 8006a94:	efff69f3 	.word	0xefff69f3
 8006a98:	40008000 	.word	0x40008000
 8006a9c:	40013800 	.word	0x40013800
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	40004400 	.word	0x40004400
 8006aa8:	40004800 	.word	0x40004800
 8006aac:	40004c00 	.word	0x40004c00
 8006ab0:	40005000 	.word	0x40005000
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a9f      	ldr	r2, [pc, #636]	; (8006d3c <UART_SetConfig+0x568>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d17a      	bne.n	8006bba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d824      	bhi.n	8006b16 <UART_SetConfig+0x342>
 8006acc:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0x300>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b17 	.word	0x08006b17
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b17 	.word	0x08006b17
 8006ae4:	08006b07 	.word	0x08006b07
 8006ae8:	08006b17 	.word	0x08006b17
 8006aec:	08006b17 	.word	0x08006b17
 8006af0:	08006b17 	.word	0x08006b17
 8006af4:	08006b0f 	.word	0x08006b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7fc ffe8 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8006afc:	61f8      	str	r0, [r7, #28]
        break;
 8006afe:	e010      	b.n	8006b22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b00:	4b8f      	ldr	r3, [pc, #572]	; (8006d40 <UART_SetConfig+0x56c>)
 8006b02:	61fb      	str	r3, [r7, #28]
        break;
 8006b04:	e00d      	b.n	8006b22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b06:	f7fc ff49 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8006b0a:	61f8      	str	r0, [r7, #28]
        break;
 8006b0c:	e009      	b.n	8006b22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b12:	61fb      	str	r3, [r7, #28]
        break;
 8006b14:	e005      	b.n	8006b22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80fb 	beq.w	8006d20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4413      	add	r3, r2
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d305      	bcc.n	8006b46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d903      	bls.n	8006b4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b4c:	e0e8      	b.n	8006d20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	2200      	movs	r2, #0
 8006b52:	461c      	mov	r4, r3
 8006b54:	4615      	mov	r5, r2
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	022b      	lsls	r3, r5, #8
 8006b60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b64:	0222      	lsls	r2, r4, #8
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	6849      	ldr	r1, [r1, #4]
 8006b6a:	0849      	lsrs	r1, r1, #1
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	4688      	mov	r8, r1
 8006b70:	4681      	mov	r9, r0
 8006b72:	eb12 0a08 	adds.w	sl, r2, r8
 8006b76:	eb43 0b09 	adc.w	fp, r3, r9
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b88:	4650      	mov	r0, sl
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	f7fa f866 	bl	8000c5c <__aeabi_uldivmod>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4613      	mov	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b9e:	d308      	bcc.n	8006bb2 <UART_SetConfig+0x3de>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba6:	d204      	bcs.n	8006bb2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	60da      	str	r2, [r3, #12]
 8006bb0:	e0b6      	b.n	8006d20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bb8:	e0b2      	b.n	8006d20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc2:	d15e      	bne.n	8006c82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d828      	bhi.n	8006c1e <UART_SetConfig+0x44a>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <UART_SetConfig+0x400>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006bf9 	.word	0x08006bf9
 8006bd8:	08006c01 	.word	0x08006c01
 8006bdc:	08006c09 	.word	0x08006c09
 8006be0:	08006c1f 	.word	0x08006c1f
 8006be4:	08006c0f 	.word	0x08006c0f
 8006be8:	08006c1f 	.word	0x08006c1f
 8006bec:	08006c1f 	.word	0x08006c1f
 8006bf0:	08006c1f 	.word	0x08006c1f
 8006bf4:	08006c17 	.word	0x08006c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf8:	f7fc ff68 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8006bfc:	61f8      	str	r0, [r7, #28]
        break;
 8006bfe:	e014      	b.n	8006c2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c00:	f7fc ff7a 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8006c04:	61f8      	str	r0, [r7, #28]
        break;
 8006c06:	e010      	b.n	8006c2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c08:	4b4d      	ldr	r3, [pc, #308]	; (8006d40 <UART_SetConfig+0x56c>)
 8006c0a:	61fb      	str	r3, [r7, #28]
        break;
 8006c0c:	e00d      	b.n	8006c2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c0e:	f7fc fec5 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8006c12:	61f8      	str	r0, [r7, #28]
        break;
 8006c14:	e009      	b.n	8006c2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1a:	61fb      	str	r3, [r7, #28]
        break;
 8006c1c:	e005      	b.n	8006c2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d077      	beq.n	8006d20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	005a      	lsls	r2, r3, #1
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	085b      	lsrs	r3, r3, #1
 8006c3a:	441a      	add	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b0f      	cmp	r3, #15
 8006c4a:	d916      	bls.n	8006c7a <UART_SetConfig+0x4a6>
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c52:	d212      	bcs.n	8006c7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f023 030f 	bic.w	r3, r3, #15
 8006c5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	8afb      	ldrh	r3, [r7, #22]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	8afa      	ldrh	r2, [r7, #22]
 8006c76:	60da      	str	r2, [r3, #12]
 8006c78:	e052      	b.n	8006d20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c80:	e04e      	b.n	8006d20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d827      	bhi.n	8006cda <UART_SetConfig+0x506>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <UART_SetConfig+0x4bc>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cc5 	.word	0x08006cc5
 8006c9c:	08006cdb 	.word	0x08006cdb
 8006ca0:	08006ccb 	.word	0x08006ccb
 8006ca4:	08006cdb 	.word	0x08006cdb
 8006ca8:	08006cdb 	.word	0x08006cdb
 8006cac:	08006cdb 	.word	0x08006cdb
 8006cb0:	08006cd3 	.word	0x08006cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb4:	f7fc ff0a 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8006cb8:	61f8      	str	r0, [r7, #28]
        break;
 8006cba:	e014      	b.n	8006ce6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fc ff1c 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	61f8      	str	r0, [r7, #28]
        break;
 8006cc2:	e010      	b.n	8006ce6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc4:	4b1e      	ldr	r3, [pc, #120]	; (8006d40 <UART_SetConfig+0x56c>)
 8006cc6:	61fb      	str	r3, [r7, #28]
        break;
 8006cc8:	e00d      	b.n	8006ce6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cca:	f7fc fe67 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8006cce:	61f8      	str	r0, [r7, #28]
        break;
 8006cd0:	e009      	b.n	8006ce6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd6:	61fb      	str	r3, [r7, #28]
        break;
 8006cd8:	e005      	b.n	8006ce6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d019      	beq.n	8006d20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	085a      	lsrs	r2, r3, #1
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b0f      	cmp	r3, #15
 8006d04:	d909      	bls.n	8006d1a <UART_SetConfig+0x546>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0c:	d205      	bcs.n	8006d1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60da      	str	r2, [r3, #12]
 8006d18:	e002      	b.n	8006d20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40008000 	.word	0x40008000
 8006d40:	00f42400 	.word	0x00f42400

08006d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01a      	beq.n	8006e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e42:	d10a      	bne.n	8006e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b098      	sub	sp, #96	; 0x60
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e98:	f7fb fd54 	bl	8002944 <HAL_GetTick>
 8006e9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d12e      	bne.n	8006f0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f88c 	bl	8006fd8 <UART_WaitOnFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d021      	beq.n	8006f0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eda:	653b      	str	r3, [r7, #80]	; 0x50
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e062      	b.n	8006fd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d149      	bne.n	8006fac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f20:	2200      	movs	r2, #0
 8006f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f856 	bl	8006fd8 <UART_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d03c      	beq.n	8006fac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
 8006f52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f84:	61fa      	str	r2, [r7, #28]
 8006f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	69b9      	ldr	r1, [r7, #24]
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	617b      	str	r3, [r7, #20]
   return(result);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e011      	b.n	8006fd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3758      	adds	r7, #88	; 0x58
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe8:	e049      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d045      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff2:	f7fb fca7 	bl	8002944 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d302      	bcc.n	8007008 <UART_WaitOnFlagUntilTimeout+0x30>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e048      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d031      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b08      	cmp	r3, #8
 8007026:	d110      	bne.n	800704a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2208      	movs	r2, #8
 800702e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f838 	bl	80070a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2208      	movs	r2, #8
 800703a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e029      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007058:	d111      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f81e 	bl	80070a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e00f      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	429a      	cmp	r2, r3
 800709a:	d0a6      	beq.n	8006fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b095      	sub	sp, #84	; 0x54
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070cc:	643b      	str	r3, [r7, #64]	; 0x40
 80070ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e6      	bne.n	80070ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007100:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007118:	2b01      	cmp	r3, #1
 800711a:	d118      	bne.n	800714e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	60bb      	str	r3, [r7, #8]
   return(result);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	647b      	str	r3, [r7, #68]	; 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6979      	ldr	r1, [r7, #20]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	613b      	str	r3, [r7, #16]
   return(result);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e6      	bne.n	800711c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007162:	bf00      	nop
 8007164:	3754      	adds	r7, #84	; 0x54
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007174:	4904      	ldr	r1, [pc, #16]	; (8007188 <MX_FATFS_Init+0x18>)
 8007176:	4805      	ldr	r0, [pc, #20]	; (800718c <MX_FATFS_Init+0x1c>)
 8007178:	f002 ffa4 	bl	800a0c4 <FATFS_LinkDriver>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <MX_FATFS_Init+0x20>)
 8007182:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000a90 	.word	0x20000a90
 800718c:	20000024 	.word	0x20000024
 8007190:	20000a8c 	.word	0x20000a8c

08007194 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007198:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800719a:	4618      	mov	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f9d3 	bl	800755c <USER_SPI_initialize>
 80071b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv); //ADD THIS LINE
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fab1 	bl	8007734 <USER_SPI_status>
 80071d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 80071ec:	7bf8      	ldrb	r0, [r7, #15]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	f000 fab4 	bl	8007760 <USER_SPI_read>
 80071f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007212:	7bf8      	ldrb	r0, [r7, #15]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	f000 fb07 	bl	800782c <USER_SPI_write>
 800721e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	603a      	str	r2, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
 8007234:	460b      	mov	r3, r1
 8007236:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8007238:	79b9      	ldrb	r1, [r7, #6]
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fb70 	bl	8007924 <USER_SPI_ioctl>
 8007244:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007258:	f7fb fb74 	bl	8002944 <HAL_GetTick>
 800725c:	4603      	mov	r3, r0
 800725e:	4a04      	ldr	r2, [pc, #16]	; (8007270 <SPI_Timer_On+0x20>)
 8007260:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007262:	4a04      	ldr	r2, [pc, #16]	; (8007274 <SPI_Timer_On+0x24>)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6013      	str	r3, [r2, #0]
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20000a98 	.word	0x20000a98
 8007274:	20000a9c 	.word	0x20000a9c

08007278 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800727c:	f7fb fb62 	bl	8002944 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	4b06      	ldr	r3, [pc, #24]	; (800729c <SPI_Timer_Status+0x24>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	1ad2      	subs	r2, r2, r3
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <SPI_Timer_Status+0x28>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	bf34      	ite	cc
 8007290:	2301      	movcc	r3, #1
 8007292:	2300      	movcs	r3, #0
 8007294:	b2db      	uxtb	r3, r3
}
 8007296:	4618      	mov	r0, r3
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000a98 	.word	0x20000a98
 80072a0:	20000a9c 	.word	0x20000a9c

080072a4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80072ae:	f107 020f 	add.w	r2, r7, #15
 80072b2:	1df9      	adds	r1, r7, #7
 80072b4:	2332      	movs	r3, #50	; 0x32
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	2301      	movs	r3, #1
 80072ba:	4804      	ldr	r0, [pc, #16]	; (80072cc <xchg_spi+0x28>)
 80072bc:	f7fd fb98 	bl	80049f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000330 	.word	0x20000330

080072d0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	e00a      	b.n	80072f6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	18d4      	adds	r4, r2, r3
 80072e6:	20ff      	movs	r0, #255	; 0xff
 80072e8:	f7ff ffdc 	bl	80072a4 <xchg_spi>
 80072ec:	4603      	mov	r3, r0
 80072ee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3f0      	bcc.n	80072e0 <rcvr_spi_multi+0x10>
	}
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	bd90      	pop	{r4, r7, pc}

08007308 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	b29a      	uxth	r2, r3
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4803      	ldr	r0, [pc, #12]	; (800732c <xmit_spi_multi+0x24>)
 800731e:	f7fd f9f2 	bl	8004706 <HAL_SPI_Transmit>
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000330 	.word	0x20000330

08007330 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007338:	f7fb fb04 	bl	8002944 <HAL_GetTick>
 800733c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007342:	20ff      	movs	r0, #255	; 0xff
 8007344:	f7ff ffae 	bl	80072a4 <xchg_spi>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2bff      	cmp	r3, #255	; 0xff
 8007350:	d007      	beq.n	8007362 <wait_ready+0x32>
 8007352:	f7fb faf7 	bl	8002944 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	d8ef      	bhi.n	8007342 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2bff      	cmp	r3, #255	; 0xff
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800737a:	2201      	movs	r2, #1
 800737c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007384:	f7fb fdb2 	bl	8002eec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007388:	20ff      	movs	r0, #255	; 0xff
 800738a:	f7ff ff8b 	bl	80072a4 <xchg_spi>

}
 800738e:	bf00      	nop
 8007390:	bd80      	pop	{r7, pc}

08007392 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007392:	b580      	push	{r7, lr}
 8007394:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007396:	2200      	movs	r2, #0
 8007398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800739c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073a0:	f7fb fda4 	bl	8002eec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80073a4:	20ff      	movs	r0, #255	; 0xff
 80073a6:	f7ff ff7d 	bl	80072a4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80073aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073ae:	f7ff ffbf 	bl	8007330 <wait_ready>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <spiselect+0x2a>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e002      	b.n	80073c2 <spiselect+0x30>

	despiselect();
 80073bc:	f7ff ffdb 	bl	8007376 <despiselect>
	return 0;	/* Timeout */
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80073d0:	20c8      	movs	r0, #200	; 0xc8
 80073d2:	f7ff ff3d 	bl	8007250 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80073d6:	20ff      	movs	r0, #255	; 0xff
 80073d8:	f7ff ff64 	bl	80072a4 <xchg_spi>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	2bff      	cmp	r3, #255	; 0xff
 80073e4:	d104      	bne.n	80073f0 <rcvr_datablock+0x2a>
 80073e6:	f7ff ff47 	bl	8007278 <SPI_Timer_Status>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1f2      	bne.n	80073d6 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	2bfe      	cmp	r3, #254	; 0xfe
 80073f4:	d001      	beq.n	80073fa <rcvr_datablock+0x34>
 80073f6:	2300      	movs	r3, #0
 80073f8:	e00a      	b.n	8007410 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff ff67 	bl	80072d0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007402:	20ff      	movs	r0, #255	; 0xff
 8007404:	f7ff ff4e 	bl	80072a4 <xchg_spi>
 8007408:	20ff      	movs	r0, #255	; 0xff
 800740a:	f7ff ff4b 	bl	80072a4 <xchg_spi>

	return 1;						/* Function succeeded */
 800740e:	2301      	movs	r3, #1
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007428:	f7ff ff82 	bl	8007330 <wait_ready>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <xmit_datablock+0x1e>
 8007432:	2300      	movs	r3, #0
 8007434:	e01e      	b.n	8007474 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ff33 	bl	80072a4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	2bfd      	cmp	r3, #253	; 0xfd
 8007442:	d016      	beq.n	8007472 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff ff5d 	bl	8007308 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800744e:	20ff      	movs	r0, #255	; 0xff
 8007450:	f7ff ff28 	bl	80072a4 <xchg_spi>
 8007454:	20ff      	movs	r0, #255	; 0xff
 8007456:	f7ff ff25 	bl	80072a4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800745a:	20ff      	movs	r0, #255	; 0xff
 800745c:	f7ff ff22 	bl	80072a4 <xchg_spi>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	2b05      	cmp	r3, #5
 800746c:	d001      	beq.n	8007472 <xmit_datablock+0x5a>
 800746e:	2300      	movs	r3, #0
 8007470:	e000      	b.n	8007474 <xmit_datablock+0x5c>
	}
	return 1;
 8007472:	2301      	movs	r3, #1
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da0e      	bge.n	80074ae <send_cmd+0x32>
		cmd &= 0x7F;
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007496:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007498:	2100      	movs	r1, #0
 800749a:	2037      	movs	r0, #55	; 0x37
 800749c:	f7ff ffee 	bl	800747c <send_cmd>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d901      	bls.n	80074ae <send_cmd+0x32>
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	e051      	b.n	8007552 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	2b0c      	cmp	r3, #12
 80074b2:	d008      	beq.n	80074c6 <send_cmd+0x4a>
		despiselect();
 80074b4:	f7ff ff5f 	bl	8007376 <despiselect>
		if (!spiselect()) return 0xFF;
 80074b8:	f7ff ff6b 	bl	8007392 <spiselect>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <send_cmd+0x4a>
 80074c2:	23ff      	movs	r3, #255	; 0xff
 80074c4:	e045      	b.n	8007552 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fee8 	bl	80072a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	0e1b      	lsrs	r3, r3, #24
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fee2 	bl	80072a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fedc 	bl	80072a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fed6 	bl	80072a4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fed1 	bl	80072a4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <send_cmd+0x94>
 800750c:	2395      	movs	r3, #149	; 0x95
 800750e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	2b08      	cmp	r3, #8
 8007514:	d101      	bne.n	800751a <send_cmd+0x9e>
 8007516:	2387      	movs	r3, #135	; 0x87
 8007518:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff fec1 	bl	80072a4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007522:	79fb      	ldrb	r3, [r7, #7]
 8007524:	2b0c      	cmp	r3, #12
 8007526:	d102      	bne.n	800752e <send_cmd+0xb2>
 8007528:	20ff      	movs	r0, #255	; 0xff
 800752a:	f7ff febb 	bl	80072a4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800752e:	230a      	movs	r3, #10
 8007530:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007532:	20ff      	movs	r0, #255	; 0xff
 8007534:	f7ff feb6 	bl	80072a4 <xchg_spi>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800753c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	da05      	bge.n	8007550 <send_cmd+0xd4>
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	3b01      	subs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f0      	bne.n	8007532 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007550:	7bbb      	ldrb	r3, [r7, #14]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <USER_SPI_initialize+0x14>
 800756c:	2301      	movs	r3, #1
 800756e:	e0d6      	b.n	800771e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007570:	4b6d      	ldr	r3, [pc, #436]	; (8007728 <USER_SPI_initialize+0x1cc>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <USER_SPI_initialize+0x2a>
 800757e:	4b6a      	ldr	r3, [pc, #424]	; (8007728 <USER_SPI_initialize+0x1cc>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	e0cb      	b.n	800771e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007586:	4b69      	ldr	r3, [pc, #420]	; (800772c <USER_SPI_initialize+0x1d0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007590:	4b66      	ldr	r3, [pc, #408]	; (800772c <USER_SPI_initialize+0x1d0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8007598:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800759a:	230a      	movs	r3, #10
 800759c:	73fb      	strb	r3, [r7, #15]
 800759e:	e005      	b.n	80075ac <USER_SPI_initialize+0x50>
 80075a0:	20ff      	movs	r0, #255	; 0xff
 80075a2:	f7ff fe7f 	bl	80072a4 <xchg_spi>
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f6      	bne.n	80075a0 <USER_SPI_initialize+0x44>

	ty = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80075b6:	2100      	movs	r1, #0
 80075b8:	2000      	movs	r0, #0
 80075ba:	f7ff ff5f 	bl	800747c <send_cmd>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f040 808b 	bne.w	80076dc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80075c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075ca:	f7ff fe41 	bl	8007250 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80075ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075d2:	2008      	movs	r0, #8
 80075d4:	f7ff ff52 	bl	800747c <send_cmd>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d151      	bne.n	8007682 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
 80075e2:	e00d      	b.n	8007600 <USER_SPI_initialize+0xa4>
 80075e4:	7bfc      	ldrb	r4, [r7, #15]
 80075e6:	20ff      	movs	r0, #255	; 0xff
 80075e8:	f7ff fe5c 	bl	80072a4 <xchg_spi>
 80075ec:	4603      	mov	r3, r0
 80075ee:	461a      	mov	r2, r3
 80075f0:	f104 0310 	add.w	r3, r4, #16
 80075f4:	443b      	add	r3, r7
 80075f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	3301      	adds	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d9ee      	bls.n	80075e4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007606:	7abb      	ldrb	r3, [r7, #10]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d167      	bne.n	80076dc <USER_SPI_initialize+0x180>
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	2baa      	cmp	r3, #170	; 0xaa
 8007610:	d164      	bne.n	80076dc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007612:	bf00      	nop
 8007614:	f7ff fe30 	bl	8007278 <SPI_Timer_Status>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <USER_SPI_initialize+0xd2>
 800761e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007622:	20a9      	movs	r0, #169	; 0xa9
 8007624:	f7ff ff2a 	bl	800747c <send_cmd>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f2      	bne.n	8007614 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800762e:	f7ff fe23 	bl	8007278 <SPI_Timer_Status>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d051      	beq.n	80076dc <USER_SPI_initialize+0x180>
 8007638:	2100      	movs	r1, #0
 800763a:	203a      	movs	r0, #58	; 0x3a
 800763c:	f7ff ff1e 	bl	800747c <send_cmd>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d14a      	bne.n	80076dc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
 800764a:	e00d      	b.n	8007668 <USER_SPI_initialize+0x10c>
 800764c:	7bfc      	ldrb	r4, [r7, #15]
 800764e:	20ff      	movs	r0, #255	; 0xff
 8007650:	f7ff fe28 	bl	80072a4 <xchg_spi>
 8007654:	4603      	mov	r3, r0
 8007656:	461a      	mov	r2, r3
 8007658:	f104 0310 	add.w	r3, r4, #16
 800765c:	443b      	add	r3, r7
 800765e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	3301      	adds	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2b03      	cmp	r3, #3
 800766c:	d9ee      	bls.n	800764c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800766e:	7a3b      	ldrb	r3, [r7, #8]
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <USER_SPI_initialize+0x120>
 8007678:	230c      	movs	r3, #12
 800767a:	e000      	b.n	800767e <USER_SPI_initialize+0x122>
 800767c:	2304      	movs	r3, #4
 800767e:	737b      	strb	r3, [r7, #13]
 8007680:	e02c      	b.n	80076dc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007682:	2100      	movs	r1, #0
 8007684:	20a9      	movs	r0, #169	; 0xa9
 8007686:	f7ff fef9 	bl	800747c <send_cmd>
 800768a:	4603      	mov	r3, r0
 800768c:	2b01      	cmp	r3, #1
 800768e:	d804      	bhi.n	800769a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007690:	2302      	movs	r3, #2
 8007692:	737b      	strb	r3, [r7, #13]
 8007694:	23a9      	movs	r3, #169	; 0xa9
 8007696:	73bb      	strb	r3, [r7, #14]
 8007698:	e003      	b.n	80076a2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800769a:	2301      	movs	r3, #1
 800769c:	737b      	strb	r3, [r7, #13]
 800769e:	2301      	movs	r3, #1
 80076a0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80076a2:	bf00      	nop
 80076a4:	f7ff fde8 	bl	8007278 <SPI_Timer_Status>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <USER_SPI_initialize+0x162>
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2100      	movs	r1, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fee2 	bl	800747c <send_cmd>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f2      	bne.n	80076a4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80076be:	f7ff fddb 	bl	8007278 <SPI_Timer_Status>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <USER_SPI_initialize+0x17c>
 80076c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076cc:	2010      	movs	r0, #16
 80076ce:	f7ff fed5 	bl	800747c <send_cmd>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <USER_SPI_initialize+0x180>
				ty = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80076dc:	4a14      	ldr	r2, [pc, #80]	; (8007730 <USER_SPI_initialize+0x1d4>)
 80076de:	7b7b      	ldrb	r3, [r7, #13]
 80076e0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80076e2:	f7ff fe48 	bl	8007376 <despiselect>

	if (ty) {			/* OK */
 80076e6:	7b7b      	ldrb	r3, [r7, #13]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d012      	beq.n	8007712 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <USER_SPI_initialize+0x1d0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <USER_SPI_initialize+0x1d0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0220 	orr.w	r2, r2, #32
 80076fe:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007700:	4b09      	ldr	r3, [pc, #36]	; (8007728 <USER_SPI_initialize+0x1cc>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	b2da      	uxtb	r2, r3
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <USER_SPI_initialize+0x1cc>)
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e002      	b.n	8007718 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <USER_SPI_initialize+0x1cc>)
 8007714:	2201      	movs	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <USER_SPI_initialize+0x1cc>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b2db      	uxtb	r3, r3
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	bd90      	pop	{r4, r7, pc}
 8007726:	bf00      	nop
 8007728:	20000038 	.word	0x20000038
 800772c:	20000330 	.word	0x20000330
 8007730:	20000a94 	.word	0x20000a94

08007734 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <USER_SPI_status+0x14>
 8007744:	2301      	movs	r3, #1
 8007746:	e002      	b.n	800774e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007748:	4b04      	ldr	r3, [pc, #16]	; (800775c <USER_SPI_status+0x28>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b2db      	uxtb	r3, r3
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20000038 	.word	0x20000038

08007760 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <USER_SPI_read+0x1c>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <USER_SPI_read+0x20>
 800777c:	2304      	movs	r3, #4
 800777e:	e04d      	b.n	800781c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007780:	4b28      	ldr	r3, [pc, #160]	; (8007824 <USER_SPI_read+0xc4>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <USER_SPI_read+0x32>
 800778e:	2303      	movs	r3, #3
 8007790:	e044      	b.n	800781c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007792:	4b25      	ldr	r3, [pc, #148]	; (8007828 <USER_SPI_read+0xc8>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <USER_SPI_read+0x44>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	025b      	lsls	r3, r3, #9
 80077a2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d111      	bne.n	80077ce <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	2011      	movs	r0, #17
 80077ae:	f7ff fe65 	bl	800747c <send_cmd>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d129      	bne.n	800780c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80077b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	f7ff fe02 	bl	80073c6 <rcvr_datablock>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d021      	beq.n	800780c <USER_SPI_read+0xac>
			count = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e01e      	b.n	800780c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	2012      	movs	r0, #18
 80077d2:	f7ff fe53 	bl	800747c <send_cmd>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d117      	bne.n	800780c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80077dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077e0:	68b8      	ldr	r0, [r7, #8]
 80077e2:	f7ff fdf0 	bl	80073c6 <rcvr_datablock>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <USER_SPI_read+0xa2>
				buff += 512;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80077f2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	603b      	str	r3, [r7, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1ed      	bne.n	80077dc <USER_SPI_read+0x7c>
 8007800:	e000      	b.n	8007804 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007802:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007804:	2100      	movs	r1, #0
 8007806:	200c      	movs	r0, #12
 8007808:	f7ff fe38 	bl	800747c <send_cmd>
		}
	}
	despiselect();
 800780c:	f7ff fdb3 	bl	8007376 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2301      	movne	r3, #1
 8007818:	2300      	moveq	r3, #0
 800781a:	b2db      	uxtb	r3, r3
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000038 	.word	0x20000038
 8007828:	20000a94 	.word	0x20000a94

0800782c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <USER_SPI_write+0x1c>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <USER_SPI_write+0x20>
 8007848:	2304      	movs	r3, #4
 800784a:	e063      	b.n	8007914 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800784c:	4b33      	ldr	r3, [pc, #204]	; (800791c <USER_SPI_write+0xf0>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <USER_SPI_write+0x32>
 800785a:	2303      	movs	r3, #3
 800785c:	e05a      	b.n	8007914 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800785e:	4b2f      	ldr	r3, [pc, #188]	; (800791c <USER_SPI_write+0xf0>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <USER_SPI_write+0x44>
 800786c:	2302      	movs	r3, #2
 800786e:	e051      	b.n	8007914 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007870:	4b2b      	ldr	r3, [pc, #172]	; (8007920 <USER_SPI_write+0xf4>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <USER_SPI_write+0x56>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	025b      	lsls	r3, r3, #9
 8007880:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d110      	bne.n	80078aa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	2018      	movs	r0, #24
 800788c:	f7ff fdf6 	bl	800747c <send_cmd>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d136      	bne.n	8007904 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007896:	21fe      	movs	r1, #254	; 0xfe
 8007898:	68b8      	ldr	r0, [r7, #8]
 800789a:	f7ff fdbd 	bl	8007418 <xmit_datablock>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d02f      	beq.n	8007904 <USER_SPI_write+0xd8>
			count = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	e02c      	b.n	8007904 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80078aa:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <USER_SPI_write+0xf4>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	f003 0306 	and.w	r3, r3, #6
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <USER_SPI_write+0x92>
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	2097      	movs	r0, #151	; 0x97
 80078ba:	f7ff fddf 	bl	800747c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	2019      	movs	r0, #25
 80078c2:	f7ff fddb 	bl	800747c <send_cmd>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11b      	bne.n	8007904 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80078cc:	21fc      	movs	r1, #252	; 0xfc
 80078ce:	68b8      	ldr	r0, [r7, #8]
 80078d0:	f7ff fda2 	bl	8007418 <xmit_datablock>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <USER_SPI_write+0xc4>
				buff += 512;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80078e0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1ee      	bne.n	80078cc <USER_SPI_write+0xa0>
 80078ee:	e000      	b.n	80078f2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80078f0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80078f2:	21fd      	movs	r1, #253	; 0xfd
 80078f4:	2000      	movs	r0, #0
 80078f6:	f7ff fd8f 	bl	8007418 <xmit_datablock>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <USER_SPI_write+0xd8>
 8007900:	2301      	movs	r3, #1
 8007902:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007904:	f7ff fd37 	bl	8007376 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	bf14      	ite	ne
 800790e:	2301      	movne	r3, #1
 8007910:	2300      	moveq	r3, #0
 8007912:	b2db      	uxtb	r3, r3
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000038 	.word	0x20000038
 8007920:	20000a94 	.word	0x20000a94

08007924 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08c      	sub	sp, #48	; 0x30
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	603a      	str	r2, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
 8007930:	460b      	mov	r3, r1
 8007932:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <USER_SPI_ioctl+0x1a>
 800793a:	2304      	movs	r3, #4
 800793c:	e15a      	b.n	8007bf4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800793e:	4baf      	ldr	r3, [pc, #700]	; (8007bfc <USER_SPI_ioctl+0x2d8>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <USER_SPI_ioctl+0x2c>
 800794c:	2303      	movs	r3, #3
 800794e:	e151      	b.n	8007bf4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007956:	79bb      	ldrb	r3, [r7, #6]
 8007958:	2b04      	cmp	r3, #4
 800795a:	f200 8136 	bhi.w	8007bca <USER_SPI_ioctl+0x2a6>
 800795e:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <USER_SPI_ioctl+0x40>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	08007979 	.word	0x08007979
 8007968:	0800798d 	.word	0x0800798d
 800796c:	08007bcb 	.word	0x08007bcb
 8007970:	08007a39 	.word	0x08007a39
 8007974:	08007b2f 	.word	0x08007b2f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007978:	f7ff fd0b 	bl	8007392 <spiselect>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8127 	beq.w	8007bd2 <USER_SPI_ioctl+0x2ae>
 8007984:	2300      	movs	r3, #0
 8007986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800798a:	e122      	b.n	8007bd2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800798c:	2100      	movs	r1, #0
 800798e:	2009      	movs	r0, #9
 8007990:	f7ff fd74 	bl	800747c <send_cmd>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	f040 811d 	bne.w	8007bd6 <USER_SPI_ioctl+0x2b2>
 800799c:	f107 030c 	add.w	r3, r7, #12
 80079a0:	2110      	movs	r1, #16
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff fd0f 	bl	80073c6 <rcvr_datablock>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8113 	beq.w	8007bd6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80079b0:	7b3b      	ldrb	r3, [r7, #12]
 80079b2:	099b      	lsrs	r3, r3, #6
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d111      	bne.n	80079de <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80079ba:	7d7b      	ldrb	r3, [r7, #21]
 80079bc:	461a      	mov	r2, r3
 80079be:	7d3b      	ldrb	r3, [r7, #20]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	4413      	add	r3, r2
 80079c4:	461a      	mov	r2, r3
 80079c6:	7cfb      	ldrb	r3, [r7, #19]
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80079ce:	4413      	add	r3, r2
 80079d0:	3301      	adds	r3, #1
 80079d2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	029a      	lsls	r2, r3, #10
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e028      	b.n	8007a30 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80079de:	7c7b      	ldrb	r3, [r7, #17]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
 80079e8:	09db      	lsrs	r3, r3, #7
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	4413      	add	r3, r2
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	7d7b      	ldrb	r3, [r7, #21]
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	f003 0306 	and.w	r3, r3, #6
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	4413      	add	r3, r2
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	3302      	adds	r3, #2
 8007a02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007a06:	7d3b      	ldrb	r3, [r7, #20]
 8007a08:	099b      	lsrs	r3, r3, #6
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	7cfb      	ldrb	r3, [r7, #19]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	7cbb      	ldrb	r3, [r7, #18]
 8007a16:	029b      	lsls	r3, r3, #10
 8007a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3301      	adds	r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007a22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a26:	3b09      	subs	r3, #9
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007a36:	e0ce      	b.n	8007bd6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007a38:	4b71      	ldr	r3, [pc, #452]	; (8007c00 <USER_SPI_ioctl+0x2dc>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d031      	beq.n	8007aa8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007a44:	2100      	movs	r1, #0
 8007a46:	208d      	movs	r0, #141	; 0x8d
 8007a48:	f7ff fd18 	bl	800747c <send_cmd>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 80c3 	bne.w	8007bda <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007a54:	20ff      	movs	r0, #255	; 0xff
 8007a56:	f7ff fc25 	bl	80072a4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007a5a:	f107 030c 	add.w	r3, r7, #12
 8007a5e:	2110      	movs	r1, #16
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fcb0 	bl	80073c6 <rcvr_datablock>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80b6 	beq.w	8007bda <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007a6e:	2330      	movs	r3, #48	; 0x30
 8007a70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007a74:	e007      	b.n	8007a86 <USER_SPI_ioctl+0x162>
 8007a76:	20ff      	movs	r0, #255	; 0xff
 8007a78:	f7ff fc14 	bl	80072a4 <xchg_spi>
 8007a7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a80:	3b01      	subs	r3, #1
 8007a82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007a86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f3      	bne.n	8007a76 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007a8e:	7dbb      	ldrb	r3, [r7, #22]
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	2310      	movs	r3, #16
 8007a98:	fa03 f202 	lsl.w	r2, r3, r2
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007aa6:	e098      	b.n	8007bda <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	2009      	movs	r0, #9
 8007aac:	f7ff fce6 	bl	800747c <send_cmd>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 8091 	bne.w	8007bda <USER_SPI_ioctl+0x2b6>
 8007ab8:	f107 030c 	add.w	r3, r7, #12
 8007abc:	2110      	movs	r1, #16
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fc81 	bl	80073c6 <rcvr_datablock>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 8087 	beq.w	8007bda <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007acc:	4b4c      	ldr	r3, [pc, #304]	; (8007c00 <USER_SPI_ioctl+0x2dc>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d012      	beq.n	8007afe <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007ad8:	7dbb      	ldrb	r3, [r7, #22]
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007ae0:	7dfa      	ldrb	r2, [r7, #23]
 8007ae2:	09d2      	lsrs	r2, r2, #7
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	7e7b      	ldrb	r3, [r7, #25]
 8007aec:	099b      	lsrs	r3, r3, #6
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e013      	b.n	8007b26 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007afe:	7dbb      	ldrb	r3, [r7, #22]
 8007b00:	109b      	asrs	r3, r3, #2
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	3301      	adds	r3, #1
 8007b0a:	7dfa      	ldrb	r2, [r7, #23]
 8007b0c:	00d2      	lsls	r2, r2, #3
 8007b0e:	f002 0218 	and.w	r2, r2, #24
 8007b12:	7df9      	ldrb	r1, [r7, #23]
 8007b14:	0949      	lsrs	r1, r1, #5
 8007b16:	b2c9      	uxtb	r1, r1
 8007b18:	440a      	add	r2, r1
 8007b1a:	3201      	adds	r2, #1
 8007b1c:	fb02 f303 	mul.w	r3, r2, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007b2c:	e055      	b.n	8007bda <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b2e:	4b34      	ldr	r3, [pc, #208]	; (8007c00 <USER_SPI_ioctl+0x2dc>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 0306 	and.w	r3, r3, #6
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d051      	beq.n	8007bde <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b3a:	f107 020c 	add.w	r2, r7, #12
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	210b      	movs	r1, #11
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff feee 	bl	8007924 <USER_SPI_ioctl>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d149      	bne.n	8007be2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b4e:	7b3b      	ldrb	r3, [r7, #12]
 8007b50:	099b      	lsrs	r3, r3, #6
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <USER_SPI_ioctl+0x23e>
 8007b58:	7dbb      	ldrb	r3, [r7, #22]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d041      	beq.n	8007be6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007b72:	4b23      	ldr	r3, [pc, #140]	; (8007c00 <USER_SPI_ioctl+0x2dc>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d105      	bne.n	8007b8a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	025b      	lsls	r3, r3, #9
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	025b      	lsls	r3, r3, #9
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b8c:	2020      	movs	r0, #32
 8007b8e:	f7ff fc75 	bl	800747c <send_cmd>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d128      	bne.n	8007bea <USER_SPI_ioctl+0x2c6>
 8007b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b9a:	2021      	movs	r0, #33	; 0x21
 8007b9c:	f7ff fc6e 	bl	800747c <send_cmd>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d121      	bne.n	8007bea <USER_SPI_ioctl+0x2c6>
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	2026      	movs	r0, #38	; 0x26
 8007baa:	f7ff fc67 	bl	800747c <send_cmd>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11a      	bne.n	8007bea <USER_SPI_ioctl+0x2c6>
 8007bb4:	f247 5030 	movw	r0, #30000	; 0x7530
 8007bb8:	f7ff fbba 	bl	8007330 <wait_ready>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d013      	beq.n	8007bea <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007bc8:	e00f      	b.n	8007bea <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007bca:	2304      	movs	r3, #4
 8007bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007bd0:	e00c      	b.n	8007bec <USER_SPI_ioctl+0x2c8>
		break;
 8007bd2:	bf00      	nop
 8007bd4:	e00a      	b.n	8007bec <USER_SPI_ioctl+0x2c8>
		break;
 8007bd6:	bf00      	nop
 8007bd8:	e008      	b.n	8007bec <USER_SPI_ioctl+0x2c8>
		break;
 8007bda:	bf00      	nop
 8007bdc:	e006      	b.n	8007bec <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007bde:	bf00      	nop
 8007be0:	e004      	b.n	8007bec <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007be2:	bf00      	nop
 8007be4:	e002      	b.n	8007bec <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007be6:	bf00      	nop
 8007be8:	e000      	b.n	8007bec <USER_SPI_ioctl+0x2c8>
		break;
 8007bea:	bf00      	nop
	}

	despiselect();
 8007bec:	f7ff fbc3 	bl	8007376 <despiselect>

	return res;
 8007bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3730      	adds	r7, #48	; 0x30
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000038 	.word	0x20000038
 8007c00:	20000a94 	.word	0x20000a94

08007c04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <disk_status+0x30>)
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	79fa      	ldrb	r2, [r7, #7]
 8007c1c:	4905      	ldr	r1, [pc, #20]	; (8007c34 <disk_status+0x30>)
 8007c1e:	440a      	add	r2, r1
 8007c20:	7a12      	ldrb	r2, [r2, #8]
 8007c22:	4610      	mov	r0, r2
 8007c24:	4798      	blx	r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20000ac8 	.word	0x20000ac8

08007c38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <disk_initialize+0x48>)
 8007c4a:	5cd3      	ldrb	r3, [r2, r3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d111      	bne.n	8007c74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <disk_initialize+0x48>)
 8007c54:	2101      	movs	r1, #1
 8007c56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <disk_initialize+0x48>)
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	4906      	ldr	r1, [pc, #24]	; (8007c80 <disk_initialize+0x48>)
 8007c68:	440a      	add	r2, r1
 8007c6a:	7a12      	ldrb	r2, [r2, #8]
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000ac8 	.word	0x20000ac8

08007c84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <disk_read+0x3c>)
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	689c      	ldr	r4, [r3, #8]
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4a07      	ldr	r2, [pc, #28]	; (8007cc0 <disk_read+0x3c>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	7a18      	ldrb	r0, [r3, #8]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	47a0      	blx	r4
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd90      	pop	{r4, r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000ac8 	.word	0x20000ac8

08007cc4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <disk_write+0x3c>)
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	68dc      	ldr	r4, [r3, #12]
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4a07      	ldr	r2, [pc, #28]	; (8007d00 <disk_write+0x3c>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	7a18      	ldrb	r0, [r3, #8]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	47a0      	blx	r4
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd90      	pop	{r4, r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000ac8 	.word	0x20000ac8

08007d04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	603a      	str	r2, [r7, #0]
 8007d0e:	71fb      	strb	r3, [r7, #7]
 8007d10:	460b      	mov	r3, r1
 8007d12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <disk_ioctl+0x38>)
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	79fa      	ldrb	r2, [r7, #7]
 8007d22:	4906      	ldr	r1, [pc, #24]	; (8007d3c <disk_ioctl+0x38>)
 8007d24:	440a      	add	r2, r1
 8007d26:	7a10      	ldrb	r0, [r2, #8]
 8007d28:	79b9      	ldrb	r1, [r7, #6]
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20000ac8 	.word	0x20000ac8

08007d40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d50:	89fb      	ldrh	r3, [r7, #14]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	b21a      	sxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b21b      	sxth	r3, r3
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	b21b      	sxth	r3, r3
 8007d60:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d62:	89fb      	ldrh	r3, [r7, #14]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3303      	adds	r3, #3
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	3202      	adds	r2, #2
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	3201      	adds	r2, #1
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
	return rv;
 8007da8:	68fb      	ldr	r3, [r7, #12]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	887a      	ldrh	r2, [r7, #2]
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	887b      	ldrh	r3, [r7, #2]
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	887a      	ldrh	r2, [r7, #2]
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	607a      	str	r2, [r7, #4]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	0a1b      	lsrs	r3, r3, #8
 8007e2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	701a      	strb	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	1c53      	adds	r3, r2, #1
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1c59      	adds	r1, r3, #1
 8007e68:	6179      	str	r1, [r7, #20]
 8007e6a:	7812      	ldrb	r2, [r2, #0]
 8007e6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f1      	bne.n	8007e5e <mem_cpy+0x1a>
	}
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e86:	b480      	push	{r7}
 8007e88:	b087      	sub	sp, #28
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	617a      	str	r2, [r7, #20]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f3      	bne.n	8007e96 <mem_set+0x10>
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	; 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	61fa      	str	r2, [r7, #28]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	61ba      	str	r2, [r7, #24]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	1acb      	subs	r3, r1, r3
 8007ee8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <mem_cmp+0x40>
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0eb      	beq.n	8007ed4 <mem_cmp+0x18>

	return r;
 8007efc:	697b      	ldr	r3, [r7, #20]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3724      	adds	r7, #36	; 0x24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007f14:	e002      	b.n	8007f1c <chk_chr+0x12>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	607b      	str	r3, [r7, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <chk_chr+0x26>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d1f2      	bne.n	8007f16 <chk_chr+0xc>
	return *str;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	781b      	ldrb	r3, [r3, #0]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d009      	beq.n	8007f62 <lock_fs+0x22>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f002 f8ec 	bl	800a130 <ff_req_grant>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <lock_fs+0x22>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <lock_fs+0x24>
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00d      	beq.n	8007f9a <unlock_fs+0x2e>
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d00a      	beq.n	8007f9a <unlock_fs+0x2e>
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d007      	beq.n	8007f9a <unlock_fs+0x2e>
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	2b0f      	cmp	r3, #15
 8007f8e:	d004      	beq.n	8007f9a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f002 f8e0 	bl	800a15a <ff_rel_grant>
	}
}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60bb      	str	r3, [r7, #8]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	e029      	b.n	800800c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007fb8:	4a27      	ldr	r2, [pc, #156]	; (8008058 <chk_lock+0xb4>)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	4413      	add	r3, r2
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d01d      	beq.n	8008002 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fc6:	4a24      	ldr	r2, [pc, #144]	; (8008058 <chk_lock+0xb4>)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	4413      	add	r3, r2
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d116      	bne.n	8008006 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007fd8:	4a1f      	ldr	r2, [pc, #124]	; (8008058 <chk_lock+0xb4>)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	4413      	add	r3, r2
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d10c      	bne.n	8008006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fec:	4a1a      	ldr	r2, [pc, #104]	; (8008058 <chk_lock+0xb4>)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	4413      	add	r3, r2
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d102      	bne.n	8008006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008000:	e007      	b.n	8008012 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008002:	2301      	movs	r3, #1
 8008004:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d9d2      	bls.n	8007fb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d109      	bne.n	800802c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <chk_lock+0x80>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d101      	bne.n	8008028 <chk_lock+0x84>
 8008024:	2300      	movs	r3, #0
 8008026:	e010      	b.n	800804a <chk_lock+0xa6>
 8008028:	2312      	movs	r3, #18
 800802a:	e00e      	b.n	800804a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d108      	bne.n	8008044 <chk_lock+0xa0>
 8008032:	4a09      	ldr	r2, [pc, #36]	; (8008058 <chk_lock+0xb4>)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	4413      	add	r3, r2
 800803a:	330c      	adds	r3, #12
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008042:	d101      	bne.n	8008048 <chk_lock+0xa4>
 8008044:	2310      	movs	r3, #16
 8008046:	e000      	b.n	800804a <chk_lock+0xa6>
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20000aa8 	.word	0x20000aa8

0800805c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008062:	2300      	movs	r3, #0
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	e002      	b.n	800806e <enq_lock+0x12>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3301      	adds	r3, #1
 800806c:	607b      	str	r3, [r7, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d806      	bhi.n	8008082 <enq_lock+0x26>
 8008074:	4a09      	ldr	r2, [pc, #36]	; (800809c <enq_lock+0x40>)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	4413      	add	r3, r2
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1f2      	bne.n	8008068 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b02      	cmp	r3, #2
 8008086:	bf14      	ite	ne
 8008088:	2301      	movne	r3, #1
 800808a:	2300      	moveq	r3, #0
 800808c:	b2db      	uxtb	r3, r3
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20000aa8 	.word	0x20000aa8

080080a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e01f      	b.n	80080f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80080b0:	4a41      	ldr	r2, [pc, #260]	; (80081b8 <inc_lock+0x118>)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	4413      	add	r3, r2
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d113      	bne.n	80080ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80080c2:	4a3d      	ldr	r2, [pc, #244]	; (80081b8 <inc_lock+0x118>)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	011b      	lsls	r3, r3, #4
 80080c8:	4413      	add	r3, r2
 80080ca:	3304      	adds	r3, #4
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d109      	bne.n	80080ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80080d6:	4a38      	ldr	r2, [pc, #224]	; (80081b8 <inc_lock+0x118>)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	4413      	add	r3, r2
 80080de:	3308      	adds	r3, #8
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d006      	beq.n	80080f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d9dc      	bls.n	80080b0 <inc_lock+0x10>
 80080f6:	e000      	b.n	80080fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80080f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d132      	bne.n	8008166 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e002      	b.n	800810c <inc_lock+0x6c>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d806      	bhi.n	8008120 <inc_lock+0x80>
 8008112:	4a29      	ldr	r2, [pc, #164]	; (80081b8 <inc_lock+0x118>)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	011b      	lsls	r3, r3, #4
 8008118:	4413      	add	r3, r2
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1f2      	bne.n	8008106 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d101      	bne.n	800812a <inc_lock+0x8a>
 8008126:	2300      	movs	r3, #0
 8008128:	e040      	b.n	80081ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4922      	ldr	r1, [pc, #136]	; (80081b8 <inc_lock+0x118>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	440b      	add	r3, r1
 8008136:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	491e      	ldr	r1, [pc, #120]	; (80081b8 <inc_lock+0x118>)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	440b      	add	r3, r1
 8008144:	3304      	adds	r3, #4
 8008146:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	491a      	ldr	r1, [pc, #104]	; (80081b8 <inc_lock+0x118>)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	440b      	add	r3, r1
 8008154:	3308      	adds	r3, #8
 8008156:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008158:	4a17      	ldr	r2, [pc, #92]	; (80081b8 <inc_lock+0x118>)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	4413      	add	r3, r2
 8008160:	330c      	adds	r3, #12
 8008162:	2200      	movs	r2, #0
 8008164:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d009      	beq.n	8008180 <inc_lock+0xe0>
 800816c:	4a12      	ldr	r2, [pc, #72]	; (80081b8 <inc_lock+0x118>)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	4413      	add	r3, r2
 8008174:	330c      	adds	r3, #12
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <inc_lock+0xe0>
 800817c:	2300      	movs	r3, #0
 800817e:	e015      	b.n	80081ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d108      	bne.n	8008198 <inc_lock+0xf8>
 8008186:	4a0c      	ldr	r2, [pc, #48]	; (80081b8 <inc_lock+0x118>)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	4413      	add	r3, r2
 800818e:	330c      	adds	r3, #12
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	b29a      	uxth	r2, r3
 8008196:	e001      	b.n	800819c <inc_lock+0xfc>
 8008198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800819c:	4906      	ldr	r1, [pc, #24]	; (80081b8 <inc_lock+0x118>)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	440b      	add	r3, r1
 80081a4:	330c      	adds	r3, #12
 80081a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000aa8 	.word	0x20000aa8

080081bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d825      	bhi.n	800821c <dec_lock+0x60>
		n = Files[i].ctr;
 80081d0:	4a17      	ldr	r2, [pc, #92]	; (8008230 <dec_lock+0x74>)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	4413      	add	r3, r2
 80081d8:	330c      	adds	r3, #12
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80081de:	89fb      	ldrh	r3, [r7, #14]
 80081e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e4:	d101      	bne.n	80081ea <dec_lock+0x2e>
 80081e6:	2300      	movs	r3, #0
 80081e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80081ea:	89fb      	ldrh	r3, [r7, #14]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <dec_lock+0x3a>
 80081f0:	89fb      	ldrh	r3, [r7, #14]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80081f6:	4a0e      	ldr	r2, [pc, #56]	; (8008230 <dec_lock+0x74>)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	4413      	add	r3, r2
 80081fe:	330c      	adds	r3, #12
 8008200:	89fa      	ldrh	r2, [r7, #14]
 8008202:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008204:	89fb      	ldrh	r3, [r7, #14]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <dec_lock+0x5a>
 800820a:	4a09      	ldr	r2, [pc, #36]	; (8008230 <dec_lock+0x74>)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	4413      	add	r3, r2
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	737b      	strb	r3, [r7, #13]
 800821a:	e001      	b.n	8008220 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800821c:	2302      	movs	r3, #2
 800821e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008220:	7b7b      	ldrb	r3, [r7, #13]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20000aa8 	.word	0x20000aa8

08008234 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e010      	b.n	8008264 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008242:	4a0d      	ldr	r2, [pc, #52]	; (8008278 <clear_lock+0x44>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	4413      	add	r3, r2
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	429a      	cmp	r2, r3
 8008250:	d105      	bne.n	800825e <clear_lock+0x2a>
 8008252:	4a09      	ldr	r2, [pc, #36]	; (8008278 <clear_lock+0x44>)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	4413      	add	r3, r2
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d9eb      	bls.n	8008242 <clear_lock+0xe>
	}
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	20000aa8 	.word	0x20000aa8

0800827c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	78db      	ldrb	r3, [r3, #3]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d034      	beq.n	80082fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008294:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7858      	ldrb	r0, [r3, #1]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082a0:	2301      	movs	r3, #1
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	f7ff fd0e 	bl	8007cc4 <disk_write>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	73fb      	strb	r3, [r7, #15]
 80082b2:	e022      	b.n	80082fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	1ad2      	subs	r2, r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d217      	bcs.n	80082fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	789b      	ldrb	r3, [r3, #2]
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	e010      	b.n	80082f4 <sync_window+0x78>
					wsect += fs->fsize;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4413      	add	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7858      	ldrb	r0, [r3, #1]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082e6:	2301      	movs	r3, #1
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	f7ff fceb 	bl	8007cc4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d8eb      	bhi.n	80082d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d01b      	beq.n	8008354 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ffad 	bl	800827c <sync_window>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d113      	bne.n	8008354 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7858      	ldrb	r0, [r3, #1]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008336:	2301      	movs	r3, #1
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	f7ff fca3 	bl	8007c84 <disk_read>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008344:	f04f 33ff 	mov.w	r3, #4294967295
 8008348:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800834a:	2301      	movs	r3, #1
 800834c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff ff87 	bl	800827c <sync_window>
 800836e:	4603      	mov	r3, r0
 8008370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d158      	bne.n	800842a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d148      	bne.n	8008412 <sync_fs+0xb2>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	791b      	ldrb	r3, [r3, #4]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d144      	bne.n	8008412 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3334      	adds	r3, #52	; 0x34
 800838c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fd77 	bl	8007e86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3334      	adds	r3, #52	; 0x34
 800839c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80083a0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff fd06 	bl	8007db6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3334      	adds	r3, #52	; 0x34
 80083ae:	4921      	ldr	r1, [pc, #132]	; (8008434 <sync_fs+0xd4>)
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fd1b 	bl	8007dec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3334      	adds	r3, #52	; 0x34
 80083ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80083be:	491e      	ldr	r1, [pc, #120]	; (8008438 <sync_fs+0xd8>)
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fd13 	bl	8007dec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3334      	adds	r3, #52	; 0x34
 80083ca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f7ff fd09 	bl	8007dec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3334      	adds	r3, #52	; 0x34
 80083de:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7ff fcff 	bl	8007dec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	7858      	ldrb	r0, [r3, #1]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008406:	2301      	movs	r3, #1
 8008408:	f7ff fc5c 	bl	8007cc4 <disk_write>
			fs->fsi_flag = 0;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2200      	movs	r2, #0
 8008418:	2100      	movs	r1, #0
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fc72 	bl	8007d04 <disk_ioctl>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <sync_fs+0xca>
 8008426:	2301      	movs	r3, #1
 8008428:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800842a:	7bfb      	ldrb	r3, [r7, #15]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	41615252 	.word	0x41615252
 8008438:	61417272 	.word	0x61417272

0800843c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	3b02      	subs	r3, #2
 800844a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	3b02      	subs	r3, #2
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d301      	bcc.n	800845c <clust2sect+0x20>
 8008458:	2300      	movs	r3, #0
 800845a:	e008      	b.n	800846e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	895b      	ldrh	r3, [r3, #10]
 8008460:	461a      	mov	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	fb03 f202 	mul.w	r2, r3, r2
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	4413      	add	r3, r2
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d904      	bls.n	800849a <get_fat+0x20>
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800849a:	2301      	movs	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e08f      	b.n	80085c0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295
 80084a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d062      	beq.n	8008574 <get_fat+0xfa>
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	dc7c      	bgt.n	80085ac <get_fat+0x132>
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d002      	beq.n	80084bc <get_fat+0x42>
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d042      	beq.n	8008540 <get_fat+0xc6>
 80084ba:	e077      	b.n	80085ac <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	0a5b      	lsrs	r3, r3, #9
 80084d2:	4413      	add	r3, r2
 80084d4:	4619      	mov	r1, r3
 80084d6:	6938      	ldr	r0, [r7, #16]
 80084d8:	f7ff ff14 	bl	8008304 <move_window>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d167      	bne.n	80085b2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	60fa      	str	r2, [r7, #12]
 80084e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4413      	add	r3, r2
 80084f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	0a5b      	lsrs	r3, r3, #9
 80084fe:	4413      	add	r3, r2
 8008500:	4619      	mov	r1, r3
 8008502:	6938      	ldr	r0, [r7, #16]
 8008504:	f7ff fefe 	bl	8008304 <move_window>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d153      	bne.n	80085b6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	4413      	add	r3, r2
 8008518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	461a      	mov	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4313      	orrs	r3, r2
 8008524:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <get_fat+0xbc>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	091b      	lsrs	r3, r3, #4
 8008534:	e002      	b.n	800853c <get_fat+0xc2>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800853c:	617b      	str	r3, [r7, #20]
			break;
 800853e:	e03f      	b.n	80085c0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	4413      	add	r3, r2
 800854a:	4619      	mov	r1, r3
 800854c:	6938      	ldr	r0, [r7, #16]
 800854e:	f7ff fed9 	bl	8008304 <move_window>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d130      	bne.n	80085ba <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008566:	4413      	add	r3, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fbe9 	bl	8007d40 <ld_word>
 800856e:	4603      	mov	r3, r0
 8008570:	617b      	str	r3, [r7, #20]
			break;
 8008572:	e025      	b.n	80085c0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	09db      	lsrs	r3, r3, #7
 800857c:	4413      	add	r3, r2
 800857e:	4619      	mov	r1, r3
 8008580:	6938      	ldr	r0, [r7, #16]
 8008582:	f7ff febf 	bl	8008304 <move_window>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d118      	bne.n	80085be <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800859a:	4413      	add	r3, r2
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fbe7 	bl	8007d70 <ld_dword>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80085a8:	617b      	str	r3, [r7, #20]
			break;
 80085aa:	e009      	b.n	80085c0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80085ac:	2301      	movs	r3, #1
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	e006      	b.n	80085c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085b2:	bf00      	nop
 80085b4:	e004      	b.n	80085c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085b6:	bf00      	nop
 80085b8:	e002      	b.n	80085c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085be:	bf00      	nop
		}
	}

	return val;
 80085c0:	697b      	ldr	r3, [r7, #20]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80085ca:	b590      	push	{r4, r7, lr}
 80085cc:	b089      	sub	sp, #36	; 0x24
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80085d6:	2302      	movs	r3, #2
 80085d8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	f240 80d9 	bls.w	8008794 <put_fat+0x1ca>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	f080 80d3 	bcs.w	8008794 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	f000 8096 	beq.w	8008724 <put_fat+0x15a>
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	f300 80cb 	bgt.w	8008794 <put_fat+0x1ca>
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d002      	beq.n	8008608 <put_fat+0x3e>
 8008602:	2b02      	cmp	r3, #2
 8008604:	d06e      	beq.n	80086e4 <put_fat+0x11a>
 8008606:	e0c5      	b.n	8008794 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	4413      	add	r3, r2
 8008614:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	0a5b      	lsrs	r3, r3, #9
 800861e:	4413      	add	r3, r2
 8008620:	4619      	mov	r1, r3
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff fe6e 	bl	8008304 <move_window>
 8008628:	4603      	mov	r3, r0
 800862a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800862c:	7ffb      	ldrb	r3, [r7, #31]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f040 80a9 	bne.w	8008786 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	1c59      	adds	r1, r3, #1
 800863e:	61b9      	str	r1, [r7, #24]
 8008640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008644:	4413      	add	r3, r2
 8008646:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00d      	beq.n	800866e <put_fat+0xa4>
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b25b      	sxtb	r3, r3
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	b25a      	sxtb	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	b2db      	uxtb	r3, r3
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	b25b      	sxtb	r3, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	b25b      	sxtb	r3, r3
 800866a:	b2db      	uxtb	r3, r3
 800866c:	e001      	b.n	8008672 <put_fat+0xa8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	0a5b      	lsrs	r3, r3, #9
 8008684:	4413      	add	r3, r2
 8008686:	4619      	mov	r1, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f7ff fe3b 	bl	8008304 <move_window>
 800868e:	4603      	mov	r3, r0
 8008690:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008692:	7ffb      	ldrb	r3, [r7, #31]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d178      	bne.n	800878a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a4:	4413      	add	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <put_fat+0xf0>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	091b      	lsrs	r3, r3, #4
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	e00e      	b.n	80086d8 <put_fat+0x10e>
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	b25b      	sxtb	r3, r3
 80086c0:	f023 030f 	bic.w	r3, r3, #15
 80086c4:	b25a      	sxtb	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	b25b      	sxtb	r3, r3
 80086cc:	f003 030f 	and.w	r3, r3, #15
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	4313      	orrs	r3, r2
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	70da      	strb	r2, [r3, #3]
			break;
 80086e2:	e057      	b.n	8008794 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	4413      	add	r3, r2
 80086ee:	4619      	mov	r1, r3
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fe07 	bl	8008304 <move_window>
 80086f6:	4603      	mov	r3, r0
 80086f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086fa:	7ffb      	ldrb	r3, [r7, #31]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d146      	bne.n	800878e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800870e:	4413      	add	r3, r2
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	b292      	uxth	r2, r2
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fb4d 	bl	8007db6 <st_word>
			fs->wflag = 1;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2201      	movs	r2, #1
 8008720:	70da      	strb	r2, [r3, #3]
			break;
 8008722:	e037      	b.n	8008794 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	09db      	lsrs	r3, r3, #7
 800872c:	4413      	add	r3, r2
 800872e:	4619      	mov	r1, r3
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff fde7 	bl	8008304 <move_window>
 8008736:	4603      	mov	r3, r0
 8008738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800873a:	7ffb      	ldrb	r3, [r7, #31]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d128      	bne.n	8008792 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008754:	4413      	add	r3, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff fb0a 	bl	8007d70 <ld_dword>
 800875c:	4603      	mov	r3, r0
 800875e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008762:	4323      	orrs	r3, r4
 8008764:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008774:	4413      	add	r3, r2
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fb37 	bl	8007dec <st_dword>
			fs->wflag = 1;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	70da      	strb	r2, [r3, #3]
			break;
 8008784:	e006      	b.n	8008794 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008786:	bf00      	nop
 8008788:	e004      	b.n	8008794 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800878a:	bf00      	nop
 800878c:	e002      	b.n	8008794 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800878e:	bf00      	nop
 8008790:	e000      	b.n	8008794 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008792:	bf00      	nop
		}
	}
	return res;
 8008794:	7ffb      	ldrb	r3, [r7, #31]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3724      	adds	r7, #36	; 0x24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd90      	pop	{r4, r7, pc}

0800879e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b088      	sub	sp, #32
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d904      	bls.n	80087c4 <remove_chain+0x26>
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d301      	bcc.n	80087c8 <remove_chain+0x2a>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e04b      	b.n	8008860 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00c      	beq.n	80087e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	69b8      	ldr	r0, [r7, #24]
 80087d6:	f7ff fef8 	bl	80085ca <put_fat>
 80087da:	4603      	mov	r3, r0
 80087dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80087de:	7ffb      	ldrb	r3, [r7, #31]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <remove_chain+0x4a>
 80087e4:	7ffb      	ldrb	r3, [r7, #31]
 80087e6:	e03b      	b.n	8008860 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fe45 	bl	800847a <get_fat>
 80087f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d031      	beq.n	800885c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <remove_chain+0x64>
 80087fe:	2302      	movs	r3, #2
 8008800:	e02e      	b.n	8008860 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d101      	bne.n	800880e <remove_chain+0x70>
 800880a:	2301      	movs	r3, #1
 800880c:	e028      	b.n	8008860 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800880e:	2200      	movs	r2, #0
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	69b8      	ldr	r0, [r7, #24]
 8008814:	f7ff fed9 	bl	80085ca <put_fat>
 8008818:	4603      	mov	r3, r0
 800881a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800881c:	7ffb      	ldrb	r3, [r7, #31]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <remove_chain+0x88>
 8008822:	7ffb      	ldrb	r3, [r7, #31]
 8008824:	e01c      	b.n	8008860 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	695a      	ldr	r2, [r3, #20]
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	3b02      	subs	r3, #2
 8008830:	429a      	cmp	r2, r3
 8008832:	d20b      	bcs.n	800884c <remove_chain+0xae>
			fs->free_clst++;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	791b      	ldrb	r3, [r3, #4]
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	b2da      	uxtb	r2, r3
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	429a      	cmp	r2, r3
 8008858:	d3c6      	bcc.n	80087e8 <remove_chain+0x4a>
 800885a:	e000      	b.n	800885e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800885c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10d      	bne.n	800889a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d004      	beq.n	8008894 <create_chain+0x2c>
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	429a      	cmp	r2, r3
 8008892:	d31b      	bcc.n	80088cc <create_chain+0x64>
 8008894:	2301      	movs	r3, #1
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	e018      	b.n	80088cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff fdec 	bl	800847a <get_fat>
 80088a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d801      	bhi.n	80088ae <create_chain+0x46>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e070      	b.n	8008990 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d101      	bne.n	80088ba <create_chain+0x52>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	e06a      	b.n	8008990 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d201      	bcs.n	80088c8 <create_chain+0x60>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	e063      	b.n	8008990 <create_chain+0x128>
		scl = clst;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	3301      	adds	r3, #1
 80088d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d307      	bcc.n	80088f0 <create_chain+0x88>
				ncl = 2;
 80088e0:	2302      	movs	r3, #2
 80088e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d901      	bls.n	80088f0 <create_chain+0x88>
 80088ec:	2300      	movs	r3, #0
 80088ee:	e04f      	b.n	8008990 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80088f0:	69f9      	ldr	r1, [r7, #28]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff fdc1 	bl	800847a <get_fat>
 80088f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00e      	beq.n	800891e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d003      	beq.n	800890e <create_chain+0xa6>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890c:	d101      	bne.n	8008912 <create_chain+0xaa>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	e03e      	b.n	8008990 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	429a      	cmp	r2, r3
 8008918:	d1da      	bne.n	80088d0 <create_chain+0x68>
 800891a:	2300      	movs	r3, #0
 800891c:	e038      	b.n	8008990 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800891e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008920:	f04f 32ff 	mov.w	r2, #4294967295
 8008924:	69f9      	ldr	r1, [r7, #28]
 8008926:	6938      	ldr	r0, [r7, #16]
 8008928:	f7ff fe4f 	bl	80085ca <put_fat>
 800892c:	4603      	mov	r3, r0
 800892e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <create_chain+0xe2>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d006      	beq.n	800894a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6938      	ldr	r0, [r7, #16]
 8008942:	f7ff fe42 	bl	80085ca <put_fat>
 8008946:	4603      	mov	r3, r0
 8008948:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d116      	bne.n	800897e <create_chain+0x116>
		fs->last_clst = ncl;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	695a      	ldr	r2, [r3, #20]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	3b02      	subs	r3, #2
 8008960:	429a      	cmp	r2, r3
 8008962:	d804      	bhi.n	800896e <create_chain+0x106>
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	1e5a      	subs	r2, r3, #1
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	791b      	ldrb	r3, [r3, #4]
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	b2da      	uxtb	r2, r3
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	711a      	strb	r2, [r3, #4]
 800897c:	e007      	b.n	800898e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d102      	bne.n	800898a <create_chain+0x122>
 8008984:	f04f 33ff 	mov.w	r3, #4294967295
 8008988:	e000      	b.n	800898c <create_chain+0x124>
 800898a:	2301      	movs	r3, #1
 800898c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800898e:	69fb      	ldr	r3, [r7, #28]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	3304      	adds	r3, #4
 80089ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	0a5b      	lsrs	r3, r3, #9
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	8952      	ldrh	r2, [r2, #10]
 80089b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1d1a      	adds	r2, r3, #4
 80089c2:	613a      	str	r2, [r7, #16]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <clmt_clust+0x3a>
 80089ce:	2300      	movs	r3, #0
 80089d0:	e010      	b.n	80089f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d307      	bcc.n	80089ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	3304      	adds	r3, #4
 80089e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089e8:	e7e9      	b.n	80089be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80089ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	4413      	add	r3, r2
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a16:	d204      	bcs.n	8008a22 <dir_sdi+0x22>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f003 031f 	and.w	r3, r3, #31
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a22:	2302      	movs	r3, #2
 8008a24:	e063      	b.n	8008aee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d106      	bne.n	8008a46 <dir_sdi+0x46>
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d902      	bls.n	8008a46 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10c      	bne.n	8008a66 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	095b      	lsrs	r3, r3, #5
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	8912      	ldrh	r2, [r2, #8]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d301      	bcc.n	8008a5c <dir_sdi+0x5c>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e048      	b.n	8008aee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	61da      	str	r2, [r3, #28]
 8008a64:	e029      	b.n	8008aba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	895b      	ldrh	r3, [r3, #10]
 8008a6a:	025b      	lsls	r3, r3, #9
 8008a6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a6e:	e019      	b.n	8008aa4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6979      	ldr	r1, [r7, #20]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff fd00 	bl	800847a <get_fat>
 8008a7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d101      	bne.n	8008a88 <dir_sdi+0x88>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e032      	b.n	8008aee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d904      	bls.n	8008a98 <dir_sdi+0x98>
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d301      	bcc.n	8008a9c <dir_sdi+0x9c>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e028      	b.n	8008aee <dir_sdi+0xee>
			ofs -= csz;
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d2e1      	bcs.n	8008a70 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008aac:	6979      	ldr	r1, [r7, #20]
 8008aae:	6938      	ldr	r0, [r7, #16]
 8008ab0:	f7ff fcc4 	bl	800843c <clust2sect>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <dir_sdi+0xcc>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e010      	b.n	8008aee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	69da      	ldr	r2, [r3, #28]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	0a5b      	lsrs	r3, r3, #9
 8008ad4:	441a      	add	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	441a      	add	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b086      	sub	sp, #24
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	3320      	adds	r3, #32
 8008b0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <dir_next+0x28>
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b1c:	d301      	bcc.n	8008b22 <dir_next+0x2c>
 8008b1e:	2304      	movs	r3, #4
 8008b20:	e0aa      	b.n	8008c78 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f040 8098 	bne.w	8008c5e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10b      	bne.n	8008b58 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	095b      	lsrs	r3, r3, #5
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	8912      	ldrh	r2, [r2, #8]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	f0c0 8088 	bcc.w	8008c5e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	61da      	str	r2, [r3, #28]
 8008b54:	2304      	movs	r3, #4
 8008b56:	e08f      	b.n	8008c78 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	0a5b      	lsrs	r3, r3, #9
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	8952      	ldrh	r2, [r2, #10]
 8008b60:	3a01      	subs	r2, #1
 8008b62:	4013      	ands	r3, r2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d17a      	bne.n	8008c5e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f7ff fc82 	bl	800847a <get_fat>
 8008b76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d801      	bhi.n	8008b82 <dir_next+0x8c>
 8008b7e:	2302      	movs	r3, #2
 8008b80:	e07a      	b.n	8008c78 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b88:	d101      	bne.n	8008b8e <dir_next+0x98>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e074      	b.n	8008c78 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d358      	bcc.n	8008c4a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d104      	bne.n	8008ba8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	61da      	str	r2, [r3, #28]
 8008ba4:	2304      	movs	r3, #4
 8008ba6:	e067      	b.n	8008c78 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7ff fe59 	bl	8008868 <create_chain>
 8008bb6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <dir_next+0xcc>
 8008bbe:	2307      	movs	r3, #7
 8008bc0:	e05a      	b.n	8008c78 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d101      	bne.n	8008bcc <dir_next+0xd6>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	e055      	b.n	8008c78 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d101      	bne.n	8008bd8 <dir_next+0xe2>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e04f      	b.n	8008c78 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff fb4f 	bl	800827c <sync_window>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <dir_next+0xf2>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e047      	b.n	8008c78 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3334      	adds	r3, #52	; 0x34
 8008bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff f947 	bl	8007e86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	613b      	str	r3, [r7, #16]
 8008bfc:	6979      	ldr	r1, [r7, #20]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff fc1c 	bl	800843c <clust2sect>
 8008c04:	4602      	mov	r2, r0
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30
 8008c0a:	e012      	b.n	8008c32 <dir_next+0x13c>
						fs->wflag = 1;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff fb32 	bl	800827c <sync_window>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <dir_next+0x12c>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e02a      	b.n	8008c78 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	3301      	adds	r3, #1
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	895b      	ldrh	r3, [r3, #10]
 8008c36:	461a      	mov	r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d3e6      	bcc.n	8008c0c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	1ad2      	subs	r2, r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008c50:	6979      	ldr	r1, [r7, #20]
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f7ff fbf2 	bl	800843c <clust2sect>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c70:	441a      	add	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c90:	2100      	movs	r1, #0
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff feb4 	bl	8008a00 <dir_sdi>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d12b      	bne.n	8008cfa <dir_alloc+0x7a>
		n = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	4619      	mov	r1, r3
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff fb29 	bl	8008304 <move_window>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d11d      	bne.n	8008cf8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2be5      	cmp	r3, #229	; 0xe5
 8008cc4:	d004      	beq.n	8008cd0 <dir_alloc+0x50>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d107      	bne.n	8008ce0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d102      	bne.n	8008ce4 <dir_alloc+0x64>
 8008cde:	e00c      	b.n	8008cfa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff ff05 	bl	8008af6 <dir_next>
 8008cec:	4603      	mov	r3, r0
 8008cee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0d7      	beq.n	8008ca6 <dir_alloc+0x26>
 8008cf6:	e000      	b.n	8008cfa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008cf8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d101      	bne.n	8008d04 <dir_alloc+0x84>
 8008d00:	2307      	movs	r3, #7
 8008d02:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	331a      	adds	r3, #26
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff f80f 	bl	8007d40 <ld_word>
 8008d22:	4603      	mov	r3, r0
 8008d24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d109      	bne.n	8008d42 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff f804 	bl	8007d40 <ld_word>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	041b      	lsls	r3, r3, #16
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008d42:	68fb      	ldr	r3, [r7, #12]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	331a      	adds	r3, #26
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff f827 	bl	8007db6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d109      	bne.n	8008d84 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f103 0214 	add.w	r2, r3, #20
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	0c1b      	lsrs	r3, r3, #16
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f7ff f819 	bl	8007db6 <st_word>
	}
}
 8008d84:	bf00      	nop
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff fe2f 	bl	8008a00 <dir_sdi>
 8008da2:	4603      	mov	r3, r0
 8008da4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <dir_find+0x24>
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	e03e      	b.n	8008e2e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	4619      	mov	r1, r3
 8008db6:	6938      	ldr	r0, [r7, #16]
 8008db8:	f7ff faa4 	bl	8008304 <move_window>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d12f      	bne.n	8008e26 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <dir_find+0x4e>
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	75fb      	strb	r3, [r7, #23]
 8008dd8:	e028      	b.n	8008e2c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	330b      	adds	r3, #11
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	330b      	adds	r3, #11
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <dir_find+0x86>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a18      	ldr	r0, [r3, #32]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3324      	adds	r3, #36	; 0x24
 8008e04:	220b      	movs	r2, #11
 8008e06:	4619      	mov	r1, r3
 8008e08:	f7ff f858 	bl	8007ebc <mem_cmp>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008e12:	2100      	movs	r1, #0
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fe6e 	bl	8008af6 <dir_next>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0c5      	beq.n	8008db0 <dir_find+0x24>
 8008e24:	e002      	b.n	8008e2c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008e26:	bf00      	nop
 8008e28:	e000      	b.n	8008e2c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e2a:	bf00      	nop

	return res;
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008e44:	2101      	movs	r1, #1
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff ff1a 	bl	8008c80 <dir_alloc>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d11c      	bne.n	8008e90 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68b8      	ldr	r0, [r7, #8]
 8008e5e:	f7ff fa51 	bl	8008304 <move_window>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d111      	bne.n	8008e90 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	2220      	movs	r2, #32
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff f806 	bl	8007e86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a18      	ldr	r0, [r3, #32]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3324      	adds	r3, #36	; 0x24
 8008e82:	220b      	movs	r2, #11
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7fe ffdd 	bl	8007e44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3324      	adds	r3, #36	; 0x24
 8008eb0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008eb2:	220b      	movs	r2, #11
 8008eb4:	2120      	movs	r1, #32
 8008eb6:	68b8      	ldr	r0, [r7, #8]
 8008eb8:	f7fe ffe5 	bl	8007e86 <mem_set>
	si = i = 0; ni = 8;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	613b      	str	r3, [r7, #16]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	61fb      	str	r3, [r7, #28]
 8008ec4:	2308      	movs	r3, #8
 8008ec6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	61fa      	str	r2, [r7, #28]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ed6:	7efb      	ldrb	r3, [r7, #27]
 8008ed8:	2b20      	cmp	r3, #32
 8008eda:	d94e      	bls.n	8008f7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008edc:	7efb      	ldrb	r3, [r7, #27]
 8008ede:	2b2f      	cmp	r3, #47	; 0x2f
 8008ee0:	d006      	beq.n	8008ef0 <create_name+0x54>
 8008ee2:	7efb      	ldrb	r3, [r7, #27]
 8008ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8008ee6:	d110      	bne.n	8008f0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008ee8:	e002      	b.n	8008ef0 <create_name+0x54>
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	3301      	adds	r3, #1
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8008efa:	d0f6      	beq.n	8008eea <create_name+0x4e>
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	4413      	add	r3, r2
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b5c      	cmp	r3, #92	; 0x5c
 8008f06:	d0f0      	beq.n	8008eea <create_name+0x4e>
			break;
 8008f08:	e038      	b.n	8008f7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008f0a:	7efb      	ldrb	r3, [r7, #27]
 8008f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f0e:	d003      	beq.n	8008f18 <create_name+0x7c>
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d30c      	bcc.n	8008f32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2b0b      	cmp	r3, #11
 8008f1c:	d002      	beq.n	8008f24 <create_name+0x88>
 8008f1e:	7efb      	ldrb	r3, [r7, #27]
 8008f20:	2b2e      	cmp	r3, #46	; 0x2e
 8008f22:	d001      	beq.n	8008f28 <create_name+0x8c>
 8008f24:	2306      	movs	r3, #6
 8008f26:	e044      	b.n	8008fb2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008f28:	2308      	movs	r3, #8
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	230b      	movs	r3, #11
 8008f2e:	617b      	str	r3, [r7, #20]
			continue;
 8008f30:	e022      	b.n	8008f78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008f32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da04      	bge.n	8008f44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008f3a:	7efb      	ldrb	r3, [r7, #27]
 8008f3c:	3b80      	subs	r3, #128	; 0x80
 8008f3e:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <create_name+0x120>)
 8008f40:	5cd3      	ldrb	r3, [r2, r3]
 8008f42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008f44:	7efb      	ldrb	r3, [r7, #27]
 8008f46:	4619      	mov	r1, r3
 8008f48:	481d      	ldr	r0, [pc, #116]	; (8008fc0 <create_name+0x124>)
 8008f4a:	f7fe ffde 	bl	8007f0a <chk_chr>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <create_name+0xbc>
 8008f54:	2306      	movs	r3, #6
 8008f56:	e02c      	b.n	8008fb2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008f58:	7efb      	ldrb	r3, [r7, #27]
 8008f5a:	2b60      	cmp	r3, #96	; 0x60
 8008f5c:	d905      	bls.n	8008f6a <create_name+0xce>
 8008f5e:	7efb      	ldrb	r3, [r7, #27]
 8008f60:	2b7a      	cmp	r3, #122	; 0x7a
 8008f62:	d802      	bhi.n	8008f6a <create_name+0xce>
 8008f64:	7efb      	ldrb	r3, [r7, #27]
 8008f66:	3b20      	subs	r3, #32
 8008f68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	613a      	str	r2, [r7, #16]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	4413      	add	r3, r2
 8008f74:	7efa      	ldrb	r2, [r7, #27]
 8008f76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008f78:	e7a6      	b.n	8008ec8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	441a      	add	r2, r3
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <create_name+0xf4>
 8008f8c:	2306      	movs	r3, #6
 8008f8e:	e010      	b.n	8008fb2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2be5      	cmp	r3, #229	; 0xe5
 8008f96:	d102      	bne.n	8008f9e <create_name+0x102>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2205      	movs	r2, #5
 8008f9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f9e:	7efb      	ldrb	r3, [r7, #27]
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d801      	bhi.n	8008fa8 <create_name+0x10c>
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	e000      	b.n	8008faa <create_name+0x10e>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	330b      	adds	r3, #11
 8008fae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008fb0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3720      	adds	r7, #32
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	08011064 	.word	0x08011064
 8008fc0:	08010f00 	.word	0x08010f00

08008fc4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008fd8:	e002      	b.n	8008fe0 <follow_path+0x1c>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b2f      	cmp	r3, #47	; 0x2f
 8008fe6:	d0f8      	beq.n	8008fda <follow_path+0x16>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b5c      	cmp	r3, #92	; 0x5c
 8008fee:	d0f4      	beq.n	8008fda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b1f      	cmp	r3, #31
 8008ffc:	d80a      	bhi.n	8009014 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2280      	movs	r2, #128	; 0x80
 8009002:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009006:	2100      	movs	r1, #0
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fcf9 	bl	8008a00 <dir_sdi>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]
 8009012:	e043      	b.n	800909c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009014:	463b      	mov	r3, r7
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff ff3f 	bl	8008e9c <create_name>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d134      	bne.n	8009092 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff feaf 	bl	8008d8c <dir_find>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009038:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	2b04      	cmp	r3, #4
 8009044:	d127      	bne.n	8009096 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009046:	7afb      	ldrb	r3, [r7, #11]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d122      	bne.n	8009096 <follow_path+0xd2>
 8009050:	2305      	movs	r3, #5
 8009052:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009054:	e01f      	b.n	8009096 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009056:	7afb      	ldrb	r3, [r7, #11]
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11c      	bne.n	800909a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	799b      	ldrb	r3, [r3, #6]
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800906c:	2305      	movs	r3, #5
 800906e:	75fb      	strb	r3, [r7, #23]
 8009070:	e014      	b.n	800909c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009080:	4413      	add	r3, r2
 8009082:	4619      	mov	r1, r3
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff fe42 	bl	8008d0e <ld_clust>
 800908a:	4602      	mov	r2, r0
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009090:	e7c0      	b.n	8009014 <follow_path+0x50>
			if (res != FR_OK) break;
 8009092:	bf00      	nop
 8009094:	e002      	b.n	800909c <follow_path+0xd8>
				break;
 8009096:	bf00      	nop
 8009098:	e000      	b.n	800909c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800909a:	bf00      	nop
			}
		}
	}

	return res;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b087      	sub	sp, #28
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295
 80090b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d031      	beq.n	8009120 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e002      	b.n	80090ca <get_ldnumber+0x24>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	3301      	adds	r3, #1
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	d903      	bls.n	80090da <get_ldnumber+0x34>
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b3a      	cmp	r3, #58	; 0x3a
 80090d8:	d1f4      	bne.n	80090c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b3a      	cmp	r3, #58	; 0x3a
 80090e0:	d11c      	bne.n	800911c <get_ldnumber+0x76>
			tp = *path;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	60fa      	str	r2, [r7, #12]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	3b30      	subs	r3, #48	; 0x30
 80090f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d80e      	bhi.n	8009118 <get_ldnumber+0x72>
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d10a      	bne.n	8009118 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d107      	bne.n	8009118 <get_ldnumber+0x72>
					vol = (int)i;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	3301      	adds	r3, #1
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	e002      	b.n	8009122 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800911c:	2300      	movs	r3, #0
 800911e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009120:	693b      	ldr	r3, [r7, #16]
}
 8009122:	4618      	mov	r0, r3
 8009124:	371c      	adds	r7, #28
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
	...

08009130 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	70da      	strb	r2, [r3, #3]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f04f 32ff 	mov.w	r2, #4294967295
 8009146:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff f8da 	bl	8008304 <move_window>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <check_fs+0x2a>
 8009156:	2304      	movs	r3, #4
 8009158:	e038      	b.n	80091cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3334      	adds	r3, #52	; 0x34
 800915e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fdec 	bl	8007d40 <ld_word>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009170:	429a      	cmp	r2, r3
 8009172:	d001      	beq.n	8009178 <check_fs+0x48>
 8009174:	2303      	movs	r3, #3
 8009176:	e029      	b.n	80091cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800917e:	2be9      	cmp	r3, #233	; 0xe9
 8009180:	d009      	beq.n	8009196 <check_fs+0x66>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009188:	2beb      	cmp	r3, #235	; 0xeb
 800918a:	d11e      	bne.n	80091ca <check_fs+0x9a>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009192:	2b90      	cmp	r3, #144	; 0x90
 8009194:	d119      	bne.n	80091ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3334      	adds	r3, #52	; 0x34
 800919a:	3336      	adds	r3, #54	; 0x36
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe fde7 	bl	8007d70 <ld_dword>
 80091a2:	4603      	mov	r3, r0
 80091a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091a8:	4a0a      	ldr	r2, [pc, #40]	; (80091d4 <check_fs+0xa4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d101      	bne.n	80091b2 <check_fs+0x82>
 80091ae:	2300      	movs	r3, #0
 80091b0:	e00c      	b.n	80091cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3334      	adds	r3, #52	; 0x34
 80091b6:	3352      	adds	r3, #82	; 0x52
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe fdd9 	bl	8007d70 <ld_dword>
 80091be:	4603      	mov	r3, r0
 80091c0:	4a05      	ldr	r2, [pc, #20]	; (80091d8 <check_fs+0xa8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d101      	bne.n	80091ca <check_fs+0x9a>
 80091c6:	2300      	movs	r3, #0
 80091c8:	e000      	b.n	80091cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80091ca:	2302      	movs	r3, #2
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	00544146 	.word	0x00544146
 80091d8:	33544146 	.word	0x33544146

080091dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b096      	sub	sp, #88	; 0x58
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2200      	movs	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7ff ff58 	bl	80090a6 <get_ldnumber>
 80091f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80091f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da01      	bge.n	8009202 <find_volume+0x26>
 80091fe:	230b      	movs	r3, #11
 8009200:	e235      	b.n	800966e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009202:	4aa5      	ldr	r2, [pc, #660]	; (8009498 <find_volume+0x2bc>)
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800920a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <find_volume+0x3a>
 8009212:	230c      	movs	r3, #12
 8009214:	e22b      	b.n	800966e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009216:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009218:	f7fe fe92 	bl	8007f40 <lock_fs>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <find_volume+0x4a>
 8009222:	230f      	movs	r3, #15
 8009224:	e223      	b.n	800966e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800922a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01a      	beq.n	8009272 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	785b      	ldrb	r3, [r3, #1]
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe fcdf 	bl	8007c04 <disk_status>
 8009246:	4603      	mov	r3, r0
 8009248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800924c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10c      	bne.n	8009272 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <find_volume+0x92>
 800925e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800926a:	230a      	movs	r3, #10
 800926c:	e1ff      	b.n	800966e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800926e:	2300      	movs	r3, #0
 8009270:	e1fd      	b.n	800966e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927a:	b2da      	uxtb	r2, r3
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	785b      	ldrb	r3, [r3, #1]
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe fcd7 	bl	8007c38 <disk_initialize>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800929c:	2303      	movs	r3, #3
 800929e:	e1e6      	b.n	800966e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d007      	beq.n	80092b6 <find_volume+0xda>
 80092a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80092b2:	230a      	movs	r3, #10
 80092b4:	e1db      	b.n	800966e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80092ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092be:	f7ff ff37 	bl	8009130 <check_fs>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80092c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d149      	bne.n	8009364 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80092d0:	2300      	movs	r3, #0
 80092d2:	643b      	str	r3, [r7, #64]	; 0x40
 80092d4:	e01e      	b.n	8009314 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80092dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80092e4:	4413      	add	r3, r2
 80092e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	3304      	adds	r3, #4
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d006      	beq.n	8009300 <find_volume+0x124>
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	3308      	adds	r3, #8
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fd3a 	bl	8007d70 <ld_dword>
 80092fc:	4602      	mov	r2, r0
 80092fe:	e000      	b.n	8009302 <find_volume+0x126>
 8009300:	2200      	movs	r2, #0
 8009302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	3358      	adds	r3, #88	; 0x58
 8009308:	443b      	add	r3, r7
 800930a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800930e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009310:	3301      	adds	r3, #1
 8009312:	643b      	str	r3, [r7, #64]	; 0x40
 8009314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009316:	2b03      	cmp	r3, #3
 8009318:	d9dd      	bls.n	80092d6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800931a:	2300      	movs	r3, #0
 800931c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800931e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <find_volume+0x14e>
 8009324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009326:	3b01      	subs	r3, #1
 8009328:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	3358      	adds	r3, #88	; 0x58
 8009330:	443b      	add	r3, r7
 8009332:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009336:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <find_volume+0x16e>
 800933e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009342:	f7ff fef5 	bl	8009130 <check_fs>
 8009346:	4603      	mov	r3, r0
 8009348:	e000      	b.n	800934c <find_volume+0x170>
 800934a:	2303      	movs	r3, #3
 800934c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009354:	2b01      	cmp	r3, #1
 8009356:	d905      	bls.n	8009364 <find_volume+0x188>
 8009358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800935a:	3301      	adds	r3, #1
 800935c:	643b      	str	r3, [r7, #64]	; 0x40
 800935e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009360:	2b03      	cmp	r3, #3
 8009362:	d9e2      	bls.n	800932a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009368:	2b04      	cmp	r3, #4
 800936a:	d101      	bne.n	8009370 <find_volume+0x194>
 800936c:	2301      	movs	r3, #1
 800936e:	e17e      	b.n	800966e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009374:	2b01      	cmp	r3, #1
 8009376:	d901      	bls.n	800937c <find_volume+0x1a0>
 8009378:	230d      	movs	r3, #13
 800937a:	e178      	b.n	800966e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	3334      	adds	r3, #52	; 0x34
 8009380:	330b      	adds	r3, #11
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fcdc 	bl	8007d40 <ld_word>
 8009388:	4603      	mov	r3, r0
 800938a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938e:	d001      	beq.n	8009394 <find_volume+0x1b8>
 8009390:	230d      	movs	r3, #13
 8009392:	e16c      	b.n	800966e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	3334      	adds	r3, #52	; 0x34
 8009398:	3316      	adds	r3, #22
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fcd0 	bl	8007d40 <ld_word>
 80093a0:	4603      	mov	r3, r0
 80093a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80093a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <find_volume+0x1dc>
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	3334      	adds	r3, #52	; 0x34
 80093ae:	3324      	adds	r3, #36	; 0x24
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe fcdd 	bl	8007d70 <ld_dword>
 80093b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	789b      	ldrb	r3, [r3, #2]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d005      	beq.n	80093dc <find_volume+0x200>
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	789b      	ldrb	r3, [r3, #2]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d001      	beq.n	80093dc <find_volume+0x200>
 80093d8:	230d      	movs	r3, #13
 80093da:	e148      	b.n	800966e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	789b      	ldrb	r3, [r3, #2]
 80093e0:	461a      	mov	r2, r3
 80093e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e4:	fb02 f303 	mul.w	r3, r2, r3
 80093e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	895b      	ldrh	r3, [r3, #10]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d008      	beq.n	8009410 <find_volume+0x234>
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	895b      	ldrh	r3, [r3, #10]
 8009402:	461a      	mov	r2, r3
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	895b      	ldrh	r3, [r3, #10]
 8009408:	3b01      	subs	r3, #1
 800940a:	4013      	ands	r3, r2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <find_volume+0x238>
 8009410:	230d      	movs	r3, #13
 8009412:	e12c      	b.n	800966e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	3334      	adds	r3, #52	; 0x34
 8009418:	3311      	adds	r3, #17
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe fc90 	bl	8007d40 <ld_word>
 8009420:	4603      	mov	r3, r0
 8009422:	461a      	mov	r2, r3
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	891b      	ldrh	r3, [r3, #8]
 800942c:	f003 030f 	and.w	r3, r3, #15
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <find_volume+0x25e>
 8009436:	230d      	movs	r3, #13
 8009438:	e119      	b.n	800966e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	3334      	adds	r3, #52	; 0x34
 800943e:	3313      	adds	r3, #19
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fc7d 	bl	8007d40 <ld_word>
 8009446:	4603      	mov	r3, r0
 8009448:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800944a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <find_volume+0x282>
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	3334      	adds	r3, #52	; 0x34
 8009454:	3320      	adds	r3, #32
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fc8a 	bl	8007d70 <ld_dword>
 800945c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	3334      	adds	r3, #52	; 0x34
 8009462:	330e      	adds	r3, #14
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe fc6b 	bl	8007d40 <ld_word>
 800946a:	4603      	mov	r3, r0
 800946c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800946e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <find_volume+0x29c>
 8009474:	230d      	movs	r3, #13
 8009476:	e0fa      	b.n	800966e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009478:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800947a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800947c:	4413      	add	r3, r2
 800947e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009480:	8912      	ldrh	r2, [r2, #8]
 8009482:	0912      	lsrs	r2, r2, #4
 8009484:	b292      	uxth	r2, r2
 8009486:	4413      	add	r3, r2
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800948a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	429a      	cmp	r2, r3
 8009490:	d204      	bcs.n	800949c <find_volume+0x2c0>
 8009492:	230d      	movs	r3, #13
 8009494:	e0eb      	b.n	800966e <find_volume+0x492>
 8009496:	bf00      	nop
 8009498:	20000aa0 	.word	0x20000aa0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800949c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a4:	8952      	ldrh	r2, [r2, #10]
 80094a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <find_volume+0x2da>
 80094b2:	230d      	movs	r3, #13
 80094b4:	e0db      	b.n	800966e <find_volume+0x492>
		fmt = FS_FAT32;
 80094b6:	2303      	movs	r3, #3
 80094b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d802      	bhi.n	80094cc <find_volume+0x2f0>
 80094c6:	2302      	movs	r3, #2
 80094c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d802      	bhi.n	80094dc <find_volume+0x300>
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	1c9a      	adds	r2, r3, #2
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094e8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80094ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80094ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ee:	441a      	add	r2, r3
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80094f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	441a      	add	r2, r3
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80094fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009502:	2b03      	cmp	r3, #3
 8009504:	d11e      	bne.n	8009544 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	3334      	adds	r3, #52	; 0x34
 800950a:	332a      	adds	r3, #42	; 0x2a
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe fc17 	bl	8007d40 <ld_word>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <find_volume+0x340>
 8009518:	230d      	movs	r3, #13
 800951a:	e0a8      	b.n	800966e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	891b      	ldrh	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <find_volume+0x34c>
 8009524:	230d      	movs	r3, #13
 8009526:	e0a2      	b.n	800966e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	3334      	adds	r3, #52	; 0x34
 800952c:	332c      	adds	r3, #44	; 0x2c
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fc1e 	bl	8007d70 <ld_dword>
 8009534:	4602      	mov	r2, r0
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
 8009542:	e01f      	b.n	8009584 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	891b      	ldrh	r3, [r3, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <find_volume+0x374>
 800954c:	230d      	movs	r3, #13
 800954e:	e08e      	b.n	800966e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009556:	441a      	add	r2, r3
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800955c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009560:	2b02      	cmp	r3, #2
 8009562:	d103      	bne.n	800956c <find_volume+0x390>
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	e00a      	b.n	8009582 <find_volume+0x3a6>
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	699a      	ldr	r2, [r3, #24]
 8009570:	4613      	mov	r3, r2
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	4413      	add	r3, r2
 8009576:	085a      	lsrs	r2, r3, #1
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009582:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800958e:	0a5b      	lsrs	r3, r3, #9
 8009590:	429a      	cmp	r2, r3
 8009592:	d201      	bcs.n	8009598 <find_volume+0x3bc>
 8009594:	230d      	movs	r3, #13
 8009596:	e06a      	b.n	800966e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	f04f 32ff 	mov.w	r2, #4294967295
 800959e:	615a      	str	r2, [r3, #20]
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	695a      	ldr	r2, [r3, #20]
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	2280      	movs	r2, #128	; 0x80
 80095ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80095ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d149      	bne.n	800964a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	3334      	adds	r3, #52	; 0x34
 80095ba:	3330      	adds	r3, #48	; 0x30
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fbbf 	bl	8007d40 <ld_word>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d140      	bne.n	800964a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80095c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ca:	3301      	adds	r3, #1
 80095cc:	4619      	mov	r1, r3
 80095ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095d0:	f7fe fe98 	bl	8008304 <move_window>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d137      	bne.n	800964a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	2200      	movs	r2, #0
 80095de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	3334      	adds	r3, #52	; 0x34
 80095e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe fba9 	bl	8007d40 <ld_word>
 80095ee:	4603      	mov	r3, r0
 80095f0:	461a      	mov	r2, r3
 80095f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d127      	bne.n	800964a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	3334      	adds	r3, #52	; 0x34
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fbb6 	bl	8007d70 <ld_dword>
 8009604:	4603      	mov	r3, r0
 8009606:	4a1c      	ldr	r2, [pc, #112]	; (8009678 <find_volume+0x49c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d11e      	bne.n	800964a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	3334      	adds	r3, #52	; 0x34
 8009610:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fbab 	bl	8007d70 <ld_dword>
 800961a:	4603      	mov	r3, r0
 800961c:	4a17      	ldr	r2, [pc, #92]	; (800967c <find_volume+0x4a0>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d113      	bne.n	800964a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	3334      	adds	r3, #52	; 0x34
 8009626:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fba0 	bl	8007d70 <ld_dword>
 8009630:	4602      	mov	r2, r0
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	3334      	adds	r3, #52	; 0x34
 800963a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fb96 	bl	8007d70 <ld_dword>
 8009644:	4602      	mov	r2, r0
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009650:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009652:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <find_volume+0x4a4>)
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	3301      	adds	r3, #1
 8009658:	b29a      	uxth	r2, r3
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <find_volume+0x4a4>)
 800965c:	801a      	strh	r2, [r3, #0]
 800965e:	4b08      	ldr	r3, [pc, #32]	; (8009680 <find_volume+0x4a4>)
 8009660:	881a      	ldrh	r2, [r3, #0]
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009666:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009668:	f7fe fde4 	bl	8008234 <clear_lock>
#endif
	return FR_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3758      	adds	r7, #88	; 0x58
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	41615252 	.word	0x41615252
 800967c:	61417272 	.word	0x61417272
 8009680:	20000aa4 	.word	0x20000aa4

08009684 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800968e:	2309      	movs	r3, #9
 8009690:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d02e      	beq.n	80096f6 <validate+0x72>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d02a      	beq.n	80096f6 <validate+0x72>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d025      	beq.n	80096f6 <validate+0x72>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	889a      	ldrh	r2, [r3, #4]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	88db      	ldrh	r3, [r3, #6]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d11e      	bne.n	80096f6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fc3f 	bl	8007f40 <lock_fs>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d014      	beq.n	80096f2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	785b      	ldrb	r3, [r3, #1]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fa98 	bl	8007c04 <disk_status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <validate+0x60>
				res = FR_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	e008      	b.n	80096f6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe fc3e 	bl	8007f6c <unlock_fs>
 80096f0:	e001      	b.n	80096f6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80096f2:	230f      	movs	r3, #15
 80096f4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d102      	bne.n	8009702 <validate+0x7e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	e000      	b.n	8009704 <validate+0x80>
 8009702:	2300      	movs	r3, #0
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	6013      	str	r3, [r2, #0]
	return res;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009726:	f107 0310 	add.w	r3, r7, #16
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fcbb 	bl	80090a6 <get_ldnumber>
 8009730:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	2b00      	cmp	r3, #0
 8009736:	da01      	bge.n	800973c <f_mount+0x28>
 8009738:	230b      	movs	r3, #11
 800973a:	e048      	b.n	80097ce <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800973c:	4a26      	ldr	r2, [pc, #152]	; (80097d8 <f_mount+0xc4>)
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009744:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00f      	beq.n	800976c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800974c:	69b8      	ldr	r0, [r7, #24]
 800974e:	f7fe fd71 	bl	8008234 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fcde 	bl	800a118 <ff_del_syncobj>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <f_mount+0x52>
 8009762:	2302      	movs	r3, #2
 8009764:	e033      	b.n	80097ce <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00f      	beq.n	8009792 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	b2da      	uxtb	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	330c      	adds	r3, #12
 8009780:	4619      	mov	r1, r3
 8009782:	4610      	mov	r0, r2
 8009784:	f000 fcad 	bl	800a0e2 <ff_cre_syncobj>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <f_mount+0x7e>
 800978e:	2302      	movs	r3, #2
 8009790:	e01d      	b.n	80097ce <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4910      	ldr	r1, [pc, #64]	; (80097d8 <f_mount+0xc4>)
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <f_mount+0x94>
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d001      	beq.n	80097ac <f_mount+0x98>
 80097a8:	2300      	movs	r3, #0
 80097aa:	e010      	b.n	80097ce <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80097ac:	f107 010c 	add.w	r1, r7, #12
 80097b0:	f107 0308 	add.w	r3, r7, #8
 80097b4:	2200      	movs	r2, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fd10 	bl	80091dc <find_volume>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	7dfa      	ldrb	r2, [r7, #23]
 80097c4:	4611      	mov	r1, r2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe fbd0 	bl	8007f6c <unlock_fs>
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3720      	adds	r7, #32
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000aa0 	.word	0x20000aa0

080097dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b098      	sub	sp, #96	; 0x60
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <f_open+0x18>
 80097f0:	2309      	movs	r3, #9
 80097f2:	e1b4      	b.n	8009b5e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80097fc:	79fa      	ldrb	r2, [r7, #7]
 80097fe:	f107 0110 	add.w	r1, r7, #16
 8009802:	f107 0308 	add.w	r3, r7, #8
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff fce8 	bl	80091dc <find_volume>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009816:	2b00      	cmp	r3, #0
 8009818:	f040 8191 	bne.w	8009b3e <f_open+0x362>
		dj.obj.fs = fs;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	f107 0314 	add.w	r3, r7, #20
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff fbcb 	bl	8008fc4 <follow_path>
 800982e:	4603      	mov	r3, r0
 8009830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009838:	2b00      	cmp	r3, #0
 800983a:	d11a      	bne.n	8009872 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800983c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009840:	b25b      	sxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	da03      	bge.n	800984e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009846:	2306      	movs	r3, #6
 8009848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800984c:	e011      	b.n	8009872 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	bf14      	ite	ne
 8009858:	2301      	movne	r3, #1
 800985a:	2300      	moveq	r3, #0
 800985c:	b2db      	uxtb	r3, r3
 800985e:	461a      	mov	r2, r3
 8009860:	f107 0314 	add.w	r3, r7, #20
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fb9c 	bl	8007fa4 <chk_lock>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	f003 031c 	and.w	r3, r3, #28
 8009878:	2b00      	cmp	r3, #0
 800987a:	d07f      	beq.n	800997c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800987c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009880:	2b00      	cmp	r3, #0
 8009882:	d017      	beq.n	80098b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009888:	2b04      	cmp	r3, #4
 800988a:	d10e      	bne.n	80098aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800988c:	f7fe fbe6 	bl	800805c <enq_lock>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d006      	beq.n	80098a4 <f_open+0xc8>
 8009896:	f107 0314 	add.w	r3, r7, #20
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff facb 	bl	8008e36 <dir_register>
 80098a0:	4603      	mov	r3, r0
 80098a2:	e000      	b.n	80098a6 <f_open+0xca>
 80098a4:	2312      	movs	r3, #18
 80098a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	f043 0308 	orr.w	r3, r3, #8
 80098b0:	71fb      	strb	r3, [r7, #7]
 80098b2:	e010      	b.n	80098d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80098b4:	7ebb      	ldrb	r3, [r7, #26]
 80098b6:	f003 0311 	and.w	r3, r3, #17
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <f_open+0xea>
					res = FR_DENIED;
 80098be:	2307      	movs	r3, #7
 80098c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80098c4:	e007      	b.n	80098d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <f_open+0xfa>
 80098d0:	2308      	movs	r3, #8
 80098d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80098d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d168      	bne.n	80099b0 <f_open+0x1d4>
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	f003 0308 	and.w	r3, r3, #8
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d063      	beq.n	80099b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80098e8:	f7fd fc54 	bl	8007194 <get_fattime>
 80098ec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80098ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f0:	330e      	adds	r3, #14
 80098f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fa79 	bl	8007dec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80098fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fc:	3316      	adds	r3, #22
 80098fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fa73 	bl	8007dec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	330b      	adds	r3, #11
 800990a:	2220      	movs	r2, #32
 800990c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff f9fa 	bl	8008d0e <ld_clust>
 800991a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009920:	2200      	movs	r2, #0
 8009922:	4618      	mov	r0, r3
 8009924:	f7ff fa12 	bl	8008d4c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992a:	331c      	adds	r3, #28
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe fa5c 	bl	8007dec <st_dword>
					fs->wflag = 1;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	2201      	movs	r2, #1
 8009938:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800993a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d037      	beq.n	80099b0 <f_open+0x1d4>
						dw = fs->winsect;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009946:	f107 0314 	add.w	r3, r7, #20
 800994a:	2200      	movs	r2, #0
 800994c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe ff25 	bl	800879e <remove_chain>
 8009954:	4603      	mov	r3, r0
 8009956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800995a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800995e:	2b00      	cmp	r3, #0
 8009960:	d126      	bne.n	80099b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fccc 	bl	8008304 <move_window>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009976:	3a01      	subs	r2, #1
 8009978:	611a      	str	r2, [r3, #16]
 800997a:	e019      	b.n	80099b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800997c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009980:	2b00      	cmp	r3, #0
 8009982:	d115      	bne.n	80099b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009984:	7ebb      	ldrb	r3, [r7, #26]
 8009986:	f003 0310 	and.w	r3, r3, #16
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <f_open+0x1ba>
					res = FR_NO_FILE;
 800998e:	2304      	movs	r3, #4
 8009990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009994:	e00c      	b.n	80099b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d007      	beq.n	80099b0 <f_open+0x1d4>
 80099a0:	7ebb      	ldrb	r3, [r7, #26]
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <f_open+0x1d4>
						res = FR_DENIED;
 80099aa:	2307      	movs	r3, #7
 80099ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80099b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d128      	bne.n	8009a0a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	f003 0308 	and.w	r3, r3, #8
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80099d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bf14      	ite	ne
 80099e2:	2301      	movne	r3, #1
 80099e4:	2300      	moveq	r3, #0
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	461a      	mov	r2, r3
 80099ea:	f107 0314 	add.w	r3, r7, #20
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fb55 	bl	80080a0 <inc_lock>
 80099f6:	4602      	mov	r2, r0
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <f_open+0x22e>
 8009a04:	2302      	movs	r3, #2
 8009a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f040 8095 	bne.w	8009b3e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff f977 	bl	8008d0e <ld_clust>
 8009a20:	4602      	mov	r2, r0
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	331c      	adds	r3, #28
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe f9a0 	bl	8007d70 <ld_dword>
 8009a30:	4602      	mov	r2, r0
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	88da      	ldrh	r2, [r3, #6]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	79fa      	ldrb	r2, [r7, #7]
 8009a4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3330      	adds	r3, #48	; 0x30
 8009a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe fa0a 	bl	8007e86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	f003 0320 	and.w	r3, r3, #32
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d060      	beq.n	8009b3e <f_open+0x362>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d05c      	beq.n	8009b3e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	895b      	ldrh	r3, [r3, #10]
 8009a90:	025b      	lsls	r3, r3, #9
 8009a92:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8009aa0:	e016      	b.n	8009ad0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fce7 	bl	800847a <get_fat>
 8009aac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d802      	bhi.n	8009aba <f_open+0x2de>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac0:	d102      	bne.n	8009ac8 <f_open+0x2ec>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	657b      	str	r3, [r7, #84]	; 0x54
 8009ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d103      	bne.n	8009ae0 <f_open+0x304>
 8009ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d8e0      	bhi.n	8009aa2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ae4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d127      	bne.n	8009b3e <f_open+0x362>
 8009aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d022      	beq.n	8009b3e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fc9d 	bl	800843c <clust2sect>
 8009b02:	6478      	str	r0, [r7, #68]	; 0x44
 8009b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d103      	bne.n	8009b12 <f_open+0x336>
						res = FR_INT_ERR;
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b10:	e015      	b.n	8009b3e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b14:	0a5a      	lsrs	r2, r3, #9
 8009b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b18:	441a      	add	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	7858      	ldrb	r0, [r3, #1]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6a1a      	ldr	r2, [r3, #32]
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f7fe f8a9 	bl	8007c84 <disk_read>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <f_open+0x362>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <f_open+0x370>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009b52:	4611      	mov	r1, r2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fa09 	bl	8007f6c <unlock_fs>
 8009b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3760      	adds	r7, #96	; 0x60
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b08e      	sub	sp, #56	; 0x38
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	607a      	str	r2, [r7, #4]
 8009b72:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f107 0214 	add.w	r2, r7, #20
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fd7c 	bl	8009684 <validate>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d107      	bne.n	8009baa <f_read+0x44>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	7d5b      	ldrb	r3, [r3, #21]
 8009b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ba2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d009      	beq.n	8009bbe <f_read+0x58>
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe f9da 	bl	8007f6c <unlock_fs>
 8009bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bbc:	e13d      	b.n	8009e3a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	7d1b      	ldrb	r3, [r3, #20]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <f_read+0x72>
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2107      	movs	r1, #7
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe f9cc 	bl	8007f6c <unlock_fs>
 8009bd4:	2307      	movs	r3, #7
 8009bd6:	e130      	b.n	8009e3a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	f240 811c 	bls.w	8009e26 <f_read+0x2c0>
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009bf2:	e118      	b.n	8009e26 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 80e4 	bne.w	8009dca <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	0a5b      	lsrs	r3, r3, #9
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	8952      	ldrh	r2, [r2, #10]
 8009c0c:	3a01      	subs	r2, #1
 8009c0e:	4013      	ands	r3, r2
 8009c10:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d139      	bne.n	8009c8c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	633b      	str	r3, [r7, #48]	; 0x30
 8009c26:	e013      	b.n	8009c50 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	4619      	mov	r1, r3
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7fe feae 	bl	8008998 <clmt_clust>
 8009c3c:	6338      	str	r0, [r7, #48]	; 0x30
 8009c3e:	e007      	b.n	8009c50 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f7fe fc16 	bl	800847a <get_fat>
 8009c4e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d809      	bhi.n	8009c6a <f_read+0x104>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	755a      	strb	r2, [r3, #21]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2102      	movs	r1, #2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe f983 	bl	8007f6c <unlock_fs>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e0e7      	b.n	8009e3a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c70:	d109      	bne.n	8009c86 <f_read+0x120>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2201      	movs	r2, #1
 8009c76:	755a      	strb	r2, [r3, #21]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe f975 	bl	8007f6c <unlock_fs>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e0d9      	b.n	8009e3a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f7fe fbd1 	bl	800843c <clust2sect>
 8009c9a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d109      	bne.n	8009cb6 <f_read+0x150>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	755a      	strb	r2, [r3, #21]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2102      	movs	r1, #2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe f95d 	bl	8007f6c <unlock_fs>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e0c1      	b.n	8009e3a <f_read+0x2d4>
			sect += csect;
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	4413      	add	r3, r2
 8009cbc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	0a5b      	lsrs	r3, r3, #9
 8009cc2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d03e      	beq.n	8009d48 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	4413      	add	r3, r2
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	8952      	ldrh	r2, [r2, #10]
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d905      	bls.n	8009ce4 <f_read+0x17e>
					cc = fs->csize - csect;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	895b      	ldrh	r3, [r3, #10]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	7858      	ldrb	r0, [r3, #1]
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	69ba      	ldr	r2, [r7, #24]
 8009cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cee:	f7fd ffc9 	bl	8007c84 <disk_read>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d009      	beq.n	8009d0c <f_read+0x1a6>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	755a      	strb	r2, [r3, #21]
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2101      	movs	r1, #1
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe f932 	bl	8007f6c <unlock_fs>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e096      	b.n	8009e3a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	7d1b      	ldrb	r3, [r3, #20]
 8009d10:	b25b      	sxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da14      	bge.n	8009d40 <f_read+0x1da>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6a1a      	ldr	r2, [r3, #32]
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d90d      	bls.n	8009d40 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a1a      	ldr	r2, [r3, #32]
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	025b      	lsls	r3, r3, #9
 8009d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d30:	18d0      	adds	r0, r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3330      	adds	r3, #48	; 0x30
 8009d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f7fe f882 	bl	8007e44 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	025b      	lsls	r3, r3, #9
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009d46:	e05a      	b.n	8009dfe <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d038      	beq.n	8009dc4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	7d1b      	ldrb	r3, [r3, #20]
 8009d56:	b25b      	sxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da1d      	bge.n	8009d98 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	7858      	ldrb	r0, [r3, #1]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a1a      	ldr	r2, [r3, #32]
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	f7fd ffaa 	bl	8007cc4 <disk_write>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d009      	beq.n	8009d8a <f_read+0x224>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	755a      	strb	r2, [r3, #21]
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fe f8f3 	bl	8007f6c <unlock_fs>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e057      	b.n	8009e3a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	7d1b      	ldrb	r3, [r3, #20]
 8009d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	7858      	ldrb	r0, [r3, #1]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009da2:	2301      	movs	r3, #1
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	f7fd ff6d 	bl	8007c84 <disk_read>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d009      	beq.n	8009dc4 <f_read+0x25e>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	755a      	strb	r2, [r3, #21]
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2101      	movs	r1, #1
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe f8d6 	bl	8007f6c <unlock_fs>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e03a      	b.n	8009e3a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d901      	bls.n	8009de4 <f_read+0x27e>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df2:	4413      	add	r3, r2
 8009df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009df6:	4619      	mov	r1, r3
 8009df8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dfa:	f7fe f823 	bl	8007e44 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	4413      	add	r3, r2
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	441a      	add	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	619a      	str	r2, [r3, #24]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	441a      	add	r2, r3
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f47f aee3 	bne.w	8009bf4 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2100      	movs	r1, #0
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe f89a 	bl	8007f6c <unlock_fs>
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3738      	adds	r7, #56	; 0x38
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b086      	sub	sp, #24
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f107 0208 	add.w	r2, r7, #8
 8009e50:	4611      	mov	r1, r2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff fc16 	bl	8009684 <validate>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d16d      	bne.n	8009f3e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7d1b      	ldrb	r3, [r3, #20]
 8009e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d067      	beq.n	8009f3e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	7d1b      	ldrb	r3, [r3, #20]
 8009e72:	b25b      	sxtb	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	da1a      	bge.n	8009eae <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	7858      	ldrb	r0, [r3, #1]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1a      	ldr	r2, [r3, #32]
 8009e86:	2301      	movs	r3, #1
 8009e88:	f7fd ff1c 	bl	8007cc4 <disk_write>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d006      	beq.n	8009ea0 <f_sync+0x5e>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2101      	movs	r1, #1
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe f868 	bl	8007f6c <unlock_fs>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e055      	b.n	8009f4c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7d1b      	ldrb	r3, [r3, #20]
 8009ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009eae:	f7fd f971 	bl	8007194 <get_fattime>
 8009eb2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	f7fe fa21 	bl	8008304 <move_window>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d138      	bne.n	8009f3e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	330b      	adds	r3, #11
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	330b      	adds	r3, #11
 8009edc:	f042 0220 	orr.w	r2, r2, #32
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	461a      	mov	r2, r3
 8009eee:	68f9      	ldr	r1, [r7, #12]
 8009ef0:	f7fe ff2c 	bl	8008d4c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f103 021c 	add.w	r2, r3, #28
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f7fd ff73 	bl	8007dec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3316      	adds	r3, #22
 8009f0a:	6939      	ldr	r1, [r7, #16]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fd ff6d 	bl	8007dec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3312      	adds	r3, #18
 8009f16:	2100      	movs	r1, #0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fd ff4c 	bl	8007db6 <st_word>
					fs->wflag = 1;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2201      	movs	r2, #1
 8009f22:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fa1a 	bl	8008360 <sync_fs>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	7d1b      	ldrb	r3, [r3, #20]
 8009f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	7dfa      	ldrb	r2, [r7, #23]
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe f811 	bl	8007f6c <unlock_fs>
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff ff70 	bl	8009e42 <f_sync>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d11d      	bne.n	8009fa8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f107 0208 	add.w	r2, r7, #8
 8009f72:	4611      	mov	r1, r2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff fb85 	bl	8009684 <validate>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d111      	bne.n	8009fa8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe f917 	bl	80081bc <dec_lock>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fd ffe2 	bl	8007f6c <unlock_fs>
#endif
		}
	}
	return res;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b088      	sub	sp, #32
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009fc6:	e01b      	b.n	800a000 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009fc8:	f107 0310 	add.w	r3, r7, #16
 8009fcc:	f107 0114 	add.w	r1, r7, #20
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff fdc7 	bl	8009b66 <f_read>
		if (rc != 1) break;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d116      	bne.n	800a00c <f_gets+0x5a>
		c = s[0];
 8009fde:	7d3b      	ldrb	r3, [r7, #20]
 8009fe0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	2b0d      	cmp	r3, #13
 8009fe6:	d100      	bne.n	8009fea <f_gets+0x38>
 8009fe8:	e00a      	b.n	800a000 <f_gets+0x4e>
		*p++ = c;
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	61ba      	str	r2, [r7, #24]
 8009ff0:	7dfa      	ldrb	r2, [r7, #23]
 8009ff2:	701a      	strb	r2, [r3, #0]
		n++;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	2b0a      	cmp	r3, #10
 8009ffe:	d007      	beq.n	800a010 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	3b01      	subs	r3, #1
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	429a      	cmp	r2, r3
 800a008:	dbde      	blt.n	8009fc8 <f_gets+0x16>
 800a00a:	e002      	b.n	800a012 <f_gets+0x60>
		if (rc != 1) break;
 800a00c:	bf00      	nop
 800a00e:	e000      	b.n	800a012 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a010:	bf00      	nop
	}
	*p = 0;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <f_gets+0x70>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	e000      	b.n	800a024 <f_gets+0x72>
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3720      	adds	r7, #32
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	4613      	mov	r3, r2
 800a038:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a03a:	2301      	movs	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a042:	4b1f      	ldr	r3, [pc, #124]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a044:	7a5b      	ldrb	r3, [r3, #9]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d131      	bne.n	800a0b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a04c:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a04e:	7a5b      	ldrb	r3, [r3, #9]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	461a      	mov	r2, r3
 800a054:	4b1a      	ldr	r3, [pc, #104]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a056:	2100      	movs	r1, #0
 800a058:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a05a:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a05c:	7a5b      	ldrb	r3, [r3, #9]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a06a:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a06c:	7a5b      	ldrb	r3, [r3, #9]
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	461a      	mov	r2, r3
 800a072:	4b13      	ldr	r3, [pc, #76]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a074:	4413      	add	r3, r2
 800a076:	79fa      	ldrb	r2, [r7, #7]
 800a078:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a07a:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a07c:	7a5b      	ldrb	r3, [r3, #9]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	b2d1      	uxtb	r1, r2
 800a084:	4a0e      	ldr	r2, [pc, #56]	; (800a0c0 <FATFS_LinkDriverEx+0x94>)
 800a086:	7251      	strb	r1, [r2, #9]
 800a088:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a08a:	7dbb      	ldrb	r3, [r7, #22]
 800a08c:	3330      	adds	r3, #48	; 0x30
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	3301      	adds	r3, #1
 800a098:	223a      	movs	r2, #58	; 0x3a
 800a09a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3302      	adds	r3, #2
 800a0a0:	222f      	movs	r2, #47	; 0x2f
 800a0a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	3303      	adds	r3, #3
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	371c      	adds	r7, #28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	20000ac8 	.word	0x20000ac8

0800a0c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff ffaa 	bl	800a02c <FATFS_LinkDriverEx>
 800a0d8:	4603      	mov	r3, r0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	6039      	str	r1, [r7, #0]
 800a0ec:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	f000 f977 	bl	800a3e6 <osSemaphoreNew>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	bf14      	ite	ne
 800a106:	2301      	movne	r3, #1
 800a108:	2300      	moveq	r3, #0
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	60fb      	str	r3, [r7, #12]

    return ret;
 800a10e:	68fb      	ldr	r3, [r7, #12]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fa7f 	bl	800a624 <osSemaphoreDelete>
#endif
    return 1;
 800a126:	2301      	movs	r3, #1
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a13c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f9d9 	bl	800a4f8 <osSemaphoreAcquire>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a14c:	2301      	movs	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a150:	68fb      	ldr	r3, [r7, #12]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b082      	sub	sp, #8
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa1a 	bl	800a59c <osSemaphoreRelease>
#endif
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <__NVIC_SetPriority>:
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	6039      	str	r1, [r7, #0]
 800a17a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a17c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a180:	2b00      	cmp	r3, #0
 800a182:	db0a      	blt.n	800a19a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	b2da      	uxtb	r2, r3
 800a188:	490c      	ldr	r1, [pc, #48]	; (800a1bc <__NVIC_SetPriority+0x4c>)
 800a18a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a18e:	0112      	lsls	r2, r2, #4
 800a190:	b2d2      	uxtb	r2, r2
 800a192:	440b      	add	r3, r1
 800a194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a198:	e00a      	b.n	800a1b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	4908      	ldr	r1, [pc, #32]	; (800a1c0 <__NVIC_SetPriority+0x50>)
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	f003 030f 	and.w	r3, r3, #15
 800a1a6:	3b04      	subs	r3, #4
 800a1a8:	0112      	lsls	r2, r2, #4
 800a1aa:	b2d2      	uxtb	r2, r2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	761a      	strb	r2, [r3, #24]
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	e000e100 	.word	0xe000e100
 800a1c0:	e000ed00 	.word	0xe000ed00

0800a1c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <SysTick_Handler+0x1c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a1cc:	f002 faf0 	bl	800c7b0 <xTaskGetSchedulerState>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d001      	beq.n	800a1da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a1d6:	f003 f9d7 	bl	800d588 <xPortSysTickHandler>
  }
}
 800a1da:	bf00      	nop
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	e000e010 	.word	0xe000e010

0800a1e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	f06f 0004 	mvn.w	r0, #4
 800a1ee:	f7ff ffbf 	bl	800a170 <__NVIC_SetPriority>
#endif
}
 800a1f2:	bf00      	nop
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1fe:	f3ef 8305 	mrs	r3, IPSR
 800a202:	603b      	str	r3, [r7, #0]
  return(result);
 800a204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a20a:	f06f 0305 	mvn.w	r3, #5
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	e00c      	b.n	800a22c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a212:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <osKernelInitialize+0x44>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d105      	bne.n	800a226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a21a:	4b08      	ldr	r3, [pc, #32]	; (800a23c <osKernelInitialize+0x44>)
 800a21c:	2201      	movs	r2, #1
 800a21e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a220:	2300      	movs	r3, #0
 800a222:	607b      	str	r3, [r7, #4]
 800a224:	e002      	b.n	800a22c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a226:	f04f 33ff 	mov.w	r3, #4294967295
 800a22a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a22c:	687b      	ldr	r3, [r7, #4]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	20000ad4 	.word	0x20000ad4

0800a240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a246:	f3ef 8305 	mrs	r3, IPSR
 800a24a:	603b      	str	r3, [r7, #0]
  return(result);
 800a24c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a252:	f06f 0305 	mvn.w	r3, #5
 800a256:	607b      	str	r3, [r7, #4]
 800a258:	e010      	b.n	800a27c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <osKernelStart+0x48>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d109      	bne.n	800a276 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a262:	f7ff ffbf 	bl	800a1e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a266:	4b08      	ldr	r3, [pc, #32]	; (800a288 <osKernelStart+0x48>)
 800a268:	2202      	movs	r2, #2
 800a26a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a26c:	f001 fe58 	bl	800bf20 <vTaskStartScheduler>
      stat = osOK;
 800a270:	2300      	movs	r3, #0
 800a272:	607b      	str	r3, [r7, #4]
 800a274:	e002      	b.n	800a27c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a276:	f04f 33ff 	mov.w	r3, #4294967295
 800a27a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a27c:	687b      	ldr	r3, [r7, #4]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20000ad4 	.word	0x20000ad4

0800a28c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08e      	sub	sp, #56	; 0x38
 800a290:	af04      	add	r7, sp, #16
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a29c:	f3ef 8305 	mrs	r3, IPSR
 800a2a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a2a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d17e      	bne.n	800a3a6 <osThreadNew+0x11a>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d07b      	beq.n	800a3a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2ae:	2380      	movs	r3, #128	; 0x80
 800a2b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2b2:	2318      	movs	r3, #24
 800a2b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a2be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d045      	beq.n	800a352 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <osThreadNew+0x48>
        name = attr->name;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d008      	beq.n	800a2fa <osThreadNew+0x6e>
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	2b38      	cmp	r3, #56	; 0x38
 800a2ec:	d805      	bhi.n	800a2fa <osThreadNew+0x6e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <osThreadNew+0x72>
        return (NULL);
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e054      	b.n	800a3a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	089b      	lsrs	r3, r3, #2
 800a30c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00e      	beq.n	800a334 <osThreadNew+0xa8>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	2b5b      	cmp	r3, #91	; 0x5b
 800a31c:	d90a      	bls.n	800a334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a322:	2b00      	cmp	r3, #0
 800a324:	d006      	beq.n	800a334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <osThreadNew+0xa8>
        mem = 1;
 800a32e:	2301      	movs	r3, #1
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	e010      	b.n	800a356 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10c      	bne.n	800a356 <osThreadNew+0xca>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d108      	bne.n	800a356 <osThreadNew+0xca>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d104      	bne.n	800a356 <osThreadNew+0xca>
          mem = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	e001      	b.n	800a356 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d110      	bne.n	800a37e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a364:	9202      	str	r2, [sp, #8]
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	6a3a      	ldr	r2, [r7, #32]
 800a370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f001 fbfe 	bl	800bb74 <xTaskCreateStatic>
 800a378:	4603      	mov	r3, r0
 800a37a:	613b      	str	r3, [r7, #16]
 800a37c:	e013      	b.n	800a3a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d110      	bne.n	800a3a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	b29a      	uxth	r2, r3
 800a388:	f107 0310 	add.w	r3, r7, #16
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f001 fc49 	bl	800bc2e <xTaskCreate>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d001      	beq.n	800a3a6 <osThreadNew+0x11a>
            hTask = NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3a6:	693b      	ldr	r3, [r7, #16]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3728      	adds	r7, #40	; 0x28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b8:	f3ef 8305 	mrs	r3, IPSR
 800a3bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <osDelay+0x1c>
    stat = osErrorISR;
 800a3c4:	f06f 0305 	mvn.w	r3, #5
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e007      	b.n	800a3dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 fd6e 	bl	800beb8 <vTaskDelay>
    }
  }

  return (stat);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b08a      	sub	sp, #40	; 0x28
 800a3ea:	af02      	add	r7, sp, #8
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f6:	f3ef 8305 	mrs	r3, IPSR
 800a3fa:	613b      	str	r3, [r7, #16]
  return(result);
 800a3fc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d175      	bne.n	800a4ee <osSemaphoreNew+0x108>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d072      	beq.n	800a4ee <osSemaphoreNew+0x108>
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d86e      	bhi.n	800a4ee <osSemaphoreNew+0x108>
    mem = -1;
 800a410:	f04f 33ff 	mov.w	r3, #4294967295
 800a414:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d015      	beq.n	800a448 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d006      	beq.n	800a432 <osSemaphoreNew+0x4c>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b4f      	cmp	r3, #79	; 0x4f
 800a42a:	d902      	bls.n	800a432 <osSemaphoreNew+0x4c>
        mem = 1;
 800a42c:	2301      	movs	r3, #1
 800a42e:	61bb      	str	r3, [r7, #24]
 800a430:	e00c      	b.n	800a44c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d108      	bne.n	800a44c <osSemaphoreNew+0x66>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d104      	bne.n	800a44c <osSemaphoreNew+0x66>
          mem = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	61bb      	str	r3, [r7, #24]
 800a446:	e001      	b.n	800a44c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a452:	d04c      	beq.n	800a4ee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d128      	bne.n	800a4ac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d10a      	bne.n	800a476 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2203      	movs	r2, #3
 800a466:	9200      	str	r2, [sp, #0]
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	2001      	movs	r0, #1
 800a46e:	f000 fb9f 	bl	800abb0 <xQueueGenericCreateStatic>
 800a472:	61f8      	str	r0, [r7, #28]
 800a474:	e005      	b.n	800a482 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a476:	2203      	movs	r2, #3
 800a478:	2100      	movs	r1, #0
 800a47a:	2001      	movs	r0, #1
 800a47c:	f000 fc10 	bl	800aca0 <xQueueGenericCreate>
 800a480:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d022      	beq.n	800a4ce <osSemaphoreNew+0xe8>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d01f      	beq.n	800a4ce <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a48e:	2300      	movs	r3, #0
 800a490:	2200      	movs	r2, #0
 800a492:	2100      	movs	r1, #0
 800a494:	69f8      	ldr	r0, [r7, #28]
 800a496:	f000 fccb 	bl	800ae30 <xQueueGenericSend>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d016      	beq.n	800a4ce <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a4a0:	69f8      	ldr	r0, [r7, #28]
 800a4a2:	f001 f993 	bl	800b7cc <vQueueDelete>
            hSemaphore = NULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	e010      	b.n	800a4ce <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d108      	bne.n	800a4c4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 fc4d 	bl	800ad5a <xQueueCreateCountingSemaphoreStatic>
 800a4c0:	61f8      	str	r0, [r7, #28]
 800a4c2:	e004      	b.n	800a4ce <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a4c4:	68b9      	ldr	r1, [r7, #8]
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fc7e 	bl	800adc8 <xQueueCreateCountingSemaphore>
 800a4cc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00c      	beq.n	800a4ee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	617b      	str	r3, [r7, #20]
 800a4e0:	e001      	b.n	800a4e6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a4e6:	6979      	ldr	r1, [r7, #20]
 800a4e8:	69f8      	ldr	r0, [r7, #28]
 800a4ea:	f001 fabb 	bl	800ba64 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a4ee:	69fb      	ldr	r3, [r7, #28]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3720      	adds	r7, #32
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a510:	f06f 0303 	mvn.w	r3, #3
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	e039      	b.n	800a58c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a518:	f3ef 8305 	mrs	r3, IPSR
 800a51c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a51e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a520:	2b00      	cmp	r3, #0
 800a522:	d022      	beq.n	800a56a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a52a:	f06f 0303 	mvn.w	r3, #3
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	e02c      	b.n	800a58c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a536:	f107 0308 	add.w	r3, r7, #8
 800a53a:	461a      	mov	r2, r3
 800a53c:	2100      	movs	r1, #0
 800a53e:	6938      	ldr	r0, [r7, #16]
 800a540:	f001 f888 	bl	800b654 <xQueueReceiveFromISR>
 800a544:	4603      	mov	r3, r0
 800a546:	2b01      	cmp	r3, #1
 800a548:	d003      	beq.n	800a552 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a54a:	f06f 0302 	mvn.w	r3, #2
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e01c      	b.n	800a58c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d019      	beq.n	800a58c <osSemaphoreAcquire+0x94>
 800a558:	4b0f      	ldr	r3, [pc, #60]	; (800a598 <osSemaphoreAcquire+0xa0>)
 800a55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55e:	601a      	str	r2, [r3, #0]
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	e010      	b.n	800a58c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6938      	ldr	r0, [r7, #16]
 800a56e:	f000 ff65 	bl	800b43c <xQueueSemaphoreTake>
 800a572:	4603      	mov	r3, r0
 800a574:	2b01      	cmp	r3, #1
 800a576:	d009      	beq.n	800a58c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a57e:	f06f 0301 	mvn.w	r3, #1
 800a582:	617b      	str	r3, [r7, #20]
 800a584:	e002      	b.n	800a58c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a586:	f06f 0302 	mvn.w	r3, #2
 800a58a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a58c:	697b      	ldr	r3, [r7, #20]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d103      	bne.n	800a5ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a5b2:	f06f 0303 	mvn.w	r3, #3
 800a5b6:	617b      	str	r3, [r7, #20]
 800a5b8:	e02c      	b.n	800a614 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5ba:	f3ef 8305 	mrs	r3, IPSR
 800a5be:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01a      	beq.n	800a5fc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6938      	ldr	r0, [r7, #16]
 800a5d2:	f000 fdc6 	bl	800b162 <xQueueGiveFromISR>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d003      	beq.n	800a5e4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a5dc:	f06f 0302 	mvn.w	r3, #2
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e017      	b.n	800a614 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d014      	beq.n	800a614 <osSemaphoreRelease+0x78>
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	; (800a620 <osSemaphoreRelease+0x84>)
 800a5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	e00b      	b.n	800a614 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	2200      	movs	r2, #0
 800a600:	2100      	movs	r1, #0
 800a602:	6938      	ldr	r0, [r7, #16]
 800a604:	f000 fc14 	bl	800ae30 <xQueueGenericSend>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d002      	beq.n	800a614 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a60e:	f06f 0302 	mvn.w	r3, #2
 800a612:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a614:	697b      	ldr	r3, [r7, #20]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	e000ed04 	.word	0xe000ed04

0800a624 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a630:	f3ef 8305 	mrs	r3, IPSR
 800a634:	60fb      	str	r3, [r7, #12]
  return(result);
 800a636:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a63c:	f06f 0305 	mvn.w	r3, #5
 800a640:	617b      	str	r3, [r7, #20]
 800a642:	e00e      	b.n	800a662 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d103      	bne.n	800a652 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a64a:	f06f 0303 	mvn.w	r3, #3
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	e007      	b.n	800a662 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a652:	6938      	ldr	r0, [r7, #16]
 800a654:	f001 fa30 	bl	800bab8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a65c:	6938      	ldr	r0, [r7, #16]
 800a65e:	f001 f8b5 	bl	800b7cc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a662:	697b      	ldr	r3, [r7, #20]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08a      	sub	sp, #40	; 0x28
 800a670:	af02      	add	r7, sp, #8
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a67c:	f3ef 8305 	mrs	r3, IPSR
 800a680:	613b      	str	r3, [r7, #16]
  return(result);
 800a682:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a684:	2b00      	cmp	r3, #0
 800a686:	d15f      	bne.n	800a748 <osMessageQueueNew+0xdc>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d05c      	beq.n	800a748 <osMessageQueueNew+0xdc>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d059      	beq.n	800a748 <osMessageQueueNew+0xdc>
    mem = -1;
 800a694:	f04f 33ff 	mov.w	r3, #4294967295
 800a698:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d029      	beq.n	800a6f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d012      	beq.n	800a6ce <osMessageQueueNew+0x62>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b4f      	cmp	r3, #79	; 0x4f
 800a6ae:	d90e      	bls.n	800a6ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	695a      	ldr	r2, [r3, #20]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68b9      	ldr	r1, [r7, #8]
 800a6c0:	fb01 f303 	mul.w	r3, r1, r3
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d302      	bcc.n	800a6ce <osMessageQueueNew+0x62>
        mem = 1;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	61bb      	str	r3, [r7, #24]
 800a6cc:	e014      	b.n	800a6f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d110      	bne.n	800a6f8 <osMessageQueueNew+0x8c>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10c      	bne.n	800a6f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d108      	bne.n	800a6f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d104      	bne.n	800a6f8 <osMessageQueueNew+0x8c>
          mem = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	e001      	b.n	800a6f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d10b      	bne.n	800a716 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691a      	ldr	r2, [r3, #16]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	2100      	movs	r1, #0
 800a708:	9100      	str	r1, [sp, #0]
 800a70a:	68b9      	ldr	r1, [r7, #8]
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 fa4f 	bl	800abb0 <xQueueGenericCreateStatic>
 800a712:	61f8      	str	r0, [r7, #28]
 800a714:	e008      	b.n	800a728 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d105      	bne.n	800a728 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a71c:	2200      	movs	r2, #0
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 fabd 	bl	800aca0 <xQueueGenericCreate>
 800a726:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00c      	beq.n	800a748 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <osMessageQueueNew+0xd0>
        name = attr->name;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	e001      	b.n	800a740 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a740:	6979      	ldr	r1, [r7, #20]
 800a742:	69f8      	ldr	r0, [r7, #28]
 800a744:	f001 f98e 	bl	800ba64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a748:	69fb      	ldr	r3, [r7, #28]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3720      	adds	r7, #32
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	4613      	mov	r3, r2
 800a762:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a768:	2300      	movs	r3, #0
 800a76a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a76c:	f3ef 8305 	mrs	r3, IPSR
 800a770:	617b      	str	r3, [r7, #20]
  return(result);
 800a772:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a774:	2b00      	cmp	r3, #0
 800a776:	d028      	beq.n	800a7ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <osMessageQueuePut+0x36>
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <osMessageQueuePut+0x36>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a78a:	f06f 0303 	mvn.w	r3, #3
 800a78e:	61fb      	str	r3, [r7, #28]
 800a790:	e038      	b.n	800a804 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a792:	2300      	movs	r3, #0
 800a794:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a796:	f107 0210 	add.w	r2, r7, #16
 800a79a:	2300      	movs	r3, #0
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	69b8      	ldr	r0, [r7, #24]
 800a7a0:	f000 fc44 	bl	800b02c <xQueueGenericSendFromISR>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d003      	beq.n	800a7b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a7aa:	f06f 0302 	mvn.w	r3, #2
 800a7ae:	61fb      	str	r3, [r7, #28]
 800a7b0:	e028      	b.n	800a804 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d025      	beq.n	800a804 <osMessageQueuePut+0xb0>
 800a7b8:	4b15      	ldr	r3, [pc, #84]	; (800a810 <osMessageQueuePut+0xbc>)
 800a7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	e01c      	b.n	800a804 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <osMessageQueuePut+0x82>
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d103      	bne.n	800a7de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a7d6:	f06f 0303 	mvn.w	r3, #3
 800a7da:	61fb      	str	r3, [r7, #28]
 800a7dc:	e012      	b.n	800a804 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a7de:	2300      	movs	r3, #0
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	69b8      	ldr	r0, [r7, #24]
 800a7e6:	f000 fb23 	bl	800ae30 <xQueueGenericSend>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d009      	beq.n	800a804 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a7f6:	f06f 0301 	mvn.w	r3, #1
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	e002      	b.n	800a804 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a7fe:	f06f 0302 	mvn.w	r3, #2
 800a802:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a804:	69fb      	ldr	r3, [r7, #28]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a826:	2300      	movs	r3, #0
 800a828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a82a:	f3ef 8305 	mrs	r3, IPSR
 800a82e:	617b      	str	r3, [r7, #20]
  return(result);
 800a830:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a832:	2b00      	cmp	r3, #0
 800a834:	d028      	beq.n	800a888 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <osMessageQueueGet+0x34>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <osMessageQueueGet+0x34>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d003      	beq.n	800a850 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a848:	f06f 0303 	mvn.w	r3, #3
 800a84c:	61fb      	str	r3, [r7, #28]
 800a84e:	e037      	b.n	800a8c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a850:	2300      	movs	r3, #0
 800a852:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a854:	f107 0310 	add.w	r3, r7, #16
 800a858:	461a      	mov	r2, r3
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	69b8      	ldr	r0, [r7, #24]
 800a85e:	f000 fef9 	bl	800b654 <xQueueReceiveFromISR>
 800a862:	4603      	mov	r3, r0
 800a864:	2b01      	cmp	r3, #1
 800a866:	d003      	beq.n	800a870 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a868:	f06f 0302 	mvn.w	r3, #2
 800a86c:	61fb      	str	r3, [r7, #28]
 800a86e:	e027      	b.n	800a8c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d024      	beq.n	800a8c0 <osMessageQueueGet+0xac>
 800a876:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <osMessageQueueGet+0xb8>)
 800a878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	e01b      	b.n	800a8c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <osMessageQueueGet+0x80>
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d103      	bne.n	800a89c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a894:	f06f 0303 	mvn.w	r3, #3
 800a898:	61fb      	str	r3, [r7, #28]
 800a89a:	e011      	b.n	800a8c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	69b8      	ldr	r0, [r7, #24]
 800a8a2:	f000 fceb 	bl	800b27c <xQueueReceive>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d009      	beq.n	800a8c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a8b2:	f06f 0301 	mvn.w	r3, #1
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	e002      	b.n	800a8c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a8ba:	f06f 0302 	mvn.w	r3, #2
 800a8be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a8c0:	69fb      	ldr	r3, [r7, #28]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3720      	adds	r7, #32
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	e000ed04 	.word	0xe000ed04

0800a8d0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d102      	bne.n	800a8e8 <osMessageQueueGetCount+0x18>
    count = 0U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e00e      	b.n	800a906 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8e8:	f3ef 8305 	mrs	r3, IPSR
 800a8ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d004      	beq.n	800a8fe <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800a8f4:	6938      	ldr	r0, [r7, #16]
 800a8f6:	f000 ff4b 	bl	800b790 <uxQueueMessagesWaitingFromISR>
 800a8fa:	6178      	str	r0, [r7, #20]
 800a8fc:	e003      	b.n	800a906 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800a8fe:	6938      	ldr	r0, [r7, #16]
 800a900:	f000 ff28 	bl	800b754 <uxQueueMessagesWaiting>
 800a904:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800a906:	697b      	ldr	r3, [r7, #20]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4a07      	ldr	r2, [pc, #28]	; (800a93c <vApplicationGetIdleTaskMemory+0x2c>)
 800a920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	4a06      	ldr	r2, [pc, #24]	; (800a940 <vApplicationGetIdleTaskMemory+0x30>)
 800a926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2280      	movs	r2, #128	; 0x80
 800a92c:	601a      	str	r2, [r3, #0]
}
 800a92e:	bf00      	nop
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	20000ad8 	.word	0x20000ad8
 800a940:	20000b34 	.word	0x20000b34

0800a944 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4a07      	ldr	r2, [pc, #28]	; (800a970 <vApplicationGetTimerTaskMemory+0x2c>)
 800a954:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	4a06      	ldr	r2, [pc, #24]	; (800a974 <vApplicationGetTimerTaskMemory+0x30>)
 800a95a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a962:	601a      	str	r2, [r3, #0]
}
 800a964:	bf00      	nop
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	20000d34 	.word	0x20000d34
 800a974:	20000d90 	.word	0x20000d90

0800a978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f103 0208 	add.w	r2, r3, #8
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f103 0208 	add.w	r2, r3, #8
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f103 0208 	add.w	r2, r3, #8
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9c6:	bf00      	nop
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689a      	ldr	r2, [r3, #8]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	601a      	str	r2, [r3, #0]
}
 800aa0e:	bf00      	nop
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d103      	bne.n	800aa3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	e00c      	b.n	800aa54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	e002      	b.n	800aa48 <vListInsert+0x2e>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d2f6      	bcs.n	800aa42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	601a      	str	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	6892      	ldr	r2, [r2, #8]
 800aaa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6852      	ldr	r2, [r2, #4]
 800aaac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d103      	bne.n	800aac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689a      	ldr	r2, [r3, #8]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	1e5a      	subs	r2, r3, #1
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab0a:	f002 fcab 	bl	800d464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab16:	68f9      	ldr	r1, [r7, #12]
 800ab18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab1a:	fb01 f303 	mul.w	r3, r1, r3
 800ab1e:	441a      	add	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	68f9      	ldr	r1, [r7, #12]
 800ab3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab40:	fb01 f303 	mul.w	r3, r1, r3
 800ab44:	441a      	add	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	22ff      	movs	r2, #255	; 0xff
 800ab4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	22ff      	movs	r2, #255	; 0xff
 800ab56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d114      	bne.n	800ab8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01a      	beq.n	800ab9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3310      	adds	r3, #16
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 fc61 	bl	800c434 <xTaskRemoveFromEventList>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d012      	beq.n	800ab9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab78:	4b0c      	ldr	r3, [pc, #48]	; (800abac <xQueueGenericReset+0xcc>)
 800ab7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	e009      	b.n	800ab9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3310      	adds	r3, #16
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7ff fef2 	bl	800a978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3324      	adds	r3, #36	; 0x24
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff feed 	bl	800a978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab9e:	f002 fc91 	bl	800d4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aba2:	2301      	movs	r3, #1
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08e      	sub	sp, #56	; 0x38
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10a      	bne.n	800abf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <xQueueGenericCreateStatic+0x52>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <xQueueGenericCreateStatic+0x56>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e000      	b.n	800ac08 <xQueueGenericCreateStatic+0x58>
 800ac06:	2300      	movs	r3, #0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10a      	bne.n	800ac22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	623b      	str	r3, [r7, #32]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d102      	bne.n	800ac2e <xQueueGenericCreateStatic+0x7e>
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <xQueueGenericCreateStatic+0x82>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e000      	b.n	800ac34 <xQueueGenericCreateStatic+0x84>
 800ac32:	2300      	movs	r3, #0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10a      	bne.n	800ac4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	61fb      	str	r3, [r7, #28]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac4e:	2350      	movs	r3, #80	; 0x50
 800ac50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b50      	cmp	r3, #80	; 0x50
 800ac56:	d00a      	beq.n	800ac6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	61bb      	str	r3, [r7, #24]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00d      	beq.n	800ac96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 f83f 	bl	800ad14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3730      	adds	r7, #48	; 0x30
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b08a      	sub	sp, #40	; 0x28
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <xQueueGenericCreate+0x2a>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	613b      	str	r3, [r7, #16]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	fb02 f303 	mul.w	r3, r2, r3
 800acd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	3350      	adds	r3, #80	; 0x50
 800acd8:	4618      	mov	r0, r3
 800acda:	f002 fce5 	bl	800d6a8 <pvPortMalloc>
 800acde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d011      	beq.n	800ad0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	3350      	adds	r3, #80	; 0x50
 800acee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acf8:	79fa      	ldrb	r2, [r7, #7]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	4613      	mov	r3, r2
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 f805 	bl	800ad14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
	}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3720      	adds	r7, #32
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d103      	bne.n	800ad30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	e002      	b.n	800ad36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad42:	2101      	movs	r1, #1
 800ad44:	69b8      	ldr	r0, [r7, #24]
 800ad46:	f7ff fecb 	bl	800aae0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	78fa      	ldrb	r2, [r7, #3]
 800ad4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b08a      	sub	sp, #40	; 0x28
 800ad5e:	af02      	add	r7, sp, #8
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	61bb      	str	r3, [r7, #24]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d90a      	bls.n	800ada0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	617b      	str	r3, [r7, #20]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ada0:	2302      	movs	r3, #2
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	2100      	movs	r1, #0
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f7ff ff00 	bl	800abb0 <xQueueGenericCreateStatic>
 800adb0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800adbe:	69fb      	ldr	r3, [r7, #28]
	}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	613b      	str	r3, [r7, #16]
}
 800adea:	bf00      	nop
 800adec:	e7fe      	b.n	800adec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d90a      	bls.n	800ae0c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	60fb      	str	r3, [r7, #12]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	2100      	movs	r1, #0
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff ff45 	bl	800aca0 <xQueueGenericCreate>
 800ae16:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ae24:	697b      	ldr	r3, [r7, #20]
	}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08e      	sub	sp, #56	; 0x38
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10a      	bne.n	800ae62 <xQueueGenericSend+0x32>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <xQueueGenericSend+0x40>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <xQueueGenericSend+0x44>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e000      	b.n	800ae76 <xQueueGenericSend+0x46>
 800ae74:	2300      	movs	r3, #0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <xQueueGenericSend+0x60>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d103      	bne.n	800ae9e <xQueueGenericSend+0x6e>
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d101      	bne.n	800aea2 <xQueueGenericSend+0x72>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <xQueueGenericSend+0x74>
 800aea2:	2300      	movs	r3, #0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10a      	bne.n	800aebe <xQueueGenericSend+0x8e>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	623b      	str	r3, [r7, #32]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aebe:	f001 fc77 	bl	800c7b0 <xTaskGetSchedulerState>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <xQueueGenericSend+0x9e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <xQueueGenericSend+0xa2>
 800aece:	2301      	movs	r3, #1
 800aed0:	e000      	b.n	800aed4 <xQueueGenericSend+0xa4>
 800aed2:	2300      	movs	r3, #0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <xQueueGenericSend+0xbe>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	61fb      	str	r3, [r7, #28]
}
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aeee:	f002 fab9 	bl	800d464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d302      	bcc.n	800af04 <xQueueGenericSend+0xd4>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d129      	bne.n	800af58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0a:	f000 fc9a 	bl	800b842 <prvCopyDataToQueue>
 800af0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	d010      	beq.n	800af3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	3324      	adds	r3, #36	; 0x24
 800af1c:	4618      	mov	r0, r3
 800af1e:	f001 fa89 	bl	800c434 <xTaskRemoveFromEventList>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d013      	beq.n	800af50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af28:	4b3f      	ldr	r3, [pc, #252]	; (800b028 <xQueueGenericSend+0x1f8>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	e00a      	b.n	800af50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af40:	4b39      	ldr	r3, [pc, #228]	; (800b028 <xQueueGenericSend+0x1f8>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af50:	f002 fab8 	bl	800d4c4 <vPortExitCritical>
				return pdPASS;
 800af54:	2301      	movs	r3, #1
 800af56:	e063      	b.n	800b020 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d103      	bne.n	800af66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af5e:	f002 fab1 	bl	800d4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af62:	2300      	movs	r3, #0
 800af64:	e05c      	b.n	800b020 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af6c:	f107 0314 	add.w	r3, r7, #20
 800af70:	4618      	mov	r0, r3
 800af72:	f001 fac3 	bl	800c4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af76:	2301      	movs	r3, #1
 800af78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af7a:	f002 faa3 	bl	800d4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af7e:	f001 f835 	bl	800bfec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af82:	f002 fa6f 	bl	800d464 <vPortEnterCritical>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af8c:	b25b      	sxtb	r3, r3
 800af8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af92:	d103      	bne.n	800af9c <xQueueGenericSend+0x16c>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d103      	bne.n	800afb2 <xQueueGenericSend+0x182>
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afb2:	f002 fa87 	bl	800d4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afb6:	1d3a      	adds	r2, r7, #4
 800afb8:	f107 0314 	add.w	r3, r7, #20
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f001 fab2 	bl	800c528 <xTaskCheckForTimeOut>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d124      	bne.n	800b014 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afcc:	f000 fd31 	bl	800ba32 <prvIsQueueFull>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d018      	beq.n	800b008 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	3310      	adds	r3, #16
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	4611      	mov	r1, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f001 f9d8 	bl	800c394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe6:	f000 fcbc 	bl	800b962 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afea:	f001 f80d 	bl	800c008 <xTaskResumeAll>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f47f af7c 	bne.w	800aeee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aff6:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <xQueueGenericSend+0x1f8>)
 800aff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	e772      	b.n	800aeee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00a:	f000 fcaa 	bl	800b962 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b00e:	f000 fffb 	bl	800c008 <xTaskResumeAll>
 800b012:	e76c      	b.n	800aeee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b016:	f000 fca4 	bl	800b962 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b01a:	f000 fff5 	bl	800c008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b01e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b020:	4618      	mov	r0, r3
 800b022:	3738      	adds	r7, #56	; 0x38
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	e000ed04 	.word	0xe000ed04

0800b02c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b090      	sub	sp, #64	; 0x40
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d103      	bne.n	800b068 <xQueueGenericSendFromISR+0x3c>
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <xQueueGenericSendFromISR+0x40>
 800b068:	2301      	movs	r3, #1
 800b06a:	e000      	b.n	800b06e <xQueueGenericSendFromISR+0x42>
 800b06c:	2300      	movs	r3, #0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d103      	bne.n	800b096 <xQueueGenericSendFromISR+0x6a>
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b092:	2b01      	cmp	r3, #1
 800b094:	d101      	bne.n	800b09a <xQueueGenericSendFromISR+0x6e>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <xQueueGenericSendFromISR+0x70>
 800b09a:	2300      	movs	r3, #0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10a      	bne.n	800b0b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	623b      	str	r3, [r7, #32]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0b6:	f002 fab7 	bl	800d628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	61fa      	str	r2, [r7, #28]
 800b0d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d302      	bcc.n	800b0e8 <xQueueGenericSendFromISR+0xbc>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d12f      	bne.n	800b148 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0fe:	f000 fba0 	bl	800b842 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b102:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10a:	d112      	bne.n	800b132 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	d016      	beq.n	800b142 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	3324      	adds	r3, #36	; 0x24
 800b118:	4618      	mov	r0, r3
 800b11a:	f001 f98b 	bl	800c434 <xTaskRemoveFromEventList>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00e      	beq.n	800b142 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00b      	beq.n	800b142 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	e007      	b.n	800b142 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b132:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b136:	3301      	adds	r3, #1
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	b25a      	sxtb	r2, r3
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b142:	2301      	movs	r3, #1
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b146:	e001      	b.n	800b14c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b156:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3740      	adds	r7, #64	; 0x40
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b08e      	sub	sp, #56	; 0x38
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10a      	bne.n	800b18c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	623b      	str	r3, [r7, #32]
}
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00a      	beq.n	800b1aa <xQueueGiveFromISR+0x48>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	61fb      	str	r3, [r7, #28]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d103      	bne.n	800b1ba <xQueueGiveFromISR+0x58>
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <xQueueGiveFromISR+0x5c>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e000      	b.n	800b1c0 <xQueueGiveFromISR+0x5e>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <xQueueGiveFromISR+0x78>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	61bb      	str	r3, [r7, #24]
}
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1da:	f002 fa25 	bl	800d628 <vPortValidateInterruptPriority>
	__asm volatile
 800b1de:	f3ef 8211 	mrs	r2, BASEPRI
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	617a      	str	r2, [r7, #20]
 800b1f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b1f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b206:	429a      	cmp	r2, r3
 800b208:	d22b      	bcs.n	800b262 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b21c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b224:	d112      	bne.n	800b24c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d016      	beq.n	800b25c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	3324      	adds	r3, #36	; 0x24
 800b232:	4618      	mov	r0, r3
 800b234:	f001 f8fe 	bl	800c434 <xTaskRemoveFromEventList>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00e      	beq.n	800b25c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00b      	beq.n	800b25c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2201      	movs	r2, #1
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	e007      	b.n	800b25c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b24c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b250:	3301      	adds	r3, #1
 800b252:	b2db      	uxtb	r3, r3
 800b254:	b25a      	sxtb	r2, r3
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b25c:	2301      	movs	r3, #1
 800b25e:	637b      	str	r3, [r7, #52]	; 0x34
 800b260:	e001      	b.n	800b266 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b262:	2300      	movs	r3, #0
 800b264:	637b      	str	r3, [r7, #52]	; 0x34
 800b266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b268:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f383 8811 	msr	BASEPRI, r3
}
 800b270:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b274:	4618      	mov	r0, r3
 800b276:	3738      	adds	r7, #56	; 0x38
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08c      	sub	sp, #48	; 0x30
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b288:	2300      	movs	r3, #0
 800b28a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10a      	bne.n	800b2ac <xQueueReceive+0x30>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	623b      	str	r3, [r7, #32]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d103      	bne.n	800b2ba <xQueueReceive+0x3e>
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d101      	bne.n	800b2be <xQueueReceive+0x42>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e000      	b.n	800b2c0 <xQueueReceive+0x44>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10a      	bne.n	800b2da <xQueueReceive+0x5e>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	61fb      	str	r3, [r7, #28]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2da:	f001 fa69 	bl	800c7b0 <xTaskGetSchedulerState>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <xQueueReceive+0x6e>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <xQueueReceive+0x72>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e000      	b.n	800b2f0 <xQueueReceive+0x74>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10a      	bne.n	800b30a <xQueueReceive+0x8e>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	61bb      	str	r3, [r7, #24]
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b30a:	f002 f8ab 	bl	800d464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b312:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	d01f      	beq.n	800b35a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b31e:	f000 fafa 	bl	800b916 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	1e5a      	subs	r2, r3, #1
 800b326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b328:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00f      	beq.n	800b352 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	3310      	adds	r3, #16
 800b336:	4618      	mov	r0, r3
 800b338:	f001 f87c 	bl	800c434 <xTaskRemoveFromEventList>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d007      	beq.n	800b352 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b342:	4b3d      	ldr	r3, [pc, #244]	; (800b438 <xQueueReceive+0x1bc>)
 800b344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b352:	f002 f8b7 	bl	800d4c4 <vPortExitCritical>
				return pdPASS;
 800b356:	2301      	movs	r3, #1
 800b358:	e069      	b.n	800b42e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d103      	bne.n	800b368 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b360:	f002 f8b0 	bl	800d4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b364:	2300      	movs	r3, #0
 800b366:	e062      	b.n	800b42e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b36e:	f107 0310 	add.w	r3, r7, #16
 800b372:	4618      	mov	r0, r3
 800b374:	f001 f8c2 	bl	800c4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b37c:	f002 f8a2 	bl	800d4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b380:	f000 fe34 	bl	800bfec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b384:	f002 f86e 	bl	800d464 <vPortEnterCritical>
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b38e:	b25b      	sxtb	r3, r3
 800b390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b394:	d103      	bne.n	800b39e <xQueueReceive+0x122>
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3a4:	b25b      	sxtb	r3, r3
 800b3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3aa:	d103      	bne.n	800b3b4 <xQueueReceive+0x138>
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3b4:	f002 f886 	bl	800d4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3b8:	1d3a      	adds	r2, r7, #4
 800b3ba:	f107 0310 	add.w	r3, r7, #16
 800b3be:	4611      	mov	r1, r2
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f001 f8b1 	bl	800c528 <xTaskCheckForTimeOut>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d123      	bne.n	800b414 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ce:	f000 fb1a 	bl	800ba06 <prvIsQueueEmpty>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d017      	beq.n	800b408 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3da:	3324      	adds	r3, #36	; 0x24
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	4611      	mov	r1, r2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 ffd7 	bl	800c394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3e8:	f000 fabb 	bl	800b962 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3ec:	f000 fe0c 	bl	800c008 <xTaskResumeAll>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d189      	bne.n	800b30a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b3f6:	4b10      	ldr	r3, [pc, #64]	; (800b438 <xQueueReceive+0x1bc>)
 800b3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	e780      	b.n	800b30a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40a:	f000 faaa 	bl	800b962 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b40e:	f000 fdfb 	bl	800c008 <xTaskResumeAll>
 800b412:	e77a      	b.n	800b30a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b416:	f000 faa4 	bl	800b962 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b41a:	f000 fdf5 	bl	800c008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b420:	f000 faf1 	bl	800ba06 <prvIsQueueEmpty>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	f43f af6f 	beq.w	800b30a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b42c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3730      	adds	r7, #48	; 0x30
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08e      	sub	sp, #56	; 0x38
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b446:	2300      	movs	r3, #0
 800b448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b44e:	2300      	movs	r3, #0
 800b450:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	623b      	str	r3, [r7, #32]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00a      	beq.n	800b48c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	61fb      	str	r3, [r7, #28]
}
 800b488:	bf00      	nop
 800b48a:	e7fe      	b.n	800b48a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b48c:	f001 f990 	bl	800c7b0 <xTaskGetSchedulerState>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <xQueueSemaphoreTake+0x60>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <xQueueSemaphoreTake+0x64>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <xQueueSemaphoreTake+0x66>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10a      	bne.n	800b4bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	61bb      	str	r3, [r7, #24]
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4bc:	f001 ffd2 	bl	800d464 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d024      	beq.n	800b516 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	1e5a      	subs	r2, r3, #1
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d104      	bne.n	800b4e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b4dc:	f001 fade 	bl	800ca9c <pvTaskIncrementMutexHeldCount>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00f      	beq.n	800b50e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	3310      	adds	r3, #16
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 ff9e 	bl	800c434 <xTaskRemoveFromEventList>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4fe:	4b54      	ldr	r3, [pc, #336]	; (800b650 <xQueueSemaphoreTake+0x214>)
 800b500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b50e:	f001 ffd9 	bl	800d4c4 <vPortExitCritical>
				return pdPASS;
 800b512:	2301      	movs	r3, #1
 800b514:	e097      	b.n	800b646 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d111      	bne.n	800b540 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00a      	beq.n	800b538 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	617b      	str	r3, [r7, #20]
}
 800b534:	bf00      	nop
 800b536:	e7fe      	b.n	800b536 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b538:	f001 ffc4 	bl	800d4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b53c:	2300      	movs	r3, #0
 800b53e:	e082      	b.n	800b646 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b542:	2b00      	cmp	r3, #0
 800b544:	d106      	bne.n	800b554 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b546:	f107 030c 	add.w	r3, r7, #12
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 ffd6 	bl	800c4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b550:	2301      	movs	r3, #1
 800b552:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b554:	f001 ffb6 	bl	800d4c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b558:	f000 fd48 	bl	800bfec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b55c:	f001 ff82 	bl	800d464 <vPortEnterCritical>
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b566:	b25b      	sxtb	r3, r3
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56c:	d103      	bne.n	800b576 <xQueueSemaphoreTake+0x13a>
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b57c:	b25b      	sxtb	r3, r3
 800b57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b582:	d103      	bne.n	800b58c <xQueueSemaphoreTake+0x150>
 800b584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b58c:	f001 ff9a 	bl	800d4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b590:	463a      	mov	r2, r7
 800b592:	f107 030c 	add.w	r3, r7, #12
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 ffc5 	bl	800c528 <xTaskCheckForTimeOut>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d132      	bne.n	800b60a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5a6:	f000 fa2e 	bl	800ba06 <prvIsQueueEmpty>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d026      	beq.n	800b5fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d109      	bne.n	800b5cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b5b8:	f001 ff54 	bl	800d464 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f001 f913 	bl	800c7ec <xTaskPriorityInherit>
 800b5c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b5c8:	f001 ff7c 	bl	800d4c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	3324      	adds	r3, #36	; 0x24
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f000 fedd 	bl	800c394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5dc:	f000 f9c1 	bl	800b962 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5e0:	f000 fd12 	bl	800c008 <xTaskResumeAll>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f47f af68 	bne.w	800b4bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b5ec:	4b18      	ldr	r3, [pc, #96]	; (800b650 <xQueueSemaphoreTake+0x214>)
 800b5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	e75e      	b.n	800b4bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b600:	f000 f9af 	bl	800b962 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b604:	f000 fd00 	bl	800c008 <xTaskResumeAll>
 800b608:	e758      	b.n	800b4bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b60a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b60c:	f000 f9a9 	bl	800b962 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b610:	f000 fcfa 	bl	800c008 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b616:	f000 f9f6 	bl	800ba06 <prvIsQueueEmpty>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f43f af4d 	beq.w	800b4bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00d      	beq.n	800b644 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b628:	f001 ff1c 	bl	800d464 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b62c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b62e:	f000 f8f0 	bl	800b812 <prvGetDisinheritPriorityAfterTimeout>
 800b632:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 f9ac 	bl	800c998 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b640:	f001 ff40 	bl	800d4c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b644:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b646:	4618      	mov	r0, r3
 800b648:	3738      	adds	r7, #56	; 0x38
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	e000ed04 	.word	0xe000ed04

0800b654 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08e      	sub	sp, #56	; 0x38
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10a      	bne.n	800b680 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	623b      	str	r3, [r7, #32]
}
 800b67c:	bf00      	nop
 800b67e:	e7fe      	b.n	800b67e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d103      	bne.n	800b68e <xQueueReceiveFromISR+0x3a>
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <xQueueReceiveFromISR+0x3e>
 800b68e:	2301      	movs	r3, #1
 800b690:	e000      	b.n	800b694 <xQueueReceiveFromISR+0x40>
 800b692:	2300      	movs	r3, #0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10a      	bne.n	800b6ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	61fb      	str	r3, [r7, #28]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6ae:	f001 ffbb 	bl	800d628 <vPortValidateInterruptPriority>
	__asm volatile
 800b6b2:	f3ef 8211 	mrs	r2, BASEPRI
 800b6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	61ba      	str	r2, [r7, #24]
 800b6c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b6ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d02f      	beq.n	800b73a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6e4:	68b9      	ldr	r1, [r7, #8]
 800b6e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e8:	f000 f915 	bl	800b916 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	1e5a      	subs	r2, r3, #1
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b6f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fc:	d112      	bne.n	800b724 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d016      	beq.n	800b734 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	3310      	adds	r3, #16
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 fe92 	bl	800c434 <xTaskRemoveFromEventList>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00e      	beq.n	800b734 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00b      	beq.n	800b734 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	e007      	b.n	800b734 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b728:	3301      	adds	r3, #1
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	b25a      	sxtb	r2, r3
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b734:	2301      	movs	r3, #1
 800b736:	637b      	str	r3, [r7, #52]	; 0x34
 800b738:	e001      	b.n	800b73e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b73a:	2300      	movs	r3, #0
 800b73c:	637b      	str	r3, [r7, #52]	; 0x34
 800b73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b740:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f383 8811 	msr	BASEPRI, r3
}
 800b748:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3738      	adds	r7, #56	; 0x38
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10a      	bne.n	800b778 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	60bb      	str	r3, [r7, #8]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b778:	f001 fe74 	bl	800d464 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b780:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b782:	f001 fe9f 	bl	800d4c4 <vPortExitCritical>

	return uxReturn;
 800b786:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	60fb      	str	r3, [r7, #12]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b7be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	371c      	adds	r7, #28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <vQueueDelete+0x28>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60bb      	str	r3, [r7, #8]
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 f95f 	bl	800bab8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f002 f81b 	bl	800d840 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b80a:	bf00      	nop
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b812:	b480      	push	{r7}
 800b814:	b085      	sub	sp, #20
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d006      	beq.n	800b830 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	e001      	b.n	800b834 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b834:	68fb      	ldr	r3, [r7, #12]
	}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b84e:	2300      	movs	r3, #0
 800b850:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b856:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10d      	bne.n	800b87c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d14d      	bne.n	800b904 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 f825 	bl	800c8bc <xTaskPriorityDisinherit>
 800b872:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	609a      	str	r2, [r3, #8]
 800b87a:	e043      	b.n	800b904 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d119      	bne.n	800b8b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6858      	ldr	r0, [r3, #4]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88a:	461a      	mov	r2, r3
 800b88c:	68b9      	ldr	r1, [r7, #8]
 800b88e:	f003 f9f0 	bl	800ec72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89a:	441a      	add	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d32b      	bcc.n	800b904 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	605a      	str	r2, [r3, #4]
 800b8b4:	e026      	b.n	800b904 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	68d8      	ldr	r0, [r3, #12]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8be:	461a      	mov	r2, r3
 800b8c0:	68b9      	ldr	r1, [r7, #8]
 800b8c2:	f003 f9d6 	bl	800ec72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ce:	425b      	negs	r3, r3
 800b8d0:	441a      	add	r2, r3
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d207      	bcs.n	800b8f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ea:	425b      	negs	r3, r3
 800b8ec:	441a      	add	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d105      	bne.n	800b904 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	3b01      	subs	r3, #1
 800b902:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b90c:	697b      	ldr	r3, [r7, #20]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d018      	beq.n	800b95a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68da      	ldr	r2, [r3, #12]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	441a      	add	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68da      	ldr	r2, [r3, #12]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d303      	bcc.n	800b94a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68d9      	ldr	r1, [r3, #12]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b952:	461a      	mov	r2, r3
 800b954:	6838      	ldr	r0, [r7, #0]
 800b956:	f003 f98c 	bl	800ec72 <memcpy>
	}
}
 800b95a:	bf00      	nop
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b96a:	f001 fd7b 	bl	800d464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b974:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b976:	e011      	b.n	800b99c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d012      	beq.n	800b9a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3324      	adds	r3, #36	; 0x24
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fd55 	bl	800c434 <xTaskRemoveFromEventList>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b990:	f000 fe2c 	bl	800c5ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	3b01      	subs	r3, #1
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	dce9      	bgt.n	800b978 <prvUnlockQueue+0x16>
 800b9a4:	e000      	b.n	800b9a8 <prvUnlockQueue+0x46>
					break;
 800b9a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	22ff      	movs	r2, #255	; 0xff
 800b9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b9b0:	f001 fd88 	bl	800d4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9b4:	f001 fd56 	bl	800d464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9c0:	e011      	b.n	800b9e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d012      	beq.n	800b9f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	3310      	adds	r3, #16
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 fd30 	bl	800c434 <xTaskRemoveFromEventList>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9da:	f000 fe07 	bl	800c5ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	dce9      	bgt.n	800b9c2 <prvUnlockQueue+0x60>
 800b9ee:	e000      	b.n	800b9f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	22ff      	movs	r2, #255	; 0xff
 800b9f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b9fa:	f001 fd63 	bl	800d4c4 <vPortExitCritical>
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba0e:	f001 fd29 	bl	800d464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d102      	bne.n	800ba20 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e001      	b.n	800ba24 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba20:	2300      	movs	r3, #0
 800ba22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba24:	f001 fd4e 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800ba28:	68fb      	ldr	r3, [r7, #12]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba3a:	f001 fd13 	bl	800d464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d102      	bne.n	800ba50 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	60fb      	str	r3, [r7, #12]
 800ba4e:	e001      	b.n	800ba54 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba50:	2300      	movs	r3, #0
 800ba52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba54:	f001 fd36 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800ba58:	68fb      	ldr	r3, [r7, #12]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	e014      	b.n	800ba9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba74:	4a0f      	ldr	r2, [pc, #60]	; (800bab4 <vQueueAddToRegistry+0x50>)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10b      	bne.n	800ba98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba80:	490c      	ldr	r1, [pc, #48]	; (800bab4 <vQueueAddToRegistry+0x50>)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba8a:	4a0a      	ldr	r2, [pc, #40]	; (800bab4 <vQueueAddToRegistry+0x50>)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	4413      	add	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba96:	e006      	b.n	800baa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b07      	cmp	r3, #7
 800baa2:	d9e7      	bls.n	800ba74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	20001190 	.word	0x20001190

0800bab8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bac0:	2300      	movs	r3, #0
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e016      	b.n	800baf4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bac6:	4a10      	ldr	r2, [pc, #64]	; (800bb08 <vQueueUnregisterQueue+0x50>)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	4413      	add	r3, r2
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d10b      	bne.n	800baee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bad6:	4a0c      	ldr	r2, [pc, #48]	; (800bb08 <vQueueUnregisterQueue+0x50>)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2100      	movs	r1, #0
 800badc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bae0:	4a09      	ldr	r2, [pc, #36]	; (800bb08 <vQueueUnregisterQueue+0x50>)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	4413      	add	r3, r2
 800bae8:	2200      	movs	r2, #0
 800baea:	605a      	str	r2, [r3, #4]
				break;
 800baec:	e006      	b.n	800bafc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	3301      	adds	r3, #1
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b07      	cmp	r3, #7
 800baf8:	d9e5      	bls.n	800bac6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bafa:	bf00      	nop
 800bafc:	bf00      	nop
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	20001190 	.word	0x20001190

0800bb0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb1c:	f001 fca2 	bl	800d464 <vPortEnterCritical>
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb26:	b25b      	sxtb	r3, r3
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2c:	d103      	bne.n	800bb36 <vQueueWaitForMessageRestricted+0x2a>
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb3c:	b25b      	sxtb	r3, r3
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb42:	d103      	bne.n	800bb4c <vQueueWaitForMessageRestricted+0x40>
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb4c:	f001 fcba 	bl	800d4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d106      	bne.n	800bb66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	3324      	adds	r3, #36	; 0x24
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	68b9      	ldr	r1, [r7, #8]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fc3b 	bl	800c3dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb66:	6978      	ldr	r0, [r7, #20]
 800bb68:	f7ff fefb 	bl	800b962 <prvUnlockQueue>
	}
 800bb6c:	bf00      	nop
 800bb6e:	3718      	adds	r7, #24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08e      	sub	sp, #56	; 0x38
 800bb78:	af04      	add	r7, sp, #16
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10a      	bne.n	800bb9e <xTaskCreateStatic+0x2a>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	623b      	str	r3, [r7, #32]
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <xTaskCreateStatic+0x46>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	61fb      	str	r3, [r7, #28]
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbba:	235c      	movs	r3, #92	; 0x5c
 800bbbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2b5c      	cmp	r3, #92	; 0x5c
 800bbc2:	d00a      	beq.n	800bbda <xTaskCreateStatic+0x66>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	61bb      	str	r3, [r7, #24]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d01e      	beq.n	800bc20 <xTaskCreateStatic+0xac>
 800bbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d01b      	beq.n	800bc20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	9302      	str	r3, [sp, #8]
 800bc02:	f107 0314 	add.w	r3, r7, #20
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	68b9      	ldr	r1, [r7, #8]
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 f850 	bl	800bcb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc1a:	f000 f8dd 	bl	800bdd8 <prvAddNewTaskToReadyList>
 800bc1e:	e001      	b.n	800bc24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bc20:	2300      	movs	r3, #0
 800bc22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc24:	697b      	ldr	r3, [r7, #20]
	}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3728      	adds	r7, #40	; 0x28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b08c      	sub	sp, #48	; 0x30
 800bc32:	af04      	add	r7, sp, #16
 800bc34:	60f8      	str	r0, [r7, #12]
 800bc36:	60b9      	str	r1, [r7, #8]
 800bc38:	603b      	str	r3, [r7, #0]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc3e:	88fb      	ldrh	r3, [r7, #6]
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f001 fd30 	bl	800d6a8 <pvPortMalloc>
 800bc48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00e      	beq.n	800bc6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc50:	205c      	movs	r0, #92	; 0x5c
 800bc52:	f001 fd29 	bl	800d6a8 <pvPortMalloc>
 800bc56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	631a      	str	r2, [r3, #48]	; 0x30
 800bc64:	e005      	b.n	800bc72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc66:	6978      	ldr	r0, [r7, #20]
 800bc68:	f001 fdea 	bl	800d840 <vPortFree>
 800bc6c:	e001      	b.n	800bc72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d017      	beq.n	800bca8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc80:	88fa      	ldrh	r2, [r7, #6]
 800bc82:	2300      	movs	r3, #0
 800bc84:	9303      	str	r3, [sp, #12]
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	9302      	str	r3, [sp, #8]
 800bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f000 f80e 	bl	800bcb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc9c:	69f8      	ldr	r0, [r7, #28]
 800bc9e:	f000 f89b 	bl	800bdd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bca2:	2301      	movs	r3, #1
 800bca4:	61bb      	str	r3, [r7, #24]
 800bca6:	e002      	b.n	800bcae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bca8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcae:	69bb      	ldr	r3, [r7, #24]
	}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3720      	adds	r7, #32
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	461a      	mov	r2, r3
 800bcd0:	21a5      	movs	r1, #165	; 0xa5
 800bcd2:	f002 fed1 	bl	800ea78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bce0:	3b01      	subs	r3, #1
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	f023 0307 	bic.w	r3, r3, #7
 800bcee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	f003 0307 	and.w	r3, r3, #7
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	617b      	str	r3, [r7, #20]
}
 800bd0c:	bf00      	nop
 800bd0e:	e7fe      	b.n	800bd0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d01f      	beq.n	800bd56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd16:	2300      	movs	r3, #0
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e012      	b.n	800bd42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	4413      	add	r3, r2
 800bd22:	7819      	ldrb	r1, [r3, #0]
 800bd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	4413      	add	r3, r2
 800bd2a:	3334      	adds	r3, #52	; 0x34
 800bd2c:	460a      	mov	r2, r1
 800bd2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	4413      	add	r3, r2
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d006      	beq.n	800bd4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	2b0f      	cmp	r3, #15
 800bd46:	d9e9      	bls.n	800bd1c <prvInitialiseNewTask+0x64>
 800bd48:	e000      	b.n	800bd4c <prvInitialiseNewTask+0x94>
			{
				break;
 800bd4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd54:	e003      	b.n	800bd5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	2b37      	cmp	r3, #55	; 0x37
 800bd62:	d901      	bls.n	800bd68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd64:	2337      	movs	r3, #55	; 0x37
 800bd66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	2200      	movs	r2, #0
 800bd78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fe1a 	bl	800a9b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	3318      	adds	r3, #24
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe fe15 	bl	800a9b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bda2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	2200      	movs	r2, #0
 800bda8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	68f9      	ldr	r1, [r7, #12]
 800bdb6:	69b8      	ldr	r0, [r7, #24]
 800bdb8:	f001 fa26 	bl	800d208 <pxPortInitialiseStack>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdce:	bf00      	nop
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bde0:	f001 fb40 	bl	800d464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bde4:	4b2d      	ldr	r3, [pc, #180]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3301      	adds	r3, #1
 800bdea:	4a2c      	ldr	r2, [pc, #176]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bdec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdee:	4b2c      	ldr	r3, [pc, #176]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d109      	bne.n	800be0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdf6:	4a2a      	ldr	r2, [pc, #168]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdfc:	4b27      	ldr	r3, [pc, #156]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d110      	bne.n	800be26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be04:	f000 fc16 	bl	800c634 <prvInitialiseTaskLists>
 800be08:	e00d      	b.n	800be26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be0a:	4b26      	ldr	r3, [pc, #152]	; (800bea4 <prvAddNewTaskToReadyList+0xcc>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be12:	4b23      	ldr	r3, [pc, #140]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d802      	bhi.n	800be26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be20:	4a1f      	ldr	r2, [pc, #124]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	4a1e      	ldr	r2, [pc, #120]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be30:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	4b1b      	ldr	r3, [pc, #108]	; (800beac <prvAddNewTaskToReadyList+0xd4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <prvAddNewTaskToReadyList+0x74>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	4a18      	ldr	r2, [pc, #96]	; (800beac <prvAddNewTaskToReadyList+0xd4>)
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4a15      	ldr	r2, [pc, #84]	; (800beb0 <prvAddNewTaskToReadyList+0xd8>)
 800be5a:	441a      	add	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3304      	adds	r3, #4
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	f7fe fdb5 	bl	800a9d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be68:	f001 fb2c 	bl	800d4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be6c:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <prvAddNewTaskToReadyList+0xcc>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00e      	beq.n	800be92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be74:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7e:	429a      	cmp	r2, r3
 800be80:	d207      	bcs.n	800be92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be82:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <prvAddNewTaskToReadyList+0xdc>)
 800be84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	200016a4 	.word	0x200016a4
 800bea0:	200011d0 	.word	0x200011d0
 800bea4:	200016b0 	.word	0x200016b0
 800bea8:	200016c0 	.word	0x200016c0
 800beac:	200016ac 	.word	0x200016ac
 800beb0:	200011d4 	.word	0x200011d4
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d017      	beq.n	800befa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beca:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <vTaskDelay+0x60>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00a      	beq.n	800bee8 <vTaskDelay+0x30>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	60bb      	str	r3, [r7, #8]
}
 800bee4:	bf00      	nop
 800bee6:	e7fe      	b.n	800bee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bee8:	f000 f880 	bl	800bfec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800beec:	2100      	movs	r1, #0
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fde8 	bl	800cac4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bef4:	f000 f888 	bl	800c008 <xTaskResumeAll>
 800bef8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d107      	bne.n	800bf10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bf00:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <vTaskDelay+0x64>)
 800bf02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf06:	601a      	str	r2, [r3, #0]
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	200016cc 	.word	0x200016cc
 800bf1c:	e000ed04 	.word	0xe000ed04

0800bf20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08a      	sub	sp, #40	; 0x28
 800bf24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf2e:	463a      	mov	r2, r7
 800bf30:	1d39      	adds	r1, r7, #4
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fcea 	bl	800a910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	9202      	str	r2, [sp, #8]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	2300      	movs	r3, #0
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	460a      	mov	r2, r1
 800bf4e:	4921      	ldr	r1, [pc, #132]	; (800bfd4 <vTaskStartScheduler+0xb4>)
 800bf50:	4821      	ldr	r0, [pc, #132]	; (800bfd8 <vTaskStartScheduler+0xb8>)
 800bf52:	f7ff fe0f 	bl	800bb74 <xTaskCreateStatic>
 800bf56:	4603      	mov	r3, r0
 800bf58:	4a20      	ldr	r2, [pc, #128]	; (800bfdc <vTaskStartScheduler+0xbc>)
 800bf5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf5c:	4b1f      	ldr	r3, [pc, #124]	; (800bfdc <vTaskStartScheduler+0xbc>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf64:	2301      	movs	r3, #1
 800bf66:	617b      	str	r3, [r7, #20]
 800bf68:	e001      	b.n	800bf6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d102      	bne.n	800bf7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf74:	f000 fdfa 	bl	800cb6c <xTimerCreateTimerTask>
 800bf78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d116      	bne.n	800bfae <vTaskStartScheduler+0x8e>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	613b      	str	r3, [r7, #16]
}
 800bf92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf94:	4b12      	ldr	r3, [pc, #72]	; (800bfe0 <vTaskStartScheduler+0xc0>)
 800bf96:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf9c:	4b11      	ldr	r3, [pc, #68]	; (800bfe4 <vTaskStartScheduler+0xc4>)
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <vTaskStartScheduler+0xc8>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfa8:	f001 f9ba 	bl	800d320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfac:	e00e      	b.n	800bfcc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb4:	d10a      	bne.n	800bfcc <vTaskStartScheduler+0xac>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	60fb      	str	r3, [r7, #12]
}
 800bfc8:	bf00      	nop
 800bfca:	e7fe      	b.n	800bfca <vTaskStartScheduler+0xaa>
}
 800bfcc:	bf00      	nop
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	08010f44 	.word	0x08010f44
 800bfd8:	0800c605 	.word	0x0800c605
 800bfdc:	200016c8 	.word	0x200016c8
 800bfe0:	200016c4 	.word	0x200016c4
 800bfe4:	200016b0 	.word	0x200016b0
 800bfe8:	200016a8 	.word	0x200016a8

0800bfec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <vTaskSuspendAll+0x18>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3301      	adds	r3, #1
 800bff6:	4a03      	ldr	r2, [pc, #12]	; (800c004 <vTaskSuspendAll+0x18>)
 800bff8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bffa:	bf00      	nop
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	200016cc 	.word	0x200016cc

0800c008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c012:	2300      	movs	r3, #0
 800c014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c016:	4b42      	ldr	r3, [pc, #264]	; (800c120 <xTaskResumeAll+0x118>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10a      	bne.n	800c034 <xTaskResumeAll+0x2c>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	603b      	str	r3, [r7, #0]
}
 800c030:	bf00      	nop
 800c032:	e7fe      	b.n	800c032 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c034:	f001 fa16 	bl	800d464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c038:	4b39      	ldr	r3, [pc, #228]	; (800c120 <xTaskResumeAll+0x118>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	4a38      	ldr	r2, [pc, #224]	; (800c120 <xTaskResumeAll+0x118>)
 800c040:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c042:	4b37      	ldr	r3, [pc, #220]	; (800c120 <xTaskResumeAll+0x118>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d162      	bne.n	800c110 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c04a:	4b36      	ldr	r3, [pc, #216]	; (800c124 <xTaskResumeAll+0x11c>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d05e      	beq.n	800c110 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c052:	e02f      	b.n	800c0b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c054:	4b34      	ldr	r3, [pc, #208]	; (800c128 <xTaskResumeAll+0x120>)
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	3318      	adds	r3, #24
 800c060:	4618      	mov	r0, r3
 800c062:	f7fe fd13 	bl	800aa8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3304      	adds	r3, #4
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe fd0e 	bl	800aa8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c074:	4b2d      	ldr	r3, [pc, #180]	; (800c12c <xTaskResumeAll+0x124>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d903      	bls.n	800c084 <xTaskResumeAll+0x7c>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c080:	4a2a      	ldr	r2, [pc, #168]	; (800c12c <xTaskResumeAll+0x124>)
 800c082:	6013      	str	r3, [r2, #0]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c088:	4613      	mov	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4a27      	ldr	r2, [pc, #156]	; (800c130 <xTaskResumeAll+0x128>)
 800c092:	441a      	add	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	3304      	adds	r3, #4
 800c098:	4619      	mov	r1, r3
 800c09a:	4610      	mov	r0, r2
 800c09c:	f7fe fc99 	bl	800a9d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a4:	4b23      	ldr	r3, [pc, #140]	; (800c134 <xTaskResumeAll+0x12c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d302      	bcc.n	800c0b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c0ae:	4b22      	ldr	r3, [pc, #136]	; (800c138 <xTaskResumeAll+0x130>)
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0b4:	4b1c      	ldr	r3, [pc, #112]	; (800c128 <xTaskResumeAll+0x120>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1cb      	bne.n	800c054 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0c2:	f000 fb55 	bl	800c770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0c6:	4b1d      	ldr	r3, [pc, #116]	; (800c13c <xTaskResumeAll+0x134>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d010      	beq.n	800c0f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0d2:	f000 f847 	bl	800c164 <xTaskIncrementTick>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d002      	beq.n	800c0e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c0dc:	4b16      	ldr	r3, [pc, #88]	; (800c138 <xTaskResumeAll+0x130>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1f1      	bne.n	800c0d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c0ee:	4b13      	ldr	r3, [pc, #76]	; (800c13c <xTaskResumeAll+0x134>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0f4:	4b10      	ldr	r3, [pc, #64]	; (800c138 <xTaskResumeAll+0x130>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d009      	beq.n	800c110 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c100:	4b0f      	ldr	r3, [pc, #60]	; (800c140 <xTaskResumeAll+0x138>)
 800c102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c110:	f001 f9d8 	bl	800d4c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c114:	68bb      	ldr	r3, [r7, #8]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200016cc 	.word	0x200016cc
 800c124:	200016a4 	.word	0x200016a4
 800c128:	20001664 	.word	0x20001664
 800c12c:	200016ac 	.word	0x200016ac
 800c130:	200011d4 	.word	0x200011d4
 800c134:	200011d0 	.word	0x200011d0
 800c138:	200016b8 	.word	0x200016b8
 800c13c:	200016b4 	.word	0x200016b4
 800c140:	e000ed04 	.word	0xe000ed04

0800c144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c14a:	4b05      	ldr	r3, [pc, #20]	; (800c160 <xTaskGetTickCount+0x1c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c150:	687b      	ldr	r3, [r7, #4]
}
 800c152:	4618      	mov	r0, r3
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	200016a8 	.word	0x200016a8

0800c164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c16e:	4b4f      	ldr	r3, [pc, #316]	; (800c2ac <xTaskIncrementTick+0x148>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	f040 808f 	bne.w	800c296 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c178:	4b4d      	ldr	r3, [pc, #308]	; (800c2b0 <xTaskIncrementTick+0x14c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c180:	4a4b      	ldr	r2, [pc, #300]	; (800c2b0 <xTaskIncrementTick+0x14c>)
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d120      	bne.n	800c1ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c18c:	4b49      	ldr	r3, [pc, #292]	; (800c2b4 <xTaskIncrementTick+0x150>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00a      	beq.n	800c1ac <xTaskIncrementTick+0x48>
	__asm volatile
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	603b      	str	r3, [r7, #0]
}
 800c1a8:	bf00      	nop
 800c1aa:	e7fe      	b.n	800c1aa <xTaskIncrementTick+0x46>
 800c1ac:	4b41      	ldr	r3, [pc, #260]	; (800c2b4 <xTaskIncrementTick+0x150>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	4b41      	ldr	r3, [pc, #260]	; (800c2b8 <xTaskIncrementTick+0x154>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a3f      	ldr	r2, [pc, #252]	; (800c2b4 <xTaskIncrementTick+0x150>)
 800c1b8:	6013      	str	r3, [r2, #0]
 800c1ba:	4a3f      	ldr	r2, [pc, #252]	; (800c2b8 <xTaskIncrementTick+0x154>)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	4b3e      	ldr	r3, [pc, #248]	; (800c2bc <xTaskIncrementTick+0x158>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	4a3d      	ldr	r2, [pc, #244]	; (800c2bc <xTaskIncrementTick+0x158>)
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	f000 fad1 	bl	800c770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1ce:	4b3c      	ldr	r3, [pc, #240]	; (800c2c0 <xTaskIncrementTick+0x15c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d349      	bcc.n	800c26c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1d8:	4b36      	ldr	r3, [pc, #216]	; (800c2b4 <xTaskIncrementTick+0x150>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d104      	bne.n	800c1ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e2:	4b37      	ldr	r3, [pc, #220]	; (800c2c0 <xTaskIncrementTick+0x15c>)
 800c1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e8:	601a      	str	r2, [r3, #0]
					break;
 800c1ea:	e03f      	b.n	800c26c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ec:	4b31      	ldr	r3, [pc, #196]	; (800c2b4 <xTaskIncrementTick+0x150>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	429a      	cmp	r2, r3
 800c202:	d203      	bcs.n	800c20c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c204:	4a2e      	ldr	r2, [pc, #184]	; (800c2c0 <xTaskIncrementTick+0x15c>)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c20a:	e02f      	b.n	800c26c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	3304      	adds	r3, #4
 800c210:	4618      	mov	r0, r3
 800c212:	f7fe fc3b 	bl	800aa8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d004      	beq.n	800c228 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	3318      	adds	r3, #24
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe fc32 	bl	800aa8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22c:	4b25      	ldr	r3, [pc, #148]	; (800c2c4 <xTaskIncrementTick+0x160>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d903      	bls.n	800c23c <xTaskIncrementTick+0xd8>
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	4a22      	ldr	r2, [pc, #136]	; (800c2c4 <xTaskIncrementTick+0x160>)
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4a1f      	ldr	r2, [pc, #124]	; (800c2c8 <xTaskIncrementTick+0x164>)
 800c24a:	441a      	add	r2, r3
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	3304      	adds	r3, #4
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f7fe fbbd 	bl	800a9d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25c:	4b1b      	ldr	r3, [pc, #108]	; (800c2cc <xTaskIncrementTick+0x168>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c262:	429a      	cmp	r2, r3
 800c264:	d3b8      	bcc.n	800c1d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c266:	2301      	movs	r3, #1
 800c268:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c26a:	e7b5      	b.n	800c1d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c26c:	4b17      	ldr	r3, [pc, #92]	; (800c2cc <xTaskIncrementTick+0x168>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c272:	4915      	ldr	r1, [pc, #84]	; (800c2c8 <xTaskIncrementTick+0x164>)
 800c274:	4613      	mov	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	440b      	add	r3, r1
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d901      	bls.n	800c288 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c284:	2301      	movs	r3, #1
 800c286:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c288:	4b11      	ldr	r3, [pc, #68]	; (800c2d0 <xTaskIncrementTick+0x16c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d007      	beq.n	800c2a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c290:	2301      	movs	r3, #1
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	e004      	b.n	800c2a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c296:	4b0f      	ldr	r3, [pc, #60]	; (800c2d4 <xTaskIncrementTick+0x170>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3301      	adds	r3, #1
 800c29c:	4a0d      	ldr	r2, [pc, #52]	; (800c2d4 <xTaskIncrementTick+0x170>)
 800c29e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2a0:	697b      	ldr	r3, [r7, #20]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3718      	adds	r7, #24
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	200016cc 	.word	0x200016cc
 800c2b0:	200016a8 	.word	0x200016a8
 800c2b4:	2000165c 	.word	0x2000165c
 800c2b8:	20001660 	.word	0x20001660
 800c2bc:	200016bc 	.word	0x200016bc
 800c2c0:	200016c4 	.word	0x200016c4
 800c2c4:	200016ac 	.word	0x200016ac
 800c2c8:	200011d4 	.word	0x200011d4
 800c2cc:	200011d0 	.word	0x200011d0
 800c2d0:	200016b8 	.word	0x200016b8
 800c2d4:	200016b4 	.word	0x200016b4

0800c2d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2de:	4b28      	ldr	r3, [pc, #160]	; (800c380 <vTaskSwitchContext+0xa8>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d003      	beq.n	800c2ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2e6:	4b27      	ldr	r3, [pc, #156]	; (800c384 <vTaskSwitchContext+0xac>)
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2ec:	e041      	b.n	800c372 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c2ee:	4b25      	ldr	r3, [pc, #148]	; (800c384 <vTaskSwitchContext+0xac>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f4:	4b24      	ldr	r3, [pc, #144]	; (800c388 <vTaskSwitchContext+0xb0>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	e010      	b.n	800c31e <vTaskSwitchContext+0x46>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10a      	bne.n	800c318 <vTaskSwitchContext+0x40>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	607b      	str	r3, [r7, #4]
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <vTaskSwitchContext+0x3e>
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	491b      	ldr	r1, [pc, #108]	; (800c38c <vTaskSwitchContext+0xb4>)
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4613      	mov	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	440b      	add	r3, r1
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d0e4      	beq.n	800c2fc <vTaskSwitchContext+0x24>
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4a13      	ldr	r2, [pc, #76]	; (800c38c <vTaskSwitchContext+0xb4>)
 800c33e:	4413      	add	r3, r2
 800c340:	60bb      	str	r3, [r7, #8]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	605a      	str	r2, [r3, #4]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	3308      	adds	r3, #8
 800c354:	429a      	cmp	r2, r3
 800c356:	d104      	bne.n	800c362 <vTaskSwitchContext+0x8a>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	4a09      	ldr	r2, [pc, #36]	; (800c390 <vTaskSwitchContext+0xb8>)
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	4a06      	ldr	r2, [pc, #24]	; (800c388 <vTaskSwitchContext+0xb0>)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6013      	str	r3, [r2, #0]
}
 800c372:	bf00      	nop
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	200016cc 	.word	0x200016cc
 800c384:	200016b8 	.word	0x200016b8
 800c388:	200016ac 	.word	0x200016ac
 800c38c:	200011d4 	.word	0x200011d4
 800c390:	200011d0 	.word	0x200011d0

0800c394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	60fb      	str	r3, [r7, #12]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3ba:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <vTaskPlaceOnEventList+0x44>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3318      	adds	r3, #24
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7fe fb29 	bl	800aa1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	6838      	ldr	r0, [r7, #0]
 800c3cc:	f000 fb7a 	bl	800cac4 <prvAddCurrentTaskToDelayedList>
}
 800c3d0:	bf00      	nop
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	200011d0 	.word	0x200011d0

0800c3dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10a      	bne.n	800c404 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	617b      	str	r3, [r7, #20]
}
 800c400:	bf00      	nop
 800c402:	e7fe      	b.n	800c402 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c404:	4b0a      	ldr	r3, [pc, #40]	; (800c430 <vTaskPlaceOnEventListRestricted+0x54>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3318      	adds	r3, #24
 800c40a:	4619      	mov	r1, r3
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f7fe fae0 	bl	800a9d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c418:	f04f 33ff 	mov.w	r3, #4294967295
 800c41c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	68b8      	ldr	r0, [r7, #8]
 800c422:	f000 fb4f 	bl	800cac4 <prvAddCurrentTaskToDelayedList>
	}
 800c426:	bf00      	nop
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	200011d0 	.word	0x200011d0

0800c434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10a      	bne.n	800c460 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	60fb      	str	r3, [r7, #12]
}
 800c45c:	bf00      	nop
 800c45e:	e7fe      	b.n	800c45e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	3318      	adds	r3, #24
 800c464:	4618      	mov	r0, r3
 800c466:	f7fe fb11 	bl	800aa8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c46a:	4b1e      	ldr	r3, [pc, #120]	; (800c4e4 <xTaskRemoveFromEventList+0xb0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d11d      	bne.n	800c4ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	3304      	adds	r3, #4
 800c476:	4618      	mov	r0, r3
 800c478:	f7fe fb08 	bl	800aa8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c480:	4b19      	ldr	r3, [pc, #100]	; (800c4e8 <xTaskRemoveFromEventList+0xb4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	429a      	cmp	r2, r3
 800c486:	d903      	bls.n	800c490 <xTaskRemoveFromEventList+0x5c>
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48c:	4a16      	ldr	r2, [pc, #88]	; (800c4e8 <xTaskRemoveFromEventList+0xb4>)
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c494:	4613      	mov	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4a13      	ldr	r2, [pc, #76]	; (800c4ec <xTaskRemoveFromEventList+0xb8>)
 800c49e:	441a      	add	r2, r3
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	f7fe fa93 	bl	800a9d2 <vListInsertEnd>
 800c4ac:	e005      	b.n	800c4ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	3318      	adds	r3, #24
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	480e      	ldr	r0, [pc, #56]	; (800c4f0 <xTaskRemoveFromEventList+0xbc>)
 800c4b6:	f7fe fa8c 	bl	800a9d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4be:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <xTaskRemoveFromEventList+0xc0>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d905      	bls.n	800c4d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <xTaskRemoveFromEventList+0xc4>)
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	e001      	b.n	800c4d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4d8:	697b      	ldr	r3, [r7, #20]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	200016cc 	.word	0x200016cc
 800c4e8:	200016ac 	.word	0x200016ac
 800c4ec:	200011d4 	.word	0x200011d4
 800c4f0:	20001664 	.word	0x20001664
 800c4f4:	200011d0 	.word	0x200011d0
 800c4f8:	200016b8 	.word	0x200016b8

0800c4fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c504:	4b06      	ldr	r3, [pc, #24]	; (800c520 <vTaskInternalSetTimeOutState+0x24>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <vTaskInternalSetTimeOutState+0x28>)
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	605a      	str	r2, [r3, #4]
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	200016bc 	.word	0x200016bc
 800c524:	200016a8 	.word	0x200016a8

0800c528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b088      	sub	sp, #32
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10a      	bne.n	800c54e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	613b      	str	r3, [r7, #16]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	60fb      	str	r3, [r7, #12]
}
 800c566:	bf00      	nop
 800c568:	e7fe      	b.n	800c568 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c56a:	f000 ff7b 	bl	800d464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c56e:	4b1d      	ldr	r3, [pc, #116]	; (800c5e4 <xTaskCheckForTimeOut+0xbc>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	69ba      	ldr	r2, [r7, #24]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c586:	d102      	bne.n	800c58e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c588:	2300      	movs	r3, #0
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	e023      	b.n	800c5d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <xTaskCheckForTimeOut+0xc0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	429a      	cmp	r2, r3
 800c598:	d007      	beq.n	800c5aa <xTaskCheckForTimeOut+0x82>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	69ba      	ldr	r2, [r7, #24]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d302      	bcc.n	800c5aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	61fb      	str	r3, [r7, #28]
 800c5a8:	e015      	b.n	800c5d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	697a      	ldr	r2, [r7, #20]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d20b      	bcs.n	800c5cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	1ad2      	subs	r2, r2, r3
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff ff9b 	bl	800c4fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	61fb      	str	r3, [r7, #28]
 800c5ca:	e004      	b.n	800c5d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5d6:	f000 ff75 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800c5da:	69fb      	ldr	r3, [r7, #28]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3720      	adds	r7, #32
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	200016a8 	.word	0x200016a8
 800c5e8:	200016bc 	.word	0x200016bc

0800c5ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5f0:	4b03      	ldr	r3, [pc, #12]	; (800c600 <vTaskMissedYield+0x14>)
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	601a      	str	r2, [r3, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	200016b8 	.word	0x200016b8

0800c604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c60c:	f000 f852 	bl	800c6b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c610:	4b06      	ldr	r3, [pc, #24]	; (800c62c <prvIdleTask+0x28>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d9f9      	bls.n	800c60c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c618:	4b05      	ldr	r3, [pc, #20]	; (800c630 <prvIdleTask+0x2c>)
 800c61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c628:	e7f0      	b.n	800c60c <prvIdleTask+0x8>
 800c62a:	bf00      	nop
 800c62c:	200011d4 	.word	0x200011d4
 800c630:	e000ed04 	.word	0xe000ed04

0800c634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c63a:	2300      	movs	r3, #0
 800c63c:	607b      	str	r3, [r7, #4]
 800c63e:	e00c      	b.n	800c65a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	4613      	mov	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4a12      	ldr	r2, [pc, #72]	; (800c694 <prvInitialiseTaskLists+0x60>)
 800c64c:	4413      	add	r3, r2
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe f992 	bl	800a978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3301      	adds	r3, #1
 800c658:	607b      	str	r3, [r7, #4]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b37      	cmp	r3, #55	; 0x37
 800c65e:	d9ef      	bls.n	800c640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c660:	480d      	ldr	r0, [pc, #52]	; (800c698 <prvInitialiseTaskLists+0x64>)
 800c662:	f7fe f989 	bl	800a978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c666:	480d      	ldr	r0, [pc, #52]	; (800c69c <prvInitialiseTaskLists+0x68>)
 800c668:	f7fe f986 	bl	800a978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c66c:	480c      	ldr	r0, [pc, #48]	; (800c6a0 <prvInitialiseTaskLists+0x6c>)
 800c66e:	f7fe f983 	bl	800a978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c672:	480c      	ldr	r0, [pc, #48]	; (800c6a4 <prvInitialiseTaskLists+0x70>)
 800c674:	f7fe f980 	bl	800a978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c678:	480b      	ldr	r0, [pc, #44]	; (800c6a8 <prvInitialiseTaskLists+0x74>)
 800c67a:	f7fe f97d 	bl	800a978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c67e:	4b0b      	ldr	r3, [pc, #44]	; (800c6ac <prvInitialiseTaskLists+0x78>)
 800c680:	4a05      	ldr	r2, [pc, #20]	; (800c698 <prvInitialiseTaskLists+0x64>)
 800c682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c684:	4b0a      	ldr	r3, [pc, #40]	; (800c6b0 <prvInitialiseTaskLists+0x7c>)
 800c686:	4a05      	ldr	r2, [pc, #20]	; (800c69c <prvInitialiseTaskLists+0x68>)
 800c688:	601a      	str	r2, [r3, #0]
}
 800c68a:	bf00      	nop
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	200011d4 	.word	0x200011d4
 800c698:	20001634 	.word	0x20001634
 800c69c:	20001648 	.word	0x20001648
 800c6a0:	20001664 	.word	0x20001664
 800c6a4:	20001678 	.word	0x20001678
 800c6a8:	20001690 	.word	0x20001690
 800c6ac:	2000165c 	.word	0x2000165c
 800c6b0:	20001660 	.word	0x20001660

0800c6b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6ba:	e019      	b.n	800c6f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6bc:	f000 fed2 	bl	800d464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6c0:	4b10      	ldr	r3, [pc, #64]	; (800c704 <prvCheckTasksWaitingTermination+0x50>)
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe f9dd 	bl	800aa8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6d2:	4b0d      	ldr	r3, [pc, #52]	; (800c708 <prvCheckTasksWaitingTermination+0x54>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	4a0b      	ldr	r2, [pc, #44]	; (800c708 <prvCheckTasksWaitingTermination+0x54>)
 800c6da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6dc:	4b0b      	ldr	r3, [pc, #44]	; (800c70c <prvCheckTasksWaitingTermination+0x58>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	4a0a      	ldr	r2, [pc, #40]	; (800c70c <prvCheckTasksWaitingTermination+0x58>)
 800c6e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6e6:	f000 feed 	bl	800d4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f810 	bl	800c710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6f0:	4b06      	ldr	r3, [pc, #24]	; (800c70c <prvCheckTasksWaitingTermination+0x58>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e1      	bne.n	800c6bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6f8:	bf00      	nop
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20001678 	.word	0x20001678
 800c708:	200016a4 	.word	0x200016a4
 800c70c:	2000168c 	.word	0x2000168c

0800c710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d108      	bne.n	800c734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c726:	4618      	mov	r0, r3
 800c728:	f001 f88a 	bl	800d840 <vPortFree>
				vPortFree( pxTCB );
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f001 f887 	bl	800d840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c732:	e018      	b.n	800c766 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d103      	bne.n	800c746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 f87e 	bl	800d840 <vPortFree>
	}
 800c744:	e00f      	b.n	800c766 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d00a      	beq.n	800c766 <prvDeleteTCB+0x56>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	60fb      	str	r3, [r7, #12]
}
 800c762:	bf00      	nop
 800c764:	e7fe      	b.n	800c764 <prvDeleteTCB+0x54>
	}
 800c766:	bf00      	nop
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c776:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <prvResetNextTaskUnblockTime+0x38>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d104      	bne.n	800c78a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c780:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <prvResetNextTaskUnblockTime+0x3c>)
 800c782:	f04f 32ff 	mov.w	r2, #4294967295
 800c786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c788:	e008      	b.n	800c79c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <prvResetNextTaskUnblockTime+0x38>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	4a04      	ldr	r2, [pc, #16]	; (800c7ac <prvResetNextTaskUnblockTime+0x3c>)
 800c79a:	6013      	str	r3, [r2, #0]
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	2000165c 	.word	0x2000165c
 800c7ac:	200016c4 	.word	0x200016c4

0800c7b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7b6:	4b0b      	ldr	r3, [pc, #44]	; (800c7e4 <xTaskGetSchedulerState+0x34>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d102      	bne.n	800c7c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	607b      	str	r3, [r7, #4]
 800c7c2:	e008      	b.n	800c7d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7c4:	4b08      	ldr	r3, [pc, #32]	; (800c7e8 <xTaskGetSchedulerState+0x38>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	607b      	str	r3, [r7, #4]
 800c7d0:	e001      	b.n	800c7d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7d6:	687b      	ldr	r3, [r7, #4]
	}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	200016b0 	.word	0x200016b0
 800c7e8:	200016cc 	.word	0x200016cc

0800c7ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d051      	beq.n	800c8a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c806:	4b2a      	ldr	r3, [pc, #168]	; (800c8b0 <xTaskPriorityInherit+0xc4>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d241      	bcs.n	800c894 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	2b00      	cmp	r3, #0
 800c816:	db06      	blt.n	800c826 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c818:	4b25      	ldr	r3, [pc, #148]	; (800c8b0 <xTaskPriorityInherit+0xc4>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6959      	ldr	r1, [r3, #20]
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c82e:	4613      	mov	r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4413      	add	r3, r2
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4a1f      	ldr	r2, [pc, #124]	; (800c8b4 <xTaskPriorityInherit+0xc8>)
 800c838:	4413      	add	r3, r2
 800c83a:	4299      	cmp	r1, r3
 800c83c:	d122      	bne.n	800c884 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	3304      	adds	r3, #4
 800c842:	4618      	mov	r0, r3
 800c844:	f7fe f922 	bl	800aa8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c848:	4b19      	ldr	r3, [pc, #100]	; (800c8b0 <xTaskPriorityInherit+0xc4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c856:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <xTaskPriorityInherit+0xcc>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d903      	bls.n	800c866 <xTaskPriorityInherit+0x7a>
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c862:	4a15      	ldr	r2, [pc, #84]	; (800c8b8 <xTaskPriorityInherit+0xcc>)
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86a:	4613      	mov	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4a10      	ldr	r2, [pc, #64]	; (800c8b4 <xTaskPriorityInherit+0xc8>)
 800c874:	441a      	add	r2, r3
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	3304      	adds	r3, #4
 800c87a:	4619      	mov	r1, r3
 800c87c:	4610      	mov	r0, r2
 800c87e:	f7fe f8a8 	bl	800a9d2 <vListInsertEnd>
 800c882:	e004      	b.n	800c88e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c884:	4b0a      	ldr	r3, [pc, #40]	; (800c8b0 <xTaskPriorityInherit+0xc4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c88e:	2301      	movs	r3, #1
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	e008      	b.n	800c8a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c898:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <xTaskPriorityInherit+0xc4>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d201      	bcs.n	800c8a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
	}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	200011d0 	.word	0x200011d0
 800c8b4:	200011d4 	.word	0x200011d4
 800c8b8:	200016ac 	.word	0x200016ac

0800c8bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d056      	beq.n	800c980 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8d2:	4b2e      	ldr	r3, [pc, #184]	; (800c98c <xTaskPriorityDisinherit+0xd0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d00a      	beq.n	800c8f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	60fb      	str	r3, [r7, #12]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10a      	bne.n	800c910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	60bb      	str	r3, [r7, #8]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c914:	1e5a      	subs	r2, r3, #1
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c922:	429a      	cmp	r2, r3
 800c924:	d02c      	beq.n	800c980 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d128      	bne.n	800c980 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	3304      	adds	r3, #4
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe f8aa 	bl	800aa8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c944:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c950:	4b0f      	ldr	r3, [pc, #60]	; (800c990 <xTaskPriorityDisinherit+0xd4>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	429a      	cmp	r2, r3
 800c956:	d903      	bls.n	800c960 <xTaskPriorityDisinherit+0xa4>
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c95c:	4a0c      	ldr	r2, [pc, #48]	; (800c990 <xTaskPriorityDisinherit+0xd4>)
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c964:	4613      	mov	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4a09      	ldr	r2, [pc, #36]	; (800c994 <xTaskPriorityDisinherit+0xd8>)
 800c96e:	441a      	add	r2, r3
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	3304      	adds	r3, #4
 800c974:	4619      	mov	r1, r3
 800c976:	4610      	mov	r0, r2
 800c978:	f7fe f82b 	bl	800a9d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c97c:	2301      	movs	r3, #1
 800c97e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c980:	697b      	ldr	r3, [r7, #20]
	}
 800c982:	4618      	mov	r0, r3
 800c984:	3718      	adds	r7, #24
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	200011d0 	.word	0x200011d0
 800c990:	200016ac 	.word	0x200016ac
 800c994:	200011d4 	.word	0x200011d4

0800c998 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d06a      	beq.n	800ca86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10a      	bne.n	800c9ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	60fb      	str	r3, [r7, #12]
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d902      	bls.n	800c9de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	61fb      	str	r3, [r7, #28]
 800c9dc:	e002      	b.n	800c9e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e8:	69fa      	ldr	r2, [r7, #28]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d04b      	beq.n	800ca86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d146      	bne.n	800ca86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c9f8:	4b25      	ldr	r3, [pc, #148]	; (800ca90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	69ba      	ldr	r2, [r7, #24]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d10a      	bne.n	800ca18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	60bb      	str	r3, [r7, #8]
}
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	69fa      	ldr	r2, [r7, #28]
 800ca22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	db04      	blt.n	800ca36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	6959      	ldr	r1, [r3, #20]
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4a13      	ldr	r2, [pc, #76]	; (800ca94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ca46:	4413      	add	r3, r2
 800ca48:	4299      	cmp	r1, r3
 800ca4a:	d11c      	bne.n	800ca86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fe f81b 	bl	800aa8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5a:	4b0f      	ldr	r3, [pc, #60]	; (800ca98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d903      	bls.n	800ca6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca66:	4a0c      	ldr	r2, [pc, #48]	; (800ca98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4a07      	ldr	r2, [pc, #28]	; (800ca94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ca78:	441a      	add	r2, r3
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	4619      	mov	r1, r3
 800ca80:	4610      	mov	r0, r2
 800ca82:	f7fd ffa6 	bl	800a9d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca86:	bf00      	nop
 800ca88:	3720      	adds	r7, #32
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	200011d0 	.word	0x200011d0
 800ca94:	200011d4 	.word	0x200011d4
 800ca98:	200016ac 	.word	0x200016ac

0800ca9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca9c:	b480      	push	{r7}
 800ca9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800caa0:	4b07      	ldr	r3, [pc, #28]	; (800cac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d004      	beq.n	800cab2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800caa8:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800caae:	3201      	adds	r2, #1
 800cab0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cab2:	4b03      	ldr	r3, [pc, #12]	; (800cac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800cab4:	681b      	ldr	r3, [r3, #0]
	}
 800cab6:	4618      	mov	r0, r3
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	200011d0 	.word	0x200011d0

0800cac4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cace:	4b21      	ldr	r3, [pc, #132]	; (800cb54 <prvAddCurrentTaskToDelayedList+0x90>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cad4:	4b20      	ldr	r3, [pc, #128]	; (800cb58 <prvAddCurrentTaskToDelayedList+0x94>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3304      	adds	r3, #4
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fd ffd6 	bl	800aa8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae6:	d10a      	bne.n	800cafe <prvAddCurrentTaskToDelayedList+0x3a>
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d007      	beq.n	800cafe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caee:	4b1a      	ldr	r3, [pc, #104]	; (800cb58 <prvAddCurrentTaskToDelayedList+0x94>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3304      	adds	r3, #4
 800caf4:	4619      	mov	r1, r3
 800caf6:	4819      	ldr	r0, [pc, #100]	; (800cb5c <prvAddCurrentTaskToDelayedList+0x98>)
 800caf8:	f7fd ff6b 	bl	800a9d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cafc:	e026      	b.n	800cb4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4413      	add	r3, r2
 800cb04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb06:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d209      	bcs.n	800cb2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb16:	4b12      	ldr	r3, [pc, #72]	; (800cb60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	4b0f      	ldr	r3, [pc, #60]	; (800cb58 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4619      	mov	r1, r3
 800cb22:	4610      	mov	r0, r2
 800cb24:	f7fd ff79 	bl	800aa1a <vListInsert>
}
 800cb28:	e010      	b.n	800cb4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb2a:	4b0e      	ldr	r3, [pc, #56]	; (800cb64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	4b0a      	ldr	r3, [pc, #40]	; (800cb58 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	3304      	adds	r3, #4
 800cb34:	4619      	mov	r1, r3
 800cb36:	4610      	mov	r0, r2
 800cb38:	f7fd ff6f 	bl	800aa1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d202      	bcs.n	800cb4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb46:	4a08      	ldr	r2, [pc, #32]	; (800cb68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	6013      	str	r3, [r2, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	200016a8 	.word	0x200016a8
 800cb58:	200011d0 	.word	0x200011d0
 800cb5c:	20001690 	.word	0x20001690
 800cb60:	20001660 	.word	0x20001660
 800cb64:	2000165c 	.word	0x2000165c
 800cb68:	200016c4 	.word	0x200016c4

0800cb6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b08a      	sub	sp, #40	; 0x28
 800cb70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb76:	f000 fb07 	bl	800d188 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb7a:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <xTimerCreateTimerTask+0x80>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d021      	beq.n	800cbc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb8a:	1d3a      	adds	r2, r7, #4
 800cb8c:	f107 0108 	add.w	r1, r7, #8
 800cb90:	f107 030c 	add.w	r3, r7, #12
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fd fed5 	bl	800a944 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	9202      	str	r2, [sp, #8]
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	2302      	movs	r3, #2
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	460a      	mov	r2, r1
 800cbac:	4910      	ldr	r1, [pc, #64]	; (800cbf0 <xTimerCreateTimerTask+0x84>)
 800cbae:	4811      	ldr	r0, [pc, #68]	; (800cbf4 <xTimerCreateTimerTask+0x88>)
 800cbb0:	f7fe ffe0 	bl	800bb74 <xTaskCreateStatic>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	4a10      	ldr	r2, [pc, #64]	; (800cbf8 <xTimerCreateTimerTask+0x8c>)
 800cbb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cbba:	4b0f      	ldr	r3, [pc, #60]	; (800cbf8 <xTimerCreateTimerTask+0x8c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10a      	bne.n	800cbe2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	613b      	str	r3, [r7, #16]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cbe2:	697b      	ldr	r3, [r7, #20]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	20001700 	.word	0x20001700
 800cbf0:	08010f4c 	.word	0x08010f4c
 800cbf4:	0800cd31 	.word	0x0800cd31
 800cbf8:	20001704 	.word	0x20001704

0800cbfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	; 0x28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10a      	bne.n	800cc2a <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc18:	f383 8811 	msr	BASEPRI, r3
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	623b      	str	r3, [r7, #32]
}
 800cc26:	bf00      	nop
 800cc28:	e7fe      	b.n	800cc28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc2a:	4b1a      	ldr	r3, [pc, #104]	; (800cc94 <xTimerGenericCommand+0x98>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d02a      	beq.n	800cc88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b05      	cmp	r3, #5
 800cc42:	dc18      	bgt.n	800cc76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc44:	f7ff fdb4 	bl	800c7b0 <xTaskGetSchedulerState>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d109      	bne.n	800cc62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc4e:	4b11      	ldr	r3, [pc, #68]	; (800cc94 <xTimerGenericCommand+0x98>)
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	f107 0110 	add.w	r1, r7, #16
 800cc56:	2300      	movs	r3, #0
 800cc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc5a:	f7fe f8e9 	bl	800ae30 <xQueueGenericSend>
 800cc5e:	6278      	str	r0, [r7, #36]	; 0x24
 800cc60:	e012      	b.n	800cc88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc62:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <xTimerGenericCommand+0x98>)
 800cc64:	6818      	ldr	r0, [r3, #0]
 800cc66:	f107 0110 	add.w	r1, r7, #16
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f7fe f8df 	bl	800ae30 <xQueueGenericSend>
 800cc72:	6278      	str	r0, [r7, #36]	; 0x24
 800cc74:	e008      	b.n	800cc88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc76:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <xTimerGenericCommand+0x98>)
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	f107 0110 	add.w	r1, r7, #16
 800cc7e:	2300      	movs	r3, #0
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	f7fe f9d3 	bl	800b02c <xQueueGenericSendFromISR>
 800cc86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3728      	adds	r7, #40	; 0x28
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20001700 	.word	0x20001700

0800cc98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b088      	sub	sp, #32
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cca2:	4b22      	ldr	r3, [pc, #136]	; (800cd2c <prvProcessExpiredTimer+0x94>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7fd feeb 	bl	800aa8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d022      	beq.n	800cd0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	699a      	ldr	r2, [r3, #24]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	18d1      	adds	r1, r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	6978      	ldr	r0, [r7, #20]
 800ccd2:	f000 f8d1 	bl	800ce78 <prvInsertTimerInActiveList>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01f      	beq.n	800cd1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	2300      	movs	r3, #0
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	2100      	movs	r1, #0
 800cce6:	6978      	ldr	r0, [r7, #20]
 800cce8:	f7ff ff88 	bl	800cbfc <xTimerGenericCommand>
 800ccec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d113      	bne.n	800cd1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	60fb      	str	r3, [r7, #12]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd10:	f023 0301 	bic.w	r3, r3, #1
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	6a1b      	ldr	r3, [r3, #32]
 800cd20:	6978      	ldr	r0, [r7, #20]
 800cd22:	4798      	blx	r3
}
 800cd24:	bf00      	nop
 800cd26:	3718      	adds	r7, #24
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	200016f8 	.word	0x200016f8

0800cd30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 f857 	bl	800cdf0 <prvGetNextExpireTime>
 800cd42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	4619      	mov	r1, r3
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 f803 	bl	800cd54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd4e:	f000 f8d5 	bl	800cefc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd52:	e7f1      	b.n	800cd38 <prvTimerTask+0x8>

0800cd54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd5e:	f7ff f945 	bl	800bfec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd62:	f107 0308 	add.w	r3, r7, #8
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f866 	bl	800ce38 <prvSampleTimeNow>
 800cd6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d130      	bne.n	800cdd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10a      	bne.n	800cd90 <prvProcessTimerOrBlockTask+0x3c>
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d806      	bhi.n	800cd90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd82:	f7ff f941 	bl	800c008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd86:	68f9      	ldr	r1, [r7, #12]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff ff85 	bl	800cc98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd8e:	e024      	b.n	800cdda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d008      	beq.n	800cda8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd96:	4b13      	ldr	r3, [pc, #76]	; (800cde4 <prvProcessTimerOrBlockTask+0x90>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d101      	bne.n	800cda4 <prvProcessTimerOrBlockTask+0x50>
 800cda0:	2301      	movs	r3, #1
 800cda2:	e000      	b.n	800cda6 <prvProcessTimerOrBlockTask+0x52>
 800cda4:	2300      	movs	r3, #0
 800cda6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cda8:	4b0f      	ldr	r3, [pc, #60]	; (800cde8 <prvProcessTimerOrBlockTask+0x94>)
 800cdaa:	6818      	ldr	r0, [r3, #0]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	683a      	ldr	r2, [r7, #0]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f7fe fea9 	bl	800bb0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdba:	f7ff f925 	bl	800c008 <xTaskResumeAll>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdc4:	4b09      	ldr	r3, [pc, #36]	; (800cdec <prvProcessTimerOrBlockTask+0x98>)
 800cdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	f3bf 8f6f 	isb	sy
}
 800cdd4:	e001      	b.n	800cdda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cdd6:	f7ff f917 	bl	800c008 <xTaskResumeAll>
}
 800cdda:	bf00      	nop
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	200016fc 	.word	0x200016fc
 800cde8:	20001700 	.word	0x20001700
 800cdec:	e000ed04 	.word	0xe000ed04

0800cdf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cdf8:	4b0e      	ldr	r3, [pc, #56]	; (800ce34 <prvGetNextExpireTime+0x44>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d101      	bne.n	800ce06 <prvGetNextExpireTime+0x16>
 800ce02:	2201      	movs	r2, #1
 800ce04:	e000      	b.n	800ce08 <prvGetNextExpireTime+0x18>
 800ce06:	2200      	movs	r2, #0
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d105      	bne.n	800ce20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce14:	4b07      	ldr	r3, [pc, #28]	; (800ce34 <prvGetNextExpireTime+0x44>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	e001      	b.n	800ce24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce20:	2300      	movs	r3, #0
 800ce22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce24:	68fb      	ldr	r3, [r7, #12]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	200016f8 	.word	0x200016f8

0800ce38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce40:	f7ff f980 	bl	800c144 <xTaskGetTickCount>
 800ce44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce46:	4b0b      	ldr	r3, [pc, #44]	; (800ce74 <prvSampleTimeNow+0x3c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d205      	bcs.n	800ce5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce50:	f000 f936 	bl	800d0c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	e002      	b.n	800ce62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce62:	4a04      	ldr	r2, [pc, #16]	; (800ce74 <prvSampleTimeNow+0x3c>)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce68:	68fb      	ldr	r3, [r7, #12]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20001708 	.word	0x20001708

0800ce78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d812      	bhi.n	800cec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	1ad2      	subs	r2, r2, r3
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	699b      	ldr	r3, [r3, #24]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d302      	bcc.n	800ceb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ceac:	2301      	movs	r3, #1
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	e01b      	b.n	800ceea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ceb2:	4b10      	ldr	r3, [pc, #64]	; (800cef4 <prvInsertTimerInActiveList+0x7c>)
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	3304      	adds	r3, #4
 800ceba:	4619      	mov	r1, r3
 800cebc:	4610      	mov	r0, r2
 800cebe:	f7fd fdac 	bl	800aa1a <vListInsert>
 800cec2:	e012      	b.n	800ceea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d206      	bcs.n	800ceda <prvInsertTimerInActiveList+0x62>
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d302      	bcc.n	800ceda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ced4:	2301      	movs	r3, #1
 800ced6:	617b      	str	r3, [r7, #20]
 800ced8:	e007      	b.n	800ceea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <prvInsertTimerInActiveList+0x80>)
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	3304      	adds	r3, #4
 800cee2:	4619      	mov	r1, r3
 800cee4:	4610      	mov	r0, r2
 800cee6:	f7fd fd98 	bl	800aa1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ceea:	697b      	ldr	r3, [r7, #20]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	200016fc 	.word	0x200016fc
 800cef8:	200016f8 	.word	0x200016f8

0800cefc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08e      	sub	sp, #56	; 0x38
 800cf00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf02:	e0ca      	b.n	800d09a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	da18      	bge.n	800cf3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf0a:	1d3b      	adds	r3, r7, #4
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10a      	bne.n	800cf2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	61fb      	str	r3, [r7, #28]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf32:	6850      	ldr	r0, [r2, #4]
 800cf34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf36:	6892      	ldr	r2, [r2, #8]
 800cf38:	4611      	mov	r1, r2
 800cf3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f2c0 80ab 	blt.w	800d09a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	695b      	ldr	r3, [r3, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d004      	beq.n	800cf5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	3304      	adds	r3, #4
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fd fd99 	bl	800aa8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf5a:	463b      	mov	r3, r7
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff ff6b 	bl	800ce38 <prvSampleTimeNow>
 800cf62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b09      	cmp	r3, #9
 800cf68:	f200 8096 	bhi.w	800d098 <prvProcessReceivedCommands+0x19c>
 800cf6c:	a201      	add	r2, pc, #4	; (adr r2, 800cf74 <prvProcessReceivedCommands+0x78>)
 800cf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf72:	bf00      	nop
 800cf74:	0800cf9d 	.word	0x0800cf9d
 800cf78:	0800cf9d 	.word	0x0800cf9d
 800cf7c:	0800cf9d 	.word	0x0800cf9d
 800cf80:	0800d011 	.word	0x0800d011
 800cf84:	0800d025 	.word	0x0800d025
 800cf88:	0800d06f 	.word	0x0800d06f
 800cf8c:	0800cf9d 	.word	0x0800cf9d
 800cf90:	0800cf9d 	.word	0x0800cf9d
 800cf94:	0800d011 	.word	0x0800d011
 800cf98:	0800d025 	.word	0x0800d025
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa2:	f043 0301 	orr.w	r3, r3, #1
 800cfa6:	b2da      	uxtb	r2, r3
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	18d1      	adds	r1, r2, r3
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfbc:	f7ff ff5c 	bl	800ce78 <prvInsertTimerInActiveList>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d069      	beq.n	800d09a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfd4:	f003 0304 	and.w	r3, r3, #4
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d05e      	beq.n	800d09a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	441a      	add	r2, r3
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	2300      	movs	r3, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfee:	f7ff fe05 	bl	800cbfc <xTimerGenericCommand>
 800cff2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cff4:	6a3b      	ldr	r3, [r7, #32]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d14f      	bne.n	800d09a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	61bb      	str	r3, [r7, #24]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d016:	f023 0301 	bic.w	r3, r3, #1
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d022:	e03a      	b.n	800d09a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d02a:	f043 0301 	orr.w	r3, r3, #1
 800d02e:	b2da      	uxtb	r2, r3
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	617b      	str	r3, [r7, #20]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	699a      	ldr	r2, [r3, #24]
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	18d1      	adds	r1, r2, r3
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d068:	f7ff ff06 	bl	800ce78 <prvInsertTimerInActiveList>
					break;
 800d06c:	e015      	b.n	800d09a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d074:	f003 0302 	and.w	r3, r3, #2
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d103      	bne.n	800d084 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d07c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d07e:	f000 fbdf 	bl	800d840 <vPortFree>
 800d082:	e00a      	b.n	800d09a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d08a:	f023 0301 	bic.w	r3, r3, #1
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d096:	e000      	b.n	800d09a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d098:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d09a:	4b08      	ldr	r3, [pc, #32]	; (800d0bc <prvProcessReceivedCommands+0x1c0>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	1d39      	adds	r1, r7, #4
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe f8ea 	bl	800b27c <xQueueReceive>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f47f af2a 	bne.w	800cf04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d0b0:	bf00      	nop
 800d0b2:	bf00      	nop
 800d0b4:	3730      	adds	r7, #48	; 0x30
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20001700 	.word	0x20001700

0800d0c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0c6:	e048      	b.n	800d15a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0c8:	4b2d      	ldr	r3, [pc, #180]	; (800d180 <prvSwitchTimerLists+0xc0>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d2:	4b2b      	ldr	r3, [pc, #172]	; (800d180 <prvSwitchTimerLists+0xc0>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fd fcd3 	bl	800aa8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f4:	f003 0304 	and.w	r3, r3, #4
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d02e      	beq.n	800d15a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	4413      	add	r3, r2
 800d104:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d90e      	bls.n	800d12c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d11a:	4b19      	ldr	r3, [pc, #100]	; (800d180 <prvSwitchTimerLists+0xc0>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3304      	adds	r3, #4
 800d122:	4619      	mov	r1, r3
 800d124:	4610      	mov	r0, r2
 800d126:	f7fd fc78 	bl	800aa1a <vListInsert>
 800d12a:	e016      	b.n	800d15a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d12c:	2300      	movs	r3, #0
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	2300      	movs	r3, #0
 800d132:	693a      	ldr	r2, [r7, #16]
 800d134:	2100      	movs	r1, #0
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f7ff fd60 	bl	800cbfc <xTimerGenericCommand>
 800d13c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10a      	bne.n	800d15a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	603b      	str	r3, [r7, #0]
}
 800d156:	bf00      	nop
 800d158:	e7fe      	b.n	800d158 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d15a:	4b09      	ldr	r3, [pc, #36]	; (800d180 <prvSwitchTimerLists+0xc0>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1b1      	bne.n	800d0c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d164:	4b06      	ldr	r3, [pc, #24]	; (800d180 <prvSwitchTimerLists+0xc0>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d16a:	4b06      	ldr	r3, [pc, #24]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a04      	ldr	r2, [pc, #16]	; (800d180 <prvSwitchTimerLists+0xc0>)
 800d170:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d172:	4a04      	ldr	r2, [pc, #16]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	6013      	str	r3, [r2, #0]
}
 800d178:	bf00      	nop
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	200016f8 	.word	0x200016f8
 800d184:	200016fc 	.word	0x200016fc

0800d188 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d18e:	f000 f969 	bl	800d464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d192:	4b15      	ldr	r3, [pc, #84]	; (800d1e8 <prvCheckForValidListAndQueue+0x60>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d120      	bne.n	800d1dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d19a:	4814      	ldr	r0, [pc, #80]	; (800d1ec <prvCheckForValidListAndQueue+0x64>)
 800d19c:	f7fd fbec 	bl	800a978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1a0:	4813      	ldr	r0, [pc, #76]	; (800d1f0 <prvCheckForValidListAndQueue+0x68>)
 800d1a2:	f7fd fbe9 	bl	800a978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1a6:	4b13      	ldr	r3, [pc, #76]	; (800d1f4 <prvCheckForValidListAndQueue+0x6c>)
 800d1a8:	4a10      	ldr	r2, [pc, #64]	; (800d1ec <prvCheckForValidListAndQueue+0x64>)
 800d1aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1ac:	4b12      	ldr	r3, [pc, #72]	; (800d1f8 <prvCheckForValidListAndQueue+0x70>)
 800d1ae:	4a10      	ldr	r2, [pc, #64]	; (800d1f0 <prvCheckForValidListAndQueue+0x68>)
 800d1b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	4b11      	ldr	r3, [pc, #68]	; (800d1fc <prvCheckForValidListAndQueue+0x74>)
 800d1b8:	4a11      	ldr	r2, [pc, #68]	; (800d200 <prvCheckForValidListAndQueue+0x78>)
 800d1ba:	2110      	movs	r1, #16
 800d1bc:	200a      	movs	r0, #10
 800d1be:	f7fd fcf7 	bl	800abb0 <xQueueGenericCreateStatic>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	4a08      	ldr	r2, [pc, #32]	; (800d1e8 <prvCheckForValidListAndQueue+0x60>)
 800d1c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1c8:	4b07      	ldr	r3, [pc, #28]	; (800d1e8 <prvCheckForValidListAndQueue+0x60>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d005      	beq.n	800d1dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1d0:	4b05      	ldr	r3, [pc, #20]	; (800d1e8 <prvCheckForValidListAndQueue+0x60>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	490b      	ldr	r1, [pc, #44]	; (800d204 <prvCheckForValidListAndQueue+0x7c>)
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fc44 	bl	800ba64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1dc:	f000 f972 	bl	800d4c4 <vPortExitCritical>
}
 800d1e0:	bf00      	nop
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20001700 	.word	0x20001700
 800d1ec:	200016d0 	.word	0x200016d0
 800d1f0:	200016e4 	.word	0x200016e4
 800d1f4:	200016f8 	.word	0x200016f8
 800d1f8:	200016fc 	.word	0x200016fc
 800d1fc:	200017ac 	.word	0x200017ac
 800d200:	2000170c 	.word	0x2000170c
 800d204:	08010f54 	.word	0x08010f54

0800d208 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3b04      	subs	r3, #4
 800d218:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3b04      	subs	r3, #4
 800d226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f023 0201 	bic.w	r2, r3, #1
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	3b04      	subs	r3, #4
 800d236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d238:	4a0c      	ldr	r2, [pc, #48]	; (800d26c <pxPortInitialiseStack+0x64>)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3b14      	subs	r3, #20
 800d242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3b04      	subs	r3, #4
 800d24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f06f 0202 	mvn.w	r2, #2
 800d256:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3b20      	subs	r3, #32
 800d25c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d25e:	68fb      	ldr	r3, [r7, #12]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	0800d271 	.word	0x0800d271

0800d270 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d27a:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <prvTaskExitError+0x54>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d282:	d00a      	beq.n	800d29a <prvTaskExitError+0x2a>
	__asm volatile
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	60fb      	str	r3, [r7, #12]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <prvTaskExitError+0x28>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	60bb      	str	r3, [r7, #8]
}
 800d2ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2ae:	bf00      	nop
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0fc      	beq.n	800d2b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2b6:	bf00      	nop
 800d2b8:	bf00      	nop
 800d2ba:	3714      	adds	r7, #20
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	2000003c 	.word	0x2000003c
	...

0800d2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2d0:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <pxCurrentTCBConst2>)
 800d2d2:	6819      	ldr	r1, [r3, #0]
 800d2d4:	6808      	ldr	r0, [r1, #0]
 800d2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	f380 8809 	msr	PSP, r0
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f04f 0000 	mov.w	r0, #0
 800d2e6:	f380 8811 	msr	BASEPRI, r0
 800d2ea:	4770      	bx	lr
 800d2ec:	f3af 8000 	nop.w

0800d2f0 <pxCurrentTCBConst2>:
 800d2f0:	200011d0 	.word	0x200011d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop

0800d2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2f8:	4808      	ldr	r0, [pc, #32]	; (800d31c <prvPortStartFirstTask+0x24>)
 800d2fa:	6800      	ldr	r0, [r0, #0]
 800d2fc:	6800      	ldr	r0, [r0, #0]
 800d2fe:	f380 8808 	msr	MSP, r0
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f380 8814 	msr	CONTROL, r0
 800d30a:	b662      	cpsie	i
 800d30c:	b661      	cpsie	f
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	df00      	svc	0
 800d318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d31a:	bf00      	nop
 800d31c:	e000ed08 	.word	0xe000ed08

0800d320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d326:	4b46      	ldr	r3, [pc, #280]	; (800d440 <xPortStartScheduler+0x120>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a46      	ldr	r2, [pc, #280]	; (800d444 <xPortStartScheduler+0x124>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d10a      	bne.n	800d346 <xPortStartScheduler+0x26>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	613b      	str	r3, [r7, #16]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d346:	4b3e      	ldr	r3, [pc, #248]	; (800d440 <xPortStartScheduler+0x120>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a3f      	ldr	r2, [pc, #252]	; (800d448 <xPortStartScheduler+0x128>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d10a      	bne.n	800d366 <xPortStartScheduler+0x46>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	60fb      	str	r3, [r7, #12]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d366:	4b39      	ldr	r3, [pc, #228]	; (800d44c <xPortStartScheduler+0x12c>)
 800d368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	22ff      	movs	r2, #255	; 0xff
 800d376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	4b31      	ldr	r3, [pc, #196]	; (800d450 <xPortStartScheduler+0x130>)
 800d38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d38e:	4b31      	ldr	r3, [pc, #196]	; (800d454 <xPortStartScheduler+0x134>)
 800d390:	2207      	movs	r2, #7
 800d392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d394:	e009      	b.n	800d3aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d396:	4b2f      	ldr	r3, [pc, #188]	; (800d454 <xPortStartScheduler+0x134>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	4a2d      	ldr	r2, [pc, #180]	; (800d454 <xPortStartScheduler+0x134>)
 800d39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3aa:	78fb      	ldrb	r3, [r7, #3]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b2:	2b80      	cmp	r3, #128	; 0x80
 800d3b4:	d0ef      	beq.n	800d396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3b6:	4b27      	ldr	r3, [pc, #156]	; (800d454 <xPortStartScheduler+0x134>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f1c3 0307 	rsb	r3, r3, #7
 800d3be:	2b04      	cmp	r3, #4
 800d3c0:	d00a      	beq.n	800d3d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	60bb      	str	r3, [r7, #8]
}
 800d3d4:	bf00      	nop
 800d3d6:	e7fe      	b.n	800d3d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3d8:	4b1e      	ldr	r3, [pc, #120]	; (800d454 <xPortStartScheduler+0x134>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	021b      	lsls	r3, r3, #8
 800d3de:	4a1d      	ldr	r2, [pc, #116]	; (800d454 <xPortStartScheduler+0x134>)
 800d3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3e2:	4b1c      	ldr	r3, [pc, #112]	; (800d454 <xPortStartScheduler+0x134>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3ea:	4a1a      	ldr	r2, [pc, #104]	; (800d454 <xPortStartScheduler+0x134>)
 800d3ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3f6:	4b18      	ldr	r3, [pc, #96]	; (800d458 <xPortStartScheduler+0x138>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a17      	ldr	r2, [pc, #92]	; (800d458 <xPortStartScheduler+0x138>)
 800d3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d402:	4b15      	ldr	r3, [pc, #84]	; (800d458 <xPortStartScheduler+0x138>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a14      	ldr	r2, [pc, #80]	; (800d458 <xPortStartScheduler+0x138>)
 800d408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d40c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d40e:	f000 f8dd 	bl	800d5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d412:	4b12      	ldr	r3, [pc, #72]	; (800d45c <xPortStartScheduler+0x13c>)
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d418:	f000 f8fc 	bl	800d614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <xPortStartScheduler+0x140>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0f      	ldr	r2, [pc, #60]	; (800d460 <xPortStartScheduler+0x140>)
 800d422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d428:	f7ff ff66 	bl	800d2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d42c:	f7fe ff54 	bl	800c2d8 <vTaskSwitchContext>
	prvTaskExitError();
 800d430:	f7ff ff1e 	bl	800d270 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	e000ed00 	.word	0xe000ed00
 800d444:	410fc271 	.word	0x410fc271
 800d448:	410fc270 	.word	0x410fc270
 800d44c:	e000e400 	.word	0xe000e400
 800d450:	200017fc 	.word	0x200017fc
 800d454:	20001800 	.word	0x20001800
 800d458:	e000ed20 	.word	0xe000ed20
 800d45c:	2000003c 	.word	0x2000003c
 800d460:	e000ef34 	.word	0xe000ef34

0800d464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	607b      	str	r3, [r7, #4]
}
 800d47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d47e:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <vPortEnterCritical+0x58>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	4a0d      	ldr	r2, [pc, #52]	; (800d4bc <vPortEnterCritical+0x58>)
 800d486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d488:	4b0c      	ldr	r3, [pc, #48]	; (800d4bc <vPortEnterCritical+0x58>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d10f      	bne.n	800d4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d490:	4b0b      	ldr	r3, [pc, #44]	; (800d4c0 <vPortEnterCritical+0x5c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00a      	beq.n	800d4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	603b      	str	r3, [r7, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <vPortEnterCritical+0x4a>
	}
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	2000003c 	.word	0x2000003c
 800d4c0:	e000ed04 	.word	0xe000ed04

0800d4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4ca:	4b12      	ldr	r3, [pc, #72]	; (800d514 <vPortExitCritical+0x50>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <vPortExitCritical+0x24>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	607b      	str	r3, [r7, #4]
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4e8:	4b0a      	ldr	r3, [pc, #40]	; (800d514 <vPortExitCritical+0x50>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4a09      	ldr	r2, [pc, #36]	; (800d514 <vPortExitCritical+0x50>)
 800d4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4f2:	4b08      	ldr	r3, [pc, #32]	; (800d514 <vPortExitCritical+0x50>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d105      	bne.n	800d506 <vPortExitCritical+0x42>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	f383 8811 	msr	BASEPRI, r3
}
 800d504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d506:	bf00      	nop
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	2000003c 	.word	0x2000003c
	...

0800d520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d520:	f3ef 8009 	mrs	r0, PSP
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	4b15      	ldr	r3, [pc, #84]	; (800d580 <pxCurrentTCBConst>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	f01e 0f10 	tst.w	lr, #16
 800d530:	bf08      	it	eq
 800d532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	6010      	str	r0, [r2, #0]
 800d53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d544:	f380 8811 	msr	BASEPRI, r0
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f7fe fec2 	bl	800c2d8 <vTaskSwitchContext>
 800d554:	f04f 0000 	mov.w	r0, #0
 800d558:	f380 8811 	msr	BASEPRI, r0
 800d55c:	bc09      	pop	{r0, r3}
 800d55e:	6819      	ldr	r1, [r3, #0]
 800d560:	6808      	ldr	r0, [r1, #0]
 800d562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d566:	f01e 0f10 	tst.w	lr, #16
 800d56a:	bf08      	it	eq
 800d56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d570:	f380 8809 	msr	PSP, r0
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst>:
 800d580:	200011d0 	.word	0x200011d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop

0800d588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	607b      	str	r3, [r7, #4]
}
 800d5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5a2:	f7fe fddf 	bl	800c164 <xTaskIncrementTick>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d003      	beq.n	800d5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5ac:	4b06      	ldr	r3, [pc, #24]	; (800d5c8 <xPortSysTickHandler+0x40>)
 800d5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	f383 8811 	msr	BASEPRI, r3
}
 800d5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	e000ed04 	.word	0xe000ed04

0800d5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5d0:	4b0b      	ldr	r3, [pc, #44]	; (800d600 <vPortSetupTimerInterrupt+0x34>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5d6:	4b0b      	ldr	r3, [pc, #44]	; (800d604 <vPortSetupTimerInterrupt+0x38>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5dc:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <vPortSetupTimerInterrupt+0x3c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a0a      	ldr	r2, [pc, #40]	; (800d60c <vPortSetupTimerInterrupt+0x40>)
 800d5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e6:	099b      	lsrs	r3, r3, #6
 800d5e8:	4a09      	ldr	r2, [pc, #36]	; (800d610 <vPortSetupTimerInterrupt+0x44>)
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ee:	4b04      	ldr	r3, [pc, #16]	; (800d600 <vPortSetupTimerInterrupt+0x34>)
 800d5f0:	2207      	movs	r2, #7
 800d5f2:	601a      	str	r2, [r3, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	e000e010 	.word	0xe000e010
 800d604:	e000e018 	.word	0xe000e018
 800d608:	20000018 	.word	0x20000018
 800d60c:	10624dd3 	.word	0x10624dd3
 800d610:	e000e014 	.word	0xe000e014

0800d614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d624 <vPortEnableVFP+0x10>
 800d618:	6801      	ldr	r1, [r0, #0]
 800d61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d61e:	6001      	str	r1, [r0, #0]
 800d620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d622:	bf00      	nop
 800d624:	e000ed88 	.word	0xe000ed88

0800d628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d62e:	f3ef 8305 	mrs	r3, IPSR
 800d632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b0f      	cmp	r3, #15
 800d638:	d914      	bls.n	800d664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d63a:	4a17      	ldr	r2, [pc, #92]	; (800d698 <vPortValidateInterruptPriority+0x70>)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d644:	4b15      	ldr	r3, [pc, #84]	; (800d69c <vPortValidateInterruptPriority+0x74>)
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	7afa      	ldrb	r2, [r7, #11]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d20a      	bcs.n	800d664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	607b      	str	r3, [r7, #4]
}
 800d660:	bf00      	nop
 800d662:	e7fe      	b.n	800d662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d664:	4b0e      	ldr	r3, [pc, #56]	; (800d6a0 <vPortValidateInterruptPriority+0x78>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d66c:	4b0d      	ldr	r3, [pc, #52]	; (800d6a4 <vPortValidateInterruptPriority+0x7c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	d90a      	bls.n	800d68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	603b      	str	r3, [r7, #0]
}
 800d686:	bf00      	nop
 800d688:	e7fe      	b.n	800d688 <vPortValidateInterruptPriority+0x60>
	}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	e000e3f0 	.word	0xe000e3f0
 800d69c:	200017fc 	.word	0x200017fc
 800d6a0:	e000ed0c 	.word	0xe000ed0c
 800d6a4:	20001800 	.word	0x20001800

0800d6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08a      	sub	sp, #40	; 0x28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6b4:	f7fe fc9a 	bl	800bfec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6b8:	4b5b      	ldr	r3, [pc, #364]	; (800d828 <pvPortMalloc+0x180>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6c0:	f000 f920 	bl	800d904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6c4:	4b59      	ldr	r3, [pc, #356]	; (800d82c <pvPortMalloc+0x184>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f040 8093 	bne.w	800d7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01d      	beq.n	800d714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6d8:	2208      	movs	r2, #8
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f003 0307 	and.w	r3, r3, #7
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d014      	beq.n	800d714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f023 0307 	bic.w	r3, r3, #7
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00a      	beq.n	800d714 <pvPortMalloc+0x6c>
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d702:	f383 8811 	msr	BASEPRI, r3
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	617b      	str	r3, [r7, #20]
}
 800d710:	bf00      	nop
 800d712:	e7fe      	b.n	800d712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d06e      	beq.n	800d7f8 <pvPortMalloc+0x150>
 800d71a:	4b45      	ldr	r3, [pc, #276]	; (800d830 <pvPortMalloc+0x188>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d869      	bhi.n	800d7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d724:	4b43      	ldr	r3, [pc, #268]	; (800d834 <pvPortMalloc+0x18c>)
 800d726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d728:	4b42      	ldr	r3, [pc, #264]	; (800d834 <pvPortMalloc+0x18c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d72e:	e004      	b.n	800d73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d903      	bls.n	800d74c <pvPortMalloc+0xa4>
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f1      	bne.n	800d730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d74c:	4b36      	ldr	r3, [pc, #216]	; (800d828 <pvPortMalloc+0x180>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d752:	429a      	cmp	r2, r3
 800d754:	d050      	beq.n	800d7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2208      	movs	r2, #8
 800d75c:	4413      	add	r3, r2
 800d75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1ad2      	subs	r2, r2, r3
 800d770:	2308      	movs	r3, #8
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	429a      	cmp	r2, r3
 800d776:	d91f      	bls.n	800d7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4413      	add	r3, r2
 800d77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	f003 0307 	and.w	r3, r3, #7
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	613b      	str	r3, [r7, #16]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	1ad2      	subs	r2, r2, r3
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7b2:	69b8      	ldr	r0, [r7, #24]
 800d7b4:	f000 f908 	bl	800d9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7b8:	4b1d      	ldr	r3, [pc, #116]	; (800d830 <pvPortMalloc+0x188>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	4a1b      	ldr	r2, [pc, #108]	; (800d830 <pvPortMalloc+0x188>)
 800d7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7c6:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <pvPortMalloc+0x188>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	4b1b      	ldr	r3, [pc, #108]	; (800d838 <pvPortMalloc+0x190>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d203      	bcs.n	800d7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7d2:	4b17      	ldr	r3, [pc, #92]	; (800d830 <pvPortMalloc+0x188>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a18      	ldr	r2, [pc, #96]	; (800d838 <pvPortMalloc+0x190>)
 800d7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	4b13      	ldr	r3, [pc, #76]	; (800d82c <pvPortMalloc+0x184>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7ee:	4b13      	ldr	r3, [pc, #76]	; (800d83c <pvPortMalloc+0x194>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	4a11      	ldr	r2, [pc, #68]	; (800d83c <pvPortMalloc+0x194>)
 800d7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7f8:	f7fe fc06 	bl	800c008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	f003 0307 	and.w	r3, r3, #7
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00a      	beq.n	800d81c <pvPortMalloc+0x174>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	60fb      	str	r3, [r7, #12]
}
 800d818:	bf00      	nop
 800d81a:	e7fe      	b.n	800d81a <pvPortMalloc+0x172>
	return pvReturn;
 800d81c:	69fb      	ldr	r3, [r7, #28]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3728      	adds	r7, #40	; 0x28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20002b94 	.word	0x20002b94
 800d82c:	20002ba8 	.word	0x20002ba8
 800d830:	20002b98 	.word	0x20002b98
 800d834:	20002b8c 	.word	0x20002b8c
 800d838:	20002b9c 	.word	0x20002b9c
 800d83c:	20002ba0 	.word	0x20002ba0

0800d840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d04d      	beq.n	800d8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d852:	2308      	movs	r3, #8
 800d854:	425b      	negs	r3, r3
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	4413      	add	r3, r2
 800d85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	4b24      	ldr	r3, [pc, #144]	; (800d8f8 <vPortFree+0xb8>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4013      	ands	r3, r2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <vPortFree+0x44>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60fb      	str	r3, [r7, #12]
}
 800d880:	bf00      	nop
 800d882:	e7fe      	b.n	800d882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00a      	beq.n	800d8a2 <vPortFree+0x62>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	60bb      	str	r3, [r7, #8]
}
 800d89e:	bf00      	nop
 800d8a0:	e7fe      	b.n	800d8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	685a      	ldr	r2, [r3, #4]
 800d8a6:	4b14      	ldr	r3, [pc, #80]	; (800d8f8 <vPortFree+0xb8>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01e      	beq.n	800d8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d11a      	bne.n	800d8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <vPortFree+0xb8>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	43db      	mvns	r3, r3
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8c8:	f7fe fb90 	bl	800bfec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	685a      	ldr	r2, [r3, #4]
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <vPortFree+0xbc>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	4a09      	ldr	r2, [pc, #36]	; (800d8fc <vPortFree+0xbc>)
 800d8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f000 f874 	bl	800d9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <vPortFree+0xc0>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	4a06      	ldr	r2, [pc, #24]	; (800d900 <vPortFree+0xc0>)
 800d8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8ea:	f7fe fb8d 	bl	800c008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ee:	bf00      	nop
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20002ba8 	.word	0x20002ba8
 800d8fc:	20002b98 	.word	0x20002b98
 800d900:	20002ba4 	.word	0x20002ba4

0800d904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d90a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d910:	4b27      	ldr	r3, [pc, #156]	; (800d9b0 <prvHeapInit+0xac>)
 800d912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f003 0307 	and.w	r3, r3, #7
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00c      	beq.n	800d938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3307      	adds	r3, #7
 800d922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 0307 	bic.w	r3, r3, #7
 800d92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	4a1f      	ldr	r2, [pc, #124]	; (800d9b0 <prvHeapInit+0xac>)
 800d934:	4413      	add	r3, r2
 800d936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d93c:	4a1d      	ldr	r2, [pc, #116]	; (800d9b4 <prvHeapInit+0xb0>)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d942:	4b1c      	ldr	r3, [pc, #112]	; (800d9b4 <prvHeapInit+0xb0>)
 800d944:	2200      	movs	r2, #0
 800d946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	4413      	add	r3, r2
 800d94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d950:	2208      	movs	r2, #8
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	1a9b      	subs	r3, r3, r2
 800d956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f023 0307 	bic.w	r3, r3, #7
 800d95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	4a15      	ldr	r2, [pc, #84]	; (800d9b8 <prvHeapInit+0xb4>)
 800d964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d966:	4b14      	ldr	r3, [pc, #80]	; (800d9b8 <prvHeapInit+0xb4>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2200      	movs	r2, #0
 800d96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d96e:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <prvHeapInit+0xb4>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	1ad2      	subs	r2, r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d984:	4b0c      	ldr	r3, [pc, #48]	; (800d9b8 <prvHeapInit+0xb4>)
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	4a0a      	ldr	r2, [pc, #40]	; (800d9bc <prvHeapInit+0xb8>)
 800d992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4a09      	ldr	r2, [pc, #36]	; (800d9c0 <prvHeapInit+0xbc>)
 800d99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d99c:	4b09      	ldr	r3, [pc, #36]	; (800d9c4 <prvHeapInit+0xc0>)
 800d99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9a2:	601a      	str	r2, [r3, #0]
}
 800d9a4:	bf00      	nop
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	20001804 	.word	0x20001804
 800d9b4:	20002b8c 	.word	0x20002b8c
 800d9b8:	20002b94 	.word	0x20002b94
 800d9bc:	20002b9c 	.word	0x20002b9c
 800d9c0:	20002b98 	.word	0x20002b98
 800d9c4:	20002ba8 	.word	0x20002ba8

0800d9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9d0:	4b28      	ldr	r3, [pc, #160]	; (800da74 <prvInsertBlockIntoFreeList+0xac>)
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	e002      	b.n	800d9dc <prvInsertBlockIntoFreeList+0x14>
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d8f7      	bhi.n	800d9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d108      	bne.n	800da0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	441a      	add	r2, r3
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	441a      	add	r2, r3
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d118      	bne.n	800da50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	4b15      	ldr	r3, [pc, #84]	; (800da78 <prvInsertBlockIntoFreeList+0xb0>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	429a      	cmp	r2, r3
 800da28:	d00d      	beq.n	800da46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	685a      	ldr	r2, [r3, #4]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	441a      	add	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	e008      	b.n	800da58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da46:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <prvInsertBlockIntoFreeList+0xb0>)
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	e003      	b.n	800da58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d002      	beq.n	800da66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	20002b8c 	.word	0x20002b8c
 800da78:	20002b94 	.word	0x20002b94

0800da7c <atof>:
 800da7c:	2100      	movs	r1, #0
 800da7e:	f000 be13 	b.w	800e6a8 <strtod>

0800da82 <atoi>:
 800da82:	220a      	movs	r2, #10
 800da84:	2100      	movs	r1, #0
 800da86:	f000 be9d 	b.w	800e7c4 <strtol>

0800da8a <sulp>:
 800da8a:	b570      	push	{r4, r5, r6, lr}
 800da8c:	4604      	mov	r4, r0
 800da8e:	460d      	mov	r5, r1
 800da90:	ec45 4b10 	vmov	d0, r4, r5
 800da94:	4616      	mov	r6, r2
 800da96:	f002 f8f7 	bl	800fc88 <__ulp>
 800da9a:	ec51 0b10 	vmov	r0, r1, d0
 800da9e:	b17e      	cbz	r6, 800dac0 <sulp+0x36>
 800daa0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800daa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dd09      	ble.n	800dac0 <sulp+0x36>
 800daac:	051b      	lsls	r3, r3, #20
 800daae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dab2:	2400      	movs	r4, #0
 800dab4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dab8:	4622      	mov	r2, r4
 800daba:	462b      	mov	r3, r5
 800dabc:	f7f2 fd9c 	bl	80005f8 <__aeabi_dmul>
 800dac0:	bd70      	pop	{r4, r5, r6, pc}
 800dac2:	0000      	movs	r0, r0
 800dac4:	0000      	movs	r0, r0
	...

0800dac8 <_strtod_l>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	ed2d 8b02 	vpush	{d8}
 800dad0:	b09b      	sub	sp, #108	; 0x6c
 800dad2:	4604      	mov	r4, r0
 800dad4:	9213      	str	r2, [sp, #76]	; 0x4c
 800dad6:	2200      	movs	r2, #0
 800dad8:	9216      	str	r2, [sp, #88]	; 0x58
 800dada:	460d      	mov	r5, r1
 800dadc:	f04f 0800 	mov.w	r8, #0
 800dae0:	f04f 0900 	mov.w	r9, #0
 800dae4:	460a      	mov	r2, r1
 800dae6:	9215      	str	r2, [sp, #84]	; 0x54
 800dae8:	7811      	ldrb	r1, [r2, #0]
 800daea:	292b      	cmp	r1, #43	; 0x2b
 800daec:	d04c      	beq.n	800db88 <_strtod_l+0xc0>
 800daee:	d83a      	bhi.n	800db66 <_strtod_l+0x9e>
 800daf0:	290d      	cmp	r1, #13
 800daf2:	d834      	bhi.n	800db5e <_strtod_l+0x96>
 800daf4:	2908      	cmp	r1, #8
 800daf6:	d834      	bhi.n	800db62 <_strtod_l+0x9a>
 800daf8:	2900      	cmp	r1, #0
 800dafa:	d03d      	beq.n	800db78 <_strtod_l+0xb0>
 800dafc:	2200      	movs	r2, #0
 800dafe:	920a      	str	r2, [sp, #40]	; 0x28
 800db00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800db02:	7832      	ldrb	r2, [r6, #0]
 800db04:	2a30      	cmp	r2, #48	; 0x30
 800db06:	f040 80b4 	bne.w	800dc72 <_strtod_l+0x1aa>
 800db0a:	7872      	ldrb	r2, [r6, #1]
 800db0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800db10:	2a58      	cmp	r2, #88	; 0x58
 800db12:	d170      	bne.n	800dbf6 <_strtod_l+0x12e>
 800db14:	9302      	str	r3, [sp, #8]
 800db16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	ab16      	add	r3, sp, #88	; 0x58
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	4a8e      	ldr	r2, [pc, #568]	; (800dd58 <_strtod_l+0x290>)
 800db20:	ab17      	add	r3, sp, #92	; 0x5c
 800db22:	a915      	add	r1, sp, #84	; 0x54
 800db24:	4620      	mov	r0, r4
 800db26:	f001 f98d 	bl	800ee44 <__gethex>
 800db2a:	f010 070f 	ands.w	r7, r0, #15
 800db2e:	4605      	mov	r5, r0
 800db30:	d005      	beq.n	800db3e <_strtod_l+0x76>
 800db32:	2f06      	cmp	r7, #6
 800db34:	d12a      	bne.n	800db8c <_strtod_l+0xc4>
 800db36:	3601      	adds	r6, #1
 800db38:	2300      	movs	r3, #0
 800db3a:	9615      	str	r6, [sp, #84]	; 0x54
 800db3c:	930a      	str	r3, [sp, #40]	; 0x28
 800db3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db40:	2b00      	cmp	r3, #0
 800db42:	f040 857f 	bne.w	800e644 <_strtod_l+0xb7c>
 800db46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db48:	b1db      	cbz	r3, 800db82 <_strtod_l+0xba>
 800db4a:	4642      	mov	r2, r8
 800db4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800db50:	ec43 2b10 	vmov	d0, r2, r3
 800db54:	b01b      	add	sp, #108	; 0x6c
 800db56:	ecbd 8b02 	vpop	{d8}
 800db5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5e:	2920      	cmp	r1, #32
 800db60:	d1cc      	bne.n	800dafc <_strtod_l+0x34>
 800db62:	3201      	adds	r2, #1
 800db64:	e7bf      	b.n	800dae6 <_strtod_l+0x1e>
 800db66:	292d      	cmp	r1, #45	; 0x2d
 800db68:	d1c8      	bne.n	800dafc <_strtod_l+0x34>
 800db6a:	2101      	movs	r1, #1
 800db6c:	910a      	str	r1, [sp, #40]	; 0x28
 800db6e:	1c51      	adds	r1, r2, #1
 800db70:	9115      	str	r1, [sp, #84]	; 0x54
 800db72:	7852      	ldrb	r2, [r2, #1]
 800db74:	2a00      	cmp	r2, #0
 800db76:	d1c3      	bne.n	800db00 <_strtod_l+0x38>
 800db78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db7a:	9515      	str	r5, [sp, #84]	; 0x54
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f040 855f 	bne.w	800e640 <_strtod_l+0xb78>
 800db82:	4642      	mov	r2, r8
 800db84:	464b      	mov	r3, r9
 800db86:	e7e3      	b.n	800db50 <_strtod_l+0x88>
 800db88:	2100      	movs	r1, #0
 800db8a:	e7ef      	b.n	800db6c <_strtod_l+0xa4>
 800db8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800db8e:	b13a      	cbz	r2, 800dba0 <_strtod_l+0xd8>
 800db90:	2135      	movs	r1, #53	; 0x35
 800db92:	a818      	add	r0, sp, #96	; 0x60
 800db94:	f002 f975 	bl	800fe82 <__copybits>
 800db98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800db9a:	4620      	mov	r0, r4
 800db9c:	f001 fd48 	bl	800f630 <_Bfree>
 800dba0:	3f01      	subs	r7, #1
 800dba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dba4:	2f04      	cmp	r7, #4
 800dba6:	d806      	bhi.n	800dbb6 <_strtod_l+0xee>
 800dba8:	e8df f007 	tbb	[pc, r7]
 800dbac:	201d0314 	.word	0x201d0314
 800dbb0:	14          	.byte	0x14
 800dbb1:	00          	.byte	0x00
 800dbb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800dbb6:	05e9      	lsls	r1, r5, #23
 800dbb8:	bf48      	it	mi
 800dbba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800dbbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dbc2:	0d1b      	lsrs	r3, r3, #20
 800dbc4:	051b      	lsls	r3, r3, #20
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1b9      	bne.n	800db3e <_strtod_l+0x76>
 800dbca:	f001 f825 	bl	800ec18 <__errno>
 800dbce:	2322      	movs	r3, #34	; 0x22
 800dbd0:	6003      	str	r3, [r0, #0]
 800dbd2:	e7b4      	b.n	800db3e <_strtod_l+0x76>
 800dbd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800dbd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dbdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dbe0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dbe4:	e7e7      	b.n	800dbb6 <_strtod_l+0xee>
 800dbe6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dd60 <_strtod_l+0x298>
 800dbea:	e7e4      	b.n	800dbb6 <_strtod_l+0xee>
 800dbec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dbf0:	f04f 38ff 	mov.w	r8, #4294967295
 800dbf4:	e7df      	b.n	800dbb6 <_strtod_l+0xee>
 800dbf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	9215      	str	r2, [sp, #84]	; 0x54
 800dbfc:	785b      	ldrb	r3, [r3, #1]
 800dbfe:	2b30      	cmp	r3, #48	; 0x30
 800dc00:	d0f9      	beq.n	800dbf6 <_strtod_l+0x12e>
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d09b      	beq.n	800db3e <_strtod_l+0x76>
 800dc06:	2301      	movs	r3, #1
 800dc08:	f04f 0a00 	mov.w	sl, #0
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc10:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dc16:	46d3      	mov	fp, sl
 800dc18:	220a      	movs	r2, #10
 800dc1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800dc1c:	7806      	ldrb	r6, [r0, #0]
 800dc1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dc22:	b2d9      	uxtb	r1, r3
 800dc24:	2909      	cmp	r1, #9
 800dc26:	d926      	bls.n	800dc76 <_strtod_l+0x1ae>
 800dc28:	494c      	ldr	r1, [pc, #304]	; (800dd5c <_strtod_l+0x294>)
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f000 ff2c 	bl	800ea88 <strncmp>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d030      	beq.n	800dc96 <_strtod_l+0x1ce>
 800dc34:	2000      	movs	r0, #0
 800dc36:	4632      	mov	r2, r6
 800dc38:	9005      	str	r0, [sp, #20]
 800dc3a:	465e      	mov	r6, fp
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2a65      	cmp	r2, #101	; 0x65
 800dc40:	d001      	beq.n	800dc46 <_strtod_l+0x17e>
 800dc42:	2a45      	cmp	r2, #69	; 0x45
 800dc44:	d113      	bne.n	800dc6e <_strtod_l+0x1a6>
 800dc46:	b91e      	cbnz	r6, 800dc50 <_strtod_l+0x188>
 800dc48:	9a04      	ldr	r2, [sp, #16]
 800dc4a:	4302      	orrs	r2, r0
 800dc4c:	d094      	beq.n	800db78 <_strtod_l+0xb0>
 800dc4e:	2600      	movs	r6, #0
 800dc50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800dc52:	1c6a      	adds	r2, r5, #1
 800dc54:	9215      	str	r2, [sp, #84]	; 0x54
 800dc56:	786a      	ldrb	r2, [r5, #1]
 800dc58:	2a2b      	cmp	r2, #43	; 0x2b
 800dc5a:	d074      	beq.n	800dd46 <_strtod_l+0x27e>
 800dc5c:	2a2d      	cmp	r2, #45	; 0x2d
 800dc5e:	d078      	beq.n	800dd52 <_strtod_l+0x28a>
 800dc60:	f04f 0c00 	mov.w	ip, #0
 800dc64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dc68:	2909      	cmp	r1, #9
 800dc6a:	d97f      	bls.n	800dd6c <_strtod_l+0x2a4>
 800dc6c:	9515      	str	r5, [sp, #84]	; 0x54
 800dc6e:	2700      	movs	r7, #0
 800dc70:	e09e      	b.n	800ddb0 <_strtod_l+0x2e8>
 800dc72:	2300      	movs	r3, #0
 800dc74:	e7c8      	b.n	800dc08 <_strtod_l+0x140>
 800dc76:	f1bb 0f08 	cmp.w	fp, #8
 800dc7a:	bfd8      	it	le
 800dc7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dc7e:	f100 0001 	add.w	r0, r0, #1
 800dc82:	bfda      	itte	le
 800dc84:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc88:	9309      	strle	r3, [sp, #36]	; 0x24
 800dc8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800dc8e:	f10b 0b01 	add.w	fp, fp, #1
 800dc92:	9015      	str	r0, [sp, #84]	; 0x54
 800dc94:	e7c1      	b.n	800dc1a <_strtod_l+0x152>
 800dc96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc98:	1c5a      	adds	r2, r3, #1
 800dc9a:	9215      	str	r2, [sp, #84]	; 0x54
 800dc9c:	785a      	ldrb	r2, [r3, #1]
 800dc9e:	f1bb 0f00 	cmp.w	fp, #0
 800dca2:	d037      	beq.n	800dd14 <_strtod_l+0x24c>
 800dca4:	9005      	str	r0, [sp, #20]
 800dca6:	465e      	mov	r6, fp
 800dca8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dcac:	2b09      	cmp	r3, #9
 800dcae:	d912      	bls.n	800dcd6 <_strtod_l+0x20e>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e7c4      	b.n	800dc3e <_strtod_l+0x176>
 800dcb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcb6:	1c5a      	adds	r2, r3, #1
 800dcb8:	9215      	str	r2, [sp, #84]	; 0x54
 800dcba:	785a      	ldrb	r2, [r3, #1]
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	2a30      	cmp	r2, #48	; 0x30
 800dcc0:	d0f8      	beq.n	800dcb4 <_strtod_l+0x1ec>
 800dcc2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dcc6:	2b08      	cmp	r3, #8
 800dcc8:	f200 84c1 	bhi.w	800e64e <_strtod_l+0xb86>
 800dccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcce:	9005      	str	r0, [sp, #20]
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	3a30      	subs	r2, #48	; 0x30
 800dcd8:	f100 0301 	add.w	r3, r0, #1
 800dcdc:	d014      	beq.n	800dd08 <_strtod_l+0x240>
 800dcde:	9905      	ldr	r1, [sp, #20]
 800dce0:	4419      	add	r1, r3
 800dce2:	9105      	str	r1, [sp, #20]
 800dce4:	4633      	mov	r3, r6
 800dce6:	eb00 0c06 	add.w	ip, r0, r6
 800dcea:	210a      	movs	r1, #10
 800dcec:	4563      	cmp	r3, ip
 800dcee:	d113      	bne.n	800dd18 <_strtod_l+0x250>
 800dcf0:	1833      	adds	r3, r6, r0
 800dcf2:	2b08      	cmp	r3, #8
 800dcf4:	f106 0601 	add.w	r6, r6, #1
 800dcf8:	4406      	add	r6, r0
 800dcfa:	dc1a      	bgt.n	800dd32 <_strtod_l+0x26a>
 800dcfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcfe:	230a      	movs	r3, #10
 800dd00:	fb03 2301 	mla	r3, r3, r1, r2
 800dd04:	9309      	str	r3, [sp, #36]	; 0x24
 800dd06:	2300      	movs	r3, #0
 800dd08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dd0a:	1c51      	adds	r1, r2, #1
 800dd0c:	9115      	str	r1, [sp, #84]	; 0x54
 800dd0e:	7852      	ldrb	r2, [r2, #1]
 800dd10:	4618      	mov	r0, r3
 800dd12:	e7c9      	b.n	800dca8 <_strtod_l+0x1e0>
 800dd14:	4658      	mov	r0, fp
 800dd16:	e7d2      	b.n	800dcbe <_strtod_l+0x1f6>
 800dd18:	2b08      	cmp	r3, #8
 800dd1a:	f103 0301 	add.w	r3, r3, #1
 800dd1e:	dc03      	bgt.n	800dd28 <_strtod_l+0x260>
 800dd20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dd22:	434f      	muls	r7, r1
 800dd24:	9709      	str	r7, [sp, #36]	; 0x24
 800dd26:	e7e1      	b.n	800dcec <_strtod_l+0x224>
 800dd28:	2b10      	cmp	r3, #16
 800dd2a:	bfd8      	it	le
 800dd2c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800dd30:	e7dc      	b.n	800dcec <_strtod_l+0x224>
 800dd32:	2e10      	cmp	r6, #16
 800dd34:	bfdc      	itt	le
 800dd36:	230a      	movle	r3, #10
 800dd38:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800dd3c:	e7e3      	b.n	800dd06 <_strtod_l+0x23e>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	9305      	str	r3, [sp, #20]
 800dd42:	2301      	movs	r3, #1
 800dd44:	e780      	b.n	800dc48 <_strtod_l+0x180>
 800dd46:	f04f 0c00 	mov.w	ip, #0
 800dd4a:	1caa      	adds	r2, r5, #2
 800dd4c:	9215      	str	r2, [sp, #84]	; 0x54
 800dd4e:	78aa      	ldrb	r2, [r5, #2]
 800dd50:	e788      	b.n	800dc64 <_strtod_l+0x19c>
 800dd52:	f04f 0c01 	mov.w	ip, #1
 800dd56:	e7f8      	b.n	800dd4a <_strtod_l+0x282>
 800dd58:	080110f4 	.word	0x080110f4
 800dd5c:	080110e4 	.word	0x080110e4
 800dd60:	7ff00000 	.word	0x7ff00000
 800dd64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dd66:	1c51      	adds	r1, r2, #1
 800dd68:	9115      	str	r1, [sp, #84]	; 0x54
 800dd6a:	7852      	ldrb	r2, [r2, #1]
 800dd6c:	2a30      	cmp	r2, #48	; 0x30
 800dd6e:	d0f9      	beq.n	800dd64 <_strtod_l+0x29c>
 800dd70:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dd74:	2908      	cmp	r1, #8
 800dd76:	f63f af7a 	bhi.w	800dc6e <_strtod_l+0x1a6>
 800dd7a:	3a30      	subs	r2, #48	; 0x30
 800dd7c:	9208      	str	r2, [sp, #32]
 800dd7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dd80:	920c      	str	r2, [sp, #48]	; 0x30
 800dd82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dd84:	1c57      	adds	r7, r2, #1
 800dd86:	9715      	str	r7, [sp, #84]	; 0x54
 800dd88:	7852      	ldrb	r2, [r2, #1]
 800dd8a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dd8e:	f1be 0f09 	cmp.w	lr, #9
 800dd92:	d938      	bls.n	800de06 <_strtod_l+0x33e>
 800dd94:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd96:	1a7f      	subs	r7, r7, r1
 800dd98:	2f08      	cmp	r7, #8
 800dd9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dd9e:	dc03      	bgt.n	800dda8 <_strtod_l+0x2e0>
 800dda0:	9908      	ldr	r1, [sp, #32]
 800dda2:	428f      	cmp	r7, r1
 800dda4:	bfa8      	it	ge
 800dda6:	460f      	movge	r7, r1
 800dda8:	f1bc 0f00 	cmp.w	ip, #0
 800ddac:	d000      	beq.n	800ddb0 <_strtod_l+0x2e8>
 800ddae:	427f      	negs	r7, r7
 800ddb0:	2e00      	cmp	r6, #0
 800ddb2:	d14f      	bne.n	800de54 <_strtod_l+0x38c>
 800ddb4:	9904      	ldr	r1, [sp, #16]
 800ddb6:	4301      	orrs	r1, r0
 800ddb8:	f47f aec1 	bne.w	800db3e <_strtod_l+0x76>
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f47f aedb 	bne.w	800db78 <_strtod_l+0xb0>
 800ddc2:	2a69      	cmp	r2, #105	; 0x69
 800ddc4:	d029      	beq.n	800de1a <_strtod_l+0x352>
 800ddc6:	dc26      	bgt.n	800de16 <_strtod_l+0x34e>
 800ddc8:	2a49      	cmp	r2, #73	; 0x49
 800ddca:	d026      	beq.n	800de1a <_strtod_l+0x352>
 800ddcc:	2a4e      	cmp	r2, #78	; 0x4e
 800ddce:	f47f aed3 	bne.w	800db78 <_strtod_l+0xb0>
 800ddd2:	499b      	ldr	r1, [pc, #620]	; (800e040 <_strtod_l+0x578>)
 800ddd4:	a815      	add	r0, sp, #84	; 0x54
 800ddd6:	f001 fa75 	bl	800f2c4 <__match>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	f43f aecc 	beq.w	800db78 <_strtod_l+0xb0>
 800dde0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	2b28      	cmp	r3, #40	; 0x28
 800dde6:	d12f      	bne.n	800de48 <_strtod_l+0x380>
 800dde8:	4996      	ldr	r1, [pc, #600]	; (800e044 <_strtod_l+0x57c>)
 800ddea:	aa18      	add	r2, sp, #96	; 0x60
 800ddec:	a815      	add	r0, sp, #84	; 0x54
 800ddee:	f001 fa7d 	bl	800f2ec <__hexnan>
 800ddf2:	2805      	cmp	r0, #5
 800ddf4:	d128      	bne.n	800de48 <_strtod_l+0x380>
 800ddf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ddfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800de00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800de04:	e69b      	b.n	800db3e <_strtod_l+0x76>
 800de06:	9f08      	ldr	r7, [sp, #32]
 800de08:	210a      	movs	r1, #10
 800de0a:	fb01 2107 	mla	r1, r1, r7, r2
 800de0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800de12:	9208      	str	r2, [sp, #32]
 800de14:	e7b5      	b.n	800dd82 <_strtod_l+0x2ba>
 800de16:	2a6e      	cmp	r2, #110	; 0x6e
 800de18:	e7d9      	b.n	800ddce <_strtod_l+0x306>
 800de1a:	498b      	ldr	r1, [pc, #556]	; (800e048 <_strtod_l+0x580>)
 800de1c:	a815      	add	r0, sp, #84	; 0x54
 800de1e:	f001 fa51 	bl	800f2c4 <__match>
 800de22:	2800      	cmp	r0, #0
 800de24:	f43f aea8 	beq.w	800db78 <_strtod_l+0xb0>
 800de28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de2a:	4988      	ldr	r1, [pc, #544]	; (800e04c <_strtod_l+0x584>)
 800de2c:	3b01      	subs	r3, #1
 800de2e:	a815      	add	r0, sp, #84	; 0x54
 800de30:	9315      	str	r3, [sp, #84]	; 0x54
 800de32:	f001 fa47 	bl	800f2c4 <__match>
 800de36:	b910      	cbnz	r0, 800de3e <_strtod_l+0x376>
 800de38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de3a:	3301      	adds	r3, #1
 800de3c:	9315      	str	r3, [sp, #84]	; 0x54
 800de3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e05c <_strtod_l+0x594>
 800de42:	f04f 0800 	mov.w	r8, #0
 800de46:	e67a      	b.n	800db3e <_strtod_l+0x76>
 800de48:	4881      	ldr	r0, [pc, #516]	; (800e050 <_strtod_l+0x588>)
 800de4a:	f000 ff21 	bl	800ec90 <nan>
 800de4e:	ec59 8b10 	vmov	r8, r9, d0
 800de52:	e674      	b.n	800db3e <_strtod_l+0x76>
 800de54:	9b05      	ldr	r3, [sp, #20]
 800de56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de58:	1afb      	subs	r3, r7, r3
 800de5a:	f1bb 0f00 	cmp.w	fp, #0
 800de5e:	bf08      	it	eq
 800de60:	46b3      	moveq	fp, r6
 800de62:	2e10      	cmp	r6, #16
 800de64:	9308      	str	r3, [sp, #32]
 800de66:	4635      	mov	r5, r6
 800de68:	bfa8      	it	ge
 800de6a:	2510      	movge	r5, #16
 800de6c:	f7f2 fb4a 	bl	8000504 <__aeabi_ui2d>
 800de70:	2e09      	cmp	r6, #9
 800de72:	4680      	mov	r8, r0
 800de74:	4689      	mov	r9, r1
 800de76:	dd13      	ble.n	800dea0 <_strtod_l+0x3d8>
 800de78:	4b76      	ldr	r3, [pc, #472]	; (800e054 <_strtod_l+0x58c>)
 800de7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800de7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800de82:	f7f2 fbb9 	bl	80005f8 <__aeabi_dmul>
 800de86:	4680      	mov	r8, r0
 800de88:	4650      	mov	r0, sl
 800de8a:	4689      	mov	r9, r1
 800de8c:	f7f2 fb3a 	bl	8000504 <__aeabi_ui2d>
 800de90:	4602      	mov	r2, r0
 800de92:	460b      	mov	r3, r1
 800de94:	4640      	mov	r0, r8
 800de96:	4649      	mov	r1, r9
 800de98:	f7f2 f9f8 	bl	800028c <__adddf3>
 800de9c:	4680      	mov	r8, r0
 800de9e:	4689      	mov	r9, r1
 800dea0:	2e0f      	cmp	r6, #15
 800dea2:	dc38      	bgt.n	800df16 <_strtod_l+0x44e>
 800dea4:	9b08      	ldr	r3, [sp, #32]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f43f ae49 	beq.w	800db3e <_strtod_l+0x76>
 800deac:	dd24      	ble.n	800def8 <_strtod_l+0x430>
 800deae:	2b16      	cmp	r3, #22
 800deb0:	dc0b      	bgt.n	800deca <_strtod_l+0x402>
 800deb2:	4968      	ldr	r1, [pc, #416]	; (800e054 <_strtod_l+0x58c>)
 800deb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800deb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800debc:	4642      	mov	r2, r8
 800debe:	464b      	mov	r3, r9
 800dec0:	f7f2 fb9a 	bl	80005f8 <__aeabi_dmul>
 800dec4:	4680      	mov	r8, r0
 800dec6:	4689      	mov	r9, r1
 800dec8:	e639      	b.n	800db3e <_strtod_l+0x76>
 800deca:	9a08      	ldr	r2, [sp, #32]
 800decc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ded0:	4293      	cmp	r3, r2
 800ded2:	db20      	blt.n	800df16 <_strtod_l+0x44e>
 800ded4:	4c5f      	ldr	r4, [pc, #380]	; (800e054 <_strtod_l+0x58c>)
 800ded6:	f1c6 060f 	rsb	r6, r6, #15
 800deda:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800dede:	4642      	mov	r2, r8
 800dee0:	464b      	mov	r3, r9
 800dee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dee6:	f7f2 fb87 	bl	80005f8 <__aeabi_dmul>
 800deea:	9b08      	ldr	r3, [sp, #32]
 800deec:	1b9e      	subs	r6, r3, r6
 800deee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800def2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800def6:	e7e3      	b.n	800dec0 <_strtod_l+0x3f8>
 800def8:	9b08      	ldr	r3, [sp, #32]
 800defa:	3316      	adds	r3, #22
 800defc:	db0b      	blt.n	800df16 <_strtod_l+0x44e>
 800defe:	9b05      	ldr	r3, [sp, #20]
 800df00:	1bdf      	subs	r7, r3, r7
 800df02:	4b54      	ldr	r3, [pc, #336]	; (800e054 <_strtod_l+0x58c>)
 800df04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800df08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 fc9c 	bl	800084c <__aeabi_ddiv>
 800df14:	e7d6      	b.n	800dec4 <_strtod_l+0x3fc>
 800df16:	9b08      	ldr	r3, [sp, #32]
 800df18:	1b75      	subs	r5, r6, r5
 800df1a:	441d      	add	r5, r3
 800df1c:	2d00      	cmp	r5, #0
 800df1e:	dd70      	ble.n	800e002 <_strtod_l+0x53a>
 800df20:	f015 030f 	ands.w	r3, r5, #15
 800df24:	d00a      	beq.n	800df3c <_strtod_l+0x474>
 800df26:	494b      	ldr	r1, [pc, #300]	; (800e054 <_strtod_l+0x58c>)
 800df28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df2c:	4642      	mov	r2, r8
 800df2e:	464b      	mov	r3, r9
 800df30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df34:	f7f2 fb60 	bl	80005f8 <__aeabi_dmul>
 800df38:	4680      	mov	r8, r0
 800df3a:	4689      	mov	r9, r1
 800df3c:	f035 050f 	bics.w	r5, r5, #15
 800df40:	d04d      	beq.n	800dfde <_strtod_l+0x516>
 800df42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800df46:	dd22      	ble.n	800df8e <_strtod_l+0x4c6>
 800df48:	2500      	movs	r5, #0
 800df4a:	46ab      	mov	fp, r5
 800df4c:	9509      	str	r5, [sp, #36]	; 0x24
 800df4e:	9505      	str	r5, [sp, #20]
 800df50:	2322      	movs	r3, #34	; 0x22
 800df52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e05c <_strtod_l+0x594>
 800df56:	6023      	str	r3, [r4, #0]
 800df58:	f04f 0800 	mov.w	r8, #0
 800df5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f43f aded 	beq.w	800db3e <_strtod_l+0x76>
 800df64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800df66:	4620      	mov	r0, r4
 800df68:	f001 fb62 	bl	800f630 <_Bfree>
 800df6c:	9905      	ldr	r1, [sp, #20]
 800df6e:	4620      	mov	r0, r4
 800df70:	f001 fb5e 	bl	800f630 <_Bfree>
 800df74:	4659      	mov	r1, fp
 800df76:	4620      	mov	r0, r4
 800df78:	f001 fb5a 	bl	800f630 <_Bfree>
 800df7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df7e:	4620      	mov	r0, r4
 800df80:	f001 fb56 	bl	800f630 <_Bfree>
 800df84:	4629      	mov	r1, r5
 800df86:	4620      	mov	r0, r4
 800df88:	f001 fb52 	bl	800f630 <_Bfree>
 800df8c:	e5d7      	b.n	800db3e <_strtod_l+0x76>
 800df8e:	4b32      	ldr	r3, [pc, #200]	; (800e058 <_strtod_l+0x590>)
 800df90:	9304      	str	r3, [sp, #16]
 800df92:	2300      	movs	r3, #0
 800df94:	112d      	asrs	r5, r5, #4
 800df96:	4640      	mov	r0, r8
 800df98:	4649      	mov	r1, r9
 800df9a:	469a      	mov	sl, r3
 800df9c:	2d01      	cmp	r5, #1
 800df9e:	dc21      	bgt.n	800dfe4 <_strtod_l+0x51c>
 800dfa0:	b10b      	cbz	r3, 800dfa6 <_strtod_l+0x4de>
 800dfa2:	4680      	mov	r8, r0
 800dfa4:	4689      	mov	r9, r1
 800dfa6:	492c      	ldr	r1, [pc, #176]	; (800e058 <_strtod_l+0x590>)
 800dfa8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dfac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dfb0:	4642      	mov	r2, r8
 800dfb2:	464b      	mov	r3, r9
 800dfb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfb8:	f7f2 fb1e 	bl	80005f8 <__aeabi_dmul>
 800dfbc:	4b27      	ldr	r3, [pc, #156]	; (800e05c <_strtod_l+0x594>)
 800dfbe:	460a      	mov	r2, r1
 800dfc0:	400b      	ands	r3, r1
 800dfc2:	4927      	ldr	r1, [pc, #156]	; (800e060 <_strtod_l+0x598>)
 800dfc4:	428b      	cmp	r3, r1
 800dfc6:	4680      	mov	r8, r0
 800dfc8:	d8be      	bhi.n	800df48 <_strtod_l+0x480>
 800dfca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dfce:	428b      	cmp	r3, r1
 800dfd0:	bf86      	itte	hi
 800dfd2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e064 <_strtod_l+0x59c>
 800dfd6:	f04f 38ff 	movhi.w	r8, #4294967295
 800dfda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800dfde:	2300      	movs	r3, #0
 800dfe0:	9304      	str	r3, [sp, #16]
 800dfe2:	e07b      	b.n	800e0dc <_strtod_l+0x614>
 800dfe4:	07ea      	lsls	r2, r5, #31
 800dfe6:	d505      	bpl.n	800dff4 <_strtod_l+0x52c>
 800dfe8:	9b04      	ldr	r3, [sp, #16]
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	f7f2 fb03 	bl	80005f8 <__aeabi_dmul>
 800dff2:	2301      	movs	r3, #1
 800dff4:	9a04      	ldr	r2, [sp, #16]
 800dff6:	3208      	adds	r2, #8
 800dff8:	f10a 0a01 	add.w	sl, sl, #1
 800dffc:	106d      	asrs	r5, r5, #1
 800dffe:	9204      	str	r2, [sp, #16]
 800e000:	e7cc      	b.n	800df9c <_strtod_l+0x4d4>
 800e002:	d0ec      	beq.n	800dfde <_strtod_l+0x516>
 800e004:	426d      	negs	r5, r5
 800e006:	f015 020f 	ands.w	r2, r5, #15
 800e00a:	d00a      	beq.n	800e022 <_strtod_l+0x55a>
 800e00c:	4b11      	ldr	r3, [pc, #68]	; (800e054 <_strtod_l+0x58c>)
 800e00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e012:	4640      	mov	r0, r8
 800e014:	4649      	mov	r1, r9
 800e016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01a:	f7f2 fc17 	bl	800084c <__aeabi_ddiv>
 800e01e:	4680      	mov	r8, r0
 800e020:	4689      	mov	r9, r1
 800e022:	112d      	asrs	r5, r5, #4
 800e024:	d0db      	beq.n	800dfde <_strtod_l+0x516>
 800e026:	2d1f      	cmp	r5, #31
 800e028:	dd1e      	ble.n	800e068 <_strtod_l+0x5a0>
 800e02a:	2500      	movs	r5, #0
 800e02c:	46ab      	mov	fp, r5
 800e02e:	9509      	str	r5, [sp, #36]	; 0x24
 800e030:	9505      	str	r5, [sp, #20]
 800e032:	2322      	movs	r3, #34	; 0x22
 800e034:	f04f 0800 	mov.w	r8, #0
 800e038:	f04f 0900 	mov.w	r9, #0
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	e78d      	b.n	800df5c <_strtod_l+0x494>
 800e040:	080110ef 	.word	0x080110ef
 800e044:	08011108 	.word	0x08011108
 800e048:	080110e6 	.word	0x080110e6
 800e04c:	080110e9 	.word	0x080110e9
 800e050:	080112fd 	.word	0x080112fd
 800e054:	080113f0 	.word	0x080113f0
 800e058:	080113c8 	.word	0x080113c8
 800e05c:	7ff00000 	.word	0x7ff00000
 800e060:	7ca00000 	.word	0x7ca00000
 800e064:	7fefffff 	.word	0x7fefffff
 800e068:	f015 0310 	ands.w	r3, r5, #16
 800e06c:	bf18      	it	ne
 800e06e:	236a      	movne	r3, #106	; 0x6a
 800e070:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e414 <_strtod_l+0x94c>
 800e074:	9304      	str	r3, [sp, #16]
 800e076:	4640      	mov	r0, r8
 800e078:	4649      	mov	r1, r9
 800e07a:	2300      	movs	r3, #0
 800e07c:	07ea      	lsls	r2, r5, #31
 800e07e:	d504      	bpl.n	800e08a <_strtod_l+0x5c2>
 800e080:	e9da 2300 	ldrd	r2, r3, [sl]
 800e084:	f7f2 fab8 	bl	80005f8 <__aeabi_dmul>
 800e088:	2301      	movs	r3, #1
 800e08a:	106d      	asrs	r5, r5, #1
 800e08c:	f10a 0a08 	add.w	sl, sl, #8
 800e090:	d1f4      	bne.n	800e07c <_strtod_l+0x5b4>
 800e092:	b10b      	cbz	r3, 800e098 <_strtod_l+0x5d0>
 800e094:	4680      	mov	r8, r0
 800e096:	4689      	mov	r9, r1
 800e098:	9b04      	ldr	r3, [sp, #16]
 800e09a:	b1bb      	cbz	r3, 800e0cc <_strtod_l+0x604>
 800e09c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e0a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	dd10      	ble.n	800e0cc <_strtod_l+0x604>
 800e0aa:	2b1f      	cmp	r3, #31
 800e0ac:	f340 811e 	ble.w	800e2ec <_strtod_l+0x824>
 800e0b0:	2b34      	cmp	r3, #52	; 0x34
 800e0b2:	bfde      	ittt	le
 800e0b4:	f04f 33ff 	movle.w	r3, #4294967295
 800e0b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e0bc:	4093      	lslle	r3, r2
 800e0be:	f04f 0800 	mov.w	r8, #0
 800e0c2:	bfcc      	ite	gt
 800e0c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e0c8:	ea03 0901 	andle.w	r9, r3, r1
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	4640      	mov	r0, r8
 800e0d2:	4649      	mov	r1, r9
 800e0d4:	f7f2 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d1a6      	bne.n	800e02a <_strtod_l+0x562>
 800e0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0e2:	4633      	mov	r3, r6
 800e0e4:	465a      	mov	r2, fp
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f001 fb0a 	bl	800f700 <__s2b>
 800e0ec:	9009      	str	r0, [sp, #36]	; 0x24
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	f43f af2a 	beq.w	800df48 <_strtod_l+0x480>
 800e0f4:	9a08      	ldr	r2, [sp, #32]
 800e0f6:	9b05      	ldr	r3, [sp, #20]
 800e0f8:	2a00      	cmp	r2, #0
 800e0fa:	eba3 0307 	sub.w	r3, r3, r7
 800e0fe:	bfa8      	it	ge
 800e100:	2300      	movge	r3, #0
 800e102:	930c      	str	r3, [sp, #48]	; 0x30
 800e104:	2500      	movs	r5, #0
 800e106:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e10a:	9312      	str	r3, [sp, #72]	; 0x48
 800e10c:	46ab      	mov	fp, r5
 800e10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e110:	4620      	mov	r0, r4
 800e112:	6859      	ldr	r1, [r3, #4]
 800e114:	f001 fa4c 	bl	800f5b0 <_Balloc>
 800e118:	9005      	str	r0, [sp, #20]
 800e11a:	2800      	cmp	r0, #0
 800e11c:	f43f af18 	beq.w	800df50 <_strtod_l+0x488>
 800e120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e122:	691a      	ldr	r2, [r3, #16]
 800e124:	3202      	adds	r2, #2
 800e126:	f103 010c 	add.w	r1, r3, #12
 800e12a:	0092      	lsls	r2, r2, #2
 800e12c:	300c      	adds	r0, #12
 800e12e:	f000 fda0 	bl	800ec72 <memcpy>
 800e132:	ec49 8b10 	vmov	d0, r8, r9
 800e136:	aa18      	add	r2, sp, #96	; 0x60
 800e138:	a917      	add	r1, sp, #92	; 0x5c
 800e13a:	4620      	mov	r0, r4
 800e13c:	f001 fe14 	bl	800fd68 <__d2b>
 800e140:	ec49 8b18 	vmov	d8, r8, r9
 800e144:	9016      	str	r0, [sp, #88]	; 0x58
 800e146:	2800      	cmp	r0, #0
 800e148:	f43f af02 	beq.w	800df50 <_strtod_l+0x488>
 800e14c:	2101      	movs	r1, #1
 800e14e:	4620      	mov	r0, r4
 800e150:	f001 fb6e 	bl	800f830 <__i2b>
 800e154:	4683      	mov	fp, r0
 800e156:	2800      	cmp	r0, #0
 800e158:	f43f aefa 	beq.w	800df50 <_strtod_l+0x488>
 800e15c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e15e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e160:	2e00      	cmp	r6, #0
 800e162:	bfab      	itete	ge
 800e164:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e166:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e168:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e16a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e16e:	bfac      	ite	ge
 800e170:	eb06 0a03 	addge.w	sl, r6, r3
 800e174:	1b9f      	sublt	r7, r3, r6
 800e176:	9b04      	ldr	r3, [sp, #16]
 800e178:	1af6      	subs	r6, r6, r3
 800e17a:	4416      	add	r6, r2
 800e17c:	4ba0      	ldr	r3, [pc, #640]	; (800e400 <_strtod_l+0x938>)
 800e17e:	3e01      	subs	r6, #1
 800e180:	429e      	cmp	r6, r3
 800e182:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e186:	f280 80c4 	bge.w	800e312 <_strtod_l+0x84a>
 800e18a:	1b9b      	subs	r3, r3, r6
 800e18c:	2b1f      	cmp	r3, #31
 800e18e:	eba2 0203 	sub.w	r2, r2, r3
 800e192:	f04f 0101 	mov.w	r1, #1
 800e196:	f300 80b0 	bgt.w	800e2fa <_strtod_l+0x832>
 800e19a:	fa01 f303 	lsl.w	r3, r1, r3
 800e19e:	930e      	str	r3, [sp, #56]	; 0x38
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	930d      	str	r3, [sp, #52]	; 0x34
 800e1a4:	eb0a 0602 	add.w	r6, sl, r2
 800e1a8:	9b04      	ldr	r3, [sp, #16]
 800e1aa:	45b2      	cmp	sl, r6
 800e1ac:	4417      	add	r7, r2
 800e1ae:	441f      	add	r7, r3
 800e1b0:	4653      	mov	r3, sl
 800e1b2:	bfa8      	it	ge
 800e1b4:	4633      	movge	r3, r6
 800e1b6:	42bb      	cmp	r3, r7
 800e1b8:	bfa8      	it	ge
 800e1ba:	463b      	movge	r3, r7
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	bfc2      	ittt	gt
 800e1c0:	1af6      	subgt	r6, r6, r3
 800e1c2:	1aff      	subgt	r7, r7, r3
 800e1c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	dd17      	ble.n	800e1fe <_strtod_l+0x736>
 800e1ce:	4659      	mov	r1, fp
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f001 fbec 	bl	800f9b0 <__pow5mult>
 800e1d8:	4683      	mov	fp, r0
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	f43f aeb8 	beq.w	800df50 <_strtod_l+0x488>
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f001 fb39 	bl	800f85c <__multiply>
 800e1ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	f43f aeaf 	beq.w	800df50 <_strtod_l+0x488>
 800e1f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f001 fa1b 	bl	800f630 <_Bfree>
 800e1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1fc:	9316      	str	r3, [sp, #88]	; 0x58
 800e1fe:	2e00      	cmp	r6, #0
 800e200:	f300 808c 	bgt.w	800e31c <_strtod_l+0x854>
 800e204:	9b08      	ldr	r3, [sp, #32]
 800e206:	2b00      	cmp	r3, #0
 800e208:	dd08      	ble.n	800e21c <_strtod_l+0x754>
 800e20a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e20c:	9905      	ldr	r1, [sp, #20]
 800e20e:	4620      	mov	r0, r4
 800e210:	f001 fbce 	bl	800f9b0 <__pow5mult>
 800e214:	9005      	str	r0, [sp, #20]
 800e216:	2800      	cmp	r0, #0
 800e218:	f43f ae9a 	beq.w	800df50 <_strtod_l+0x488>
 800e21c:	2f00      	cmp	r7, #0
 800e21e:	dd08      	ble.n	800e232 <_strtod_l+0x76a>
 800e220:	9905      	ldr	r1, [sp, #20]
 800e222:	463a      	mov	r2, r7
 800e224:	4620      	mov	r0, r4
 800e226:	f001 fc1d 	bl	800fa64 <__lshift>
 800e22a:	9005      	str	r0, [sp, #20]
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f43f ae8f 	beq.w	800df50 <_strtod_l+0x488>
 800e232:	f1ba 0f00 	cmp.w	sl, #0
 800e236:	dd08      	ble.n	800e24a <_strtod_l+0x782>
 800e238:	4659      	mov	r1, fp
 800e23a:	4652      	mov	r2, sl
 800e23c:	4620      	mov	r0, r4
 800e23e:	f001 fc11 	bl	800fa64 <__lshift>
 800e242:	4683      	mov	fp, r0
 800e244:	2800      	cmp	r0, #0
 800e246:	f43f ae83 	beq.w	800df50 <_strtod_l+0x488>
 800e24a:	9a05      	ldr	r2, [sp, #20]
 800e24c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e24e:	4620      	mov	r0, r4
 800e250:	f001 fc90 	bl	800fb74 <__mdiff>
 800e254:	4605      	mov	r5, r0
 800e256:	2800      	cmp	r0, #0
 800e258:	f43f ae7a 	beq.w	800df50 <_strtod_l+0x488>
 800e25c:	68c3      	ldr	r3, [r0, #12]
 800e25e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e260:	2300      	movs	r3, #0
 800e262:	60c3      	str	r3, [r0, #12]
 800e264:	4659      	mov	r1, fp
 800e266:	f001 fc69 	bl	800fb3c <__mcmp>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	da60      	bge.n	800e330 <_strtod_l+0x868>
 800e26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e270:	ea53 0308 	orrs.w	r3, r3, r8
 800e274:	f040 8084 	bne.w	800e380 <_strtod_l+0x8b8>
 800e278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d17f      	bne.n	800e380 <_strtod_l+0x8b8>
 800e280:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e284:	0d1b      	lsrs	r3, r3, #20
 800e286:	051b      	lsls	r3, r3, #20
 800e288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e28c:	d978      	bls.n	800e380 <_strtod_l+0x8b8>
 800e28e:	696b      	ldr	r3, [r5, #20]
 800e290:	b913      	cbnz	r3, 800e298 <_strtod_l+0x7d0>
 800e292:	692b      	ldr	r3, [r5, #16]
 800e294:	2b01      	cmp	r3, #1
 800e296:	dd73      	ble.n	800e380 <_strtod_l+0x8b8>
 800e298:	4629      	mov	r1, r5
 800e29a:	2201      	movs	r2, #1
 800e29c:	4620      	mov	r0, r4
 800e29e:	f001 fbe1 	bl	800fa64 <__lshift>
 800e2a2:	4659      	mov	r1, fp
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	f001 fc49 	bl	800fb3c <__mcmp>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	dd68      	ble.n	800e380 <_strtod_l+0x8b8>
 800e2ae:	9904      	ldr	r1, [sp, #16]
 800e2b0:	4a54      	ldr	r2, [pc, #336]	; (800e404 <_strtod_l+0x93c>)
 800e2b2:	464b      	mov	r3, r9
 800e2b4:	2900      	cmp	r1, #0
 800e2b6:	f000 8084 	beq.w	800e3c2 <_strtod_l+0x8fa>
 800e2ba:	ea02 0109 	and.w	r1, r2, r9
 800e2be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e2c2:	dc7e      	bgt.n	800e3c2 <_strtod_l+0x8fa>
 800e2c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e2c8:	f77f aeb3 	ble.w	800e032 <_strtod_l+0x56a>
 800e2cc:	4b4e      	ldr	r3, [pc, #312]	; (800e408 <_strtod_l+0x940>)
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f7f2 f990 	bl	80005f8 <__aeabi_dmul>
 800e2d8:	4b4a      	ldr	r3, [pc, #296]	; (800e404 <_strtod_l+0x93c>)
 800e2da:	400b      	ands	r3, r1
 800e2dc:	4680      	mov	r8, r0
 800e2de:	4689      	mov	r9, r1
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f47f ae3f 	bne.w	800df64 <_strtod_l+0x49c>
 800e2e6:	2322      	movs	r3, #34	; 0x22
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	e63b      	b.n	800df64 <_strtod_l+0x49c>
 800e2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f4:	ea03 0808 	and.w	r8, r3, r8
 800e2f8:	e6e8      	b.n	800e0cc <_strtod_l+0x604>
 800e2fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e2fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e302:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e306:	36e2      	adds	r6, #226	; 0xe2
 800e308:	fa01 f306 	lsl.w	r3, r1, r6
 800e30c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e310:	e748      	b.n	800e1a4 <_strtod_l+0x6dc>
 800e312:	2100      	movs	r1, #0
 800e314:	2301      	movs	r3, #1
 800e316:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e31a:	e743      	b.n	800e1a4 <_strtod_l+0x6dc>
 800e31c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e31e:	4632      	mov	r2, r6
 800e320:	4620      	mov	r0, r4
 800e322:	f001 fb9f 	bl	800fa64 <__lshift>
 800e326:	9016      	str	r0, [sp, #88]	; 0x58
 800e328:	2800      	cmp	r0, #0
 800e32a:	f47f af6b 	bne.w	800e204 <_strtod_l+0x73c>
 800e32e:	e60f      	b.n	800df50 <_strtod_l+0x488>
 800e330:	46ca      	mov	sl, r9
 800e332:	d171      	bne.n	800e418 <_strtod_l+0x950>
 800e334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e336:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e33a:	b352      	cbz	r2, 800e392 <_strtod_l+0x8ca>
 800e33c:	4a33      	ldr	r2, [pc, #204]	; (800e40c <_strtod_l+0x944>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d12a      	bne.n	800e398 <_strtod_l+0x8d0>
 800e342:	9b04      	ldr	r3, [sp, #16]
 800e344:	4641      	mov	r1, r8
 800e346:	b1fb      	cbz	r3, 800e388 <_strtod_l+0x8c0>
 800e348:	4b2e      	ldr	r3, [pc, #184]	; (800e404 <_strtod_l+0x93c>)
 800e34a:	ea09 0303 	and.w	r3, r9, r3
 800e34e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e352:	f04f 32ff 	mov.w	r2, #4294967295
 800e356:	d81a      	bhi.n	800e38e <_strtod_l+0x8c6>
 800e358:	0d1b      	lsrs	r3, r3, #20
 800e35a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e35e:	fa02 f303 	lsl.w	r3, r2, r3
 800e362:	4299      	cmp	r1, r3
 800e364:	d118      	bne.n	800e398 <_strtod_l+0x8d0>
 800e366:	4b2a      	ldr	r3, [pc, #168]	; (800e410 <_strtod_l+0x948>)
 800e368:	459a      	cmp	sl, r3
 800e36a:	d102      	bne.n	800e372 <_strtod_l+0x8aa>
 800e36c:	3101      	adds	r1, #1
 800e36e:	f43f adef 	beq.w	800df50 <_strtod_l+0x488>
 800e372:	4b24      	ldr	r3, [pc, #144]	; (800e404 <_strtod_l+0x93c>)
 800e374:	ea0a 0303 	and.w	r3, sl, r3
 800e378:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e37c:	f04f 0800 	mov.w	r8, #0
 800e380:	9b04      	ldr	r3, [sp, #16]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1a2      	bne.n	800e2cc <_strtod_l+0x804>
 800e386:	e5ed      	b.n	800df64 <_strtod_l+0x49c>
 800e388:	f04f 33ff 	mov.w	r3, #4294967295
 800e38c:	e7e9      	b.n	800e362 <_strtod_l+0x89a>
 800e38e:	4613      	mov	r3, r2
 800e390:	e7e7      	b.n	800e362 <_strtod_l+0x89a>
 800e392:	ea53 0308 	orrs.w	r3, r3, r8
 800e396:	d08a      	beq.n	800e2ae <_strtod_l+0x7e6>
 800e398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e39a:	b1e3      	cbz	r3, 800e3d6 <_strtod_l+0x90e>
 800e39c:	ea13 0f0a 	tst.w	r3, sl
 800e3a0:	d0ee      	beq.n	800e380 <_strtod_l+0x8b8>
 800e3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3a4:	9a04      	ldr	r2, [sp, #16]
 800e3a6:	4640      	mov	r0, r8
 800e3a8:	4649      	mov	r1, r9
 800e3aa:	b1c3      	cbz	r3, 800e3de <_strtod_l+0x916>
 800e3ac:	f7ff fb6d 	bl	800da8a <sulp>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	ec51 0b18 	vmov	r0, r1, d8
 800e3b8:	f7f1 ff68 	bl	800028c <__adddf3>
 800e3bc:	4680      	mov	r8, r0
 800e3be:	4689      	mov	r9, r1
 800e3c0:	e7de      	b.n	800e380 <_strtod_l+0x8b8>
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e3c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e3cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e3d0:	f04f 38ff 	mov.w	r8, #4294967295
 800e3d4:	e7d4      	b.n	800e380 <_strtod_l+0x8b8>
 800e3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3d8:	ea13 0f08 	tst.w	r3, r8
 800e3dc:	e7e0      	b.n	800e3a0 <_strtod_l+0x8d8>
 800e3de:	f7ff fb54 	bl	800da8a <sulp>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	ec51 0b18 	vmov	r0, r1, d8
 800e3ea:	f7f1 ff4d 	bl	8000288 <__aeabi_dsub>
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4680      	mov	r8, r0
 800e3f4:	4689      	mov	r9, r1
 800e3f6:	f7f2 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d0c0      	beq.n	800e380 <_strtod_l+0x8b8>
 800e3fe:	e618      	b.n	800e032 <_strtod_l+0x56a>
 800e400:	fffffc02 	.word	0xfffffc02
 800e404:	7ff00000 	.word	0x7ff00000
 800e408:	39500000 	.word	0x39500000
 800e40c:	000fffff 	.word	0x000fffff
 800e410:	7fefffff 	.word	0x7fefffff
 800e414:	08011120 	.word	0x08011120
 800e418:	4659      	mov	r1, fp
 800e41a:	4628      	mov	r0, r5
 800e41c:	f001 fcfe 	bl	800fe1c <__ratio>
 800e420:	ec57 6b10 	vmov	r6, r7, d0
 800e424:	ee10 0a10 	vmov	r0, s0
 800e428:	2200      	movs	r2, #0
 800e42a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e42e:	4639      	mov	r1, r7
 800e430:	f7f2 fb5e 	bl	8000af0 <__aeabi_dcmple>
 800e434:	2800      	cmp	r0, #0
 800e436:	d071      	beq.n	800e51c <_strtod_l+0xa54>
 800e438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d17c      	bne.n	800e538 <_strtod_l+0xa70>
 800e43e:	f1b8 0f00 	cmp.w	r8, #0
 800e442:	d15a      	bne.n	800e4fa <_strtod_l+0xa32>
 800e444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d15d      	bne.n	800e508 <_strtod_l+0xa40>
 800e44c:	4b90      	ldr	r3, [pc, #576]	; (800e690 <_strtod_l+0xbc8>)
 800e44e:	2200      	movs	r2, #0
 800e450:	4630      	mov	r0, r6
 800e452:	4639      	mov	r1, r7
 800e454:	f7f2 fb42 	bl	8000adc <__aeabi_dcmplt>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d15c      	bne.n	800e516 <_strtod_l+0xa4e>
 800e45c:	4630      	mov	r0, r6
 800e45e:	4639      	mov	r1, r7
 800e460:	4b8c      	ldr	r3, [pc, #560]	; (800e694 <_strtod_l+0xbcc>)
 800e462:	2200      	movs	r2, #0
 800e464:	f7f2 f8c8 	bl	80005f8 <__aeabi_dmul>
 800e468:	4606      	mov	r6, r0
 800e46a:	460f      	mov	r7, r1
 800e46c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e470:	9606      	str	r6, [sp, #24]
 800e472:	9307      	str	r3, [sp, #28]
 800e474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e478:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e47c:	4b86      	ldr	r3, [pc, #536]	; (800e698 <_strtod_l+0xbd0>)
 800e47e:	ea0a 0303 	and.w	r3, sl, r3
 800e482:	930d      	str	r3, [sp, #52]	; 0x34
 800e484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e486:	4b85      	ldr	r3, [pc, #532]	; (800e69c <_strtod_l+0xbd4>)
 800e488:	429a      	cmp	r2, r3
 800e48a:	f040 8090 	bne.w	800e5ae <_strtod_l+0xae6>
 800e48e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e492:	ec49 8b10 	vmov	d0, r8, r9
 800e496:	f001 fbf7 	bl	800fc88 <__ulp>
 800e49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e49e:	ec51 0b10 	vmov	r0, r1, d0
 800e4a2:	f7f2 f8a9 	bl	80005f8 <__aeabi_dmul>
 800e4a6:	4642      	mov	r2, r8
 800e4a8:	464b      	mov	r3, r9
 800e4aa:	f7f1 feef 	bl	800028c <__adddf3>
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	4979      	ldr	r1, [pc, #484]	; (800e698 <_strtod_l+0xbd0>)
 800e4b2:	4a7b      	ldr	r2, [pc, #492]	; (800e6a0 <_strtod_l+0xbd8>)
 800e4b4:	4019      	ands	r1, r3
 800e4b6:	4291      	cmp	r1, r2
 800e4b8:	4680      	mov	r8, r0
 800e4ba:	d944      	bls.n	800e546 <_strtod_l+0xa7e>
 800e4bc:	ee18 2a90 	vmov	r2, s17
 800e4c0:	4b78      	ldr	r3, [pc, #480]	; (800e6a4 <_strtod_l+0xbdc>)
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d104      	bne.n	800e4d0 <_strtod_l+0xa08>
 800e4c6:	ee18 3a10 	vmov	r3, s16
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	f43f ad40 	beq.w	800df50 <_strtod_l+0x488>
 800e4d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e6a4 <_strtod_l+0xbdc>
 800e4d4:	f04f 38ff 	mov.w	r8, #4294967295
 800e4d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f001 f8a8 	bl	800f630 <_Bfree>
 800e4e0:	9905      	ldr	r1, [sp, #20]
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f001 f8a4 	bl	800f630 <_Bfree>
 800e4e8:	4659      	mov	r1, fp
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	f001 f8a0 	bl	800f630 <_Bfree>
 800e4f0:	4629      	mov	r1, r5
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f001 f89c 	bl	800f630 <_Bfree>
 800e4f8:	e609      	b.n	800e10e <_strtod_l+0x646>
 800e4fa:	f1b8 0f01 	cmp.w	r8, #1
 800e4fe:	d103      	bne.n	800e508 <_strtod_l+0xa40>
 800e500:	f1b9 0f00 	cmp.w	r9, #0
 800e504:	f43f ad95 	beq.w	800e032 <_strtod_l+0x56a>
 800e508:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e660 <_strtod_l+0xb98>
 800e50c:	4f60      	ldr	r7, [pc, #384]	; (800e690 <_strtod_l+0xbc8>)
 800e50e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e512:	2600      	movs	r6, #0
 800e514:	e7ae      	b.n	800e474 <_strtod_l+0x9ac>
 800e516:	4f5f      	ldr	r7, [pc, #380]	; (800e694 <_strtod_l+0xbcc>)
 800e518:	2600      	movs	r6, #0
 800e51a:	e7a7      	b.n	800e46c <_strtod_l+0x9a4>
 800e51c:	4b5d      	ldr	r3, [pc, #372]	; (800e694 <_strtod_l+0xbcc>)
 800e51e:	4630      	mov	r0, r6
 800e520:	4639      	mov	r1, r7
 800e522:	2200      	movs	r2, #0
 800e524:	f7f2 f868 	bl	80005f8 <__aeabi_dmul>
 800e528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e52a:	4606      	mov	r6, r0
 800e52c:	460f      	mov	r7, r1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d09c      	beq.n	800e46c <_strtod_l+0x9a4>
 800e532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e536:	e79d      	b.n	800e474 <_strtod_l+0x9ac>
 800e538:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e668 <_strtod_l+0xba0>
 800e53c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e540:	ec57 6b17 	vmov	r6, r7, d7
 800e544:	e796      	b.n	800e474 <_strtod_l+0x9ac>
 800e546:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e54a:	9b04      	ldr	r3, [sp, #16]
 800e54c:	46ca      	mov	sl, r9
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1c2      	bne.n	800e4d8 <_strtod_l+0xa10>
 800e552:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e558:	0d1b      	lsrs	r3, r3, #20
 800e55a:	051b      	lsls	r3, r3, #20
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d1bb      	bne.n	800e4d8 <_strtod_l+0xa10>
 800e560:	4630      	mov	r0, r6
 800e562:	4639      	mov	r1, r7
 800e564:	f7f2 fb92 	bl	8000c8c <__aeabi_d2lz>
 800e568:	f7f2 f818 	bl	800059c <__aeabi_l2d>
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	4630      	mov	r0, r6
 800e572:	4639      	mov	r1, r7
 800e574:	f7f1 fe88 	bl	8000288 <__aeabi_dsub>
 800e578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e57a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e57e:	ea43 0308 	orr.w	r3, r3, r8
 800e582:	4313      	orrs	r3, r2
 800e584:	4606      	mov	r6, r0
 800e586:	460f      	mov	r7, r1
 800e588:	d054      	beq.n	800e634 <_strtod_l+0xb6c>
 800e58a:	a339      	add	r3, pc, #228	; (adr r3, 800e670 <_strtod_l+0xba8>)
 800e58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e590:	f7f2 faa4 	bl	8000adc <__aeabi_dcmplt>
 800e594:	2800      	cmp	r0, #0
 800e596:	f47f ace5 	bne.w	800df64 <_strtod_l+0x49c>
 800e59a:	a337      	add	r3, pc, #220	; (adr r3, 800e678 <_strtod_l+0xbb0>)
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	f7f2 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d095      	beq.n	800e4d8 <_strtod_l+0xa10>
 800e5ac:	e4da      	b.n	800df64 <_strtod_l+0x49c>
 800e5ae:	9b04      	ldr	r3, [sp, #16]
 800e5b0:	b333      	cbz	r3, 800e600 <_strtod_l+0xb38>
 800e5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5b8:	d822      	bhi.n	800e600 <_strtod_l+0xb38>
 800e5ba:	a331      	add	r3, pc, #196	; (adr r3, 800e680 <_strtod_l+0xbb8>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	f7f2 fa94 	bl	8000af0 <__aeabi_dcmple>
 800e5c8:	b1a0      	cbz	r0, 800e5f4 <_strtod_l+0xb2c>
 800e5ca:	4639      	mov	r1, r7
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	f7f2 fad5 	bl	8000b7c <__aeabi_d2uiz>
 800e5d2:	2801      	cmp	r0, #1
 800e5d4:	bf38      	it	cc
 800e5d6:	2001      	movcc	r0, #1
 800e5d8:	f7f1 ff94 	bl	8000504 <__aeabi_ui2d>
 800e5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5de:	4606      	mov	r6, r0
 800e5e0:	460f      	mov	r7, r1
 800e5e2:	bb23      	cbnz	r3, 800e62e <_strtod_l+0xb66>
 800e5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5e8:	9010      	str	r0, [sp, #64]	; 0x40
 800e5ea:	9311      	str	r3, [sp, #68]	; 0x44
 800e5ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e5f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e5f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e5fc:	1a9b      	subs	r3, r3, r2
 800e5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800e600:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e604:	eeb0 0a48 	vmov.f32	s0, s16
 800e608:	eef0 0a68 	vmov.f32	s1, s17
 800e60c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e610:	f001 fb3a 	bl	800fc88 <__ulp>
 800e614:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e618:	ec53 2b10 	vmov	r2, r3, d0
 800e61c:	f7f1 ffec 	bl	80005f8 <__aeabi_dmul>
 800e620:	ec53 2b18 	vmov	r2, r3, d8
 800e624:	f7f1 fe32 	bl	800028c <__adddf3>
 800e628:	4680      	mov	r8, r0
 800e62a:	4689      	mov	r9, r1
 800e62c:	e78d      	b.n	800e54a <_strtod_l+0xa82>
 800e62e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e632:	e7db      	b.n	800e5ec <_strtod_l+0xb24>
 800e634:	a314      	add	r3, pc, #80	; (adr r3, 800e688 <_strtod_l+0xbc0>)
 800e636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63a:	f7f2 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800e63e:	e7b3      	b.n	800e5a8 <_strtod_l+0xae0>
 800e640:	2300      	movs	r3, #0
 800e642:	930a      	str	r3, [sp, #40]	; 0x28
 800e644:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e648:	6013      	str	r3, [r2, #0]
 800e64a:	f7ff ba7c 	b.w	800db46 <_strtod_l+0x7e>
 800e64e:	2a65      	cmp	r2, #101	; 0x65
 800e650:	f43f ab75 	beq.w	800dd3e <_strtod_l+0x276>
 800e654:	2a45      	cmp	r2, #69	; 0x45
 800e656:	f43f ab72 	beq.w	800dd3e <_strtod_l+0x276>
 800e65a:	2301      	movs	r3, #1
 800e65c:	f7ff bbaa 	b.w	800ddb4 <_strtod_l+0x2ec>
 800e660:	00000000 	.word	0x00000000
 800e664:	bff00000 	.word	0xbff00000
 800e668:	00000000 	.word	0x00000000
 800e66c:	3ff00000 	.word	0x3ff00000
 800e670:	94a03595 	.word	0x94a03595
 800e674:	3fdfffff 	.word	0x3fdfffff
 800e678:	35afe535 	.word	0x35afe535
 800e67c:	3fe00000 	.word	0x3fe00000
 800e680:	ffc00000 	.word	0xffc00000
 800e684:	41dfffff 	.word	0x41dfffff
 800e688:	94a03595 	.word	0x94a03595
 800e68c:	3fcfffff 	.word	0x3fcfffff
 800e690:	3ff00000 	.word	0x3ff00000
 800e694:	3fe00000 	.word	0x3fe00000
 800e698:	7ff00000 	.word	0x7ff00000
 800e69c:	7fe00000 	.word	0x7fe00000
 800e6a0:	7c9fffff 	.word	0x7c9fffff
 800e6a4:	7fefffff 	.word	0x7fefffff

0800e6a8 <strtod>:
 800e6a8:	460a      	mov	r2, r1
 800e6aa:	4601      	mov	r1, r0
 800e6ac:	4802      	ldr	r0, [pc, #8]	; (800e6b8 <strtod+0x10>)
 800e6ae:	4b03      	ldr	r3, [pc, #12]	; (800e6bc <strtod+0x14>)
 800e6b0:	6800      	ldr	r0, [r0, #0]
 800e6b2:	f7ff ba09 	b.w	800dac8 <_strtod_l>
 800e6b6:	bf00      	nop
 800e6b8:	20000204 	.word	0x20000204
 800e6bc:	2000004c 	.word	0x2000004c

0800e6c0 <_strtol_l.constprop.0>:
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c6:	d001      	beq.n	800e6cc <_strtol_l.constprop.0+0xc>
 800e6c8:	2b24      	cmp	r3, #36	; 0x24
 800e6ca:	d906      	bls.n	800e6da <_strtol_l.constprop.0+0x1a>
 800e6cc:	f000 faa4 	bl	800ec18 <__errno>
 800e6d0:	2316      	movs	r3, #22
 800e6d2:	6003      	str	r3, [r0, #0]
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e7c0 <_strtol_l.constprop.0+0x100>
 800e6de:	460d      	mov	r5, r1
 800e6e0:	462e      	mov	r6, r5
 800e6e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e6ea:	f017 0708 	ands.w	r7, r7, #8
 800e6ee:	d1f7      	bne.n	800e6e0 <_strtol_l.constprop.0+0x20>
 800e6f0:	2c2d      	cmp	r4, #45	; 0x2d
 800e6f2:	d132      	bne.n	800e75a <_strtol_l.constprop.0+0x9a>
 800e6f4:	782c      	ldrb	r4, [r5, #0]
 800e6f6:	2701      	movs	r7, #1
 800e6f8:	1cb5      	adds	r5, r6, #2
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d05b      	beq.n	800e7b6 <_strtol_l.constprop.0+0xf6>
 800e6fe:	2b10      	cmp	r3, #16
 800e700:	d109      	bne.n	800e716 <_strtol_l.constprop.0+0x56>
 800e702:	2c30      	cmp	r4, #48	; 0x30
 800e704:	d107      	bne.n	800e716 <_strtol_l.constprop.0+0x56>
 800e706:	782c      	ldrb	r4, [r5, #0]
 800e708:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e70c:	2c58      	cmp	r4, #88	; 0x58
 800e70e:	d14d      	bne.n	800e7ac <_strtol_l.constprop.0+0xec>
 800e710:	786c      	ldrb	r4, [r5, #1]
 800e712:	2310      	movs	r3, #16
 800e714:	3502      	adds	r5, #2
 800e716:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e71a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e71e:	f04f 0e00 	mov.w	lr, #0
 800e722:	fbb8 f9f3 	udiv	r9, r8, r3
 800e726:	4676      	mov	r6, lr
 800e728:	fb03 8a19 	mls	sl, r3, r9, r8
 800e72c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e730:	f1bc 0f09 	cmp.w	ip, #9
 800e734:	d816      	bhi.n	800e764 <_strtol_l.constprop.0+0xa4>
 800e736:	4664      	mov	r4, ip
 800e738:	42a3      	cmp	r3, r4
 800e73a:	dd24      	ble.n	800e786 <_strtol_l.constprop.0+0xc6>
 800e73c:	f1be 3fff 	cmp.w	lr, #4294967295
 800e740:	d008      	beq.n	800e754 <_strtol_l.constprop.0+0x94>
 800e742:	45b1      	cmp	r9, r6
 800e744:	d31c      	bcc.n	800e780 <_strtol_l.constprop.0+0xc0>
 800e746:	d101      	bne.n	800e74c <_strtol_l.constprop.0+0x8c>
 800e748:	45a2      	cmp	sl, r4
 800e74a:	db19      	blt.n	800e780 <_strtol_l.constprop.0+0xc0>
 800e74c:	fb06 4603 	mla	r6, r6, r3, r4
 800e750:	f04f 0e01 	mov.w	lr, #1
 800e754:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e758:	e7e8      	b.n	800e72c <_strtol_l.constprop.0+0x6c>
 800e75a:	2c2b      	cmp	r4, #43	; 0x2b
 800e75c:	bf04      	itt	eq
 800e75e:	782c      	ldrbeq	r4, [r5, #0]
 800e760:	1cb5      	addeq	r5, r6, #2
 800e762:	e7ca      	b.n	800e6fa <_strtol_l.constprop.0+0x3a>
 800e764:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e768:	f1bc 0f19 	cmp.w	ip, #25
 800e76c:	d801      	bhi.n	800e772 <_strtol_l.constprop.0+0xb2>
 800e76e:	3c37      	subs	r4, #55	; 0x37
 800e770:	e7e2      	b.n	800e738 <_strtol_l.constprop.0+0x78>
 800e772:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e776:	f1bc 0f19 	cmp.w	ip, #25
 800e77a:	d804      	bhi.n	800e786 <_strtol_l.constprop.0+0xc6>
 800e77c:	3c57      	subs	r4, #87	; 0x57
 800e77e:	e7db      	b.n	800e738 <_strtol_l.constprop.0+0x78>
 800e780:	f04f 3eff 	mov.w	lr, #4294967295
 800e784:	e7e6      	b.n	800e754 <_strtol_l.constprop.0+0x94>
 800e786:	f1be 3fff 	cmp.w	lr, #4294967295
 800e78a:	d105      	bne.n	800e798 <_strtol_l.constprop.0+0xd8>
 800e78c:	2322      	movs	r3, #34	; 0x22
 800e78e:	6003      	str	r3, [r0, #0]
 800e790:	4646      	mov	r6, r8
 800e792:	b942      	cbnz	r2, 800e7a6 <_strtol_l.constprop.0+0xe6>
 800e794:	4630      	mov	r0, r6
 800e796:	e79e      	b.n	800e6d6 <_strtol_l.constprop.0+0x16>
 800e798:	b107      	cbz	r7, 800e79c <_strtol_l.constprop.0+0xdc>
 800e79a:	4276      	negs	r6, r6
 800e79c:	2a00      	cmp	r2, #0
 800e79e:	d0f9      	beq.n	800e794 <_strtol_l.constprop.0+0xd4>
 800e7a0:	f1be 0f00 	cmp.w	lr, #0
 800e7a4:	d000      	beq.n	800e7a8 <_strtol_l.constprop.0+0xe8>
 800e7a6:	1e69      	subs	r1, r5, #1
 800e7a8:	6011      	str	r1, [r2, #0]
 800e7aa:	e7f3      	b.n	800e794 <_strtol_l.constprop.0+0xd4>
 800e7ac:	2430      	movs	r4, #48	; 0x30
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1b1      	bne.n	800e716 <_strtol_l.constprop.0+0x56>
 800e7b2:	2308      	movs	r3, #8
 800e7b4:	e7af      	b.n	800e716 <_strtol_l.constprop.0+0x56>
 800e7b6:	2c30      	cmp	r4, #48	; 0x30
 800e7b8:	d0a5      	beq.n	800e706 <_strtol_l.constprop.0+0x46>
 800e7ba:	230a      	movs	r3, #10
 800e7bc:	e7ab      	b.n	800e716 <_strtol_l.constprop.0+0x56>
 800e7be:	bf00      	nop
 800e7c0:	08011149 	.word	0x08011149

0800e7c4 <strtol>:
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	460a      	mov	r2, r1
 800e7c8:	4601      	mov	r1, r0
 800e7ca:	4802      	ldr	r0, [pc, #8]	; (800e7d4 <strtol+0x10>)
 800e7cc:	6800      	ldr	r0, [r0, #0]
 800e7ce:	f7ff bf77 	b.w	800e6c0 <_strtol_l.constprop.0>
 800e7d2:	bf00      	nop
 800e7d4:	20000204 	.word	0x20000204

0800e7d8 <std>:
 800e7d8:	2300      	movs	r3, #0
 800e7da:	b510      	push	{r4, lr}
 800e7dc:	4604      	mov	r4, r0
 800e7de:	e9c0 3300 	strd	r3, r3, [r0]
 800e7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7e6:	6083      	str	r3, [r0, #8]
 800e7e8:	8181      	strh	r1, [r0, #12]
 800e7ea:	6643      	str	r3, [r0, #100]	; 0x64
 800e7ec:	81c2      	strh	r2, [r0, #14]
 800e7ee:	6183      	str	r3, [r0, #24]
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	2208      	movs	r2, #8
 800e7f4:	305c      	adds	r0, #92	; 0x5c
 800e7f6:	f000 f93f 	bl	800ea78 <memset>
 800e7fa:	4b0d      	ldr	r3, [pc, #52]	; (800e830 <std+0x58>)
 800e7fc:	6263      	str	r3, [r4, #36]	; 0x24
 800e7fe:	4b0d      	ldr	r3, [pc, #52]	; (800e834 <std+0x5c>)
 800e800:	62a3      	str	r3, [r4, #40]	; 0x28
 800e802:	4b0d      	ldr	r3, [pc, #52]	; (800e838 <std+0x60>)
 800e804:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e806:	4b0d      	ldr	r3, [pc, #52]	; (800e83c <std+0x64>)
 800e808:	6323      	str	r3, [r4, #48]	; 0x30
 800e80a:	4b0d      	ldr	r3, [pc, #52]	; (800e840 <std+0x68>)
 800e80c:	6224      	str	r4, [r4, #32]
 800e80e:	429c      	cmp	r4, r3
 800e810:	d006      	beq.n	800e820 <std+0x48>
 800e812:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e816:	4294      	cmp	r4, r2
 800e818:	d002      	beq.n	800e820 <std+0x48>
 800e81a:	33d0      	adds	r3, #208	; 0xd0
 800e81c:	429c      	cmp	r4, r3
 800e81e:	d105      	bne.n	800e82c <std+0x54>
 800e820:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e828:	f000 ba20 	b.w	800ec6c <__retarget_lock_init_recursive>
 800e82c:	bd10      	pop	{r4, pc}
 800e82e:	bf00      	nop
 800e830:	0800e981 	.word	0x0800e981
 800e834:	0800e9a3 	.word	0x0800e9a3
 800e838:	0800e9db 	.word	0x0800e9db
 800e83c:	0800e9ff 	.word	0x0800e9ff
 800e840:	20002bac 	.word	0x20002bac

0800e844 <stdio_exit_handler>:
 800e844:	4a02      	ldr	r2, [pc, #8]	; (800e850 <stdio_exit_handler+0xc>)
 800e846:	4903      	ldr	r1, [pc, #12]	; (800e854 <stdio_exit_handler+0x10>)
 800e848:	4803      	ldr	r0, [pc, #12]	; (800e858 <stdio_exit_handler+0x14>)
 800e84a:	f000 b869 	b.w	800e920 <_fwalk_sglue>
 800e84e:	bf00      	nop
 800e850:	20000040 	.word	0x20000040
 800e854:	08010889 	.word	0x08010889
 800e858:	200001b8 	.word	0x200001b8

0800e85c <cleanup_stdio>:
 800e85c:	6841      	ldr	r1, [r0, #4]
 800e85e:	4b0c      	ldr	r3, [pc, #48]	; (800e890 <cleanup_stdio+0x34>)
 800e860:	4299      	cmp	r1, r3
 800e862:	b510      	push	{r4, lr}
 800e864:	4604      	mov	r4, r0
 800e866:	d001      	beq.n	800e86c <cleanup_stdio+0x10>
 800e868:	f002 f80e 	bl	8010888 <_fflush_r>
 800e86c:	68a1      	ldr	r1, [r4, #8]
 800e86e:	4b09      	ldr	r3, [pc, #36]	; (800e894 <cleanup_stdio+0x38>)
 800e870:	4299      	cmp	r1, r3
 800e872:	d002      	beq.n	800e87a <cleanup_stdio+0x1e>
 800e874:	4620      	mov	r0, r4
 800e876:	f002 f807 	bl	8010888 <_fflush_r>
 800e87a:	68e1      	ldr	r1, [r4, #12]
 800e87c:	4b06      	ldr	r3, [pc, #24]	; (800e898 <cleanup_stdio+0x3c>)
 800e87e:	4299      	cmp	r1, r3
 800e880:	d004      	beq.n	800e88c <cleanup_stdio+0x30>
 800e882:	4620      	mov	r0, r4
 800e884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e888:	f001 bffe 	b.w	8010888 <_fflush_r>
 800e88c:	bd10      	pop	{r4, pc}
 800e88e:	bf00      	nop
 800e890:	20002bac 	.word	0x20002bac
 800e894:	20002c14 	.word	0x20002c14
 800e898:	20002c7c 	.word	0x20002c7c

0800e89c <global_stdio_init.part.0>:
 800e89c:	b510      	push	{r4, lr}
 800e89e:	4b0b      	ldr	r3, [pc, #44]	; (800e8cc <global_stdio_init.part.0+0x30>)
 800e8a0:	4c0b      	ldr	r4, [pc, #44]	; (800e8d0 <global_stdio_init.part.0+0x34>)
 800e8a2:	4a0c      	ldr	r2, [pc, #48]	; (800e8d4 <global_stdio_init.part.0+0x38>)
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	2104      	movs	r1, #4
 800e8ac:	f7ff ff94 	bl	800e7d8 <std>
 800e8b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	2109      	movs	r1, #9
 800e8b8:	f7ff ff8e 	bl	800e7d8 <std>
 800e8bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e8c0:	2202      	movs	r2, #2
 800e8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8c6:	2112      	movs	r1, #18
 800e8c8:	f7ff bf86 	b.w	800e7d8 <std>
 800e8cc:	20002ce4 	.word	0x20002ce4
 800e8d0:	20002bac 	.word	0x20002bac
 800e8d4:	0800e845 	.word	0x0800e845

0800e8d8 <__sfp_lock_acquire>:
 800e8d8:	4801      	ldr	r0, [pc, #4]	; (800e8e0 <__sfp_lock_acquire+0x8>)
 800e8da:	f000 b9c8 	b.w	800ec6e <__retarget_lock_acquire_recursive>
 800e8de:	bf00      	nop
 800e8e0:	20002ced 	.word	0x20002ced

0800e8e4 <__sfp_lock_release>:
 800e8e4:	4801      	ldr	r0, [pc, #4]	; (800e8ec <__sfp_lock_release+0x8>)
 800e8e6:	f000 b9c3 	b.w	800ec70 <__retarget_lock_release_recursive>
 800e8ea:	bf00      	nop
 800e8ec:	20002ced 	.word	0x20002ced

0800e8f0 <__sinit>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	f7ff fff0 	bl	800e8d8 <__sfp_lock_acquire>
 800e8f8:	6a23      	ldr	r3, [r4, #32]
 800e8fa:	b11b      	cbz	r3, 800e904 <__sinit+0x14>
 800e8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e900:	f7ff bff0 	b.w	800e8e4 <__sfp_lock_release>
 800e904:	4b04      	ldr	r3, [pc, #16]	; (800e918 <__sinit+0x28>)
 800e906:	6223      	str	r3, [r4, #32]
 800e908:	4b04      	ldr	r3, [pc, #16]	; (800e91c <__sinit+0x2c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1f5      	bne.n	800e8fc <__sinit+0xc>
 800e910:	f7ff ffc4 	bl	800e89c <global_stdio_init.part.0>
 800e914:	e7f2      	b.n	800e8fc <__sinit+0xc>
 800e916:	bf00      	nop
 800e918:	0800e85d 	.word	0x0800e85d
 800e91c:	20002ce4 	.word	0x20002ce4

0800e920 <_fwalk_sglue>:
 800e920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e924:	4607      	mov	r7, r0
 800e926:	4688      	mov	r8, r1
 800e928:	4614      	mov	r4, r2
 800e92a:	2600      	movs	r6, #0
 800e92c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e930:	f1b9 0901 	subs.w	r9, r9, #1
 800e934:	d505      	bpl.n	800e942 <_fwalk_sglue+0x22>
 800e936:	6824      	ldr	r4, [r4, #0]
 800e938:	2c00      	cmp	r4, #0
 800e93a:	d1f7      	bne.n	800e92c <_fwalk_sglue+0xc>
 800e93c:	4630      	mov	r0, r6
 800e93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e942:	89ab      	ldrh	r3, [r5, #12]
 800e944:	2b01      	cmp	r3, #1
 800e946:	d907      	bls.n	800e958 <_fwalk_sglue+0x38>
 800e948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e94c:	3301      	adds	r3, #1
 800e94e:	d003      	beq.n	800e958 <_fwalk_sglue+0x38>
 800e950:	4629      	mov	r1, r5
 800e952:	4638      	mov	r0, r7
 800e954:	47c0      	blx	r8
 800e956:	4306      	orrs	r6, r0
 800e958:	3568      	adds	r5, #104	; 0x68
 800e95a:	e7e9      	b.n	800e930 <_fwalk_sglue+0x10>

0800e95c <iprintf>:
 800e95c:	b40f      	push	{r0, r1, r2, r3}
 800e95e:	b507      	push	{r0, r1, r2, lr}
 800e960:	4906      	ldr	r1, [pc, #24]	; (800e97c <iprintf+0x20>)
 800e962:	ab04      	add	r3, sp, #16
 800e964:	6808      	ldr	r0, [r1, #0]
 800e966:	f853 2b04 	ldr.w	r2, [r3], #4
 800e96a:	6881      	ldr	r1, [r0, #8]
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	f001 fc5b 	bl	8010228 <_vfiprintf_r>
 800e972:	b003      	add	sp, #12
 800e974:	f85d eb04 	ldr.w	lr, [sp], #4
 800e978:	b004      	add	sp, #16
 800e97a:	4770      	bx	lr
 800e97c:	20000204 	.word	0x20000204

0800e980 <__sread>:
 800e980:	b510      	push	{r4, lr}
 800e982:	460c      	mov	r4, r1
 800e984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e988:	f000 f922 	bl	800ebd0 <_read_r>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	bfab      	itete	ge
 800e990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e992:	89a3      	ldrhlt	r3, [r4, #12]
 800e994:	181b      	addge	r3, r3, r0
 800e996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e99a:	bfac      	ite	ge
 800e99c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e99e:	81a3      	strhlt	r3, [r4, #12]
 800e9a0:	bd10      	pop	{r4, pc}

0800e9a2 <__swrite>:
 800e9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a6:	461f      	mov	r7, r3
 800e9a8:	898b      	ldrh	r3, [r1, #12]
 800e9aa:	05db      	lsls	r3, r3, #23
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	4616      	mov	r6, r2
 800e9b2:	d505      	bpl.n	800e9c0 <__swrite+0x1e>
 800e9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f000 f8f6 	bl	800ebac <_lseek_r>
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9ca:	81a3      	strh	r3, [r4, #12]
 800e9cc:	4632      	mov	r2, r6
 800e9ce:	463b      	mov	r3, r7
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d6:	f000 b90d 	b.w	800ebf4 <_write_r>

0800e9da <__sseek>:
 800e9da:	b510      	push	{r4, lr}
 800e9dc:	460c      	mov	r4, r1
 800e9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9e2:	f000 f8e3 	bl	800ebac <_lseek_r>
 800e9e6:	1c43      	adds	r3, r0, #1
 800e9e8:	89a3      	ldrh	r3, [r4, #12]
 800e9ea:	bf15      	itete	ne
 800e9ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9f6:	81a3      	strheq	r3, [r4, #12]
 800e9f8:	bf18      	it	ne
 800e9fa:	81a3      	strhne	r3, [r4, #12]
 800e9fc:	bd10      	pop	{r4, pc}

0800e9fe <__sclose>:
 800e9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea02:	f000 b8c3 	b.w	800eb8c <_close_r>

0800ea06 <_vsniprintf_r>:
 800ea06:	b530      	push	{r4, r5, lr}
 800ea08:	4614      	mov	r4, r2
 800ea0a:	2c00      	cmp	r4, #0
 800ea0c:	b09b      	sub	sp, #108	; 0x6c
 800ea0e:	4605      	mov	r5, r0
 800ea10:	461a      	mov	r2, r3
 800ea12:	da05      	bge.n	800ea20 <_vsniprintf_r+0x1a>
 800ea14:	238b      	movs	r3, #139	; 0x8b
 800ea16:	6003      	str	r3, [r0, #0]
 800ea18:	f04f 30ff 	mov.w	r0, #4294967295
 800ea1c:	b01b      	add	sp, #108	; 0x6c
 800ea1e:	bd30      	pop	{r4, r5, pc}
 800ea20:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ea24:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ea28:	bf14      	ite	ne
 800ea2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea2e:	4623      	moveq	r3, r4
 800ea30:	9302      	str	r3, [sp, #8]
 800ea32:	9305      	str	r3, [sp, #20]
 800ea34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea38:	9100      	str	r1, [sp, #0]
 800ea3a:	9104      	str	r1, [sp, #16]
 800ea3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ea40:	4669      	mov	r1, sp
 800ea42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea44:	f001 fac8 	bl	800ffd8 <_svfiprintf_r>
 800ea48:	1c43      	adds	r3, r0, #1
 800ea4a:	bfbc      	itt	lt
 800ea4c:	238b      	movlt	r3, #139	; 0x8b
 800ea4e:	602b      	strlt	r3, [r5, #0]
 800ea50:	2c00      	cmp	r4, #0
 800ea52:	d0e3      	beq.n	800ea1c <_vsniprintf_r+0x16>
 800ea54:	9b00      	ldr	r3, [sp, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	e7df      	b.n	800ea1c <_vsniprintf_r+0x16>

0800ea5c <vsniprintf>:
 800ea5c:	b507      	push	{r0, r1, r2, lr}
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	4613      	mov	r3, r2
 800ea62:	460a      	mov	r2, r1
 800ea64:	4601      	mov	r1, r0
 800ea66:	4803      	ldr	r0, [pc, #12]	; (800ea74 <vsniprintf+0x18>)
 800ea68:	6800      	ldr	r0, [r0, #0]
 800ea6a:	f7ff ffcc 	bl	800ea06 <_vsniprintf_r>
 800ea6e:	b003      	add	sp, #12
 800ea70:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea74:	20000204 	.word	0x20000204

0800ea78 <memset>:
 800ea78:	4402      	add	r2, r0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d100      	bne.n	800ea82 <memset+0xa>
 800ea80:	4770      	bx	lr
 800ea82:	f803 1b01 	strb.w	r1, [r3], #1
 800ea86:	e7f9      	b.n	800ea7c <memset+0x4>

0800ea88 <strncmp>:
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	b16a      	cbz	r2, 800eaa8 <strncmp+0x20>
 800ea8c:	3901      	subs	r1, #1
 800ea8e:	1884      	adds	r4, r0, r2
 800ea90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d103      	bne.n	800eaa4 <strncmp+0x1c>
 800ea9c:	42a0      	cmp	r0, r4
 800ea9e:	d001      	beq.n	800eaa4 <strncmp+0x1c>
 800eaa0:	2a00      	cmp	r2, #0
 800eaa2:	d1f5      	bne.n	800ea90 <strncmp+0x8>
 800eaa4:	1ad0      	subs	r0, r2, r3
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	e7fc      	b.n	800eaa6 <strncmp+0x1e>

0800eaac <strncpy>:
 800eaac:	b510      	push	{r4, lr}
 800eaae:	3901      	subs	r1, #1
 800eab0:	4603      	mov	r3, r0
 800eab2:	b132      	cbz	r2, 800eac2 <strncpy+0x16>
 800eab4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eab8:	f803 4b01 	strb.w	r4, [r3], #1
 800eabc:	3a01      	subs	r2, #1
 800eabe:	2c00      	cmp	r4, #0
 800eac0:	d1f7      	bne.n	800eab2 <strncpy+0x6>
 800eac2:	441a      	add	r2, r3
 800eac4:	2100      	movs	r1, #0
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d100      	bne.n	800eacc <strncpy+0x20>
 800eaca:	bd10      	pop	{r4, pc}
 800eacc:	f803 1b01 	strb.w	r1, [r3], #1
 800ead0:	e7f9      	b.n	800eac6 <strncpy+0x1a>
	...

0800ead4 <strtok>:
 800ead4:	4b16      	ldr	r3, [pc, #88]	; (800eb30 <strtok+0x5c>)
 800ead6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ead8:	681e      	ldr	r6, [r3, #0]
 800eada:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800eadc:	4605      	mov	r5, r0
 800eade:	b9fc      	cbnz	r4, 800eb20 <strtok+0x4c>
 800eae0:	2050      	movs	r0, #80	; 0x50
 800eae2:	9101      	str	r1, [sp, #4]
 800eae4:	f000 fc9e 	bl	800f424 <malloc>
 800eae8:	9901      	ldr	r1, [sp, #4]
 800eaea:	6470      	str	r0, [r6, #68]	; 0x44
 800eaec:	4602      	mov	r2, r0
 800eaee:	b920      	cbnz	r0, 800eafa <strtok+0x26>
 800eaf0:	4b10      	ldr	r3, [pc, #64]	; (800eb34 <strtok+0x60>)
 800eaf2:	4811      	ldr	r0, [pc, #68]	; (800eb38 <strtok+0x64>)
 800eaf4:	215b      	movs	r1, #91	; 0x5b
 800eaf6:	f000 f8d3 	bl	800eca0 <__assert_func>
 800eafa:	e9c0 4400 	strd	r4, r4, [r0]
 800eafe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800eb02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800eb06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800eb0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800eb0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800eb12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800eb16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800eb1a:	6184      	str	r4, [r0, #24]
 800eb1c:	7704      	strb	r4, [r0, #28]
 800eb1e:	6244      	str	r4, [r0, #36]	; 0x24
 800eb20:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800eb22:	2301      	movs	r3, #1
 800eb24:	4628      	mov	r0, r5
 800eb26:	b002      	add	sp, #8
 800eb28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb2c:	f000 b806 	b.w	800eb3c <__strtok_r>
 800eb30:	20000204 	.word	0x20000204
 800eb34:	08011249 	.word	0x08011249
 800eb38:	08011260 	.word	0x08011260

0800eb3c <__strtok_r>:
 800eb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb3e:	b908      	cbnz	r0, 800eb44 <__strtok_r+0x8>
 800eb40:	6810      	ldr	r0, [r2, #0]
 800eb42:	b188      	cbz	r0, 800eb68 <__strtok_r+0x2c>
 800eb44:	4604      	mov	r4, r0
 800eb46:	4620      	mov	r0, r4
 800eb48:	f814 5b01 	ldrb.w	r5, [r4], #1
 800eb4c:	460f      	mov	r7, r1
 800eb4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eb52:	b91e      	cbnz	r6, 800eb5c <__strtok_r+0x20>
 800eb54:	b965      	cbnz	r5, 800eb70 <__strtok_r+0x34>
 800eb56:	6015      	str	r5, [r2, #0]
 800eb58:	4628      	mov	r0, r5
 800eb5a:	e005      	b.n	800eb68 <__strtok_r+0x2c>
 800eb5c:	42b5      	cmp	r5, r6
 800eb5e:	d1f6      	bne.n	800eb4e <__strtok_r+0x12>
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1f0      	bne.n	800eb46 <__strtok_r+0xa>
 800eb64:	6014      	str	r4, [r2, #0]
 800eb66:	7003      	strb	r3, [r0, #0]
 800eb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb6a:	461c      	mov	r4, r3
 800eb6c:	e00c      	b.n	800eb88 <__strtok_r+0x4c>
 800eb6e:	b915      	cbnz	r5, 800eb76 <__strtok_r+0x3a>
 800eb70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb74:	460e      	mov	r6, r1
 800eb76:	f816 5b01 	ldrb.w	r5, [r6], #1
 800eb7a:	42ab      	cmp	r3, r5
 800eb7c:	d1f7      	bne.n	800eb6e <__strtok_r+0x32>
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d0f3      	beq.n	800eb6a <__strtok_r+0x2e>
 800eb82:	2300      	movs	r3, #0
 800eb84:	f804 3c01 	strb.w	r3, [r4, #-1]
 800eb88:	6014      	str	r4, [r2, #0]
 800eb8a:	e7ed      	b.n	800eb68 <__strtok_r+0x2c>

0800eb8c <_close_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4d06      	ldr	r5, [pc, #24]	; (800eba8 <_close_r+0x1c>)
 800eb90:	2300      	movs	r3, #0
 800eb92:	4604      	mov	r4, r0
 800eb94:	4608      	mov	r0, r1
 800eb96:	602b      	str	r3, [r5, #0]
 800eb98:	f7f3 fdf9 	bl	800278e <_close>
 800eb9c:	1c43      	adds	r3, r0, #1
 800eb9e:	d102      	bne.n	800eba6 <_close_r+0x1a>
 800eba0:	682b      	ldr	r3, [r5, #0]
 800eba2:	b103      	cbz	r3, 800eba6 <_close_r+0x1a>
 800eba4:	6023      	str	r3, [r4, #0]
 800eba6:	bd38      	pop	{r3, r4, r5, pc}
 800eba8:	20002ce8 	.word	0x20002ce8

0800ebac <_lseek_r>:
 800ebac:	b538      	push	{r3, r4, r5, lr}
 800ebae:	4d07      	ldr	r5, [pc, #28]	; (800ebcc <_lseek_r+0x20>)
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	4608      	mov	r0, r1
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	602a      	str	r2, [r5, #0]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	f7f3 fe0e 	bl	80027dc <_lseek>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d102      	bne.n	800ebca <_lseek_r+0x1e>
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	b103      	cbz	r3, 800ebca <_lseek_r+0x1e>
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	bd38      	pop	{r3, r4, r5, pc}
 800ebcc:	20002ce8 	.word	0x20002ce8

0800ebd0 <_read_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d07      	ldr	r5, [pc, #28]	; (800ebf0 <_read_r+0x20>)
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	4608      	mov	r0, r1
 800ebd8:	4611      	mov	r1, r2
 800ebda:	2200      	movs	r2, #0
 800ebdc:	602a      	str	r2, [r5, #0]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	f7f3 fd9c 	bl	800271c <_read>
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	d102      	bne.n	800ebee <_read_r+0x1e>
 800ebe8:	682b      	ldr	r3, [r5, #0]
 800ebea:	b103      	cbz	r3, 800ebee <_read_r+0x1e>
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	20002ce8 	.word	0x20002ce8

0800ebf4 <_write_r>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	4d07      	ldr	r5, [pc, #28]	; (800ec14 <_write_r+0x20>)
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	4608      	mov	r0, r1
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	2200      	movs	r2, #0
 800ec00:	602a      	str	r2, [r5, #0]
 800ec02:	461a      	mov	r2, r3
 800ec04:	f7f3 fda7 	bl	8002756 <_write>
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d102      	bne.n	800ec12 <_write_r+0x1e>
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	b103      	cbz	r3, 800ec12 <_write_r+0x1e>
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	20002ce8 	.word	0x20002ce8

0800ec18 <__errno>:
 800ec18:	4b01      	ldr	r3, [pc, #4]	; (800ec20 <__errno+0x8>)
 800ec1a:	6818      	ldr	r0, [r3, #0]
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	20000204 	.word	0x20000204

0800ec24 <__libc_init_array>:
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	4d0d      	ldr	r5, [pc, #52]	; (800ec5c <__libc_init_array+0x38>)
 800ec28:	4c0d      	ldr	r4, [pc, #52]	; (800ec60 <__libc_init_array+0x3c>)
 800ec2a:	1b64      	subs	r4, r4, r5
 800ec2c:	10a4      	asrs	r4, r4, #2
 800ec2e:	2600      	movs	r6, #0
 800ec30:	42a6      	cmp	r6, r4
 800ec32:	d109      	bne.n	800ec48 <__libc_init_array+0x24>
 800ec34:	4d0b      	ldr	r5, [pc, #44]	; (800ec64 <__libc_init_array+0x40>)
 800ec36:	4c0c      	ldr	r4, [pc, #48]	; (800ec68 <__libc_init_array+0x44>)
 800ec38:	f002 f83c 	bl	8010cb4 <_init>
 800ec3c:	1b64      	subs	r4, r4, r5
 800ec3e:	10a4      	asrs	r4, r4, #2
 800ec40:	2600      	movs	r6, #0
 800ec42:	42a6      	cmp	r6, r4
 800ec44:	d105      	bne.n	800ec52 <__libc_init_array+0x2e>
 800ec46:	bd70      	pop	{r4, r5, r6, pc}
 800ec48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec4c:	4798      	blx	r3
 800ec4e:	3601      	adds	r6, #1
 800ec50:	e7ee      	b.n	800ec30 <__libc_init_array+0xc>
 800ec52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec56:	4798      	blx	r3
 800ec58:	3601      	adds	r6, #1
 800ec5a:	e7f2      	b.n	800ec42 <__libc_init_array+0x1e>
 800ec5c:	08011500 	.word	0x08011500
 800ec60:	08011500 	.word	0x08011500
 800ec64:	08011500 	.word	0x08011500
 800ec68:	08011504 	.word	0x08011504

0800ec6c <__retarget_lock_init_recursive>:
 800ec6c:	4770      	bx	lr

0800ec6e <__retarget_lock_acquire_recursive>:
 800ec6e:	4770      	bx	lr

0800ec70 <__retarget_lock_release_recursive>:
 800ec70:	4770      	bx	lr

0800ec72 <memcpy>:
 800ec72:	440a      	add	r2, r1
 800ec74:	4291      	cmp	r1, r2
 800ec76:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec7a:	d100      	bne.n	800ec7e <memcpy+0xc>
 800ec7c:	4770      	bx	lr
 800ec7e:	b510      	push	{r4, lr}
 800ec80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec88:	4291      	cmp	r1, r2
 800ec8a:	d1f9      	bne.n	800ec80 <memcpy+0xe>
 800ec8c:	bd10      	pop	{r4, pc}
	...

0800ec90 <nan>:
 800ec90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ec98 <nan+0x8>
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	00000000 	.word	0x00000000
 800ec9c:	7ff80000 	.word	0x7ff80000

0800eca0 <__assert_func>:
 800eca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eca2:	4614      	mov	r4, r2
 800eca4:	461a      	mov	r2, r3
 800eca6:	4b09      	ldr	r3, [pc, #36]	; (800eccc <__assert_func+0x2c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4605      	mov	r5, r0
 800ecac:	68d8      	ldr	r0, [r3, #12]
 800ecae:	b14c      	cbz	r4, 800ecc4 <__assert_func+0x24>
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <__assert_func+0x30>)
 800ecb2:	9100      	str	r1, [sp, #0]
 800ecb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecb8:	4906      	ldr	r1, [pc, #24]	; (800ecd4 <__assert_func+0x34>)
 800ecba:	462b      	mov	r3, r5
 800ecbc:	f001 fe0c 	bl	80108d8 <fiprintf>
 800ecc0:	f001 fedc 	bl	8010a7c <abort>
 800ecc4:	4b04      	ldr	r3, [pc, #16]	; (800ecd8 <__assert_func+0x38>)
 800ecc6:	461c      	mov	r4, r3
 800ecc8:	e7f3      	b.n	800ecb2 <__assert_func+0x12>
 800ecca:	bf00      	nop
 800eccc:	20000204 	.word	0x20000204
 800ecd0:	080112c2 	.word	0x080112c2
 800ecd4:	080112cf 	.word	0x080112cf
 800ecd8:	080112fd 	.word	0x080112fd

0800ecdc <_free_r>:
 800ecdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecde:	2900      	cmp	r1, #0
 800ece0:	d044      	beq.n	800ed6c <_free_r+0x90>
 800ece2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ece6:	9001      	str	r0, [sp, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f1a1 0404 	sub.w	r4, r1, #4
 800ecee:	bfb8      	it	lt
 800ecf0:	18e4      	addlt	r4, r4, r3
 800ecf2:	f000 fc51 	bl	800f598 <__malloc_lock>
 800ecf6:	4a1e      	ldr	r2, [pc, #120]	; (800ed70 <_free_r+0x94>)
 800ecf8:	9801      	ldr	r0, [sp, #4]
 800ecfa:	6813      	ldr	r3, [r2, #0]
 800ecfc:	b933      	cbnz	r3, 800ed0c <_free_r+0x30>
 800ecfe:	6063      	str	r3, [r4, #4]
 800ed00:	6014      	str	r4, [r2, #0]
 800ed02:	b003      	add	sp, #12
 800ed04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed08:	f000 bc4c 	b.w	800f5a4 <__malloc_unlock>
 800ed0c:	42a3      	cmp	r3, r4
 800ed0e:	d908      	bls.n	800ed22 <_free_r+0x46>
 800ed10:	6825      	ldr	r5, [r4, #0]
 800ed12:	1961      	adds	r1, r4, r5
 800ed14:	428b      	cmp	r3, r1
 800ed16:	bf01      	itttt	eq
 800ed18:	6819      	ldreq	r1, [r3, #0]
 800ed1a:	685b      	ldreq	r3, [r3, #4]
 800ed1c:	1949      	addeq	r1, r1, r5
 800ed1e:	6021      	streq	r1, [r4, #0]
 800ed20:	e7ed      	b.n	800ecfe <_free_r+0x22>
 800ed22:	461a      	mov	r2, r3
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	b10b      	cbz	r3, 800ed2c <_free_r+0x50>
 800ed28:	42a3      	cmp	r3, r4
 800ed2a:	d9fa      	bls.n	800ed22 <_free_r+0x46>
 800ed2c:	6811      	ldr	r1, [r2, #0]
 800ed2e:	1855      	adds	r5, r2, r1
 800ed30:	42a5      	cmp	r5, r4
 800ed32:	d10b      	bne.n	800ed4c <_free_r+0x70>
 800ed34:	6824      	ldr	r4, [r4, #0]
 800ed36:	4421      	add	r1, r4
 800ed38:	1854      	adds	r4, r2, r1
 800ed3a:	42a3      	cmp	r3, r4
 800ed3c:	6011      	str	r1, [r2, #0]
 800ed3e:	d1e0      	bne.n	800ed02 <_free_r+0x26>
 800ed40:	681c      	ldr	r4, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	6053      	str	r3, [r2, #4]
 800ed46:	440c      	add	r4, r1
 800ed48:	6014      	str	r4, [r2, #0]
 800ed4a:	e7da      	b.n	800ed02 <_free_r+0x26>
 800ed4c:	d902      	bls.n	800ed54 <_free_r+0x78>
 800ed4e:	230c      	movs	r3, #12
 800ed50:	6003      	str	r3, [r0, #0]
 800ed52:	e7d6      	b.n	800ed02 <_free_r+0x26>
 800ed54:	6825      	ldr	r5, [r4, #0]
 800ed56:	1961      	adds	r1, r4, r5
 800ed58:	428b      	cmp	r3, r1
 800ed5a:	bf04      	itt	eq
 800ed5c:	6819      	ldreq	r1, [r3, #0]
 800ed5e:	685b      	ldreq	r3, [r3, #4]
 800ed60:	6063      	str	r3, [r4, #4]
 800ed62:	bf04      	itt	eq
 800ed64:	1949      	addeq	r1, r1, r5
 800ed66:	6021      	streq	r1, [r4, #0]
 800ed68:	6054      	str	r4, [r2, #4]
 800ed6a:	e7ca      	b.n	800ed02 <_free_r+0x26>
 800ed6c:	b003      	add	sp, #12
 800ed6e:	bd30      	pop	{r4, r5, pc}
 800ed70:	20002cf0 	.word	0x20002cf0

0800ed74 <rshift>:
 800ed74:	6903      	ldr	r3, [r0, #16]
 800ed76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed82:	f100 0414 	add.w	r4, r0, #20
 800ed86:	dd45      	ble.n	800ee14 <rshift+0xa0>
 800ed88:	f011 011f 	ands.w	r1, r1, #31
 800ed8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed94:	d10c      	bne.n	800edb0 <rshift+0x3c>
 800ed96:	f100 0710 	add.w	r7, r0, #16
 800ed9a:	4629      	mov	r1, r5
 800ed9c:	42b1      	cmp	r1, r6
 800ed9e:	d334      	bcc.n	800ee0a <rshift+0x96>
 800eda0:	1a9b      	subs	r3, r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	1eea      	subs	r2, r5, #3
 800eda6:	4296      	cmp	r6, r2
 800eda8:	bf38      	it	cc
 800edaa:	2300      	movcc	r3, #0
 800edac:	4423      	add	r3, r4
 800edae:	e015      	b.n	800eddc <rshift+0x68>
 800edb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800edb4:	f1c1 0820 	rsb	r8, r1, #32
 800edb8:	40cf      	lsrs	r7, r1
 800edba:	f105 0e04 	add.w	lr, r5, #4
 800edbe:	46a1      	mov	r9, r4
 800edc0:	4576      	cmp	r6, lr
 800edc2:	46f4      	mov	ip, lr
 800edc4:	d815      	bhi.n	800edf2 <rshift+0x7e>
 800edc6:	1a9a      	subs	r2, r3, r2
 800edc8:	0092      	lsls	r2, r2, #2
 800edca:	3a04      	subs	r2, #4
 800edcc:	3501      	adds	r5, #1
 800edce:	42ae      	cmp	r6, r5
 800edd0:	bf38      	it	cc
 800edd2:	2200      	movcc	r2, #0
 800edd4:	18a3      	adds	r3, r4, r2
 800edd6:	50a7      	str	r7, [r4, r2]
 800edd8:	b107      	cbz	r7, 800eddc <rshift+0x68>
 800edda:	3304      	adds	r3, #4
 800eddc:	1b1a      	subs	r2, r3, r4
 800edde:	42a3      	cmp	r3, r4
 800ede0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ede4:	bf08      	it	eq
 800ede6:	2300      	moveq	r3, #0
 800ede8:	6102      	str	r2, [r0, #16]
 800edea:	bf08      	it	eq
 800edec:	6143      	streq	r3, [r0, #20]
 800edee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edf2:	f8dc c000 	ldr.w	ip, [ip]
 800edf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800edfa:	ea4c 0707 	orr.w	r7, ip, r7
 800edfe:	f849 7b04 	str.w	r7, [r9], #4
 800ee02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee06:	40cf      	lsrs	r7, r1
 800ee08:	e7da      	b.n	800edc0 <rshift+0x4c>
 800ee0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee12:	e7c3      	b.n	800ed9c <rshift+0x28>
 800ee14:	4623      	mov	r3, r4
 800ee16:	e7e1      	b.n	800eddc <rshift+0x68>

0800ee18 <__hexdig_fun>:
 800ee18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ee1c:	2b09      	cmp	r3, #9
 800ee1e:	d802      	bhi.n	800ee26 <__hexdig_fun+0xe>
 800ee20:	3820      	subs	r0, #32
 800ee22:	b2c0      	uxtb	r0, r0
 800ee24:	4770      	bx	lr
 800ee26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ee2a:	2b05      	cmp	r3, #5
 800ee2c:	d801      	bhi.n	800ee32 <__hexdig_fun+0x1a>
 800ee2e:	3847      	subs	r0, #71	; 0x47
 800ee30:	e7f7      	b.n	800ee22 <__hexdig_fun+0xa>
 800ee32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee36:	2b05      	cmp	r3, #5
 800ee38:	d801      	bhi.n	800ee3e <__hexdig_fun+0x26>
 800ee3a:	3827      	subs	r0, #39	; 0x27
 800ee3c:	e7f1      	b.n	800ee22 <__hexdig_fun+0xa>
 800ee3e:	2000      	movs	r0, #0
 800ee40:	4770      	bx	lr
	...

0800ee44 <__gethex>:
 800ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	4617      	mov	r7, r2
 800ee4a:	680a      	ldr	r2, [r1, #0]
 800ee4c:	b085      	sub	sp, #20
 800ee4e:	f102 0b02 	add.w	fp, r2, #2
 800ee52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ee56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ee5a:	4681      	mov	r9, r0
 800ee5c:	468a      	mov	sl, r1
 800ee5e:	9302      	str	r3, [sp, #8]
 800ee60:	32fe      	adds	r2, #254	; 0xfe
 800ee62:	eb02 030b 	add.w	r3, r2, fp
 800ee66:	46d8      	mov	r8, fp
 800ee68:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ee6c:	9301      	str	r3, [sp, #4]
 800ee6e:	2830      	cmp	r0, #48	; 0x30
 800ee70:	d0f7      	beq.n	800ee62 <__gethex+0x1e>
 800ee72:	f7ff ffd1 	bl	800ee18 <__hexdig_fun>
 800ee76:	4604      	mov	r4, r0
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d138      	bne.n	800eeee <__gethex+0xaa>
 800ee7c:	49a7      	ldr	r1, [pc, #668]	; (800f11c <__gethex+0x2d8>)
 800ee7e:	2201      	movs	r2, #1
 800ee80:	4640      	mov	r0, r8
 800ee82:	f7ff fe01 	bl	800ea88 <strncmp>
 800ee86:	4606      	mov	r6, r0
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d169      	bne.n	800ef60 <__gethex+0x11c>
 800ee8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ee90:	465d      	mov	r5, fp
 800ee92:	f7ff ffc1 	bl	800ee18 <__hexdig_fun>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d064      	beq.n	800ef64 <__gethex+0x120>
 800ee9a:	465a      	mov	r2, fp
 800ee9c:	7810      	ldrb	r0, [r2, #0]
 800ee9e:	2830      	cmp	r0, #48	; 0x30
 800eea0:	4690      	mov	r8, r2
 800eea2:	f102 0201 	add.w	r2, r2, #1
 800eea6:	d0f9      	beq.n	800ee9c <__gethex+0x58>
 800eea8:	f7ff ffb6 	bl	800ee18 <__hexdig_fun>
 800eeac:	2301      	movs	r3, #1
 800eeae:	fab0 f480 	clz	r4, r0
 800eeb2:	0964      	lsrs	r4, r4, #5
 800eeb4:	465e      	mov	r6, fp
 800eeb6:	9301      	str	r3, [sp, #4]
 800eeb8:	4642      	mov	r2, r8
 800eeba:	4615      	mov	r5, r2
 800eebc:	3201      	adds	r2, #1
 800eebe:	7828      	ldrb	r0, [r5, #0]
 800eec0:	f7ff ffaa 	bl	800ee18 <__hexdig_fun>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	d1f8      	bne.n	800eeba <__gethex+0x76>
 800eec8:	4994      	ldr	r1, [pc, #592]	; (800f11c <__gethex+0x2d8>)
 800eeca:	2201      	movs	r2, #1
 800eecc:	4628      	mov	r0, r5
 800eece:	f7ff fddb 	bl	800ea88 <strncmp>
 800eed2:	b978      	cbnz	r0, 800eef4 <__gethex+0xb0>
 800eed4:	b946      	cbnz	r6, 800eee8 <__gethex+0xa4>
 800eed6:	1c6e      	adds	r6, r5, #1
 800eed8:	4632      	mov	r2, r6
 800eeda:	4615      	mov	r5, r2
 800eedc:	3201      	adds	r2, #1
 800eede:	7828      	ldrb	r0, [r5, #0]
 800eee0:	f7ff ff9a 	bl	800ee18 <__hexdig_fun>
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d1f8      	bne.n	800eeda <__gethex+0x96>
 800eee8:	1b73      	subs	r3, r6, r5
 800eeea:	009e      	lsls	r6, r3, #2
 800eeec:	e004      	b.n	800eef8 <__gethex+0xb4>
 800eeee:	2400      	movs	r4, #0
 800eef0:	4626      	mov	r6, r4
 800eef2:	e7e1      	b.n	800eeb8 <__gethex+0x74>
 800eef4:	2e00      	cmp	r6, #0
 800eef6:	d1f7      	bne.n	800eee8 <__gethex+0xa4>
 800eef8:	782b      	ldrb	r3, [r5, #0]
 800eefa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eefe:	2b50      	cmp	r3, #80	; 0x50
 800ef00:	d13d      	bne.n	800ef7e <__gethex+0x13a>
 800ef02:	786b      	ldrb	r3, [r5, #1]
 800ef04:	2b2b      	cmp	r3, #43	; 0x2b
 800ef06:	d02f      	beq.n	800ef68 <__gethex+0x124>
 800ef08:	2b2d      	cmp	r3, #45	; 0x2d
 800ef0a:	d031      	beq.n	800ef70 <__gethex+0x12c>
 800ef0c:	1c69      	adds	r1, r5, #1
 800ef0e:	f04f 0b00 	mov.w	fp, #0
 800ef12:	7808      	ldrb	r0, [r1, #0]
 800ef14:	f7ff ff80 	bl	800ee18 <__hexdig_fun>
 800ef18:	1e42      	subs	r2, r0, #1
 800ef1a:	b2d2      	uxtb	r2, r2
 800ef1c:	2a18      	cmp	r2, #24
 800ef1e:	d82e      	bhi.n	800ef7e <__gethex+0x13a>
 800ef20:	f1a0 0210 	sub.w	r2, r0, #16
 800ef24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef28:	f7ff ff76 	bl	800ee18 <__hexdig_fun>
 800ef2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ef30:	fa5f fc8c 	uxtb.w	ip, ip
 800ef34:	f1bc 0f18 	cmp.w	ip, #24
 800ef38:	d91d      	bls.n	800ef76 <__gethex+0x132>
 800ef3a:	f1bb 0f00 	cmp.w	fp, #0
 800ef3e:	d000      	beq.n	800ef42 <__gethex+0xfe>
 800ef40:	4252      	negs	r2, r2
 800ef42:	4416      	add	r6, r2
 800ef44:	f8ca 1000 	str.w	r1, [sl]
 800ef48:	b1dc      	cbz	r4, 800ef82 <__gethex+0x13e>
 800ef4a:	9b01      	ldr	r3, [sp, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	bf14      	ite	ne
 800ef50:	f04f 0800 	movne.w	r8, #0
 800ef54:	f04f 0806 	moveq.w	r8, #6
 800ef58:	4640      	mov	r0, r8
 800ef5a:	b005      	add	sp, #20
 800ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef60:	4645      	mov	r5, r8
 800ef62:	4626      	mov	r6, r4
 800ef64:	2401      	movs	r4, #1
 800ef66:	e7c7      	b.n	800eef8 <__gethex+0xb4>
 800ef68:	f04f 0b00 	mov.w	fp, #0
 800ef6c:	1ca9      	adds	r1, r5, #2
 800ef6e:	e7d0      	b.n	800ef12 <__gethex+0xce>
 800ef70:	f04f 0b01 	mov.w	fp, #1
 800ef74:	e7fa      	b.n	800ef6c <__gethex+0x128>
 800ef76:	230a      	movs	r3, #10
 800ef78:	fb03 0002 	mla	r0, r3, r2, r0
 800ef7c:	e7d0      	b.n	800ef20 <__gethex+0xdc>
 800ef7e:	4629      	mov	r1, r5
 800ef80:	e7e0      	b.n	800ef44 <__gethex+0x100>
 800ef82:	eba5 0308 	sub.w	r3, r5, r8
 800ef86:	3b01      	subs	r3, #1
 800ef88:	4621      	mov	r1, r4
 800ef8a:	2b07      	cmp	r3, #7
 800ef8c:	dc0a      	bgt.n	800efa4 <__gethex+0x160>
 800ef8e:	4648      	mov	r0, r9
 800ef90:	f000 fb0e 	bl	800f5b0 <_Balloc>
 800ef94:	4604      	mov	r4, r0
 800ef96:	b940      	cbnz	r0, 800efaa <__gethex+0x166>
 800ef98:	4b61      	ldr	r3, [pc, #388]	; (800f120 <__gethex+0x2dc>)
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	21e4      	movs	r1, #228	; 0xe4
 800ef9e:	4861      	ldr	r0, [pc, #388]	; (800f124 <__gethex+0x2e0>)
 800efa0:	f7ff fe7e 	bl	800eca0 <__assert_func>
 800efa4:	3101      	adds	r1, #1
 800efa6:	105b      	asrs	r3, r3, #1
 800efa8:	e7ef      	b.n	800ef8a <__gethex+0x146>
 800efaa:	f100 0a14 	add.w	sl, r0, #20
 800efae:	2300      	movs	r3, #0
 800efb0:	495a      	ldr	r1, [pc, #360]	; (800f11c <__gethex+0x2d8>)
 800efb2:	f8cd a004 	str.w	sl, [sp, #4]
 800efb6:	469b      	mov	fp, r3
 800efb8:	45a8      	cmp	r8, r5
 800efba:	d342      	bcc.n	800f042 <__gethex+0x1fe>
 800efbc:	9801      	ldr	r0, [sp, #4]
 800efbe:	f840 bb04 	str.w	fp, [r0], #4
 800efc2:	eba0 000a 	sub.w	r0, r0, sl
 800efc6:	1080      	asrs	r0, r0, #2
 800efc8:	6120      	str	r0, [r4, #16]
 800efca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800efce:	4658      	mov	r0, fp
 800efd0:	f000 fbe0 	bl	800f794 <__hi0bits>
 800efd4:	683d      	ldr	r5, [r7, #0]
 800efd6:	eba8 0000 	sub.w	r0, r8, r0
 800efda:	42a8      	cmp	r0, r5
 800efdc:	dd59      	ble.n	800f092 <__gethex+0x24e>
 800efde:	eba0 0805 	sub.w	r8, r0, r5
 800efe2:	4641      	mov	r1, r8
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 ff6f 	bl	800fec8 <__any_on>
 800efea:	4683      	mov	fp, r0
 800efec:	b1b8      	cbz	r0, 800f01e <__gethex+0x1da>
 800efee:	f108 33ff 	add.w	r3, r8, #4294967295
 800eff2:	1159      	asrs	r1, r3, #5
 800eff4:	f003 021f 	and.w	r2, r3, #31
 800eff8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800effc:	f04f 0b01 	mov.w	fp, #1
 800f000:	fa0b f202 	lsl.w	r2, fp, r2
 800f004:	420a      	tst	r2, r1
 800f006:	d00a      	beq.n	800f01e <__gethex+0x1da>
 800f008:	455b      	cmp	r3, fp
 800f00a:	dd06      	ble.n	800f01a <__gethex+0x1d6>
 800f00c:	f1a8 0102 	sub.w	r1, r8, #2
 800f010:	4620      	mov	r0, r4
 800f012:	f000 ff59 	bl	800fec8 <__any_on>
 800f016:	2800      	cmp	r0, #0
 800f018:	d138      	bne.n	800f08c <__gethex+0x248>
 800f01a:	f04f 0b02 	mov.w	fp, #2
 800f01e:	4641      	mov	r1, r8
 800f020:	4620      	mov	r0, r4
 800f022:	f7ff fea7 	bl	800ed74 <rshift>
 800f026:	4446      	add	r6, r8
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	42b3      	cmp	r3, r6
 800f02c:	da41      	bge.n	800f0b2 <__gethex+0x26e>
 800f02e:	4621      	mov	r1, r4
 800f030:	4648      	mov	r0, r9
 800f032:	f000 fafd 	bl	800f630 <_Bfree>
 800f036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f038:	2300      	movs	r3, #0
 800f03a:	6013      	str	r3, [r2, #0]
 800f03c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f040:	e78a      	b.n	800ef58 <__gethex+0x114>
 800f042:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f046:	2a2e      	cmp	r2, #46	; 0x2e
 800f048:	d014      	beq.n	800f074 <__gethex+0x230>
 800f04a:	2b20      	cmp	r3, #32
 800f04c:	d106      	bne.n	800f05c <__gethex+0x218>
 800f04e:	9b01      	ldr	r3, [sp, #4]
 800f050:	f843 bb04 	str.w	fp, [r3], #4
 800f054:	f04f 0b00 	mov.w	fp, #0
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	465b      	mov	r3, fp
 800f05c:	7828      	ldrb	r0, [r5, #0]
 800f05e:	9303      	str	r3, [sp, #12]
 800f060:	f7ff feda 	bl	800ee18 <__hexdig_fun>
 800f064:	9b03      	ldr	r3, [sp, #12]
 800f066:	f000 000f 	and.w	r0, r0, #15
 800f06a:	4098      	lsls	r0, r3
 800f06c:	ea4b 0b00 	orr.w	fp, fp, r0
 800f070:	3304      	adds	r3, #4
 800f072:	e7a1      	b.n	800efb8 <__gethex+0x174>
 800f074:	45a8      	cmp	r8, r5
 800f076:	d8e8      	bhi.n	800f04a <__gethex+0x206>
 800f078:	2201      	movs	r2, #1
 800f07a:	4628      	mov	r0, r5
 800f07c:	9303      	str	r3, [sp, #12]
 800f07e:	f7ff fd03 	bl	800ea88 <strncmp>
 800f082:	4926      	ldr	r1, [pc, #152]	; (800f11c <__gethex+0x2d8>)
 800f084:	9b03      	ldr	r3, [sp, #12]
 800f086:	2800      	cmp	r0, #0
 800f088:	d1df      	bne.n	800f04a <__gethex+0x206>
 800f08a:	e795      	b.n	800efb8 <__gethex+0x174>
 800f08c:	f04f 0b03 	mov.w	fp, #3
 800f090:	e7c5      	b.n	800f01e <__gethex+0x1da>
 800f092:	da0b      	bge.n	800f0ac <__gethex+0x268>
 800f094:	eba5 0800 	sub.w	r8, r5, r0
 800f098:	4621      	mov	r1, r4
 800f09a:	4642      	mov	r2, r8
 800f09c:	4648      	mov	r0, r9
 800f09e:	f000 fce1 	bl	800fa64 <__lshift>
 800f0a2:	eba6 0608 	sub.w	r6, r6, r8
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	f100 0a14 	add.w	sl, r0, #20
 800f0ac:	f04f 0b00 	mov.w	fp, #0
 800f0b0:	e7ba      	b.n	800f028 <__gethex+0x1e4>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	42b3      	cmp	r3, r6
 800f0b6:	dd73      	ble.n	800f1a0 <__gethex+0x35c>
 800f0b8:	1b9e      	subs	r6, r3, r6
 800f0ba:	42b5      	cmp	r5, r6
 800f0bc:	dc34      	bgt.n	800f128 <__gethex+0x2e4>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d023      	beq.n	800f10c <__gethex+0x2c8>
 800f0c4:	2b03      	cmp	r3, #3
 800f0c6:	d025      	beq.n	800f114 <__gethex+0x2d0>
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d115      	bne.n	800f0f8 <__gethex+0x2b4>
 800f0cc:	42b5      	cmp	r5, r6
 800f0ce:	d113      	bne.n	800f0f8 <__gethex+0x2b4>
 800f0d0:	2d01      	cmp	r5, #1
 800f0d2:	d10b      	bne.n	800f0ec <__gethex+0x2a8>
 800f0d4:	9a02      	ldr	r2, [sp, #8]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6013      	str	r3, [r2, #0]
 800f0da:	2301      	movs	r3, #1
 800f0dc:	6123      	str	r3, [r4, #16]
 800f0de:	f8ca 3000 	str.w	r3, [sl]
 800f0e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f0e8:	601c      	str	r4, [r3, #0]
 800f0ea:	e735      	b.n	800ef58 <__gethex+0x114>
 800f0ec:	1e69      	subs	r1, r5, #1
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f000 feea 	bl	800fec8 <__any_on>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d1ed      	bne.n	800f0d4 <__gethex+0x290>
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	4648      	mov	r0, r9
 800f0fc:	f000 fa98 	bl	800f630 <_Bfree>
 800f100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f102:	2300      	movs	r3, #0
 800f104:	6013      	str	r3, [r2, #0]
 800f106:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f10a:	e725      	b.n	800ef58 <__gethex+0x114>
 800f10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1f2      	bne.n	800f0f8 <__gethex+0x2b4>
 800f112:	e7df      	b.n	800f0d4 <__gethex+0x290>
 800f114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1dc      	bne.n	800f0d4 <__gethex+0x290>
 800f11a:	e7ed      	b.n	800f0f8 <__gethex+0x2b4>
 800f11c:	080110e4 	.word	0x080110e4
 800f120:	080112fe 	.word	0x080112fe
 800f124:	0801130f 	.word	0x0801130f
 800f128:	f106 38ff 	add.w	r8, r6, #4294967295
 800f12c:	f1bb 0f00 	cmp.w	fp, #0
 800f130:	d133      	bne.n	800f19a <__gethex+0x356>
 800f132:	f1b8 0f00 	cmp.w	r8, #0
 800f136:	d004      	beq.n	800f142 <__gethex+0x2fe>
 800f138:	4641      	mov	r1, r8
 800f13a:	4620      	mov	r0, r4
 800f13c:	f000 fec4 	bl	800fec8 <__any_on>
 800f140:	4683      	mov	fp, r0
 800f142:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f146:	2301      	movs	r3, #1
 800f148:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f14c:	f008 081f 	and.w	r8, r8, #31
 800f150:	fa03 f308 	lsl.w	r3, r3, r8
 800f154:	4213      	tst	r3, r2
 800f156:	4631      	mov	r1, r6
 800f158:	4620      	mov	r0, r4
 800f15a:	bf18      	it	ne
 800f15c:	f04b 0b02 	orrne.w	fp, fp, #2
 800f160:	1bad      	subs	r5, r5, r6
 800f162:	f7ff fe07 	bl	800ed74 <rshift>
 800f166:	687e      	ldr	r6, [r7, #4]
 800f168:	f04f 0802 	mov.w	r8, #2
 800f16c:	f1bb 0f00 	cmp.w	fp, #0
 800f170:	d04a      	beq.n	800f208 <__gethex+0x3c4>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2b02      	cmp	r3, #2
 800f176:	d016      	beq.n	800f1a6 <__gethex+0x362>
 800f178:	2b03      	cmp	r3, #3
 800f17a:	d018      	beq.n	800f1ae <__gethex+0x36a>
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d109      	bne.n	800f194 <__gethex+0x350>
 800f180:	f01b 0f02 	tst.w	fp, #2
 800f184:	d006      	beq.n	800f194 <__gethex+0x350>
 800f186:	f8da 3000 	ldr.w	r3, [sl]
 800f18a:	ea4b 0b03 	orr.w	fp, fp, r3
 800f18e:	f01b 0f01 	tst.w	fp, #1
 800f192:	d10f      	bne.n	800f1b4 <__gethex+0x370>
 800f194:	f048 0810 	orr.w	r8, r8, #16
 800f198:	e036      	b.n	800f208 <__gethex+0x3c4>
 800f19a:	f04f 0b01 	mov.w	fp, #1
 800f19e:	e7d0      	b.n	800f142 <__gethex+0x2fe>
 800f1a0:	f04f 0801 	mov.w	r8, #1
 800f1a4:	e7e2      	b.n	800f16c <__gethex+0x328>
 800f1a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1a8:	f1c3 0301 	rsb	r3, r3, #1
 800f1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d0ef      	beq.n	800f194 <__gethex+0x350>
 800f1b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f1b8:	f104 0214 	add.w	r2, r4, #20
 800f1bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f1c0:	9301      	str	r3, [sp, #4]
 800f1c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	4694      	mov	ip, r2
 800f1ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800f1ce:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f1d2:	d01e      	beq.n	800f212 <__gethex+0x3ce>
 800f1d4:	3101      	adds	r1, #1
 800f1d6:	f8cc 1000 	str.w	r1, [ip]
 800f1da:	f1b8 0f02 	cmp.w	r8, #2
 800f1de:	f104 0214 	add.w	r2, r4, #20
 800f1e2:	d13d      	bne.n	800f260 <__gethex+0x41c>
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	42ab      	cmp	r3, r5
 800f1ea:	d10b      	bne.n	800f204 <__gethex+0x3c0>
 800f1ec:	1169      	asrs	r1, r5, #5
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	f005 051f 	and.w	r5, r5, #31
 800f1f4:	fa03 f505 	lsl.w	r5, r3, r5
 800f1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1fc:	421d      	tst	r5, r3
 800f1fe:	bf18      	it	ne
 800f200:	f04f 0801 	movne.w	r8, #1
 800f204:	f048 0820 	orr.w	r8, r8, #32
 800f208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f20a:	601c      	str	r4, [r3, #0]
 800f20c:	9b02      	ldr	r3, [sp, #8]
 800f20e:	601e      	str	r6, [r3, #0]
 800f210:	e6a2      	b.n	800ef58 <__gethex+0x114>
 800f212:	4290      	cmp	r0, r2
 800f214:	f842 3c04 	str.w	r3, [r2, #-4]
 800f218:	d8d6      	bhi.n	800f1c8 <__gethex+0x384>
 800f21a:	68a2      	ldr	r2, [r4, #8]
 800f21c:	4593      	cmp	fp, r2
 800f21e:	db17      	blt.n	800f250 <__gethex+0x40c>
 800f220:	6861      	ldr	r1, [r4, #4]
 800f222:	4648      	mov	r0, r9
 800f224:	3101      	adds	r1, #1
 800f226:	f000 f9c3 	bl	800f5b0 <_Balloc>
 800f22a:	4682      	mov	sl, r0
 800f22c:	b918      	cbnz	r0, 800f236 <__gethex+0x3f2>
 800f22e:	4b1b      	ldr	r3, [pc, #108]	; (800f29c <__gethex+0x458>)
 800f230:	4602      	mov	r2, r0
 800f232:	2184      	movs	r1, #132	; 0x84
 800f234:	e6b3      	b.n	800ef9e <__gethex+0x15a>
 800f236:	6922      	ldr	r2, [r4, #16]
 800f238:	3202      	adds	r2, #2
 800f23a:	f104 010c 	add.w	r1, r4, #12
 800f23e:	0092      	lsls	r2, r2, #2
 800f240:	300c      	adds	r0, #12
 800f242:	f7ff fd16 	bl	800ec72 <memcpy>
 800f246:	4621      	mov	r1, r4
 800f248:	4648      	mov	r0, r9
 800f24a:	f000 f9f1 	bl	800f630 <_Bfree>
 800f24e:	4654      	mov	r4, sl
 800f250:	6922      	ldr	r2, [r4, #16]
 800f252:	1c51      	adds	r1, r2, #1
 800f254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f258:	6121      	str	r1, [r4, #16]
 800f25a:	2101      	movs	r1, #1
 800f25c:	6151      	str	r1, [r2, #20]
 800f25e:	e7bc      	b.n	800f1da <__gethex+0x396>
 800f260:	6921      	ldr	r1, [r4, #16]
 800f262:	4559      	cmp	r1, fp
 800f264:	dd0b      	ble.n	800f27e <__gethex+0x43a>
 800f266:	2101      	movs	r1, #1
 800f268:	4620      	mov	r0, r4
 800f26a:	f7ff fd83 	bl	800ed74 <rshift>
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	3601      	adds	r6, #1
 800f272:	42b3      	cmp	r3, r6
 800f274:	f6ff aedb 	blt.w	800f02e <__gethex+0x1ea>
 800f278:	f04f 0801 	mov.w	r8, #1
 800f27c:	e7c2      	b.n	800f204 <__gethex+0x3c0>
 800f27e:	f015 051f 	ands.w	r5, r5, #31
 800f282:	d0f9      	beq.n	800f278 <__gethex+0x434>
 800f284:	9b01      	ldr	r3, [sp, #4]
 800f286:	441a      	add	r2, r3
 800f288:	f1c5 0520 	rsb	r5, r5, #32
 800f28c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f290:	f000 fa80 	bl	800f794 <__hi0bits>
 800f294:	42a8      	cmp	r0, r5
 800f296:	dbe6      	blt.n	800f266 <__gethex+0x422>
 800f298:	e7ee      	b.n	800f278 <__gethex+0x434>
 800f29a:	bf00      	nop
 800f29c:	080112fe 	.word	0x080112fe

0800f2a0 <L_shift>:
 800f2a0:	f1c2 0208 	rsb	r2, r2, #8
 800f2a4:	0092      	lsls	r2, r2, #2
 800f2a6:	b570      	push	{r4, r5, r6, lr}
 800f2a8:	f1c2 0620 	rsb	r6, r2, #32
 800f2ac:	6843      	ldr	r3, [r0, #4]
 800f2ae:	6804      	ldr	r4, [r0, #0]
 800f2b0:	fa03 f506 	lsl.w	r5, r3, r6
 800f2b4:	432c      	orrs	r4, r5
 800f2b6:	40d3      	lsrs	r3, r2
 800f2b8:	6004      	str	r4, [r0, #0]
 800f2ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800f2be:	4288      	cmp	r0, r1
 800f2c0:	d3f4      	bcc.n	800f2ac <L_shift+0xc>
 800f2c2:	bd70      	pop	{r4, r5, r6, pc}

0800f2c4 <__match>:
 800f2c4:	b530      	push	{r4, r5, lr}
 800f2c6:	6803      	ldr	r3, [r0, #0]
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ce:	b914      	cbnz	r4, 800f2d6 <__match+0x12>
 800f2d0:	6003      	str	r3, [r0, #0]
 800f2d2:	2001      	movs	r0, #1
 800f2d4:	bd30      	pop	{r4, r5, pc}
 800f2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f2de:	2d19      	cmp	r5, #25
 800f2e0:	bf98      	it	ls
 800f2e2:	3220      	addls	r2, #32
 800f2e4:	42a2      	cmp	r2, r4
 800f2e6:	d0f0      	beq.n	800f2ca <__match+0x6>
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	e7f3      	b.n	800f2d4 <__match+0x10>

0800f2ec <__hexnan>:
 800f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	680b      	ldr	r3, [r1, #0]
 800f2f2:	6801      	ldr	r1, [r0, #0]
 800f2f4:	115e      	asrs	r6, r3, #5
 800f2f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2fa:	f013 031f 	ands.w	r3, r3, #31
 800f2fe:	b087      	sub	sp, #28
 800f300:	bf18      	it	ne
 800f302:	3604      	addne	r6, #4
 800f304:	2500      	movs	r5, #0
 800f306:	1f37      	subs	r7, r6, #4
 800f308:	4682      	mov	sl, r0
 800f30a:	4690      	mov	r8, r2
 800f30c:	9301      	str	r3, [sp, #4]
 800f30e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f312:	46b9      	mov	r9, r7
 800f314:	463c      	mov	r4, r7
 800f316:	9502      	str	r5, [sp, #8]
 800f318:	46ab      	mov	fp, r5
 800f31a:	784a      	ldrb	r2, [r1, #1]
 800f31c:	1c4b      	adds	r3, r1, #1
 800f31e:	9303      	str	r3, [sp, #12]
 800f320:	b342      	cbz	r2, 800f374 <__hexnan+0x88>
 800f322:	4610      	mov	r0, r2
 800f324:	9105      	str	r1, [sp, #20]
 800f326:	9204      	str	r2, [sp, #16]
 800f328:	f7ff fd76 	bl	800ee18 <__hexdig_fun>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d14f      	bne.n	800f3d0 <__hexnan+0xe4>
 800f330:	9a04      	ldr	r2, [sp, #16]
 800f332:	9905      	ldr	r1, [sp, #20]
 800f334:	2a20      	cmp	r2, #32
 800f336:	d818      	bhi.n	800f36a <__hexnan+0x7e>
 800f338:	9b02      	ldr	r3, [sp, #8]
 800f33a:	459b      	cmp	fp, r3
 800f33c:	dd13      	ble.n	800f366 <__hexnan+0x7a>
 800f33e:	454c      	cmp	r4, r9
 800f340:	d206      	bcs.n	800f350 <__hexnan+0x64>
 800f342:	2d07      	cmp	r5, #7
 800f344:	dc04      	bgt.n	800f350 <__hexnan+0x64>
 800f346:	462a      	mov	r2, r5
 800f348:	4649      	mov	r1, r9
 800f34a:	4620      	mov	r0, r4
 800f34c:	f7ff ffa8 	bl	800f2a0 <L_shift>
 800f350:	4544      	cmp	r4, r8
 800f352:	d950      	bls.n	800f3f6 <__hexnan+0x10a>
 800f354:	2300      	movs	r3, #0
 800f356:	f1a4 0904 	sub.w	r9, r4, #4
 800f35a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f35e:	f8cd b008 	str.w	fp, [sp, #8]
 800f362:	464c      	mov	r4, r9
 800f364:	461d      	mov	r5, r3
 800f366:	9903      	ldr	r1, [sp, #12]
 800f368:	e7d7      	b.n	800f31a <__hexnan+0x2e>
 800f36a:	2a29      	cmp	r2, #41	; 0x29
 800f36c:	d155      	bne.n	800f41a <__hexnan+0x12e>
 800f36e:	3102      	adds	r1, #2
 800f370:	f8ca 1000 	str.w	r1, [sl]
 800f374:	f1bb 0f00 	cmp.w	fp, #0
 800f378:	d04f      	beq.n	800f41a <__hexnan+0x12e>
 800f37a:	454c      	cmp	r4, r9
 800f37c:	d206      	bcs.n	800f38c <__hexnan+0xa0>
 800f37e:	2d07      	cmp	r5, #7
 800f380:	dc04      	bgt.n	800f38c <__hexnan+0xa0>
 800f382:	462a      	mov	r2, r5
 800f384:	4649      	mov	r1, r9
 800f386:	4620      	mov	r0, r4
 800f388:	f7ff ff8a 	bl	800f2a0 <L_shift>
 800f38c:	4544      	cmp	r4, r8
 800f38e:	d934      	bls.n	800f3fa <__hexnan+0x10e>
 800f390:	f1a8 0204 	sub.w	r2, r8, #4
 800f394:	4623      	mov	r3, r4
 800f396:	f853 1b04 	ldr.w	r1, [r3], #4
 800f39a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f39e:	429f      	cmp	r7, r3
 800f3a0:	d2f9      	bcs.n	800f396 <__hexnan+0xaa>
 800f3a2:	1b3b      	subs	r3, r7, r4
 800f3a4:	f023 0303 	bic.w	r3, r3, #3
 800f3a8:	3304      	adds	r3, #4
 800f3aa:	3e03      	subs	r6, #3
 800f3ac:	3401      	adds	r4, #1
 800f3ae:	42a6      	cmp	r6, r4
 800f3b0:	bf38      	it	cc
 800f3b2:	2304      	movcc	r3, #4
 800f3b4:	4443      	add	r3, r8
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f843 2b04 	str.w	r2, [r3], #4
 800f3bc:	429f      	cmp	r7, r3
 800f3be:	d2fb      	bcs.n	800f3b8 <__hexnan+0xcc>
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	b91b      	cbnz	r3, 800f3cc <__hexnan+0xe0>
 800f3c4:	4547      	cmp	r7, r8
 800f3c6:	d126      	bne.n	800f416 <__hexnan+0x12a>
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	603b      	str	r3, [r7, #0]
 800f3cc:	2005      	movs	r0, #5
 800f3ce:	e025      	b.n	800f41c <__hexnan+0x130>
 800f3d0:	3501      	adds	r5, #1
 800f3d2:	2d08      	cmp	r5, #8
 800f3d4:	f10b 0b01 	add.w	fp, fp, #1
 800f3d8:	dd06      	ble.n	800f3e8 <__hexnan+0xfc>
 800f3da:	4544      	cmp	r4, r8
 800f3dc:	d9c3      	bls.n	800f366 <__hexnan+0x7a>
 800f3de:	2300      	movs	r3, #0
 800f3e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3e4:	2501      	movs	r5, #1
 800f3e6:	3c04      	subs	r4, #4
 800f3e8:	6822      	ldr	r2, [r4, #0]
 800f3ea:	f000 000f 	and.w	r0, r0, #15
 800f3ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f3f2:	6020      	str	r0, [r4, #0]
 800f3f4:	e7b7      	b.n	800f366 <__hexnan+0x7a>
 800f3f6:	2508      	movs	r5, #8
 800f3f8:	e7b5      	b.n	800f366 <__hexnan+0x7a>
 800f3fa:	9b01      	ldr	r3, [sp, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d0df      	beq.n	800f3c0 <__hexnan+0xd4>
 800f400:	f1c3 0320 	rsb	r3, r3, #32
 800f404:	f04f 32ff 	mov.w	r2, #4294967295
 800f408:	40da      	lsrs	r2, r3
 800f40a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f40e:	4013      	ands	r3, r2
 800f410:	f846 3c04 	str.w	r3, [r6, #-4]
 800f414:	e7d4      	b.n	800f3c0 <__hexnan+0xd4>
 800f416:	3f04      	subs	r7, #4
 800f418:	e7d2      	b.n	800f3c0 <__hexnan+0xd4>
 800f41a:	2004      	movs	r0, #4
 800f41c:	b007      	add	sp, #28
 800f41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f424 <malloc>:
 800f424:	4b02      	ldr	r3, [pc, #8]	; (800f430 <malloc+0xc>)
 800f426:	4601      	mov	r1, r0
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	f000 b823 	b.w	800f474 <_malloc_r>
 800f42e:	bf00      	nop
 800f430:	20000204 	.word	0x20000204

0800f434 <sbrk_aligned>:
 800f434:	b570      	push	{r4, r5, r6, lr}
 800f436:	4e0e      	ldr	r6, [pc, #56]	; (800f470 <sbrk_aligned+0x3c>)
 800f438:	460c      	mov	r4, r1
 800f43a:	6831      	ldr	r1, [r6, #0]
 800f43c:	4605      	mov	r5, r0
 800f43e:	b911      	cbnz	r1, 800f446 <sbrk_aligned+0x12>
 800f440:	f001 fb0c 	bl	8010a5c <_sbrk_r>
 800f444:	6030      	str	r0, [r6, #0]
 800f446:	4621      	mov	r1, r4
 800f448:	4628      	mov	r0, r5
 800f44a:	f001 fb07 	bl	8010a5c <_sbrk_r>
 800f44e:	1c43      	adds	r3, r0, #1
 800f450:	d00a      	beq.n	800f468 <sbrk_aligned+0x34>
 800f452:	1cc4      	adds	r4, r0, #3
 800f454:	f024 0403 	bic.w	r4, r4, #3
 800f458:	42a0      	cmp	r0, r4
 800f45a:	d007      	beq.n	800f46c <sbrk_aligned+0x38>
 800f45c:	1a21      	subs	r1, r4, r0
 800f45e:	4628      	mov	r0, r5
 800f460:	f001 fafc 	bl	8010a5c <_sbrk_r>
 800f464:	3001      	adds	r0, #1
 800f466:	d101      	bne.n	800f46c <sbrk_aligned+0x38>
 800f468:	f04f 34ff 	mov.w	r4, #4294967295
 800f46c:	4620      	mov	r0, r4
 800f46e:	bd70      	pop	{r4, r5, r6, pc}
 800f470:	20002cf4 	.word	0x20002cf4

0800f474 <_malloc_r>:
 800f474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f478:	1ccd      	adds	r5, r1, #3
 800f47a:	f025 0503 	bic.w	r5, r5, #3
 800f47e:	3508      	adds	r5, #8
 800f480:	2d0c      	cmp	r5, #12
 800f482:	bf38      	it	cc
 800f484:	250c      	movcc	r5, #12
 800f486:	2d00      	cmp	r5, #0
 800f488:	4607      	mov	r7, r0
 800f48a:	db01      	blt.n	800f490 <_malloc_r+0x1c>
 800f48c:	42a9      	cmp	r1, r5
 800f48e:	d905      	bls.n	800f49c <_malloc_r+0x28>
 800f490:	230c      	movs	r3, #12
 800f492:	603b      	str	r3, [r7, #0]
 800f494:	2600      	movs	r6, #0
 800f496:	4630      	mov	r0, r6
 800f498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f49c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f570 <_malloc_r+0xfc>
 800f4a0:	f000 f87a 	bl	800f598 <__malloc_lock>
 800f4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4a8:	461c      	mov	r4, r3
 800f4aa:	bb5c      	cbnz	r4, 800f504 <_malloc_r+0x90>
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	4638      	mov	r0, r7
 800f4b0:	f7ff ffc0 	bl	800f434 <sbrk_aligned>
 800f4b4:	1c43      	adds	r3, r0, #1
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	d155      	bne.n	800f566 <_malloc_r+0xf2>
 800f4ba:	f8d8 4000 	ldr.w	r4, [r8]
 800f4be:	4626      	mov	r6, r4
 800f4c0:	2e00      	cmp	r6, #0
 800f4c2:	d145      	bne.n	800f550 <_malloc_r+0xdc>
 800f4c4:	2c00      	cmp	r4, #0
 800f4c6:	d048      	beq.n	800f55a <_malloc_r+0xe6>
 800f4c8:	6823      	ldr	r3, [r4, #0]
 800f4ca:	4631      	mov	r1, r6
 800f4cc:	4638      	mov	r0, r7
 800f4ce:	eb04 0903 	add.w	r9, r4, r3
 800f4d2:	f001 fac3 	bl	8010a5c <_sbrk_r>
 800f4d6:	4581      	cmp	r9, r0
 800f4d8:	d13f      	bne.n	800f55a <_malloc_r+0xe6>
 800f4da:	6821      	ldr	r1, [r4, #0]
 800f4dc:	1a6d      	subs	r5, r5, r1
 800f4de:	4629      	mov	r1, r5
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	f7ff ffa7 	bl	800f434 <sbrk_aligned>
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	d037      	beq.n	800f55a <_malloc_r+0xe6>
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	442b      	add	r3, r5
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d038      	beq.n	800f56a <_malloc_r+0xf6>
 800f4f8:	685a      	ldr	r2, [r3, #4]
 800f4fa:	42a2      	cmp	r2, r4
 800f4fc:	d12b      	bne.n	800f556 <_malloc_r+0xe2>
 800f4fe:	2200      	movs	r2, #0
 800f500:	605a      	str	r2, [r3, #4]
 800f502:	e00f      	b.n	800f524 <_malloc_r+0xb0>
 800f504:	6822      	ldr	r2, [r4, #0]
 800f506:	1b52      	subs	r2, r2, r5
 800f508:	d41f      	bmi.n	800f54a <_malloc_r+0xd6>
 800f50a:	2a0b      	cmp	r2, #11
 800f50c:	d917      	bls.n	800f53e <_malloc_r+0xca>
 800f50e:	1961      	adds	r1, r4, r5
 800f510:	42a3      	cmp	r3, r4
 800f512:	6025      	str	r5, [r4, #0]
 800f514:	bf18      	it	ne
 800f516:	6059      	strne	r1, [r3, #4]
 800f518:	6863      	ldr	r3, [r4, #4]
 800f51a:	bf08      	it	eq
 800f51c:	f8c8 1000 	streq.w	r1, [r8]
 800f520:	5162      	str	r2, [r4, r5]
 800f522:	604b      	str	r3, [r1, #4]
 800f524:	4638      	mov	r0, r7
 800f526:	f104 060b 	add.w	r6, r4, #11
 800f52a:	f000 f83b 	bl	800f5a4 <__malloc_unlock>
 800f52e:	f026 0607 	bic.w	r6, r6, #7
 800f532:	1d23      	adds	r3, r4, #4
 800f534:	1af2      	subs	r2, r6, r3
 800f536:	d0ae      	beq.n	800f496 <_malloc_r+0x22>
 800f538:	1b9b      	subs	r3, r3, r6
 800f53a:	50a3      	str	r3, [r4, r2]
 800f53c:	e7ab      	b.n	800f496 <_malloc_r+0x22>
 800f53e:	42a3      	cmp	r3, r4
 800f540:	6862      	ldr	r2, [r4, #4]
 800f542:	d1dd      	bne.n	800f500 <_malloc_r+0x8c>
 800f544:	f8c8 2000 	str.w	r2, [r8]
 800f548:	e7ec      	b.n	800f524 <_malloc_r+0xb0>
 800f54a:	4623      	mov	r3, r4
 800f54c:	6864      	ldr	r4, [r4, #4]
 800f54e:	e7ac      	b.n	800f4aa <_malloc_r+0x36>
 800f550:	4634      	mov	r4, r6
 800f552:	6876      	ldr	r6, [r6, #4]
 800f554:	e7b4      	b.n	800f4c0 <_malloc_r+0x4c>
 800f556:	4613      	mov	r3, r2
 800f558:	e7cc      	b.n	800f4f4 <_malloc_r+0x80>
 800f55a:	230c      	movs	r3, #12
 800f55c:	603b      	str	r3, [r7, #0]
 800f55e:	4638      	mov	r0, r7
 800f560:	f000 f820 	bl	800f5a4 <__malloc_unlock>
 800f564:	e797      	b.n	800f496 <_malloc_r+0x22>
 800f566:	6025      	str	r5, [r4, #0]
 800f568:	e7dc      	b.n	800f524 <_malloc_r+0xb0>
 800f56a:	605b      	str	r3, [r3, #4]
 800f56c:	deff      	udf	#255	; 0xff
 800f56e:	bf00      	nop
 800f570:	20002cf0 	.word	0x20002cf0

0800f574 <__ascii_mbtowc>:
 800f574:	b082      	sub	sp, #8
 800f576:	b901      	cbnz	r1, 800f57a <__ascii_mbtowc+0x6>
 800f578:	a901      	add	r1, sp, #4
 800f57a:	b142      	cbz	r2, 800f58e <__ascii_mbtowc+0x1a>
 800f57c:	b14b      	cbz	r3, 800f592 <__ascii_mbtowc+0x1e>
 800f57e:	7813      	ldrb	r3, [r2, #0]
 800f580:	600b      	str	r3, [r1, #0]
 800f582:	7812      	ldrb	r2, [r2, #0]
 800f584:	1e10      	subs	r0, r2, #0
 800f586:	bf18      	it	ne
 800f588:	2001      	movne	r0, #1
 800f58a:	b002      	add	sp, #8
 800f58c:	4770      	bx	lr
 800f58e:	4610      	mov	r0, r2
 800f590:	e7fb      	b.n	800f58a <__ascii_mbtowc+0x16>
 800f592:	f06f 0001 	mvn.w	r0, #1
 800f596:	e7f8      	b.n	800f58a <__ascii_mbtowc+0x16>

0800f598 <__malloc_lock>:
 800f598:	4801      	ldr	r0, [pc, #4]	; (800f5a0 <__malloc_lock+0x8>)
 800f59a:	f7ff bb68 	b.w	800ec6e <__retarget_lock_acquire_recursive>
 800f59e:	bf00      	nop
 800f5a0:	20002cec 	.word	0x20002cec

0800f5a4 <__malloc_unlock>:
 800f5a4:	4801      	ldr	r0, [pc, #4]	; (800f5ac <__malloc_unlock+0x8>)
 800f5a6:	f7ff bb63 	b.w	800ec70 <__retarget_lock_release_recursive>
 800f5aa:	bf00      	nop
 800f5ac:	20002cec 	.word	0x20002cec

0800f5b0 <_Balloc>:
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	69c6      	ldr	r6, [r0, #28]
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	460d      	mov	r5, r1
 800f5b8:	b976      	cbnz	r6, 800f5d8 <_Balloc+0x28>
 800f5ba:	2010      	movs	r0, #16
 800f5bc:	f7ff ff32 	bl	800f424 <malloc>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	61e0      	str	r0, [r4, #28]
 800f5c4:	b920      	cbnz	r0, 800f5d0 <_Balloc+0x20>
 800f5c6:	4b18      	ldr	r3, [pc, #96]	; (800f628 <_Balloc+0x78>)
 800f5c8:	4818      	ldr	r0, [pc, #96]	; (800f62c <_Balloc+0x7c>)
 800f5ca:	216b      	movs	r1, #107	; 0x6b
 800f5cc:	f7ff fb68 	bl	800eca0 <__assert_func>
 800f5d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5d4:	6006      	str	r6, [r0, #0]
 800f5d6:	60c6      	str	r6, [r0, #12]
 800f5d8:	69e6      	ldr	r6, [r4, #28]
 800f5da:	68f3      	ldr	r3, [r6, #12]
 800f5dc:	b183      	cbz	r3, 800f600 <_Balloc+0x50>
 800f5de:	69e3      	ldr	r3, [r4, #28]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5e6:	b9b8      	cbnz	r0, 800f618 <_Balloc+0x68>
 800f5e8:	2101      	movs	r1, #1
 800f5ea:	fa01 f605 	lsl.w	r6, r1, r5
 800f5ee:	1d72      	adds	r2, r6, #5
 800f5f0:	0092      	lsls	r2, r2, #2
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f001 fa49 	bl	8010a8a <_calloc_r>
 800f5f8:	b160      	cbz	r0, 800f614 <_Balloc+0x64>
 800f5fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5fe:	e00e      	b.n	800f61e <_Balloc+0x6e>
 800f600:	2221      	movs	r2, #33	; 0x21
 800f602:	2104      	movs	r1, #4
 800f604:	4620      	mov	r0, r4
 800f606:	f001 fa40 	bl	8010a8a <_calloc_r>
 800f60a:	69e3      	ldr	r3, [r4, #28]
 800f60c:	60f0      	str	r0, [r6, #12]
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d1e4      	bne.n	800f5de <_Balloc+0x2e>
 800f614:	2000      	movs	r0, #0
 800f616:	bd70      	pop	{r4, r5, r6, pc}
 800f618:	6802      	ldr	r2, [r0, #0]
 800f61a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f61e:	2300      	movs	r3, #0
 800f620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f624:	e7f7      	b.n	800f616 <_Balloc+0x66>
 800f626:	bf00      	nop
 800f628:	08011249 	.word	0x08011249
 800f62c:	0801136f 	.word	0x0801136f

0800f630 <_Bfree>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	69c6      	ldr	r6, [r0, #28]
 800f634:	4605      	mov	r5, r0
 800f636:	460c      	mov	r4, r1
 800f638:	b976      	cbnz	r6, 800f658 <_Bfree+0x28>
 800f63a:	2010      	movs	r0, #16
 800f63c:	f7ff fef2 	bl	800f424 <malloc>
 800f640:	4602      	mov	r2, r0
 800f642:	61e8      	str	r0, [r5, #28]
 800f644:	b920      	cbnz	r0, 800f650 <_Bfree+0x20>
 800f646:	4b09      	ldr	r3, [pc, #36]	; (800f66c <_Bfree+0x3c>)
 800f648:	4809      	ldr	r0, [pc, #36]	; (800f670 <_Bfree+0x40>)
 800f64a:	218f      	movs	r1, #143	; 0x8f
 800f64c:	f7ff fb28 	bl	800eca0 <__assert_func>
 800f650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f654:	6006      	str	r6, [r0, #0]
 800f656:	60c6      	str	r6, [r0, #12]
 800f658:	b13c      	cbz	r4, 800f66a <_Bfree+0x3a>
 800f65a:	69eb      	ldr	r3, [r5, #28]
 800f65c:	6862      	ldr	r2, [r4, #4]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f664:	6021      	str	r1, [r4, #0]
 800f666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	08011249 	.word	0x08011249
 800f670:	0801136f 	.word	0x0801136f

0800f674 <__multadd>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	690d      	ldr	r5, [r1, #16]
 800f67a:	4607      	mov	r7, r0
 800f67c:	460c      	mov	r4, r1
 800f67e:	461e      	mov	r6, r3
 800f680:	f101 0c14 	add.w	ip, r1, #20
 800f684:	2000      	movs	r0, #0
 800f686:	f8dc 3000 	ldr.w	r3, [ip]
 800f68a:	b299      	uxth	r1, r3
 800f68c:	fb02 6101 	mla	r1, r2, r1, r6
 800f690:	0c1e      	lsrs	r6, r3, #16
 800f692:	0c0b      	lsrs	r3, r1, #16
 800f694:	fb02 3306 	mla	r3, r2, r6, r3
 800f698:	b289      	uxth	r1, r1
 800f69a:	3001      	adds	r0, #1
 800f69c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f6a0:	4285      	cmp	r5, r0
 800f6a2:	f84c 1b04 	str.w	r1, [ip], #4
 800f6a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f6aa:	dcec      	bgt.n	800f686 <__multadd+0x12>
 800f6ac:	b30e      	cbz	r6, 800f6f2 <__multadd+0x7e>
 800f6ae:	68a3      	ldr	r3, [r4, #8]
 800f6b0:	42ab      	cmp	r3, r5
 800f6b2:	dc19      	bgt.n	800f6e8 <__multadd+0x74>
 800f6b4:	6861      	ldr	r1, [r4, #4]
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	3101      	adds	r1, #1
 800f6ba:	f7ff ff79 	bl	800f5b0 <_Balloc>
 800f6be:	4680      	mov	r8, r0
 800f6c0:	b928      	cbnz	r0, 800f6ce <__multadd+0x5a>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <__multadd+0x84>)
 800f6c6:	480d      	ldr	r0, [pc, #52]	; (800f6fc <__multadd+0x88>)
 800f6c8:	21ba      	movs	r1, #186	; 0xba
 800f6ca:	f7ff fae9 	bl	800eca0 <__assert_func>
 800f6ce:	6922      	ldr	r2, [r4, #16]
 800f6d0:	3202      	adds	r2, #2
 800f6d2:	f104 010c 	add.w	r1, r4, #12
 800f6d6:	0092      	lsls	r2, r2, #2
 800f6d8:	300c      	adds	r0, #12
 800f6da:	f7ff faca 	bl	800ec72 <memcpy>
 800f6de:	4621      	mov	r1, r4
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	f7ff ffa5 	bl	800f630 <_Bfree>
 800f6e6:	4644      	mov	r4, r8
 800f6e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6ec:	3501      	adds	r5, #1
 800f6ee:	615e      	str	r6, [r3, #20]
 800f6f0:	6125      	str	r5, [r4, #16]
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f8:	080112fe 	.word	0x080112fe
 800f6fc:	0801136f 	.word	0x0801136f

0800f700 <__s2b>:
 800f700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f704:	460c      	mov	r4, r1
 800f706:	4615      	mov	r5, r2
 800f708:	461f      	mov	r7, r3
 800f70a:	2209      	movs	r2, #9
 800f70c:	3308      	adds	r3, #8
 800f70e:	4606      	mov	r6, r0
 800f710:	fb93 f3f2 	sdiv	r3, r3, r2
 800f714:	2100      	movs	r1, #0
 800f716:	2201      	movs	r2, #1
 800f718:	429a      	cmp	r2, r3
 800f71a:	db09      	blt.n	800f730 <__s2b+0x30>
 800f71c:	4630      	mov	r0, r6
 800f71e:	f7ff ff47 	bl	800f5b0 <_Balloc>
 800f722:	b940      	cbnz	r0, 800f736 <__s2b+0x36>
 800f724:	4602      	mov	r2, r0
 800f726:	4b19      	ldr	r3, [pc, #100]	; (800f78c <__s2b+0x8c>)
 800f728:	4819      	ldr	r0, [pc, #100]	; (800f790 <__s2b+0x90>)
 800f72a:	21d3      	movs	r1, #211	; 0xd3
 800f72c:	f7ff fab8 	bl	800eca0 <__assert_func>
 800f730:	0052      	lsls	r2, r2, #1
 800f732:	3101      	adds	r1, #1
 800f734:	e7f0      	b.n	800f718 <__s2b+0x18>
 800f736:	9b08      	ldr	r3, [sp, #32]
 800f738:	6143      	str	r3, [r0, #20]
 800f73a:	2d09      	cmp	r5, #9
 800f73c:	f04f 0301 	mov.w	r3, #1
 800f740:	6103      	str	r3, [r0, #16]
 800f742:	dd16      	ble.n	800f772 <__s2b+0x72>
 800f744:	f104 0909 	add.w	r9, r4, #9
 800f748:	46c8      	mov	r8, r9
 800f74a:	442c      	add	r4, r5
 800f74c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f750:	4601      	mov	r1, r0
 800f752:	3b30      	subs	r3, #48	; 0x30
 800f754:	220a      	movs	r2, #10
 800f756:	4630      	mov	r0, r6
 800f758:	f7ff ff8c 	bl	800f674 <__multadd>
 800f75c:	45a0      	cmp	r8, r4
 800f75e:	d1f5      	bne.n	800f74c <__s2b+0x4c>
 800f760:	f1a5 0408 	sub.w	r4, r5, #8
 800f764:	444c      	add	r4, r9
 800f766:	1b2d      	subs	r5, r5, r4
 800f768:	1963      	adds	r3, r4, r5
 800f76a:	42bb      	cmp	r3, r7
 800f76c:	db04      	blt.n	800f778 <__s2b+0x78>
 800f76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f772:	340a      	adds	r4, #10
 800f774:	2509      	movs	r5, #9
 800f776:	e7f6      	b.n	800f766 <__s2b+0x66>
 800f778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f77c:	4601      	mov	r1, r0
 800f77e:	3b30      	subs	r3, #48	; 0x30
 800f780:	220a      	movs	r2, #10
 800f782:	4630      	mov	r0, r6
 800f784:	f7ff ff76 	bl	800f674 <__multadd>
 800f788:	e7ee      	b.n	800f768 <__s2b+0x68>
 800f78a:	bf00      	nop
 800f78c:	080112fe 	.word	0x080112fe
 800f790:	0801136f 	.word	0x0801136f

0800f794 <__hi0bits>:
 800f794:	0c03      	lsrs	r3, r0, #16
 800f796:	041b      	lsls	r3, r3, #16
 800f798:	b9d3      	cbnz	r3, 800f7d0 <__hi0bits+0x3c>
 800f79a:	0400      	lsls	r0, r0, #16
 800f79c:	2310      	movs	r3, #16
 800f79e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7a2:	bf04      	itt	eq
 800f7a4:	0200      	lsleq	r0, r0, #8
 800f7a6:	3308      	addeq	r3, #8
 800f7a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f7ac:	bf04      	itt	eq
 800f7ae:	0100      	lsleq	r0, r0, #4
 800f7b0:	3304      	addeq	r3, #4
 800f7b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f7b6:	bf04      	itt	eq
 800f7b8:	0080      	lsleq	r0, r0, #2
 800f7ba:	3302      	addeq	r3, #2
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	db05      	blt.n	800f7cc <__hi0bits+0x38>
 800f7c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7c4:	f103 0301 	add.w	r3, r3, #1
 800f7c8:	bf08      	it	eq
 800f7ca:	2320      	moveq	r3, #32
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	4770      	bx	lr
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	e7e4      	b.n	800f79e <__hi0bits+0xa>

0800f7d4 <__lo0bits>:
 800f7d4:	6803      	ldr	r3, [r0, #0]
 800f7d6:	f013 0207 	ands.w	r2, r3, #7
 800f7da:	d00c      	beq.n	800f7f6 <__lo0bits+0x22>
 800f7dc:	07d9      	lsls	r1, r3, #31
 800f7de:	d422      	bmi.n	800f826 <__lo0bits+0x52>
 800f7e0:	079a      	lsls	r2, r3, #30
 800f7e2:	bf49      	itett	mi
 800f7e4:	085b      	lsrmi	r3, r3, #1
 800f7e6:	089b      	lsrpl	r3, r3, #2
 800f7e8:	6003      	strmi	r3, [r0, #0]
 800f7ea:	2201      	movmi	r2, #1
 800f7ec:	bf5c      	itt	pl
 800f7ee:	6003      	strpl	r3, [r0, #0]
 800f7f0:	2202      	movpl	r2, #2
 800f7f2:	4610      	mov	r0, r2
 800f7f4:	4770      	bx	lr
 800f7f6:	b299      	uxth	r1, r3
 800f7f8:	b909      	cbnz	r1, 800f7fe <__lo0bits+0x2a>
 800f7fa:	0c1b      	lsrs	r3, r3, #16
 800f7fc:	2210      	movs	r2, #16
 800f7fe:	b2d9      	uxtb	r1, r3
 800f800:	b909      	cbnz	r1, 800f806 <__lo0bits+0x32>
 800f802:	3208      	adds	r2, #8
 800f804:	0a1b      	lsrs	r3, r3, #8
 800f806:	0719      	lsls	r1, r3, #28
 800f808:	bf04      	itt	eq
 800f80a:	091b      	lsreq	r3, r3, #4
 800f80c:	3204      	addeq	r2, #4
 800f80e:	0799      	lsls	r1, r3, #30
 800f810:	bf04      	itt	eq
 800f812:	089b      	lsreq	r3, r3, #2
 800f814:	3202      	addeq	r2, #2
 800f816:	07d9      	lsls	r1, r3, #31
 800f818:	d403      	bmi.n	800f822 <__lo0bits+0x4e>
 800f81a:	085b      	lsrs	r3, r3, #1
 800f81c:	f102 0201 	add.w	r2, r2, #1
 800f820:	d003      	beq.n	800f82a <__lo0bits+0x56>
 800f822:	6003      	str	r3, [r0, #0]
 800f824:	e7e5      	b.n	800f7f2 <__lo0bits+0x1e>
 800f826:	2200      	movs	r2, #0
 800f828:	e7e3      	b.n	800f7f2 <__lo0bits+0x1e>
 800f82a:	2220      	movs	r2, #32
 800f82c:	e7e1      	b.n	800f7f2 <__lo0bits+0x1e>
	...

0800f830 <__i2b>:
 800f830:	b510      	push	{r4, lr}
 800f832:	460c      	mov	r4, r1
 800f834:	2101      	movs	r1, #1
 800f836:	f7ff febb 	bl	800f5b0 <_Balloc>
 800f83a:	4602      	mov	r2, r0
 800f83c:	b928      	cbnz	r0, 800f84a <__i2b+0x1a>
 800f83e:	4b05      	ldr	r3, [pc, #20]	; (800f854 <__i2b+0x24>)
 800f840:	4805      	ldr	r0, [pc, #20]	; (800f858 <__i2b+0x28>)
 800f842:	f240 1145 	movw	r1, #325	; 0x145
 800f846:	f7ff fa2b 	bl	800eca0 <__assert_func>
 800f84a:	2301      	movs	r3, #1
 800f84c:	6144      	str	r4, [r0, #20]
 800f84e:	6103      	str	r3, [r0, #16]
 800f850:	bd10      	pop	{r4, pc}
 800f852:	bf00      	nop
 800f854:	080112fe 	.word	0x080112fe
 800f858:	0801136f 	.word	0x0801136f

0800f85c <__multiply>:
 800f85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f860:	4691      	mov	r9, r2
 800f862:	690a      	ldr	r2, [r1, #16]
 800f864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f868:	429a      	cmp	r2, r3
 800f86a:	bfb8      	it	lt
 800f86c:	460b      	movlt	r3, r1
 800f86e:	460c      	mov	r4, r1
 800f870:	bfbc      	itt	lt
 800f872:	464c      	movlt	r4, r9
 800f874:	4699      	movlt	r9, r3
 800f876:	6927      	ldr	r7, [r4, #16]
 800f878:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f87c:	68a3      	ldr	r3, [r4, #8]
 800f87e:	6861      	ldr	r1, [r4, #4]
 800f880:	eb07 060a 	add.w	r6, r7, sl
 800f884:	42b3      	cmp	r3, r6
 800f886:	b085      	sub	sp, #20
 800f888:	bfb8      	it	lt
 800f88a:	3101      	addlt	r1, #1
 800f88c:	f7ff fe90 	bl	800f5b0 <_Balloc>
 800f890:	b930      	cbnz	r0, 800f8a0 <__multiply+0x44>
 800f892:	4602      	mov	r2, r0
 800f894:	4b44      	ldr	r3, [pc, #272]	; (800f9a8 <__multiply+0x14c>)
 800f896:	4845      	ldr	r0, [pc, #276]	; (800f9ac <__multiply+0x150>)
 800f898:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f89c:	f7ff fa00 	bl	800eca0 <__assert_func>
 800f8a0:	f100 0514 	add.w	r5, r0, #20
 800f8a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8a8:	462b      	mov	r3, r5
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	4543      	cmp	r3, r8
 800f8ae:	d321      	bcc.n	800f8f4 <__multiply+0x98>
 800f8b0:	f104 0314 	add.w	r3, r4, #20
 800f8b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f8b8:	f109 0314 	add.w	r3, r9, #20
 800f8bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f8c0:	9202      	str	r2, [sp, #8]
 800f8c2:	1b3a      	subs	r2, r7, r4
 800f8c4:	3a15      	subs	r2, #21
 800f8c6:	f022 0203 	bic.w	r2, r2, #3
 800f8ca:	3204      	adds	r2, #4
 800f8cc:	f104 0115 	add.w	r1, r4, #21
 800f8d0:	428f      	cmp	r7, r1
 800f8d2:	bf38      	it	cc
 800f8d4:	2204      	movcc	r2, #4
 800f8d6:	9201      	str	r2, [sp, #4]
 800f8d8:	9a02      	ldr	r2, [sp, #8]
 800f8da:	9303      	str	r3, [sp, #12]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d80c      	bhi.n	800f8fa <__multiply+0x9e>
 800f8e0:	2e00      	cmp	r6, #0
 800f8e2:	dd03      	ble.n	800f8ec <__multiply+0x90>
 800f8e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d05b      	beq.n	800f9a4 <__multiply+0x148>
 800f8ec:	6106      	str	r6, [r0, #16]
 800f8ee:	b005      	add	sp, #20
 800f8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f4:	f843 2b04 	str.w	r2, [r3], #4
 800f8f8:	e7d8      	b.n	800f8ac <__multiply+0x50>
 800f8fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800f8fe:	f1ba 0f00 	cmp.w	sl, #0
 800f902:	d024      	beq.n	800f94e <__multiply+0xf2>
 800f904:	f104 0e14 	add.w	lr, r4, #20
 800f908:	46a9      	mov	r9, r5
 800f90a:	f04f 0c00 	mov.w	ip, #0
 800f90e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f912:	f8d9 1000 	ldr.w	r1, [r9]
 800f916:	fa1f fb82 	uxth.w	fp, r2
 800f91a:	b289      	uxth	r1, r1
 800f91c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f920:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f924:	f8d9 2000 	ldr.w	r2, [r9]
 800f928:	4461      	add	r1, ip
 800f92a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f92e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f932:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f936:	b289      	uxth	r1, r1
 800f938:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f93c:	4577      	cmp	r7, lr
 800f93e:	f849 1b04 	str.w	r1, [r9], #4
 800f942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f946:	d8e2      	bhi.n	800f90e <__multiply+0xb2>
 800f948:	9a01      	ldr	r2, [sp, #4]
 800f94a:	f845 c002 	str.w	ip, [r5, r2]
 800f94e:	9a03      	ldr	r2, [sp, #12]
 800f950:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f954:	3304      	adds	r3, #4
 800f956:	f1b9 0f00 	cmp.w	r9, #0
 800f95a:	d021      	beq.n	800f9a0 <__multiply+0x144>
 800f95c:	6829      	ldr	r1, [r5, #0]
 800f95e:	f104 0c14 	add.w	ip, r4, #20
 800f962:	46ae      	mov	lr, r5
 800f964:	f04f 0a00 	mov.w	sl, #0
 800f968:	f8bc b000 	ldrh.w	fp, [ip]
 800f96c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f970:	fb09 220b 	mla	r2, r9, fp, r2
 800f974:	4452      	add	r2, sl
 800f976:	b289      	uxth	r1, r1
 800f978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f97c:	f84e 1b04 	str.w	r1, [lr], #4
 800f980:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f984:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f988:	f8be 1000 	ldrh.w	r1, [lr]
 800f98c:	fb09 110a 	mla	r1, r9, sl, r1
 800f990:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f994:	4567      	cmp	r7, ip
 800f996:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f99a:	d8e5      	bhi.n	800f968 <__multiply+0x10c>
 800f99c:	9a01      	ldr	r2, [sp, #4]
 800f99e:	50a9      	str	r1, [r5, r2]
 800f9a0:	3504      	adds	r5, #4
 800f9a2:	e799      	b.n	800f8d8 <__multiply+0x7c>
 800f9a4:	3e01      	subs	r6, #1
 800f9a6:	e79b      	b.n	800f8e0 <__multiply+0x84>
 800f9a8:	080112fe 	.word	0x080112fe
 800f9ac:	0801136f 	.word	0x0801136f

0800f9b0 <__pow5mult>:
 800f9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9b4:	4615      	mov	r5, r2
 800f9b6:	f012 0203 	ands.w	r2, r2, #3
 800f9ba:	4606      	mov	r6, r0
 800f9bc:	460f      	mov	r7, r1
 800f9be:	d007      	beq.n	800f9d0 <__pow5mult+0x20>
 800f9c0:	4c25      	ldr	r4, [pc, #148]	; (800fa58 <__pow5mult+0xa8>)
 800f9c2:	3a01      	subs	r2, #1
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9ca:	f7ff fe53 	bl	800f674 <__multadd>
 800f9ce:	4607      	mov	r7, r0
 800f9d0:	10ad      	asrs	r5, r5, #2
 800f9d2:	d03d      	beq.n	800fa50 <__pow5mult+0xa0>
 800f9d4:	69f4      	ldr	r4, [r6, #28]
 800f9d6:	b97c      	cbnz	r4, 800f9f8 <__pow5mult+0x48>
 800f9d8:	2010      	movs	r0, #16
 800f9da:	f7ff fd23 	bl	800f424 <malloc>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	61f0      	str	r0, [r6, #28]
 800f9e2:	b928      	cbnz	r0, 800f9f0 <__pow5mult+0x40>
 800f9e4:	4b1d      	ldr	r3, [pc, #116]	; (800fa5c <__pow5mult+0xac>)
 800f9e6:	481e      	ldr	r0, [pc, #120]	; (800fa60 <__pow5mult+0xb0>)
 800f9e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f9ec:	f7ff f958 	bl	800eca0 <__assert_func>
 800f9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9f4:	6004      	str	r4, [r0, #0]
 800f9f6:	60c4      	str	r4, [r0, #12]
 800f9f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f9fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa00:	b94c      	cbnz	r4, 800fa16 <__pow5mult+0x66>
 800fa02:	f240 2171 	movw	r1, #625	; 0x271
 800fa06:	4630      	mov	r0, r6
 800fa08:	f7ff ff12 	bl	800f830 <__i2b>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa12:	4604      	mov	r4, r0
 800fa14:	6003      	str	r3, [r0, #0]
 800fa16:	f04f 0900 	mov.w	r9, #0
 800fa1a:	07eb      	lsls	r3, r5, #31
 800fa1c:	d50a      	bpl.n	800fa34 <__pow5mult+0x84>
 800fa1e:	4639      	mov	r1, r7
 800fa20:	4622      	mov	r2, r4
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7ff ff1a 	bl	800f85c <__multiply>
 800fa28:	4639      	mov	r1, r7
 800fa2a:	4680      	mov	r8, r0
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f7ff fdff 	bl	800f630 <_Bfree>
 800fa32:	4647      	mov	r7, r8
 800fa34:	106d      	asrs	r5, r5, #1
 800fa36:	d00b      	beq.n	800fa50 <__pow5mult+0xa0>
 800fa38:	6820      	ldr	r0, [r4, #0]
 800fa3a:	b938      	cbnz	r0, 800fa4c <__pow5mult+0x9c>
 800fa3c:	4622      	mov	r2, r4
 800fa3e:	4621      	mov	r1, r4
 800fa40:	4630      	mov	r0, r6
 800fa42:	f7ff ff0b 	bl	800f85c <__multiply>
 800fa46:	6020      	str	r0, [r4, #0]
 800fa48:	f8c0 9000 	str.w	r9, [r0]
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	e7e4      	b.n	800fa1a <__pow5mult+0x6a>
 800fa50:	4638      	mov	r0, r7
 800fa52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa56:	bf00      	nop
 800fa58:	080114b8 	.word	0x080114b8
 800fa5c:	08011249 	.word	0x08011249
 800fa60:	0801136f 	.word	0x0801136f

0800fa64 <__lshift>:
 800fa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa68:	460c      	mov	r4, r1
 800fa6a:	6849      	ldr	r1, [r1, #4]
 800fa6c:	6923      	ldr	r3, [r4, #16]
 800fa6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa72:	68a3      	ldr	r3, [r4, #8]
 800fa74:	4607      	mov	r7, r0
 800fa76:	4691      	mov	r9, r2
 800fa78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa7c:	f108 0601 	add.w	r6, r8, #1
 800fa80:	42b3      	cmp	r3, r6
 800fa82:	db0b      	blt.n	800fa9c <__lshift+0x38>
 800fa84:	4638      	mov	r0, r7
 800fa86:	f7ff fd93 	bl	800f5b0 <_Balloc>
 800fa8a:	4605      	mov	r5, r0
 800fa8c:	b948      	cbnz	r0, 800faa2 <__lshift+0x3e>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	4b28      	ldr	r3, [pc, #160]	; (800fb34 <__lshift+0xd0>)
 800fa92:	4829      	ldr	r0, [pc, #164]	; (800fb38 <__lshift+0xd4>)
 800fa94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fa98:	f7ff f902 	bl	800eca0 <__assert_func>
 800fa9c:	3101      	adds	r1, #1
 800fa9e:	005b      	lsls	r3, r3, #1
 800faa0:	e7ee      	b.n	800fa80 <__lshift+0x1c>
 800faa2:	2300      	movs	r3, #0
 800faa4:	f100 0114 	add.w	r1, r0, #20
 800faa8:	f100 0210 	add.w	r2, r0, #16
 800faac:	4618      	mov	r0, r3
 800faae:	4553      	cmp	r3, sl
 800fab0:	db33      	blt.n	800fb1a <__lshift+0xb6>
 800fab2:	6920      	ldr	r0, [r4, #16]
 800fab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fab8:	f104 0314 	add.w	r3, r4, #20
 800fabc:	f019 091f 	ands.w	r9, r9, #31
 800fac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fac8:	d02b      	beq.n	800fb22 <__lshift+0xbe>
 800faca:	f1c9 0e20 	rsb	lr, r9, #32
 800face:	468a      	mov	sl, r1
 800fad0:	2200      	movs	r2, #0
 800fad2:	6818      	ldr	r0, [r3, #0]
 800fad4:	fa00 f009 	lsl.w	r0, r0, r9
 800fad8:	4310      	orrs	r0, r2
 800fada:	f84a 0b04 	str.w	r0, [sl], #4
 800fade:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae2:	459c      	cmp	ip, r3
 800fae4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fae8:	d8f3      	bhi.n	800fad2 <__lshift+0x6e>
 800faea:	ebac 0304 	sub.w	r3, ip, r4
 800faee:	3b15      	subs	r3, #21
 800faf0:	f023 0303 	bic.w	r3, r3, #3
 800faf4:	3304      	adds	r3, #4
 800faf6:	f104 0015 	add.w	r0, r4, #21
 800fafa:	4584      	cmp	ip, r0
 800fafc:	bf38      	it	cc
 800fafe:	2304      	movcc	r3, #4
 800fb00:	50ca      	str	r2, [r1, r3]
 800fb02:	b10a      	cbz	r2, 800fb08 <__lshift+0xa4>
 800fb04:	f108 0602 	add.w	r6, r8, #2
 800fb08:	3e01      	subs	r6, #1
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	612e      	str	r6, [r5, #16]
 800fb0e:	4621      	mov	r1, r4
 800fb10:	f7ff fd8e 	bl	800f630 <_Bfree>
 800fb14:	4628      	mov	r0, r5
 800fb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb1e:	3301      	adds	r3, #1
 800fb20:	e7c5      	b.n	800faae <__lshift+0x4a>
 800fb22:	3904      	subs	r1, #4
 800fb24:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb28:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb2c:	459c      	cmp	ip, r3
 800fb2e:	d8f9      	bhi.n	800fb24 <__lshift+0xc0>
 800fb30:	e7ea      	b.n	800fb08 <__lshift+0xa4>
 800fb32:	bf00      	nop
 800fb34:	080112fe 	.word	0x080112fe
 800fb38:	0801136f 	.word	0x0801136f

0800fb3c <__mcmp>:
 800fb3c:	b530      	push	{r4, r5, lr}
 800fb3e:	6902      	ldr	r2, [r0, #16]
 800fb40:	690c      	ldr	r4, [r1, #16]
 800fb42:	1b12      	subs	r2, r2, r4
 800fb44:	d10e      	bne.n	800fb64 <__mcmp+0x28>
 800fb46:	f100 0314 	add.w	r3, r0, #20
 800fb4a:	3114      	adds	r1, #20
 800fb4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb5c:	42a5      	cmp	r5, r4
 800fb5e:	d003      	beq.n	800fb68 <__mcmp+0x2c>
 800fb60:	d305      	bcc.n	800fb6e <__mcmp+0x32>
 800fb62:	2201      	movs	r2, #1
 800fb64:	4610      	mov	r0, r2
 800fb66:	bd30      	pop	{r4, r5, pc}
 800fb68:	4283      	cmp	r3, r0
 800fb6a:	d3f3      	bcc.n	800fb54 <__mcmp+0x18>
 800fb6c:	e7fa      	b.n	800fb64 <__mcmp+0x28>
 800fb6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb72:	e7f7      	b.n	800fb64 <__mcmp+0x28>

0800fb74 <__mdiff>:
 800fb74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb78:	460c      	mov	r4, r1
 800fb7a:	4606      	mov	r6, r0
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	4620      	mov	r0, r4
 800fb80:	4690      	mov	r8, r2
 800fb82:	f7ff ffdb 	bl	800fb3c <__mcmp>
 800fb86:	1e05      	subs	r5, r0, #0
 800fb88:	d110      	bne.n	800fbac <__mdiff+0x38>
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f7ff fd0f 	bl	800f5b0 <_Balloc>
 800fb92:	b930      	cbnz	r0, 800fba2 <__mdiff+0x2e>
 800fb94:	4b3a      	ldr	r3, [pc, #232]	; (800fc80 <__mdiff+0x10c>)
 800fb96:	4602      	mov	r2, r0
 800fb98:	f240 2137 	movw	r1, #567	; 0x237
 800fb9c:	4839      	ldr	r0, [pc, #228]	; (800fc84 <__mdiff+0x110>)
 800fb9e:	f7ff f87f 	bl	800eca0 <__assert_func>
 800fba2:	2301      	movs	r3, #1
 800fba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbac:	bfa4      	itt	ge
 800fbae:	4643      	movge	r3, r8
 800fbb0:	46a0      	movge	r8, r4
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fbb8:	bfa6      	itte	ge
 800fbba:	461c      	movge	r4, r3
 800fbbc:	2500      	movge	r5, #0
 800fbbe:	2501      	movlt	r5, #1
 800fbc0:	f7ff fcf6 	bl	800f5b0 <_Balloc>
 800fbc4:	b920      	cbnz	r0, 800fbd0 <__mdiff+0x5c>
 800fbc6:	4b2e      	ldr	r3, [pc, #184]	; (800fc80 <__mdiff+0x10c>)
 800fbc8:	4602      	mov	r2, r0
 800fbca:	f240 2145 	movw	r1, #581	; 0x245
 800fbce:	e7e5      	b.n	800fb9c <__mdiff+0x28>
 800fbd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fbd4:	6926      	ldr	r6, [r4, #16]
 800fbd6:	60c5      	str	r5, [r0, #12]
 800fbd8:	f104 0914 	add.w	r9, r4, #20
 800fbdc:	f108 0514 	add.w	r5, r8, #20
 800fbe0:	f100 0e14 	add.w	lr, r0, #20
 800fbe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fbe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fbec:	f108 0210 	add.w	r2, r8, #16
 800fbf0:	46f2      	mov	sl, lr
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fbfc:	fa11 f88b 	uxtah	r8, r1, fp
 800fc00:	b299      	uxth	r1, r3
 800fc02:	0c1b      	lsrs	r3, r3, #16
 800fc04:	eba8 0801 	sub.w	r8, r8, r1
 800fc08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc10:	fa1f f888 	uxth.w	r8, r8
 800fc14:	1419      	asrs	r1, r3, #16
 800fc16:	454e      	cmp	r6, r9
 800fc18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc1c:	f84a 3b04 	str.w	r3, [sl], #4
 800fc20:	d8e8      	bhi.n	800fbf4 <__mdiff+0x80>
 800fc22:	1b33      	subs	r3, r6, r4
 800fc24:	3b15      	subs	r3, #21
 800fc26:	f023 0303 	bic.w	r3, r3, #3
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	3415      	adds	r4, #21
 800fc2e:	42a6      	cmp	r6, r4
 800fc30:	bf38      	it	cc
 800fc32:	2304      	movcc	r3, #4
 800fc34:	441d      	add	r5, r3
 800fc36:	4473      	add	r3, lr
 800fc38:	469e      	mov	lr, r3
 800fc3a:	462e      	mov	r6, r5
 800fc3c:	4566      	cmp	r6, ip
 800fc3e:	d30e      	bcc.n	800fc5e <__mdiff+0xea>
 800fc40:	f10c 0203 	add.w	r2, ip, #3
 800fc44:	1b52      	subs	r2, r2, r5
 800fc46:	f022 0203 	bic.w	r2, r2, #3
 800fc4a:	3d03      	subs	r5, #3
 800fc4c:	45ac      	cmp	ip, r5
 800fc4e:	bf38      	it	cc
 800fc50:	2200      	movcc	r2, #0
 800fc52:	4413      	add	r3, r2
 800fc54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc58:	b17a      	cbz	r2, 800fc7a <__mdiff+0x106>
 800fc5a:	6107      	str	r7, [r0, #16]
 800fc5c:	e7a4      	b.n	800fba8 <__mdiff+0x34>
 800fc5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800fc62:	fa11 f288 	uxtah	r2, r1, r8
 800fc66:	1414      	asrs	r4, r2, #16
 800fc68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fc6c:	b292      	uxth	r2, r2
 800fc6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fc72:	f84e 2b04 	str.w	r2, [lr], #4
 800fc76:	1421      	asrs	r1, r4, #16
 800fc78:	e7e0      	b.n	800fc3c <__mdiff+0xc8>
 800fc7a:	3f01      	subs	r7, #1
 800fc7c:	e7ea      	b.n	800fc54 <__mdiff+0xe0>
 800fc7e:	bf00      	nop
 800fc80:	080112fe 	.word	0x080112fe
 800fc84:	0801136f 	.word	0x0801136f

0800fc88 <__ulp>:
 800fc88:	b082      	sub	sp, #8
 800fc8a:	ed8d 0b00 	vstr	d0, [sp]
 800fc8e:	9a01      	ldr	r2, [sp, #4]
 800fc90:	4b0f      	ldr	r3, [pc, #60]	; (800fcd0 <__ulp+0x48>)
 800fc92:	4013      	ands	r3, r2
 800fc94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	dc08      	bgt.n	800fcae <__ulp+0x26>
 800fc9c:	425b      	negs	r3, r3
 800fc9e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800fca2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fca6:	da04      	bge.n	800fcb2 <__ulp+0x2a>
 800fca8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fcac:	4113      	asrs	r3, r2
 800fcae:	2200      	movs	r2, #0
 800fcb0:	e008      	b.n	800fcc4 <__ulp+0x3c>
 800fcb2:	f1a2 0314 	sub.w	r3, r2, #20
 800fcb6:	2b1e      	cmp	r3, #30
 800fcb8:	bfda      	itte	le
 800fcba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fcbe:	40da      	lsrle	r2, r3
 800fcc0:	2201      	movgt	r2, #1
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	4610      	mov	r0, r2
 800fcc8:	ec41 0b10 	vmov	d0, r0, r1
 800fccc:	b002      	add	sp, #8
 800fcce:	4770      	bx	lr
 800fcd0:	7ff00000 	.word	0x7ff00000

0800fcd4 <__b2d>:
 800fcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd8:	6906      	ldr	r6, [r0, #16]
 800fcda:	f100 0814 	add.w	r8, r0, #20
 800fcde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fce2:	1f37      	subs	r7, r6, #4
 800fce4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fce8:	4610      	mov	r0, r2
 800fcea:	f7ff fd53 	bl	800f794 <__hi0bits>
 800fcee:	f1c0 0320 	rsb	r3, r0, #32
 800fcf2:	280a      	cmp	r0, #10
 800fcf4:	600b      	str	r3, [r1, #0]
 800fcf6:	491b      	ldr	r1, [pc, #108]	; (800fd64 <__b2d+0x90>)
 800fcf8:	dc15      	bgt.n	800fd26 <__b2d+0x52>
 800fcfa:	f1c0 0c0b 	rsb	ip, r0, #11
 800fcfe:	fa22 f30c 	lsr.w	r3, r2, ip
 800fd02:	45b8      	cmp	r8, r7
 800fd04:	ea43 0501 	orr.w	r5, r3, r1
 800fd08:	bf34      	ite	cc
 800fd0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fd0e:	2300      	movcs	r3, #0
 800fd10:	3015      	adds	r0, #21
 800fd12:	fa02 f000 	lsl.w	r0, r2, r0
 800fd16:	fa23 f30c 	lsr.w	r3, r3, ip
 800fd1a:	4303      	orrs	r3, r0
 800fd1c:	461c      	mov	r4, r3
 800fd1e:	ec45 4b10 	vmov	d0, r4, r5
 800fd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd26:	45b8      	cmp	r8, r7
 800fd28:	bf3a      	itte	cc
 800fd2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fd2e:	f1a6 0708 	subcc.w	r7, r6, #8
 800fd32:	2300      	movcs	r3, #0
 800fd34:	380b      	subs	r0, #11
 800fd36:	d012      	beq.n	800fd5e <__b2d+0x8a>
 800fd38:	f1c0 0120 	rsb	r1, r0, #32
 800fd3c:	fa23 f401 	lsr.w	r4, r3, r1
 800fd40:	4082      	lsls	r2, r0
 800fd42:	4322      	orrs	r2, r4
 800fd44:	4547      	cmp	r7, r8
 800fd46:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fd4a:	bf8c      	ite	hi
 800fd4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fd50:	2200      	movls	r2, #0
 800fd52:	4083      	lsls	r3, r0
 800fd54:	40ca      	lsrs	r2, r1
 800fd56:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	e7de      	b.n	800fd1c <__b2d+0x48>
 800fd5e:	ea42 0501 	orr.w	r5, r2, r1
 800fd62:	e7db      	b.n	800fd1c <__b2d+0x48>
 800fd64:	3ff00000 	.word	0x3ff00000

0800fd68 <__d2b>:
 800fd68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	2101      	movs	r1, #1
 800fd70:	ec59 8b10 	vmov	r8, r9, d0
 800fd74:	4616      	mov	r6, r2
 800fd76:	f7ff fc1b 	bl	800f5b0 <_Balloc>
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	b930      	cbnz	r0, 800fd8c <__d2b+0x24>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	4b24      	ldr	r3, [pc, #144]	; (800fe14 <__d2b+0xac>)
 800fd82:	4825      	ldr	r0, [pc, #148]	; (800fe18 <__d2b+0xb0>)
 800fd84:	f240 310f 	movw	r1, #783	; 0x30f
 800fd88:	f7fe ff8a 	bl	800eca0 <__assert_func>
 800fd8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd94:	bb2d      	cbnz	r5, 800fde2 <__d2b+0x7a>
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	f1b8 0300 	subs.w	r3, r8, #0
 800fd9c:	d026      	beq.n	800fdec <__d2b+0x84>
 800fd9e:	4668      	mov	r0, sp
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	f7ff fd17 	bl	800f7d4 <__lo0bits>
 800fda6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fdaa:	b1e8      	cbz	r0, 800fde8 <__d2b+0x80>
 800fdac:	f1c0 0320 	rsb	r3, r0, #32
 800fdb0:	fa02 f303 	lsl.w	r3, r2, r3
 800fdb4:	430b      	orrs	r3, r1
 800fdb6:	40c2      	lsrs	r2, r0
 800fdb8:	6163      	str	r3, [r4, #20]
 800fdba:	9201      	str	r2, [sp, #4]
 800fdbc:	9b01      	ldr	r3, [sp, #4]
 800fdbe:	61a3      	str	r3, [r4, #24]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	bf14      	ite	ne
 800fdc4:	2202      	movne	r2, #2
 800fdc6:	2201      	moveq	r2, #1
 800fdc8:	6122      	str	r2, [r4, #16]
 800fdca:	b1bd      	cbz	r5, 800fdfc <__d2b+0x94>
 800fdcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fdd0:	4405      	add	r5, r0
 800fdd2:	603d      	str	r5, [r7, #0]
 800fdd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fdd8:	6030      	str	r0, [r6, #0]
 800fdda:	4620      	mov	r0, r4
 800fddc:	b003      	add	sp, #12
 800fdde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fde2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fde6:	e7d6      	b.n	800fd96 <__d2b+0x2e>
 800fde8:	6161      	str	r1, [r4, #20]
 800fdea:	e7e7      	b.n	800fdbc <__d2b+0x54>
 800fdec:	a801      	add	r0, sp, #4
 800fdee:	f7ff fcf1 	bl	800f7d4 <__lo0bits>
 800fdf2:	9b01      	ldr	r3, [sp, #4]
 800fdf4:	6163      	str	r3, [r4, #20]
 800fdf6:	3020      	adds	r0, #32
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	e7e5      	b.n	800fdc8 <__d2b+0x60>
 800fdfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe04:	6038      	str	r0, [r7, #0]
 800fe06:	6918      	ldr	r0, [r3, #16]
 800fe08:	f7ff fcc4 	bl	800f794 <__hi0bits>
 800fe0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe10:	e7e2      	b.n	800fdd8 <__d2b+0x70>
 800fe12:	bf00      	nop
 800fe14:	080112fe 	.word	0x080112fe
 800fe18:	0801136f 	.word	0x0801136f

0800fe1c <__ratio>:
 800fe1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe20:	4688      	mov	r8, r1
 800fe22:	4669      	mov	r1, sp
 800fe24:	4681      	mov	r9, r0
 800fe26:	f7ff ff55 	bl	800fcd4 <__b2d>
 800fe2a:	a901      	add	r1, sp, #4
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	ec55 4b10 	vmov	r4, r5, d0
 800fe32:	f7ff ff4f 	bl	800fcd4 <__b2d>
 800fe36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fe3e:	eba3 0c02 	sub.w	ip, r3, r2
 800fe42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fe46:	1a9b      	subs	r3, r3, r2
 800fe48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fe4c:	ec51 0b10 	vmov	r0, r1, d0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	bfd6      	itet	le
 800fe54:	460a      	movle	r2, r1
 800fe56:	462a      	movgt	r2, r5
 800fe58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fe5c:	468b      	mov	fp, r1
 800fe5e:	462f      	mov	r7, r5
 800fe60:	bfd4      	ite	le
 800fe62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fe66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	ee10 2a10 	vmov	r2, s0
 800fe70:	465b      	mov	r3, fp
 800fe72:	4639      	mov	r1, r7
 800fe74:	f7f0 fcea 	bl	800084c <__aeabi_ddiv>
 800fe78:	ec41 0b10 	vmov	d0, r0, r1
 800fe7c:	b003      	add	sp, #12
 800fe7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe82 <__copybits>:
 800fe82:	3901      	subs	r1, #1
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	1149      	asrs	r1, r1, #5
 800fe88:	6914      	ldr	r4, [r2, #16]
 800fe8a:	3101      	adds	r1, #1
 800fe8c:	f102 0314 	add.w	r3, r2, #20
 800fe90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fe94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe98:	1f05      	subs	r5, r0, #4
 800fe9a:	42a3      	cmp	r3, r4
 800fe9c:	d30c      	bcc.n	800feb8 <__copybits+0x36>
 800fe9e:	1aa3      	subs	r3, r4, r2
 800fea0:	3b11      	subs	r3, #17
 800fea2:	f023 0303 	bic.w	r3, r3, #3
 800fea6:	3211      	adds	r2, #17
 800fea8:	42a2      	cmp	r2, r4
 800feaa:	bf88      	it	hi
 800feac:	2300      	movhi	r3, #0
 800feae:	4418      	add	r0, r3
 800feb0:	2300      	movs	r3, #0
 800feb2:	4288      	cmp	r0, r1
 800feb4:	d305      	bcc.n	800fec2 <__copybits+0x40>
 800feb6:	bd70      	pop	{r4, r5, r6, pc}
 800feb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800febc:	f845 6f04 	str.w	r6, [r5, #4]!
 800fec0:	e7eb      	b.n	800fe9a <__copybits+0x18>
 800fec2:	f840 3b04 	str.w	r3, [r0], #4
 800fec6:	e7f4      	b.n	800feb2 <__copybits+0x30>

0800fec8 <__any_on>:
 800fec8:	f100 0214 	add.w	r2, r0, #20
 800fecc:	6900      	ldr	r0, [r0, #16]
 800fece:	114b      	asrs	r3, r1, #5
 800fed0:	4298      	cmp	r0, r3
 800fed2:	b510      	push	{r4, lr}
 800fed4:	db11      	blt.n	800fefa <__any_on+0x32>
 800fed6:	dd0a      	ble.n	800feee <__any_on+0x26>
 800fed8:	f011 011f 	ands.w	r1, r1, #31
 800fedc:	d007      	beq.n	800feee <__any_on+0x26>
 800fede:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fee2:	fa24 f001 	lsr.w	r0, r4, r1
 800fee6:	fa00 f101 	lsl.w	r1, r0, r1
 800feea:	428c      	cmp	r4, r1
 800feec:	d10b      	bne.n	800ff06 <__any_on+0x3e>
 800feee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d803      	bhi.n	800fefe <__any_on+0x36>
 800fef6:	2000      	movs	r0, #0
 800fef8:	bd10      	pop	{r4, pc}
 800fefa:	4603      	mov	r3, r0
 800fefc:	e7f7      	b.n	800feee <__any_on+0x26>
 800fefe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff02:	2900      	cmp	r1, #0
 800ff04:	d0f5      	beq.n	800fef2 <__any_on+0x2a>
 800ff06:	2001      	movs	r0, #1
 800ff08:	e7f6      	b.n	800fef8 <__any_on+0x30>

0800ff0a <__ascii_wctomb>:
 800ff0a:	b149      	cbz	r1, 800ff20 <__ascii_wctomb+0x16>
 800ff0c:	2aff      	cmp	r2, #255	; 0xff
 800ff0e:	bf85      	ittet	hi
 800ff10:	238a      	movhi	r3, #138	; 0x8a
 800ff12:	6003      	strhi	r3, [r0, #0]
 800ff14:	700a      	strbls	r2, [r1, #0]
 800ff16:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff1a:	bf98      	it	ls
 800ff1c:	2001      	movls	r0, #1
 800ff1e:	4770      	bx	lr
 800ff20:	4608      	mov	r0, r1
 800ff22:	4770      	bx	lr

0800ff24 <__ssputs_r>:
 800ff24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff28:	688e      	ldr	r6, [r1, #8]
 800ff2a:	461f      	mov	r7, r3
 800ff2c:	42be      	cmp	r6, r7
 800ff2e:	680b      	ldr	r3, [r1, #0]
 800ff30:	4682      	mov	sl, r0
 800ff32:	460c      	mov	r4, r1
 800ff34:	4690      	mov	r8, r2
 800ff36:	d82c      	bhi.n	800ff92 <__ssputs_r+0x6e>
 800ff38:	898a      	ldrh	r2, [r1, #12]
 800ff3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff3e:	d026      	beq.n	800ff8e <__ssputs_r+0x6a>
 800ff40:	6965      	ldr	r5, [r4, #20]
 800ff42:	6909      	ldr	r1, [r1, #16]
 800ff44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff48:	eba3 0901 	sub.w	r9, r3, r1
 800ff4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff50:	1c7b      	adds	r3, r7, #1
 800ff52:	444b      	add	r3, r9
 800ff54:	106d      	asrs	r5, r5, #1
 800ff56:	429d      	cmp	r5, r3
 800ff58:	bf38      	it	cc
 800ff5a:	461d      	movcc	r5, r3
 800ff5c:	0553      	lsls	r3, r2, #21
 800ff5e:	d527      	bpl.n	800ffb0 <__ssputs_r+0x8c>
 800ff60:	4629      	mov	r1, r5
 800ff62:	f7ff fa87 	bl	800f474 <_malloc_r>
 800ff66:	4606      	mov	r6, r0
 800ff68:	b360      	cbz	r0, 800ffc4 <__ssputs_r+0xa0>
 800ff6a:	6921      	ldr	r1, [r4, #16]
 800ff6c:	464a      	mov	r2, r9
 800ff6e:	f7fe fe80 	bl	800ec72 <memcpy>
 800ff72:	89a3      	ldrh	r3, [r4, #12]
 800ff74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff7c:	81a3      	strh	r3, [r4, #12]
 800ff7e:	6126      	str	r6, [r4, #16]
 800ff80:	6165      	str	r5, [r4, #20]
 800ff82:	444e      	add	r6, r9
 800ff84:	eba5 0509 	sub.w	r5, r5, r9
 800ff88:	6026      	str	r6, [r4, #0]
 800ff8a:	60a5      	str	r5, [r4, #8]
 800ff8c:	463e      	mov	r6, r7
 800ff8e:	42be      	cmp	r6, r7
 800ff90:	d900      	bls.n	800ff94 <__ssputs_r+0x70>
 800ff92:	463e      	mov	r6, r7
 800ff94:	6820      	ldr	r0, [r4, #0]
 800ff96:	4632      	mov	r2, r6
 800ff98:	4641      	mov	r1, r8
 800ff9a:	f000 fd45 	bl	8010a28 <memmove>
 800ff9e:	68a3      	ldr	r3, [r4, #8]
 800ffa0:	1b9b      	subs	r3, r3, r6
 800ffa2:	60a3      	str	r3, [r4, #8]
 800ffa4:	6823      	ldr	r3, [r4, #0]
 800ffa6:	4433      	add	r3, r6
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	2000      	movs	r0, #0
 800ffac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb0:	462a      	mov	r2, r5
 800ffb2:	f000 fd80 	bl	8010ab6 <_realloc_r>
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	d1e0      	bne.n	800ff7e <__ssputs_r+0x5a>
 800ffbc:	6921      	ldr	r1, [r4, #16]
 800ffbe:	4650      	mov	r0, sl
 800ffc0:	f7fe fe8c 	bl	800ecdc <_free_r>
 800ffc4:	230c      	movs	r3, #12
 800ffc6:	f8ca 3000 	str.w	r3, [sl]
 800ffca:	89a3      	ldrh	r3, [r4, #12]
 800ffcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffd0:	81a3      	strh	r3, [r4, #12]
 800ffd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd6:	e7e9      	b.n	800ffac <__ssputs_r+0x88>

0800ffd8 <_svfiprintf_r>:
 800ffd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffdc:	4698      	mov	r8, r3
 800ffde:	898b      	ldrh	r3, [r1, #12]
 800ffe0:	061b      	lsls	r3, r3, #24
 800ffe2:	b09d      	sub	sp, #116	; 0x74
 800ffe4:	4607      	mov	r7, r0
 800ffe6:	460d      	mov	r5, r1
 800ffe8:	4614      	mov	r4, r2
 800ffea:	d50e      	bpl.n	801000a <_svfiprintf_r+0x32>
 800ffec:	690b      	ldr	r3, [r1, #16]
 800ffee:	b963      	cbnz	r3, 801000a <_svfiprintf_r+0x32>
 800fff0:	2140      	movs	r1, #64	; 0x40
 800fff2:	f7ff fa3f 	bl	800f474 <_malloc_r>
 800fff6:	6028      	str	r0, [r5, #0]
 800fff8:	6128      	str	r0, [r5, #16]
 800fffa:	b920      	cbnz	r0, 8010006 <_svfiprintf_r+0x2e>
 800fffc:	230c      	movs	r3, #12
 800fffe:	603b      	str	r3, [r7, #0]
 8010000:	f04f 30ff 	mov.w	r0, #4294967295
 8010004:	e0d0      	b.n	80101a8 <_svfiprintf_r+0x1d0>
 8010006:	2340      	movs	r3, #64	; 0x40
 8010008:	616b      	str	r3, [r5, #20]
 801000a:	2300      	movs	r3, #0
 801000c:	9309      	str	r3, [sp, #36]	; 0x24
 801000e:	2320      	movs	r3, #32
 8010010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010014:	f8cd 800c 	str.w	r8, [sp, #12]
 8010018:	2330      	movs	r3, #48	; 0x30
 801001a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80101c0 <_svfiprintf_r+0x1e8>
 801001e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010022:	f04f 0901 	mov.w	r9, #1
 8010026:	4623      	mov	r3, r4
 8010028:	469a      	mov	sl, r3
 801002a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801002e:	b10a      	cbz	r2, 8010034 <_svfiprintf_r+0x5c>
 8010030:	2a25      	cmp	r2, #37	; 0x25
 8010032:	d1f9      	bne.n	8010028 <_svfiprintf_r+0x50>
 8010034:	ebba 0b04 	subs.w	fp, sl, r4
 8010038:	d00b      	beq.n	8010052 <_svfiprintf_r+0x7a>
 801003a:	465b      	mov	r3, fp
 801003c:	4622      	mov	r2, r4
 801003e:	4629      	mov	r1, r5
 8010040:	4638      	mov	r0, r7
 8010042:	f7ff ff6f 	bl	800ff24 <__ssputs_r>
 8010046:	3001      	adds	r0, #1
 8010048:	f000 80a9 	beq.w	801019e <_svfiprintf_r+0x1c6>
 801004c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801004e:	445a      	add	r2, fp
 8010050:	9209      	str	r2, [sp, #36]	; 0x24
 8010052:	f89a 3000 	ldrb.w	r3, [sl]
 8010056:	2b00      	cmp	r3, #0
 8010058:	f000 80a1 	beq.w	801019e <_svfiprintf_r+0x1c6>
 801005c:	2300      	movs	r3, #0
 801005e:	f04f 32ff 	mov.w	r2, #4294967295
 8010062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010066:	f10a 0a01 	add.w	sl, sl, #1
 801006a:	9304      	str	r3, [sp, #16]
 801006c:	9307      	str	r3, [sp, #28]
 801006e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010072:	931a      	str	r3, [sp, #104]	; 0x68
 8010074:	4654      	mov	r4, sl
 8010076:	2205      	movs	r2, #5
 8010078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801007c:	4850      	ldr	r0, [pc, #320]	; (80101c0 <_svfiprintf_r+0x1e8>)
 801007e:	f7f0 f8af 	bl	80001e0 <memchr>
 8010082:	9a04      	ldr	r2, [sp, #16]
 8010084:	b9d8      	cbnz	r0, 80100be <_svfiprintf_r+0xe6>
 8010086:	06d0      	lsls	r0, r2, #27
 8010088:	bf44      	itt	mi
 801008a:	2320      	movmi	r3, #32
 801008c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010090:	0711      	lsls	r1, r2, #28
 8010092:	bf44      	itt	mi
 8010094:	232b      	movmi	r3, #43	; 0x2b
 8010096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801009a:	f89a 3000 	ldrb.w	r3, [sl]
 801009e:	2b2a      	cmp	r3, #42	; 0x2a
 80100a0:	d015      	beq.n	80100ce <_svfiprintf_r+0xf6>
 80100a2:	9a07      	ldr	r2, [sp, #28]
 80100a4:	4654      	mov	r4, sl
 80100a6:	2000      	movs	r0, #0
 80100a8:	f04f 0c0a 	mov.w	ip, #10
 80100ac:	4621      	mov	r1, r4
 80100ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100b2:	3b30      	subs	r3, #48	; 0x30
 80100b4:	2b09      	cmp	r3, #9
 80100b6:	d94d      	bls.n	8010154 <_svfiprintf_r+0x17c>
 80100b8:	b1b0      	cbz	r0, 80100e8 <_svfiprintf_r+0x110>
 80100ba:	9207      	str	r2, [sp, #28]
 80100bc:	e014      	b.n	80100e8 <_svfiprintf_r+0x110>
 80100be:	eba0 0308 	sub.w	r3, r0, r8
 80100c2:	fa09 f303 	lsl.w	r3, r9, r3
 80100c6:	4313      	orrs	r3, r2
 80100c8:	9304      	str	r3, [sp, #16]
 80100ca:	46a2      	mov	sl, r4
 80100cc:	e7d2      	b.n	8010074 <_svfiprintf_r+0x9c>
 80100ce:	9b03      	ldr	r3, [sp, #12]
 80100d0:	1d19      	adds	r1, r3, #4
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	9103      	str	r1, [sp, #12]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	bfbb      	ittet	lt
 80100da:	425b      	neglt	r3, r3
 80100dc:	f042 0202 	orrlt.w	r2, r2, #2
 80100e0:	9307      	strge	r3, [sp, #28]
 80100e2:	9307      	strlt	r3, [sp, #28]
 80100e4:	bfb8      	it	lt
 80100e6:	9204      	strlt	r2, [sp, #16]
 80100e8:	7823      	ldrb	r3, [r4, #0]
 80100ea:	2b2e      	cmp	r3, #46	; 0x2e
 80100ec:	d10c      	bne.n	8010108 <_svfiprintf_r+0x130>
 80100ee:	7863      	ldrb	r3, [r4, #1]
 80100f0:	2b2a      	cmp	r3, #42	; 0x2a
 80100f2:	d134      	bne.n	801015e <_svfiprintf_r+0x186>
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	1d1a      	adds	r2, r3, #4
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	9203      	str	r2, [sp, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfb8      	it	lt
 8010100:	f04f 33ff 	movlt.w	r3, #4294967295
 8010104:	3402      	adds	r4, #2
 8010106:	9305      	str	r3, [sp, #20]
 8010108:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80101d0 <_svfiprintf_r+0x1f8>
 801010c:	7821      	ldrb	r1, [r4, #0]
 801010e:	2203      	movs	r2, #3
 8010110:	4650      	mov	r0, sl
 8010112:	f7f0 f865 	bl	80001e0 <memchr>
 8010116:	b138      	cbz	r0, 8010128 <_svfiprintf_r+0x150>
 8010118:	9b04      	ldr	r3, [sp, #16]
 801011a:	eba0 000a 	sub.w	r0, r0, sl
 801011e:	2240      	movs	r2, #64	; 0x40
 8010120:	4082      	lsls	r2, r0
 8010122:	4313      	orrs	r3, r2
 8010124:	3401      	adds	r4, #1
 8010126:	9304      	str	r3, [sp, #16]
 8010128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801012c:	4825      	ldr	r0, [pc, #148]	; (80101c4 <_svfiprintf_r+0x1ec>)
 801012e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010132:	2206      	movs	r2, #6
 8010134:	f7f0 f854 	bl	80001e0 <memchr>
 8010138:	2800      	cmp	r0, #0
 801013a:	d038      	beq.n	80101ae <_svfiprintf_r+0x1d6>
 801013c:	4b22      	ldr	r3, [pc, #136]	; (80101c8 <_svfiprintf_r+0x1f0>)
 801013e:	bb1b      	cbnz	r3, 8010188 <_svfiprintf_r+0x1b0>
 8010140:	9b03      	ldr	r3, [sp, #12]
 8010142:	3307      	adds	r3, #7
 8010144:	f023 0307 	bic.w	r3, r3, #7
 8010148:	3308      	adds	r3, #8
 801014a:	9303      	str	r3, [sp, #12]
 801014c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801014e:	4433      	add	r3, r6
 8010150:	9309      	str	r3, [sp, #36]	; 0x24
 8010152:	e768      	b.n	8010026 <_svfiprintf_r+0x4e>
 8010154:	fb0c 3202 	mla	r2, ip, r2, r3
 8010158:	460c      	mov	r4, r1
 801015a:	2001      	movs	r0, #1
 801015c:	e7a6      	b.n	80100ac <_svfiprintf_r+0xd4>
 801015e:	2300      	movs	r3, #0
 8010160:	3401      	adds	r4, #1
 8010162:	9305      	str	r3, [sp, #20]
 8010164:	4619      	mov	r1, r3
 8010166:	f04f 0c0a 	mov.w	ip, #10
 801016a:	4620      	mov	r0, r4
 801016c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010170:	3a30      	subs	r2, #48	; 0x30
 8010172:	2a09      	cmp	r2, #9
 8010174:	d903      	bls.n	801017e <_svfiprintf_r+0x1a6>
 8010176:	2b00      	cmp	r3, #0
 8010178:	d0c6      	beq.n	8010108 <_svfiprintf_r+0x130>
 801017a:	9105      	str	r1, [sp, #20]
 801017c:	e7c4      	b.n	8010108 <_svfiprintf_r+0x130>
 801017e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010182:	4604      	mov	r4, r0
 8010184:	2301      	movs	r3, #1
 8010186:	e7f0      	b.n	801016a <_svfiprintf_r+0x192>
 8010188:	ab03      	add	r3, sp, #12
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	462a      	mov	r2, r5
 801018e:	4b0f      	ldr	r3, [pc, #60]	; (80101cc <_svfiprintf_r+0x1f4>)
 8010190:	a904      	add	r1, sp, #16
 8010192:	4638      	mov	r0, r7
 8010194:	f3af 8000 	nop.w
 8010198:	1c42      	adds	r2, r0, #1
 801019a:	4606      	mov	r6, r0
 801019c:	d1d6      	bne.n	801014c <_svfiprintf_r+0x174>
 801019e:	89ab      	ldrh	r3, [r5, #12]
 80101a0:	065b      	lsls	r3, r3, #25
 80101a2:	f53f af2d 	bmi.w	8010000 <_svfiprintf_r+0x28>
 80101a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101a8:	b01d      	add	sp, #116	; 0x74
 80101aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ae:	ab03      	add	r3, sp, #12
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	462a      	mov	r2, r5
 80101b4:	4b05      	ldr	r3, [pc, #20]	; (80101cc <_svfiprintf_r+0x1f4>)
 80101b6:	a904      	add	r1, sp, #16
 80101b8:	4638      	mov	r0, r7
 80101ba:	f000 f9bd 	bl	8010538 <_printf_i>
 80101be:	e7eb      	b.n	8010198 <_svfiprintf_r+0x1c0>
 80101c0:	080114c4 	.word	0x080114c4
 80101c4:	080114ce 	.word	0x080114ce
 80101c8:	00000000 	.word	0x00000000
 80101cc:	0800ff25 	.word	0x0800ff25
 80101d0:	080114ca 	.word	0x080114ca

080101d4 <__sfputc_r>:
 80101d4:	6893      	ldr	r3, [r2, #8]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	2b00      	cmp	r3, #0
 80101da:	b410      	push	{r4}
 80101dc:	6093      	str	r3, [r2, #8]
 80101de:	da08      	bge.n	80101f2 <__sfputc_r+0x1e>
 80101e0:	6994      	ldr	r4, [r2, #24]
 80101e2:	42a3      	cmp	r3, r4
 80101e4:	db01      	blt.n	80101ea <__sfputc_r+0x16>
 80101e6:	290a      	cmp	r1, #10
 80101e8:	d103      	bne.n	80101f2 <__sfputc_r+0x1e>
 80101ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101ee:	f000 bb85 	b.w	80108fc <__swbuf_r>
 80101f2:	6813      	ldr	r3, [r2, #0]
 80101f4:	1c58      	adds	r0, r3, #1
 80101f6:	6010      	str	r0, [r2, #0]
 80101f8:	7019      	strb	r1, [r3, #0]
 80101fa:	4608      	mov	r0, r1
 80101fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010200:	4770      	bx	lr

08010202 <__sfputs_r>:
 8010202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010204:	4606      	mov	r6, r0
 8010206:	460f      	mov	r7, r1
 8010208:	4614      	mov	r4, r2
 801020a:	18d5      	adds	r5, r2, r3
 801020c:	42ac      	cmp	r4, r5
 801020e:	d101      	bne.n	8010214 <__sfputs_r+0x12>
 8010210:	2000      	movs	r0, #0
 8010212:	e007      	b.n	8010224 <__sfputs_r+0x22>
 8010214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010218:	463a      	mov	r2, r7
 801021a:	4630      	mov	r0, r6
 801021c:	f7ff ffda 	bl	80101d4 <__sfputc_r>
 8010220:	1c43      	adds	r3, r0, #1
 8010222:	d1f3      	bne.n	801020c <__sfputs_r+0xa>
 8010224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010228 <_vfiprintf_r>:
 8010228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	460d      	mov	r5, r1
 801022e:	b09d      	sub	sp, #116	; 0x74
 8010230:	4614      	mov	r4, r2
 8010232:	4698      	mov	r8, r3
 8010234:	4606      	mov	r6, r0
 8010236:	b118      	cbz	r0, 8010240 <_vfiprintf_r+0x18>
 8010238:	6a03      	ldr	r3, [r0, #32]
 801023a:	b90b      	cbnz	r3, 8010240 <_vfiprintf_r+0x18>
 801023c:	f7fe fb58 	bl	800e8f0 <__sinit>
 8010240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010242:	07d9      	lsls	r1, r3, #31
 8010244:	d405      	bmi.n	8010252 <_vfiprintf_r+0x2a>
 8010246:	89ab      	ldrh	r3, [r5, #12]
 8010248:	059a      	lsls	r2, r3, #22
 801024a:	d402      	bmi.n	8010252 <_vfiprintf_r+0x2a>
 801024c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801024e:	f7fe fd0e 	bl	800ec6e <__retarget_lock_acquire_recursive>
 8010252:	89ab      	ldrh	r3, [r5, #12]
 8010254:	071b      	lsls	r3, r3, #28
 8010256:	d501      	bpl.n	801025c <_vfiprintf_r+0x34>
 8010258:	692b      	ldr	r3, [r5, #16]
 801025a:	b99b      	cbnz	r3, 8010284 <_vfiprintf_r+0x5c>
 801025c:	4629      	mov	r1, r5
 801025e:	4630      	mov	r0, r6
 8010260:	f000 fb8a 	bl	8010978 <__swsetup_r>
 8010264:	b170      	cbz	r0, 8010284 <_vfiprintf_r+0x5c>
 8010266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010268:	07dc      	lsls	r4, r3, #31
 801026a:	d504      	bpl.n	8010276 <_vfiprintf_r+0x4e>
 801026c:	f04f 30ff 	mov.w	r0, #4294967295
 8010270:	b01d      	add	sp, #116	; 0x74
 8010272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010276:	89ab      	ldrh	r3, [r5, #12]
 8010278:	0598      	lsls	r0, r3, #22
 801027a:	d4f7      	bmi.n	801026c <_vfiprintf_r+0x44>
 801027c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801027e:	f7fe fcf7 	bl	800ec70 <__retarget_lock_release_recursive>
 8010282:	e7f3      	b.n	801026c <_vfiprintf_r+0x44>
 8010284:	2300      	movs	r3, #0
 8010286:	9309      	str	r3, [sp, #36]	; 0x24
 8010288:	2320      	movs	r3, #32
 801028a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801028e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010292:	2330      	movs	r3, #48	; 0x30
 8010294:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010448 <_vfiprintf_r+0x220>
 8010298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801029c:	f04f 0901 	mov.w	r9, #1
 80102a0:	4623      	mov	r3, r4
 80102a2:	469a      	mov	sl, r3
 80102a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a8:	b10a      	cbz	r2, 80102ae <_vfiprintf_r+0x86>
 80102aa:	2a25      	cmp	r2, #37	; 0x25
 80102ac:	d1f9      	bne.n	80102a2 <_vfiprintf_r+0x7a>
 80102ae:	ebba 0b04 	subs.w	fp, sl, r4
 80102b2:	d00b      	beq.n	80102cc <_vfiprintf_r+0xa4>
 80102b4:	465b      	mov	r3, fp
 80102b6:	4622      	mov	r2, r4
 80102b8:	4629      	mov	r1, r5
 80102ba:	4630      	mov	r0, r6
 80102bc:	f7ff ffa1 	bl	8010202 <__sfputs_r>
 80102c0:	3001      	adds	r0, #1
 80102c2:	f000 80a9 	beq.w	8010418 <_vfiprintf_r+0x1f0>
 80102c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102c8:	445a      	add	r2, fp
 80102ca:	9209      	str	r2, [sp, #36]	; 0x24
 80102cc:	f89a 3000 	ldrb.w	r3, [sl]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 80a1 	beq.w	8010418 <_vfiprintf_r+0x1f0>
 80102d6:	2300      	movs	r3, #0
 80102d8:	f04f 32ff 	mov.w	r2, #4294967295
 80102dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102e0:	f10a 0a01 	add.w	sl, sl, #1
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	9307      	str	r3, [sp, #28]
 80102e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102ec:	931a      	str	r3, [sp, #104]	; 0x68
 80102ee:	4654      	mov	r4, sl
 80102f0:	2205      	movs	r2, #5
 80102f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102f6:	4854      	ldr	r0, [pc, #336]	; (8010448 <_vfiprintf_r+0x220>)
 80102f8:	f7ef ff72 	bl	80001e0 <memchr>
 80102fc:	9a04      	ldr	r2, [sp, #16]
 80102fe:	b9d8      	cbnz	r0, 8010338 <_vfiprintf_r+0x110>
 8010300:	06d1      	lsls	r1, r2, #27
 8010302:	bf44      	itt	mi
 8010304:	2320      	movmi	r3, #32
 8010306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801030a:	0713      	lsls	r3, r2, #28
 801030c:	bf44      	itt	mi
 801030e:	232b      	movmi	r3, #43	; 0x2b
 8010310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010314:	f89a 3000 	ldrb.w	r3, [sl]
 8010318:	2b2a      	cmp	r3, #42	; 0x2a
 801031a:	d015      	beq.n	8010348 <_vfiprintf_r+0x120>
 801031c:	9a07      	ldr	r2, [sp, #28]
 801031e:	4654      	mov	r4, sl
 8010320:	2000      	movs	r0, #0
 8010322:	f04f 0c0a 	mov.w	ip, #10
 8010326:	4621      	mov	r1, r4
 8010328:	f811 3b01 	ldrb.w	r3, [r1], #1
 801032c:	3b30      	subs	r3, #48	; 0x30
 801032e:	2b09      	cmp	r3, #9
 8010330:	d94d      	bls.n	80103ce <_vfiprintf_r+0x1a6>
 8010332:	b1b0      	cbz	r0, 8010362 <_vfiprintf_r+0x13a>
 8010334:	9207      	str	r2, [sp, #28]
 8010336:	e014      	b.n	8010362 <_vfiprintf_r+0x13a>
 8010338:	eba0 0308 	sub.w	r3, r0, r8
 801033c:	fa09 f303 	lsl.w	r3, r9, r3
 8010340:	4313      	orrs	r3, r2
 8010342:	9304      	str	r3, [sp, #16]
 8010344:	46a2      	mov	sl, r4
 8010346:	e7d2      	b.n	80102ee <_vfiprintf_r+0xc6>
 8010348:	9b03      	ldr	r3, [sp, #12]
 801034a:	1d19      	adds	r1, r3, #4
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	9103      	str	r1, [sp, #12]
 8010350:	2b00      	cmp	r3, #0
 8010352:	bfbb      	ittet	lt
 8010354:	425b      	neglt	r3, r3
 8010356:	f042 0202 	orrlt.w	r2, r2, #2
 801035a:	9307      	strge	r3, [sp, #28]
 801035c:	9307      	strlt	r3, [sp, #28]
 801035e:	bfb8      	it	lt
 8010360:	9204      	strlt	r2, [sp, #16]
 8010362:	7823      	ldrb	r3, [r4, #0]
 8010364:	2b2e      	cmp	r3, #46	; 0x2e
 8010366:	d10c      	bne.n	8010382 <_vfiprintf_r+0x15a>
 8010368:	7863      	ldrb	r3, [r4, #1]
 801036a:	2b2a      	cmp	r3, #42	; 0x2a
 801036c:	d134      	bne.n	80103d8 <_vfiprintf_r+0x1b0>
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	1d1a      	adds	r2, r3, #4
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	9203      	str	r2, [sp, #12]
 8010376:	2b00      	cmp	r3, #0
 8010378:	bfb8      	it	lt
 801037a:	f04f 33ff 	movlt.w	r3, #4294967295
 801037e:	3402      	adds	r4, #2
 8010380:	9305      	str	r3, [sp, #20]
 8010382:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010458 <_vfiprintf_r+0x230>
 8010386:	7821      	ldrb	r1, [r4, #0]
 8010388:	2203      	movs	r2, #3
 801038a:	4650      	mov	r0, sl
 801038c:	f7ef ff28 	bl	80001e0 <memchr>
 8010390:	b138      	cbz	r0, 80103a2 <_vfiprintf_r+0x17a>
 8010392:	9b04      	ldr	r3, [sp, #16]
 8010394:	eba0 000a 	sub.w	r0, r0, sl
 8010398:	2240      	movs	r2, #64	; 0x40
 801039a:	4082      	lsls	r2, r0
 801039c:	4313      	orrs	r3, r2
 801039e:	3401      	adds	r4, #1
 80103a0:	9304      	str	r3, [sp, #16]
 80103a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103a6:	4829      	ldr	r0, [pc, #164]	; (801044c <_vfiprintf_r+0x224>)
 80103a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103ac:	2206      	movs	r2, #6
 80103ae:	f7ef ff17 	bl	80001e0 <memchr>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d03f      	beq.n	8010436 <_vfiprintf_r+0x20e>
 80103b6:	4b26      	ldr	r3, [pc, #152]	; (8010450 <_vfiprintf_r+0x228>)
 80103b8:	bb1b      	cbnz	r3, 8010402 <_vfiprintf_r+0x1da>
 80103ba:	9b03      	ldr	r3, [sp, #12]
 80103bc:	3307      	adds	r3, #7
 80103be:	f023 0307 	bic.w	r3, r3, #7
 80103c2:	3308      	adds	r3, #8
 80103c4:	9303      	str	r3, [sp, #12]
 80103c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103c8:	443b      	add	r3, r7
 80103ca:	9309      	str	r3, [sp, #36]	; 0x24
 80103cc:	e768      	b.n	80102a0 <_vfiprintf_r+0x78>
 80103ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80103d2:	460c      	mov	r4, r1
 80103d4:	2001      	movs	r0, #1
 80103d6:	e7a6      	b.n	8010326 <_vfiprintf_r+0xfe>
 80103d8:	2300      	movs	r3, #0
 80103da:	3401      	adds	r4, #1
 80103dc:	9305      	str	r3, [sp, #20]
 80103de:	4619      	mov	r1, r3
 80103e0:	f04f 0c0a 	mov.w	ip, #10
 80103e4:	4620      	mov	r0, r4
 80103e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103ea:	3a30      	subs	r2, #48	; 0x30
 80103ec:	2a09      	cmp	r2, #9
 80103ee:	d903      	bls.n	80103f8 <_vfiprintf_r+0x1d0>
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d0c6      	beq.n	8010382 <_vfiprintf_r+0x15a>
 80103f4:	9105      	str	r1, [sp, #20]
 80103f6:	e7c4      	b.n	8010382 <_vfiprintf_r+0x15a>
 80103f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80103fc:	4604      	mov	r4, r0
 80103fe:	2301      	movs	r3, #1
 8010400:	e7f0      	b.n	80103e4 <_vfiprintf_r+0x1bc>
 8010402:	ab03      	add	r3, sp, #12
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	462a      	mov	r2, r5
 8010408:	4b12      	ldr	r3, [pc, #72]	; (8010454 <_vfiprintf_r+0x22c>)
 801040a:	a904      	add	r1, sp, #16
 801040c:	4630      	mov	r0, r6
 801040e:	f3af 8000 	nop.w
 8010412:	4607      	mov	r7, r0
 8010414:	1c78      	adds	r0, r7, #1
 8010416:	d1d6      	bne.n	80103c6 <_vfiprintf_r+0x19e>
 8010418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801041a:	07d9      	lsls	r1, r3, #31
 801041c:	d405      	bmi.n	801042a <_vfiprintf_r+0x202>
 801041e:	89ab      	ldrh	r3, [r5, #12]
 8010420:	059a      	lsls	r2, r3, #22
 8010422:	d402      	bmi.n	801042a <_vfiprintf_r+0x202>
 8010424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010426:	f7fe fc23 	bl	800ec70 <__retarget_lock_release_recursive>
 801042a:	89ab      	ldrh	r3, [r5, #12]
 801042c:	065b      	lsls	r3, r3, #25
 801042e:	f53f af1d 	bmi.w	801026c <_vfiprintf_r+0x44>
 8010432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010434:	e71c      	b.n	8010270 <_vfiprintf_r+0x48>
 8010436:	ab03      	add	r3, sp, #12
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	462a      	mov	r2, r5
 801043c:	4b05      	ldr	r3, [pc, #20]	; (8010454 <_vfiprintf_r+0x22c>)
 801043e:	a904      	add	r1, sp, #16
 8010440:	4630      	mov	r0, r6
 8010442:	f000 f879 	bl	8010538 <_printf_i>
 8010446:	e7e4      	b.n	8010412 <_vfiprintf_r+0x1ea>
 8010448:	080114c4 	.word	0x080114c4
 801044c:	080114ce 	.word	0x080114ce
 8010450:	00000000 	.word	0x00000000
 8010454:	08010203 	.word	0x08010203
 8010458:	080114ca 	.word	0x080114ca

0801045c <_printf_common>:
 801045c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010460:	4616      	mov	r6, r2
 8010462:	4699      	mov	r9, r3
 8010464:	688a      	ldr	r2, [r1, #8]
 8010466:	690b      	ldr	r3, [r1, #16]
 8010468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801046c:	4293      	cmp	r3, r2
 801046e:	bfb8      	it	lt
 8010470:	4613      	movlt	r3, r2
 8010472:	6033      	str	r3, [r6, #0]
 8010474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010478:	4607      	mov	r7, r0
 801047a:	460c      	mov	r4, r1
 801047c:	b10a      	cbz	r2, 8010482 <_printf_common+0x26>
 801047e:	3301      	adds	r3, #1
 8010480:	6033      	str	r3, [r6, #0]
 8010482:	6823      	ldr	r3, [r4, #0]
 8010484:	0699      	lsls	r1, r3, #26
 8010486:	bf42      	ittt	mi
 8010488:	6833      	ldrmi	r3, [r6, #0]
 801048a:	3302      	addmi	r3, #2
 801048c:	6033      	strmi	r3, [r6, #0]
 801048e:	6825      	ldr	r5, [r4, #0]
 8010490:	f015 0506 	ands.w	r5, r5, #6
 8010494:	d106      	bne.n	80104a4 <_printf_common+0x48>
 8010496:	f104 0a19 	add.w	sl, r4, #25
 801049a:	68e3      	ldr	r3, [r4, #12]
 801049c:	6832      	ldr	r2, [r6, #0]
 801049e:	1a9b      	subs	r3, r3, r2
 80104a0:	42ab      	cmp	r3, r5
 80104a2:	dc26      	bgt.n	80104f2 <_printf_common+0x96>
 80104a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104a8:	1e13      	subs	r3, r2, #0
 80104aa:	6822      	ldr	r2, [r4, #0]
 80104ac:	bf18      	it	ne
 80104ae:	2301      	movne	r3, #1
 80104b0:	0692      	lsls	r2, r2, #26
 80104b2:	d42b      	bmi.n	801050c <_printf_common+0xb0>
 80104b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104b8:	4649      	mov	r1, r9
 80104ba:	4638      	mov	r0, r7
 80104bc:	47c0      	blx	r8
 80104be:	3001      	adds	r0, #1
 80104c0:	d01e      	beq.n	8010500 <_printf_common+0xa4>
 80104c2:	6823      	ldr	r3, [r4, #0]
 80104c4:	6922      	ldr	r2, [r4, #16]
 80104c6:	f003 0306 	and.w	r3, r3, #6
 80104ca:	2b04      	cmp	r3, #4
 80104cc:	bf02      	ittt	eq
 80104ce:	68e5      	ldreq	r5, [r4, #12]
 80104d0:	6833      	ldreq	r3, [r6, #0]
 80104d2:	1aed      	subeq	r5, r5, r3
 80104d4:	68a3      	ldr	r3, [r4, #8]
 80104d6:	bf0c      	ite	eq
 80104d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104dc:	2500      	movne	r5, #0
 80104de:	4293      	cmp	r3, r2
 80104e0:	bfc4      	itt	gt
 80104e2:	1a9b      	subgt	r3, r3, r2
 80104e4:	18ed      	addgt	r5, r5, r3
 80104e6:	2600      	movs	r6, #0
 80104e8:	341a      	adds	r4, #26
 80104ea:	42b5      	cmp	r5, r6
 80104ec:	d11a      	bne.n	8010524 <_printf_common+0xc8>
 80104ee:	2000      	movs	r0, #0
 80104f0:	e008      	b.n	8010504 <_printf_common+0xa8>
 80104f2:	2301      	movs	r3, #1
 80104f4:	4652      	mov	r2, sl
 80104f6:	4649      	mov	r1, r9
 80104f8:	4638      	mov	r0, r7
 80104fa:	47c0      	blx	r8
 80104fc:	3001      	adds	r0, #1
 80104fe:	d103      	bne.n	8010508 <_printf_common+0xac>
 8010500:	f04f 30ff 	mov.w	r0, #4294967295
 8010504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010508:	3501      	adds	r5, #1
 801050a:	e7c6      	b.n	801049a <_printf_common+0x3e>
 801050c:	18e1      	adds	r1, r4, r3
 801050e:	1c5a      	adds	r2, r3, #1
 8010510:	2030      	movs	r0, #48	; 0x30
 8010512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010516:	4422      	add	r2, r4
 8010518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801051c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010520:	3302      	adds	r3, #2
 8010522:	e7c7      	b.n	80104b4 <_printf_common+0x58>
 8010524:	2301      	movs	r3, #1
 8010526:	4622      	mov	r2, r4
 8010528:	4649      	mov	r1, r9
 801052a:	4638      	mov	r0, r7
 801052c:	47c0      	blx	r8
 801052e:	3001      	adds	r0, #1
 8010530:	d0e6      	beq.n	8010500 <_printf_common+0xa4>
 8010532:	3601      	adds	r6, #1
 8010534:	e7d9      	b.n	80104ea <_printf_common+0x8e>
	...

08010538 <_printf_i>:
 8010538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801053c:	7e0f      	ldrb	r7, [r1, #24]
 801053e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010540:	2f78      	cmp	r7, #120	; 0x78
 8010542:	4691      	mov	r9, r2
 8010544:	4680      	mov	r8, r0
 8010546:	460c      	mov	r4, r1
 8010548:	469a      	mov	sl, r3
 801054a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801054e:	d807      	bhi.n	8010560 <_printf_i+0x28>
 8010550:	2f62      	cmp	r7, #98	; 0x62
 8010552:	d80a      	bhi.n	801056a <_printf_i+0x32>
 8010554:	2f00      	cmp	r7, #0
 8010556:	f000 80d4 	beq.w	8010702 <_printf_i+0x1ca>
 801055a:	2f58      	cmp	r7, #88	; 0x58
 801055c:	f000 80c0 	beq.w	80106e0 <_printf_i+0x1a8>
 8010560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010568:	e03a      	b.n	80105e0 <_printf_i+0xa8>
 801056a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801056e:	2b15      	cmp	r3, #21
 8010570:	d8f6      	bhi.n	8010560 <_printf_i+0x28>
 8010572:	a101      	add	r1, pc, #4	; (adr r1, 8010578 <_printf_i+0x40>)
 8010574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010578:	080105d1 	.word	0x080105d1
 801057c:	080105e5 	.word	0x080105e5
 8010580:	08010561 	.word	0x08010561
 8010584:	08010561 	.word	0x08010561
 8010588:	08010561 	.word	0x08010561
 801058c:	08010561 	.word	0x08010561
 8010590:	080105e5 	.word	0x080105e5
 8010594:	08010561 	.word	0x08010561
 8010598:	08010561 	.word	0x08010561
 801059c:	08010561 	.word	0x08010561
 80105a0:	08010561 	.word	0x08010561
 80105a4:	080106e9 	.word	0x080106e9
 80105a8:	08010611 	.word	0x08010611
 80105ac:	080106a3 	.word	0x080106a3
 80105b0:	08010561 	.word	0x08010561
 80105b4:	08010561 	.word	0x08010561
 80105b8:	0801070b 	.word	0x0801070b
 80105bc:	08010561 	.word	0x08010561
 80105c0:	08010611 	.word	0x08010611
 80105c4:	08010561 	.word	0x08010561
 80105c8:	08010561 	.word	0x08010561
 80105cc:	080106ab 	.word	0x080106ab
 80105d0:	682b      	ldr	r3, [r5, #0]
 80105d2:	1d1a      	adds	r2, r3, #4
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	602a      	str	r2, [r5, #0]
 80105d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105e0:	2301      	movs	r3, #1
 80105e2:	e09f      	b.n	8010724 <_printf_i+0x1ec>
 80105e4:	6820      	ldr	r0, [r4, #0]
 80105e6:	682b      	ldr	r3, [r5, #0]
 80105e8:	0607      	lsls	r7, r0, #24
 80105ea:	f103 0104 	add.w	r1, r3, #4
 80105ee:	6029      	str	r1, [r5, #0]
 80105f0:	d501      	bpl.n	80105f6 <_printf_i+0xbe>
 80105f2:	681e      	ldr	r6, [r3, #0]
 80105f4:	e003      	b.n	80105fe <_printf_i+0xc6>
 80105f6:	0646      	lsls	r6, r0, #25
 80105f8:	d5fb      	bpl.n	80105f2 <_printf_i+0xba>
 80105fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80105fe:	2e00      	cmp	r6, #0
 8010600:	da03      	bge.n	801060a <_printf_i+0xd2>
 8010602:	232d      	movs	r3, #45	; 0x2d
 8010604:	4276      	negs	r6, r6
 8010606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801060a:	485a      	ldr	r0, [pc, #360]	; (8010774 <_printf_i+0x23c>)
 801060c:	230a      	movs	r3, #10
 801060e:	e012      	b.n	8010636 <_printf_i+0xfe>
 8010610:	682b      	ldr	r3, [r5, #0]
 8010612:	6820      	ldr	r0, [r4, #0]
 8010614:	1d19      	adds	r1, r3, #4
 8010616:	6029      	str	r1, [r5, #0]
 8010618:	0605      	lsls	r5, r0, #24
 801061a:	d501      	bpl.n	8010620 <_printf_i+0xe8>
 801061c:	681e      	ldr	r6, [r3, #0]
 801061e:	e002      	b.n	8010626 <_printf_i+0xee>
 8010620:	0641      	lsls	r1, r0, #25
 8010622:	d5fb      	bpl.n	801061c <_printf_i+0xe4>
 8010624:	881e      	ldrh	r6, [r3, #0]
 8010626:	4853      	ldr	r0, [pc, #332]	; (8010774 <_printf_i+0x23c>)
 8010628:	2f6f      	cmp	r7, #111	; 0x6f
 801062a:	bf0c      	ite	eq
 801062c:	2308      	moveq	r3, #8
 801062e:	230a      	movne	r3, #10
 8010630:	2100      	movs	r1, #0
 8010632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010636:	6865      	ldr	r5, [r4, #4]
 8010638:	60a5      	str	r5, [r4, #8]
 801063a:	2d00      	cmp	r5, #0
 801063c:	bfa2      	ittt	ge
 801063e:	6821      	ldrge	r1, [r4, #0]
 8010640:	f021 0104 	bicge.w	r1, r1, #4
 8010644:	6021      	strge	r1, [r4, #0]
 8010646:	b90e      	cbnz	r6, 801064c <_printf_i+0x114>
 8010648:	2d00      	cmp	r5, #0
 801064a:	d04b      	beq.n	80106e4 <_printf_i+0x1ac>
 801064c:	4615      	mov	r5, r2
 801064e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010652:	fb03 6711 	mls	r7, r3, r1, r6
 8010656:	5dc7      	ldrb	r7, [r0, r7]
 8010658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801065c:	4637      	mov	r7, r6
 801065e:	42bb      	cmp	r3, r7
 8010660:	460e      	mov	r6, r1
 8010662:	d9f4      	bls.n	801064e <_printf_i+0x116>
 8010664:	2b08      	cmp	r3, #8
 8010666:	d10b      	bne.n	8010680 <_printf_i+0x148>
 8010668:	6823      	ldr	r3, [r4, #0]
 801066a:	07de      	lsls	r6, r3, #31
 801066c:	d508      	bpl.n	8010680 <_printf_i+0x148>
 801066e:	6923      	ldr	r3, [r4, #16]
 8010670:	6861      	ldr	r1, [r4, #4]
 8010672:	4299      	cmp	r1, r3
 8010674:	bfde      	ittt	le
 8010676:	2330      	movle	r3, #48	; 0x30
 8010678:	f805 3c01 	strble.w	r3, [r5, #-1]
 801067c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010680:	1b52      	subs	r2, r2, r5
 8010682:	6122      	str	r2, [r4, #16]
 8010684:	f8cd a000 	str.w	sl, [sp]
 8010688:	464b      	mov	r3, r9
 801068a:	aa03      	add	r2, sp, #12
 801068c:	4621      	mov	r1, r4
 801068e:	4640      	mov	r0, r8
 8010690:	f7ff fee4 	bl	801045c <_printf_common>
 8010694:	3001      	adds	r0, #1
 8010696:	d14a      	bne.n	801072e <_printf_i+0x1f6>
 8010698:	f04f 30ff 	mov.w	r0, #4294967295
 801069c:	b004      	add	sp, #16
 801069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106a2:	6823      	ldr	r3, [r4, #0]
 80106a4:	f043 0320 	orr.w	r3, r3, #32
 80106a8:	6023      	str	r3, [r4, #0]
 80106aa:	4833      	ldr	r0, [pc, #204]	; (8010778 <_printf_i+0x240>)
 80106ac:	2778      	movs	r7, #120	; 0x78
 80106ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80106b2:	6823      	ldr	r3, [r4, #0]
 80106b4:	6829      	ldr	r1, [r5, #0]
 80106b6:	061f      	lsls	r7, r3, #24
 80106b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80106bc:	d402      	bmi.n	80106c4 <_printf_i+0x18c>
 80106be:	065f      	lsls	r7, r3, #25
 80106c0:	bf48      	it	mi
 80106c2:	b2b6      	uxthmi	r6, r6
 80106c4:	07df      	lsls	r7, r3, #31
 80106c6:	bf48      	it	mi
 80106c8:	f043 0320 	orrmi.w	r3, r3, #32
 80106cc:	6029      	str	r1, [r5, #0]
 80106ce:	bf48      	it	mi
 80106d0:	6023      	strmi	r3, [r4, #0]
 80106d2:	b91e      	cbnz	r6, 80106dc <_printf_i+0x1a4>
 80106d4:	6823      	ldr	r3, [r4, #0]
 80106d6:	f023 0320 	bic.w	r3, r3, #32
 80106da:	6023      	str	r3, [r4, #0]
 80106dc:	2310      	movs	r3, #16
 80106de:	e7a7      	b.n	8010630 <_printf_i+0xf8>
 80106e0:	4824      	ldr	r0, [pc, #144]	; (8010774 <_printf_i+0x23c>)
 80106e2:	e7e4      	b.n	80106ae <_printf_i+0x176>
 80106e4:	4615      	mov	r5, r2
 80106e6:	e7bd      	b.n	8010664 <_printf_i+0x12c>
 80106e8:	682b      	ldr	r3, [r5, #0]
 80106ea:	6826      	ldr	r6, [r4, #0]
 80106ec:	6961      	ldr	r1, [r4, #20]
 80106ee:	1d18      	adds	r0, r3, #4
 80106f0:	6028      	str	r0, [r5, #0]
 80106f2:	0635      	lsls	r5, r6, #24
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	d501      	bpl.n	80106fc <_printf_i+0x1c4>
 80106f8:	6019      	str	r1, [r3, #0]
 80106fa:	e002      	b.n	8010702 <_printf_i+0x1ca>
 80106fc:	0670      	lsls	r0, r6, #25
 80106fe:	d5fb      	bpl.n	80106f8 <_printf_i+0x1c0>
 8010700:	8019      	strh	r1, [r3, #0]
 8010702:	2300      	movs	r3, #0
 8010704:	6123      	str	r3, [r4, #16]
 8010706:	4615      	mov	r5, r2
 8010708:	e7bc      	b.n	8010684 <_printf_i+0x14c>
 801070a:	682b      	ldr	r3, [r5, #0]
 801070c:	1d1a      	adds	r2, r3, #4
 801070e:	602a      	str	r2, [r5, #0]
 8010710:	681d      	ldr	r5, [r3, #0]
 8010712:	6862      	ldr	r2, [r4, #4]
 8010714:	2100      	movs	r1, #0
 8010716:	4628      	mov	r0, r5
 8010718:	f7ef fd62 	bl	80001e0 <memchr>
 801071c:	b108      	cbz	r0, 8010722 <_printf_i+0x1ea>
 801071e:	1b40      	subs	r0, r0, r5
 8010720:	6060      	str	r0, [r4, #4]
 8010722:	6863      	ldr	r3, [r4, #4]
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	2300      	movs	r3, #0
 8010728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801072c:	e7aa      	b.n	8010684 <_printf_i+0x14c>
 801072e:	6923      	ldr	r3, [r4, #16]
 8010730:	462a      	mov	r2, r5
 8010732:	4649      	mov	r1, r9
 8010734:	4640      	mov	r0, r8
 8010736:	47d0      	blx	sl
 8010738:	3001      	adds	r0, #1
 801073a:	d0ad      	beq.n	8010698 <_printf_i+0x160>
 801073c:	6823      	ldr	r3, [r4, #0]
 801073e:	079b      	lsls	r3, r3, #30
 8010740:	d413      	bmi.n	801076a <_printf_i+0x232>
 8010742:	68e0      	ldr	r0, [r4, #12]
 8010744:	9b03      	ldr	r3, [sp, #12]
 8010746:	4298      	cmp	r0, r3
 8010748:	bfb8      	it	lt
 801074a:	4618      	movlt	r0, r3
 801074c:	e7a6      	b.n	801069c <_printf_i+0x164>
 801074e:	2301      	movs	r3, #1
 8010750:	4632      	mov	r2, r6
 8010752:	4649      	mov	r1, r9
 8010754:	4640      	mov	r0, r8
 8010756:	47d0      	blx	sl
 8010758:	3001      	adds	r0, #1
 801075a:	d09d      	beq.n	8010698 <_printf_i+0x160>
 801075c:	3501      	adds	r5, #1
 801075e:	68e3      	ldr	r3, [r4, #12]
 8010760:	9903      	ldr	r1, [sp, #12]
 8010762:	1a5b      	subs	r3, r3, r1
 8010764:	42ab      	cmp	r3, r5
 8010766:	dcf2      	bgt.n	801074e <_printf_i+0x216>
 8010768:	e7eb      	b.n	8010742 <_printf_i+0x20a>
 801076a:	2500      	movs	r5, #0
 801076c:	f104 0619 	add.w	r6, r4, #25
 8010770:	e7f5      	b.n	801075e <_printf_i+0x226>
 8010772:	bf00      	nop
 8010774:	080114d5 	.word	0x080114d5
 8010778:	080114e6 	.word	0x080114e6

0801077c <__sflush_r>:
 801077c:	898a      	ldrh	r2, [r1, #12]
 801077e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010782:	4605      	mov	r5, r0
 8010784:	0710      	lsls	r0, r2, #28
 8010786:	460c      	mov	r4, r1
 8010788:	d458      	bmi.n	801083c <__sflush_r+0xc0>
 801078a:	684b      	ldr	r3, [r1, #4]
 801078c:	2b00      	cmp	r3, #0
 801078e:	dc05      	bgt.n	801079c <__sflush_r+0x20>
 8010790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010792:	2b00      	cmp	r3, #0
 8010794:	dc02      	bgt.n	801079c <__sflush_r+0x20>
 8010796:	2000      	movs	r0, #0
 8010798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801079c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801079e:	2e00      	cmp	r6, #0
 80107a0:	d0f9      	beq.n	8010796 <__sflush_r+0x1a>
 80107a2:	2300      	movs	r3, #0
 80107a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107a8:	682f      	ldr	r7, [r5, #0]
 80107aa:	6a21      	ldr	r1, [r4, #32]
 80107ac:	602b      	str	r3, [r5, #0]
 80107ae:	d032      	beq.n	8010816 <__sflush_r+0x9a>
 80107b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107b2:	89a3      	ldrh	r3, [r4, #12]
 80107b4:	075a      	lsls	r2, r3, #29
 80107b6:	d505      	bpl.n	80107c4 <__sflush_r+0x48>
 80107b8:	6863      	ldr	r3, [r4, #4]
 80107ba:	1ac0      	subs	r0, r0, r3
 80107bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107be:	b10b      	cbz	r3, 80107c4 <__sflush_r+0x48>
 80107c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107c2:	1ac0      	subs	r0, r0, r3
 80107c4:	2300      	movs	r3, #0
 80107c6:	4602      	mov	r2, r0
 80107c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107ca:	6a21      	ldr	r1, [r4, #32]
 80107cc:	4628      	mov	r0, r5
 80107ce:	47b0      	blx	r6
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	89a3      	ldrh	r3, [r4, #12]
 80107d4:	d106      	bne.n	80107e4 <__sflush_r+0x68>
 80107d6:	6829      	ldr	r1, [r5, #0]
 80107d8:	291d      	cmp	r1, #29
 80107da:	d82b      	bhi.n	8010834 <__sflush_r+0xb8>
 80107dc:	4a29      	ldr	r2, [pc, #164]	; (8010884 <__sflush_r+0x108>)
 80107de:	410a      	asrs	r2, r1
 80107e0:	07d6      	lsls	r6, r2, #31
 80107e2:	d427      	bmi.n	8010834 <__sflush_r+0xb8>
 80107e4:	2200      	movs	r2, #0
 80107e6:	6062      	str	r2, [r4, #4]
 80107e8:	04d9      	lsls	r1, r3, #19
 80107ea:	6922      	ldr	r2, [r4, #16]
 80107ec:	6022      	str	r2, [r4, #0]
 80107ee:	d504      	bpl.n	80107fa <__sflush_r+0x7e>
 80107f0:	1c42      	adds	r2, r0, #1
 80107f2:	d101      	bne.n	80107f8 <__sflush_r+0x7c>
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	b903      	cbnz	r3, 80107fa <__sflush_r+0x7e>
 80107f8:	6560      	str	r0, [r4, #84]	; 0x54
 80107fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107fc:	602f      	str	r7, [r5, #0]
 80107fe:	2900      	cmp	r1, #0
 8010800:	d0c9      	beq.n	8010796 <__sflush_r+0x1a>
 8010802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010806:	4299      	cmp	r1, r3
 8010808:	d002      	beq.n	8010810 <__sflush_r+0x94>
 801080a:	4628      	mov	r0, r5
 801080c:	f7fe fa66 	bl	800ecdc <_free_r>
 8010810:	2000      	movs	r0, #0
 8010812:	6360      	str	r0, [r4, #52]	; 0x34
 8010814:	e7c0      	b.n	8010798 <__sflush_r+0x1c>
 8010816:	2301      	movs	r3, #1
 8010818:	4628      	mov	r0, r5
 801081a:	47b0      	blx	r6
 801081c:	1c41      	adds	r1, r0, #1
 801081e:	d1c8      	bne.n	80107b2 <__sflush_r+0x36>
 8010820:	682b      	ldr	r3, [r5, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d0c5      	beq.n	80107b2 <__sflush_r+0x36>
 8010826:	2b1d      	cmp	r3, #29
 8010828:	d001      	beq.n	801082e <__sflush_r+0xb2>
 801082a:	2b16      	cmp	r3, #22
 801082c:	d101      	bne.n	8010832 <__sflush_r+0xb6>
 801082e:	602f      	str	r7, [r5, #0]
 8010830:	e7b1      	b.n	8010796 <__sflush_r+0x1a>
 8010832:	89a3      	ldrh	r3, [r4, #12]
 8010834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010838:	81a3      	strh	r3, [r4, #12]
 801083a:	e7ad      	b.n	8010798 <__sflush_r+0x1c>
 801083c:	690f      	ldr	r7, [r1, #16]
 801083e:	2f00      	cmp	r7, #0
 8010840:	d0a9      	beq.n	8010796 <__sflush_r+0x1a>
 8010842:	0793      	lsls	r3, r2, #30
 8010844:	680e      	ldr	r6, [r1, #0]
 8010846:	bf08      	it	eq
 8010848:	694b      	ldreq	r3, [r1, #20]
 801084a:	600f      	str	r7, [r1, #0]
 801084c:	bf18      	it	ne
 801084e:	2300      	movne	r3, #0
 8010850:	eba6 0807 	sub.w	r8, r6, r7
 8010854:	608b      	str	r3, [r1, #8]
 8010856:	f1b8 0f00 	cmp.w	r8, #0
 801085a:	dd9c      	ble.n	8010796 <__sflush_r+0x1a>
 801085c:	6a21      	ldr	r1, [r4, #32]
 801085e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010860:	4643      	mov	r3, r8
 8010862:	463a      	mov	r2, r7
 8010864:	4628      	mov	r0, r5
 8010866:	47b0      	blx	r6
 8010868:	2800      	cmp	r0, #0
 801086a:	dc06      	bgt.n	801087a <__sflush_r+0xfe>
 801086c:	89a3      	ldrh	r3, [r4, #12]
 801086e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010872:	81a3      	strh	r3, [r4, #12]
 8010874:	f04f 30ff 	mov.w	r0, #4294967295
 8010878:	e78e      	b.n	8010798 <__sflush_r+0x1c>
 801087a:	4407      	add	r7, r0
 801087c:	eba8 0800 	sub.w	r8, r8, r0
 8010880:	e7e9      	b.n	8010856 <__sflush_r+0xda>
 8010882:	bf00      	nop
 8010884:	dfbffffe 	.word	0xdfbffffe

08010888 <_fflush_r>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	690b      	ldr	r3, [r1, #16]
 801088c:	4605      	mov	r5, r0
 801088e:	460c      	mov	r4, r1
 8010890:	b913      	cbnz	r3, 8010898 <_fflush_r+0x10>
 8010892:	2500      	movs	r5, #0
 8010894:	4628      	mov	r0, r5
 8010896:	bd38      	pop	{r3, r4, r5, pc}
 8010898:	b118      	cbz	r0, 80108a2 <_fflush_r+0x1a>
 801089a:	6a03      	ldr	r3, [r0, #32]
 801089c:	b90b      	cbnz	r3, 80108a2 <_fflush_r+0x1a>
 801089e:	f7fe f827 	bl	800e8f0 <__sinit>
 80108a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d0f3      	beq.n	8010892 <_fflush_r+0xa>
 80108aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108ac:	07d0      	lsls	r0, r2, #31
 80108ae:	d404      	bmi.n	80108ba <_fflush_r+0x32>
 80108b0:	0599      	lsls	r1, r3, #22
 80108b2:	d402      	bmi.n	80108ba <_fflush_r+0x32>
 80108b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108b6:	f7fe f9da 	bl	800ec6e <__retarget_lock_acquire_recursive>
 80108ba:	4628      	mov	r0, r5
 80108bc:	4621      	mov	r1, r4
 80108be:	f7ff ff5d 	bl	801077c <__sflush_r>
 80108c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108c4:	07da      	lsls	r2, r3, #31
 80108c6:	4605      	mov	r5, r0
 80108c8:	d4e4      	bmi.n	8010894 <_fflush_r+0xc>
 80108ca:	89a3      	ldrh	r3, [r4, #12]
 80108cc:	059b      	lsls	r3, r3, #22
 80108ce:	d4e1      	bmi.n	8010894 <_fflush_r+0xc>
 80108d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108d2:	f7fe f9cd 	bl	800ec70 <__retarget_lock_release_recursive>
 80108d6:	e7dd      	b.n	8010894 <_fflush_r+0xc>

080108d8 <fiprintf>:
 80108d8:	b40e      	push	{r1, r2, r3}
 80108da:	b503      	push	{r0, r1, lr}
 80108dc:	4601      	mov	r1, r0
 80108de:	ab03      	add	r3, sp, #12
 80108e0:	4805      	ldr	r0, [pc, #20]	; (80108f8 <fiprintf+0x20>)
 80108e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80108e6:	6800      	ldr	r0, [r0, #0]
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	f7ff fc9d 	bl	8010228 <_vfiprintf_r>
 80108ee:	b002      	add	sp, #8
 80108f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80108f4:	b003      	add	sp, #12
 80108f6:	4770      	bx	lr
 80108f8:	20000204 	.word	0x20000204

080108fc <__swbuf_r>:
 80108fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fe:	460e      	mov	r6, r1
 8010900:	4614      	mov	r4, r2
 8010902:	4605      	mov	r5, r0
 8010904:	b118      	cbz	r0, 801090e <__swbuf_r+0x12>
 8010906:	6a03      	ldr	r3, [r0, #32]
 8010908:	b90b      	cbnz	r3, 801090e <__swbuf_r+0x12>
 801090a:	f7fd fff1 	bl	800e8f0 <__sinit>
 801090e:	69a3      	ldr	r3, [r4, #24]
 8010910:	60a3      	str	r3, [r4, #8]
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	071a      	lsls	r2, r3, #28
 8010916:	d525      	bpl.n	8010964 <__swbuf_r+0x68>
 8010918:	6923      	ldr	r3, [r4, #16]
 801091a:	b31b      	cbz	r3, 8010964 <__swbuf_r+0x68>
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	6922      	ldr	r2, [r4, #16]
 8010920:	1a98      	subs	r0, r3, r2
 8010922:	6963      	ldr	r3, [r4, #20]
 8010924:	b2f6      	uxtb	r6, r6
 8010926:	4283      	cmp	r3, r0
 8010928:	4637      	mov	r7, r6
 801092a:	dc04      	bgt.n	8010936 <__swbuf_r+0x3a>
 801092c:	4621      	mov	r1, r4
 801092e:	4628      	mov	r0, r5
 8010930:	f7ff ffaa 	bl	8010888 <_fflush_r>
 8010934:	b9e0      	cbnz	r0, 8010970 <__swbuf_r+0x74>
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	3b01      	subs	r3, #1
 801093a:	60a3      	str	r3, [r4, #8]
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	1c5a      	adds	r2, r3, #1
 8010940:	6022      	str	r2, [r4, #0]
 8010942:	701e      	strb	r6, [r3, #0]
 8010944:	6962      	ldr	r2, [r4, #20]
 8010946:	1c43      	adds	r3, r0, #1
 8010948:	429a      	cmp	r2, r3
 801094a:	d004      	beq.n	8010956 <__swbuf_r+0x5a>
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	07db      	lsls	r3, r3, #31
 8010950:	d506      	bpl.n	8010960 <__swbuf_r+0x64>
 8010952:	2e0a      	cmp	r6, #10
 8010954:	d104      	bne.n	8010960 <__swbuf_r+0x64>
 8010956:	4621      	mov	r1, r4
 8010958:	4628      	mov	r0, r5
 801095a:	f7ff ff95 	bl	8010888 <_fflush_r>
 801095e:	b938      	cbnz	r0, 8010970 <__swbuf_r+0x74>
 8010960:	4638      	mov	r0, r7
 8010962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010964:	4621      	mov	r1, r4
 8010966:	4628      	mov	r0, r5
 8010968:	f000 f806 	bl	8010978 <__swsetup_r>
 801096c:	2800      	cmp	r0, #0
 801096e:	d0d5      	beq.n	801091c <__swbuf_r+0x20>
 8010970:	f04f 37ff 	mov.w	r7, #4294967295
 8010974:	e7f4      	b.n	8010960 <__swbuf_r+0x64>
	...

08010978 <__swsetup_r>:
 8010978:	b538      	push	{r3, r4, r5, lr}
 801097a:	4b2a      	ldr	r3, [pc, #168]	; (8010a24 <__swsetup_r+0xac>)
 801097c:	4605      	mov	r5, r0
 801097e:	6818      	ldr	r0, [r3, #0]
 8010980:	460c      	mov	r4, r1
 8010982:	b118      	cbz	r0, 801098c <__swsetup_r+0x14>
 8010984:	6a03      	ldr	r3, [r0, #32]
 8010986:	b90b      	cbnz	r3, 801098c <__swsetup_r+0x14>
 8010988:	f7fd ffb2 	bl	800e8f0 <__sinit>
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010992:	0718      	lsls	r0, r3, #28
 8010994:	d422      	bmi.n	80109dc <__swsetup_r+0x64>
 8010996:	06d9      	lsls	r1, r3, #27
 8010998:	d407      	bmi.n	80109aa <__swsetup_r+0x32>
 801099a:	2309      	movs	r3, #9
 801099c:	602b      	str	r3, [r5, #0]
 801099e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80109a2:	81a3      	strh	r3, [r4, #12]
 80109a4:	f04f 30ff 	mov.w	r0, #4294967295
 80109a8:	e034      	b.n	8010a14 <__swsetup_r+0x9c>
 80109aa:	0758      	lsls	r0, r3, #29
 80109ac:	d512      	bpl.n	80109d4 <__swsetup_r+0x5c>
 80109ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109b0:	b141      	cbz	r1, 80109c4 <__swsetup_r+0x4c>
 80109b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109b6:	4299      	cmp	r1, r3
 80109b8:	d002      	beq.n	80109c0 <__swsetup_r+0x48>
 80109ba:	4628      	mov	r0, r5
 80109bc:	f7fe f98e 	bl	800ecdc <_free_r>
 80109c0:	2300      	movs	r3, #0
 80109c2:	6363      	str	r3, [r4, #52]	; 0x34
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109ca:	81a3      	strh	r3, [r4, #12]
 80109cc:	2300      	movs	r3, #0
 80109ce:	6063      	str	r3, [r4, #4]
 80109d0:	6923      	ldr	r3, [r4, #16]
 80109d2:	6023      	str	r3, [r4, #0]
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	f043 0308 	orr.w	r3, r3, #8
 80109da:	81a3      	strh	r3, [r4, #12]
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	b94b      	cbnz	r3, 80109f4 <__swsetup_r+0x7c>
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109ea:	d003      	beq.n	80109f4 <__swsetup_r+0x7c>
 80109ec:	4621      	mov	r1, r4
 80109ee:	4628      	mov	r0, r5
 80109f0:	f000 f8b6 	bl	8010b60 <__smakebuf_r>
 80109f4:	89a0      	ldrh	r0, [r4, #12]
 80109f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109fa:	f010 0301 	ands.w	r3, r0, #1
 80109fe:	d00a      	beq.n	8010a16 <__swsetup_r+0x9e>
 8010a00:	2300      	movs	r3, #0
 8010a02:	60a3      	str	r3, [r4, #8]
 8010a04:	6963      	ldr	r3, [r4, #20]
 8010a06:	425b      	negs	r3, r3
 8010a08:	61a3      	str	r3, [r4, #24]
 8010a0a:	6923      	ldr	r3, [r4, #16]
 8010a0c:	b943      	cbnz	r3, 8010a20 <__swsetup_r+0xa8>
 8010a0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a12:	d1c4      	bne.n	801099e <__swsetup_r+0x26>
 8010a14:	bd38      	pop	{r3, r4, r5, pc}
 8010a16:	0781      	lsls	r1, r0, #30
 8010a18:	bf58      	it	pl
 8010a1a:	6963      	ldrpl	r3, [r4, #20]
 8010a1c:	60a3      	str	r3, [r4, #8]
 8010a1e:	e7f4      	b.n	8010a0a <__swsetup_r+0x92>
 8010a20:	2000      	movs	r0, #0
 8010a22:	e7f7      	b.n	8010a14 <__swsetup_r+0x9c>
 8010a24:	20000204 	.word	0x20000204

08010a28 <memmove>:
 8010a28:	4288      	cmp	r0, r1
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	eb01 0402 	add.w	r4, r1, r2
 8010a30:	d902      	bls.n	8010a38 <memmove+0x10>
 8010a32:	4284      	cmp	r4, r0
 8010a34:	4623      	mov	r3, r4
 8010a36:	d807      	bhi.n	8010a48 <memmove+0x20>
 8010a38:	1e43      	subs	r3, r0, #1
 8010a3a:	42a1      	cmp	r1, r4
 8010a3c:	d008      	beq.n	8010a50 <memmove+0x28>
 8010a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a46:	e7f8      	b.n	8010a3a <memmove+0x12>
 8010a48:	4402      	add	r2, r0
 8010a4a:	4601      	mov	r1, r0
 8010a4c:	428a      	cmp	r2, r1
 8010a4e:	d100      	bne.n	8010a52 <memmove+0x2a>
 8010a50:	bd10      	pop	{r4, pc}
 8010a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a5a:	e7f7      	b.n	8010a4c <memmove+0x24>

08010a5c <_sbrk_r>:
 8010a5c:	b538      	push	{r3, r4, r5, lr}
 8010a5e:	4d06      	ldr	r5, [pc, #24]	; (8010a78 <_sbrk_r+0x1c>)
 8010a60:	2300      	movs	r3, #0
 8010a62:	4604      	mov	r4, r0
 8010a64:	4608      	mov	r0, r1
 8010a66:	602b      	str	r3, [r5, #0]
 8010a68:	f7f1 fec6 	bl	80027f8 <_sbrk>
 8010a6c:	1c43      	adds	r3, r0, #1
 8010a6e:	d102      	bne.n	8010a76 <_sbrk_r+0x1a>
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	b103      	cbz	r3, 8010a76 <_sbrk_r+0x1a>
 8010a74:	6023      	str	r3, [r4, #0]
 8010a76:	bd38      	pop	{r3, r4, r5, pc}
 8010a78:	20002ce8 	.word	0x20002ce8

08010a7c <abort>:
 8010a7c:	b508      	push	{r3, lr}
 8010a7e:	2006      	movs	r0, #6
 8010a80:	f000 f8d2 	bl	8010c28 <raise>
 8010a84:	2001      	movs	r0, #1
 8010a86:	f7f1 fe3f 	bl	8002708 <_exit>

08010a8a <_calloc_r>:
 8010a8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a8c:	fba1 2402 	umull	r2, r4, r1, r2
 8010a90:	b94c      	cbnz	r4, 8010aa6 <_calloc_r+0x1c>
 8010a92:	4611      	mov	r1, r2
 8010a94:	9201      	str	r2, [sp, #4]
 8010a96:	f7fe fced 	bl	800f474 <_malloc_r>
 8010a9a:	9a01      	ldr	r2, [sp, #4]
 8010a9c:	4605      	mov	r5, r0
 8010a9e:	b930      	cbnz	r0, 8010aae <_calloc_r+0x24>
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	b003      	add	sp, #12
 8010aa4:	bd30      	pop	{r4, r5, pc}
 8010aa6:	220c      	movs	r2, #12
 8010aa8:	6002      	str	r2, [r0, #0]
 8010aaa:	2500      	movs	r5, #0
 8010aac:	e7f8      	b.n	8010aa0 <_calloc_r+0x16>
 8010aae:	4621      	mov	r1, r4
 8010ab0:	f7fd ffe2 	bl	800ea78 <memset>
 8010ab4:	e7f4      	b.n	8010aa0 <_calloc_r+0x16>

08010ab6 <_realloc_r>:
 8010ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aba:	4680      	mov	r8, r0
 8010abc:	4614      	mov	r4, r2
 8010abe:	460e      	mov	r6, r1
 8010ac0:	b921      	cbnz	r1, 8010acc <_realloc_r+0x16>
 8010ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac6:	4611      	mov	r1, r2
 8010ac8:	f7fe bcd4 	b.w	800f474 <_malloc_r>
 8010acc:	b92a      	cbnz	r2, 8010ada <_realloc_r+0x24>
 8010ace:	f7fe f905 	bl	800ecdc <_free_r>
 8010ad2:	4625      	mov	r5, r4
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ada:	f000 f8e3 	bl	8010ca4 <_malloc_usable_size_r>
 8010ade:	4284      	cmp	r4, r0
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	d802      	bhi.n	8010aea <_realloc_r+0x34>
 8010ae4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ae8:	d812      	bhi.n	8010b10 <_realloc_r+0x5a>
 8010aea:	4621      	mov	r1, r4
 8010aec:	4640      	mov	r0, r8
 8010aee:	f7fe fcc1 	bl	800f474 <_malloc_r>
 8010af2:	4605      	mov	r5, r0
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d0ed      	beq.n	8010ad4 <_realloc_r+0x1e>
 8010af8:	42bc      	cmp	r4, r7
 8010afa:	4622      	mov	r2, r4
 8010afc:	4631      	mov	r1, r6
 8010afe:	bf28      	it	cs
 8010b00:	463a      	movcs	r2, r7
 8010b02:	f7fe f8b6 	bl	800ec72 <memcpy>
 8010b06:	4631      	mov	r1, r6
 8010b08:	4640      	mov	r0, r8
 8010b0a:	f7fe f8e7 	bl	800ecdc <_free_r>
 8010b0e:	e7e1      	b.n	8010ad4 <_realloc_r+0x1e>
 8010b10:	4635      	mov	r5, r6
 8010b12:	e7df      	b.n	8010ad4 <_realloc_r+0x1e>

08010b14 <__swhatbuf_r>:
 8010b14:	b570      	push	{r4, r5, r6, lr}
 8010b16:	460c      	mov	r4, r1
 8010b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	b096      	sub	sp, #88	; 0x58
 8010b20:	4615      	mov	r5, r2
 8010b22:	461e      	mov	r6, r3
 8010b24:	da0d      	bge.n	8010b42 <__swhatbuf_r+0x2e>
 8010b26:	89a3      	ldrh	r3, [r4, #12]
 8010b28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010b2c:	f04f 0100 	mov.w	r1, #0
 8010b30:	bf0c      	ite	eq
 8010b32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010b36:	2340      	movne	r3, #64	; 0x40
 8010b38:	2000      	movs	r0, #0
 8010b3a:	6031      	str	r1, [r6, #0]
 8010b3c:	602b      	str	r3, [r5, #0]
 8010b3e:	b016      	add	sp, #88	; 0x58
 8010b40:	bd70      	pop	{r4, r5, r6, pc}
 8010b42:	466a      	mov	r2, sp
 8010b44:	f000 f878 	bl	8010c38 <_fstat_r>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	dbec      	blt.n	8010b26 <__swhatbuf_r+0x12>
 8010b4c:	9901      	ldr	r1, [sp, #4]
 8010b4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010b52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010b56:	4259      	negs	r1, r3
 8010b58:	4159      	adcs	r1, r3
 8010b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b5e:	e7eb      	b.n	8010b38 <__swhatbuf_r+0x24>

08010b60 <__smakebuf_r>:
 8010b60:	898b      	ldrh	r3, [r1, #12]
 8010b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b64:	079d      	lsls	r5, r3, #30
 8010b66:	4606      	mov	r6, r0
 8010b68:	460c      	mov	r4, r1
 8010b6a:	d507      	bpl.n	8010b7c <__smakebuf_r+0x1c>
 8010b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b70:	6023      	str	r3, [r4, #0]
 8010b72:	6123      	str	r3, [r4, #16]
 8010b74:	2301      	movs	r3, #1
 8010b76:	6163      	str	r3, [r4, #20]
 8010b78:	b002      	add	sp, #8
 8010b7a:	bd70      	pop	{r4, r5, r6, pc}
 8010b7c:	ab01      	add	r3, sp, #4
 8010b7e:	466a      	mov	r2, sp
 8010b80:	f7ff ffc8 	bl	8010b14 <__swhatbuf_r>
 8010b84:	9900      	ldr	r1, [sp, #0]
 8010b86:	4605      	mov	r5, r0
 8010b88:	4630      	mov	r0, r6
 8010b8a:	f7fe fc73 	bl	800f474 <_malloc_r>
 8010b8e:	b948      	cbnz	r0, 8010ba4 <__smakebuf_r+0x44>
 8010b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b94:	059a      	lsls	r2, r3, #22
 8010b96:	d4ef      	bmi.n	8010b78 <__smakebuf_r+0x18>
 8010b98:	f023 0303 	bic.w	r3, r3, #3
 8010b9c:	f043 0302 	orr.w	r3, r3, #2
 8010ba0:	81a3      	strh	r3, [r4, #12]
 8010ba2:	e7e3      	b.n	8010b6c <__smakebuf_r+0xc>
 8010ba4:	89a3      	ldrh	r3, [r4, #12]
 8010ba6:	6020      	str	r0, [r4, #0]
 8010ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bac:	81a3      	strh	r3, [r4, #12]
 8010bae:	9b00      	ldr	r3, [sp, #0]
 8010bb0:	6163      	str	r3, [r4, #20]
 8010bb2:	9b01      	ldr	r3, [sp, #4]
 8010bb4:	6120      	str	r0, [r4, #16]
 8010bb6:	b15b      	cbz	r3, 8010bd0 <__smakebuf_r+0x70>
 8010bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	f000 f84d 	bl	8010c5c <_isatty_r>
 8010bc2:	b128      	cbz	r0, 8010bd0 <__smakebuf_r+0x70>
 8010bc4:	89a3      	ldrh	r3, [r4, #12]
 8010bc6:	f023 0303 	bic.w	r3, r3, #3
 8010bca:	f043 0301 	orr.w	r3, r3, #1
 8010bce:	81a3      	strh	r3, [r4, #12]
 8010bd0:	89a3      	ldrh	r3, [r4, #12]
 8010bd2:	431d      	orrs	r5, r3
 8010bd4:	81a5      	strh	r5, [r4, #12]
 8010bd6:	e7cf      	b.n	8010b78 <__smakebuf_r+0x18>

08010bd8 <_raise_r>:
 8010bd8:	291f      	cmp	r1, #31
 8010bda:	b538      	push	{r3, r4, r5, lr}
 8010bdc:	4604      	mov	r4, r0
 8010bde:	460d      	mov	r5, r1
 8010be0:	d904      	bls.n	8010bec <_raise_r+0x14>
 8010be2:	2316      	movs	r3, #22
 8010be4:	6003      	str	r3, [r0, #0]
 8010be6:	f04f 30ff 	mov.w	r0, #4294967295
 8010bea:	bd38      	pop	{r3, r4, r5, pc}
 8010bec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010bee:	b112      	cbz	r2, 8010bf6 <_raise_r+0x1e>
 8010bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010bf4:	b94b      	cbnz	r3, 8010c0a <_raise_r+0x32>
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 f852 	bl	8010ca0 <_getpid_r>
 8010bfc:	462a      	mov	r2, r5
 8010bfe:	4601      	mov	r1, r0
 8010c00:	4620      	mov	r0, r4
 8010c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c06:	f000 b839 	b.w	8010c7c <_kill_r>
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d00a      	beq.n	8010c24 <_raise_r+0x4c>
 8010c0e:	1c59      	adds	r1, r3, #1
 8010c10:	d103      	bne.n	8010c1a <_raise_r+0x42>
 8010c12:	2316      	movs	r3, #22
 8010c14:	6003      	str	r3, [r0, #0]
 8010c16:	2001      	movs	r0, #1
 8010c18:	e7e7      	b.n	8010bea <_raise_r+0x12>
 8010c1a:	2400      	movs	r4, #0
 8010c1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c20:	4628      	mov	r0, r5
 8010c22:	4798      	blx	r3
 8010c24:	2000      	movs	r0, #0
 8010c26:	e7e0      	b.n	8010bea <_raise_r+0x12>

08010c28 <raise>:
 8010c28:	4b02      	ldr	r3, [pc, #8]	; (8010c34 <raise+0xc>)
 8010c2a:	4601      	mov	r1, r0
 8010c2c:	6818      	ldr	r0, [r3, #0]
 8010c2e:	f7ff bfd3 	b.w	8010bd8 <_raise_r>
 8010c32:	bf00      	nop
 8010c34:	20000204 	.word	0x20000204

08010c38 <_fstat_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4d07      	ldr	r5, [pc, #28]	; (8010c58 <_fstat_r+0x20>)
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	4604      	mov	r4, r0
 8010c40:	4608      	mov	r0, r1
 8010c42:	4611      	mov	r1, r2
 8010c44:	602b      	str	r3, [r5, #0]
 8010c46:	f7f1 fdae 	bl	80027a6 <_fstat>
 8010c4a:	1c43      	adds	r3, r0, #1
 8010c4c:	d102      	bne.n	8010c54 <_fstat_r+0x1c>
 8010c4e:	682b      	ldr	r3, [r5, #0]
 8010c50:	b103      	cbz	r3, 8010c54 <_fstat_r+0x1c>
 8010c52:	6023      	str	r3, [r4, #0]
 8010c54:	bd38      	pop	{r3, r4, r5, pc}
 8010c56:	bf00      	nop
 8010c58:	20002ce8 	.word	0x20002ce8

08010c5c <_isatty_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4d06      	ldr	r5, [pc, #24]	; (8010c78 <_isatty_r+0x1c>)
 8010c60:	2300      	movs	r3, #0
 8010c62:	4604      	mov	r4, r0
 8010c64:	4608      	mov	r0, r1
 8010c66:	602b      	str	r3, [r5, #0]
 8010c68:	f7f1 fdad 	bl	80027c6 <_isatty>
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	d102      	bne.n	8010c76 <_isatty_r+0x1a>
 8010c70:	682b      	ldr	r3, [r5, #0]
 8010c72:	b103      	cbz	r3, 8010c76 <_isatty_r+0x1a>
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	bd38      	pop	{r3, r4, r5, pc}
 8010c78:	20002ce8 	.word	0x20002ce8

08010c7c <_kill_r>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	4d07      	ldr	r5, [pc, #28]	; (8010c9c <_kill_r+0x20>)
 8010c80:	2300      	movs	r3, #0
 8010c82:	4604      	mov	r4, r0
 8010c84:	4608      	mov	r0, r1
 8010c86:	4611      	mov	r1, r2
 8010c88:	602b      	str	r3, [r5, #0]
 8010c8a:	f7f1 fd2d 	bl	80026e8 <_kill>
 8010c8e:	1c43      	adds	r3, r0, #1
 8010c90:	d102      	bne.n	8010c98 <_kill_r+0x1c>
 8010c92:	682b      	ldr	r3, [r5, #0]
 8010c94:	b103      	cbz	r3, 8010c98 <_kill_r+0x1c>
 8010c96:	6023      	str	r3, [r4, #0]
 8010c98:	bd38      	pop	{r3, r4, r5, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20002ce8 	.word	0x20002ce8

08010ca0 <_getpid_r>:
 8010ca0:	f7f1 bd1a 	b.w	80026d8 <_getpid>

08010ca4 <_malloc_usable_size_r>:
 8010ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ca8:	1f18      	subs	r0, r3, #4
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	bfbc      	itt	lt
 8010cae:	580b      	ldrlt	r3, [r1, r0]
 8010cb0:	18c0      	addlt	r0, r0, r3
 8010cb2:	4770      	bx	lr

08010cb4 <_init>:
 8010cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cb6:	bf00      	nop
 8010cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cba:	bc08      	pop	{r3}
 8010cbc:	469e      	mov	lr, r3
 8010cbe:	4770      	bx	lr

08010cc0 <_fini>:
 8010cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc2:	bf00      	nop
 8010cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cc6:	bc08      	pop	{r3}
 8010cc8:	469e      	mov	lr, r3
 8010cca:	4770      	bx	lr
