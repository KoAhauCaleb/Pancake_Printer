
Pancake_Printer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007318  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007624  08007624  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800762c  0800762c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800762c  0800762c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b8  2000002c  08007660  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022e4  08007660  000222e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfd4  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e25  00000000  00000000  0003d073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001980  00000000  00000000  00040e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013cc  00000000  00000000  00042818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029632  00000000  00000000  00043be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dbd4  00000000  00000000  0006d216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff526  00000000  00000000  0008adea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b30  00000000  00000000  0018a310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00190e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007490 	.word	0x08007490

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000030 	.word	0x20000030
 80001cc:	08007490 	.word	0x08007490

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <delayms>:
float speed = 20.0; //mm/s
float extrude_speed = 10.0; //mm/s

bool extrusion_on = false;

void delayms(uint16_t ms){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  osDelay(ms);
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	4618      	mov	r0, r3
 80004da:	f004 fa7d 	bl	80049d8 <osDelay>
  //delayus(ms * 1000);
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <delayus>:

void delayus(uint16_t us){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(htime,0);  // set the counter value a 0
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <delayus+0x40>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2200      	movs	r2, #0
 80004fa:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htime);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <delayus+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fe99 	bl	8003238 <HAL_TIM_Base_Start>
  while (__HAL_TIM_GET_COUNTER(htime) < us);
 8000506:	bf00      	nop
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <delayus+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3f8      	bcc.n	8000508 <delayus+0x20>
  HAL_TIM_Base_Stop(htime);// wait for the counter to reach the us input in the parameter
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <delayus+0x40>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fef4 	bl	8003308 <HAL_TIM_Base_Stop>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000048 	.word	0x20000048

0800052c <motor_init>:

void motor_init(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  //For some reason non-syncronus delay needed before synchronous delay will work.
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2110      	movs	r1, #16
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <motor_init+0xf4>)
 8000536:	f001 fa1b 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	4837      	ldr	r0, [pc, #220]	; (8000620 <motor_init+0xf4>)
 8000542:	f001 fa15 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f001 fa0e 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f001 fa07 	bl	8001970 <HAL_GPIO_WritePin>
  delayus(2);
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff ffc0 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f001 f9fd 	bl	8001970 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <motor_init+0xf8>)
 8000578:	edd3 7a00 	vldr	s15, [r3]
 800057c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000628 <motor_init+0xfc>
 8000580:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000584:	eddf 6a29 	vldr	s13, [pc, #164]	; 800062c <motor_init+0x100>
 8000588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800058c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000590:	ee17 3a90 	vmov	r3, s15
 8000594:	b29b      	uxth	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffa6 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <motor_init+0xf4>)
 80005a2:	f001 f9e5 	bl	8001970 <HAL_GPIO_WritePin>
  delayus(2);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ff9e 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <motor_init+0xf4>)
 80005b2:	f001 f9dd 	bl	8001970 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <motor_init+0xf8>)
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000628 <motor_init+0xfc>
 80005c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005c4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800062c <motor_init+0x100>
 80005c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d0:	ee17 3a90 	vmov	r3, s15
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff86 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	480f      	ldr	r0, [pc, #60]	; (8000620 <motor_init+0xf4>)
 80005e2:	f001 f9c5 	bl	8001970 <HAL_GPIO_WritePin>
  delayus(2);
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff ff7e 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <motor_init+0xf4>)
 80005f2:	f001 f9bd 	bl	8001970 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <motor_init+0xf8>)
 80005f8:	edd3 7a00 	vldr	s15, [r3]
 80005fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000628 <motor_init+0xfc>
 8000600:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000604:	eddf 6a09 	vldr	s13, [pc, #36]	; 800062c <motor_init+0x100>
 8000608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 3a90 	vmov	r3, s15
 8000614:	b29b      	uxth	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff66 	bl	80004e8 <delayus>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	48000400 	.word	0x48000400
 8000624:	20000004 	.word	0x20000004
 8000628:	42480000 	.word	0x42480000
 800062c:	49742400 	.word	0x49742400

08000630 <set_timer>:

void set_timer(TIM_HandleTypeDef *htim){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  htime = htim;
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <set_timer+0x1c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000048 	.word	0x20000048

08000650 <set_speed>:

void set_speed(float new_speed){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	ed87 0a01 	vstr	s0, [r7, #4]
  speed = new_speed;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <set_speed+0x1c>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20000000 	.word	0x20000000

08000670 <move>:

void move(float x, float y){
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	ed87 0a01 	vstr	s0, [r7, #4]
 800067a:	edc7 0a00 	vstr	s1, [r7]
  int x_steps = (x - current_x) * X_STEPS_PER_MM;
 800067e:	4b71      	ldr	r3, [pc, #452]	; (8000844 <move+0x1d4>)
 8000680:	edd3 7a00 	vldr	s15, [r3]
 8000684:	ed97 7a01 	vldr	s14, [r7, #4]
 8000688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800068c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000698:	ee17 3a90 	vmov	r3, s15
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  int y_steps = (y - current_y) * Y_STEPS_PER_MM;
 800069e:	4b6a      	ldr	r3, [pc, #424]	; (8000848 <move+0x1d8>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	ed97 7a00 	vldr	s14, [r7]
 80006a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80006b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b8:	ee17 3a90 	vmov	r3, s15
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2110      	movs	r1, #16
 80006c2:	4862      	ldr	r0, [pc, #392]	; (800084c <move+0x1dc>)
 80006c4:	f001 f954 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	485f      	ldr	r0, [pc, #380]	; (800084c <move+0x1dc>)
 80006d0:	f001 f94e 	bl	8001970 <HAL_GPIO_WritePin>
  if(x_steps < 0){
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da07      	bge.n	80006ea <move+0x7a>
    HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	485b      	ldr	r0, [pc, #364]	; (800084c <move+0x1dc>)
 80006e0:	f001 f946 	bl	8001970 <HAL_GPIO_WritePin>
    x_steps *= -1;
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	425b      	negs	r3, r3
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if(y_steps < 0){
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da08      	bge.n	8000702 <move+0x92>
    HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4855      	ldr	r0, [pc, #340]	; (800084c <move+0x1dc>)
 80006f8:	f001 f93a 	bl	8001970 <HAL_GPIO_WritePin>
    y_steps *= -1;
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	425b      	negs	r3, r3
 8000700:	623b      	str	r3, [r7, #32]
  }

  int max_steps = x_steps;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	61fb      	str	r3, [r7, #28]
  if(y_steps > x_steps){
 8000706:	6a3a      	ldr	r2, [r7, #32]
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	429a      	cmp	r2, r3
 800070c:	dd01      	ble.n	8000712 <move+0xa2>
    max_steps = y_steps;
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	61fb      	str	r3, [r7, #28]
  }

  int x_step_ratio = max_steps / x_steps;
 8000712:	69fa      	ldr	r2, [r7, #28]
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	fb92 f3f3 	sdiv	r3, r2, r3
 800071a:	60fb      	str	r3, [r7, #12]
  int y_step_ratio = max_steps / y_steps;
 800071c:	69fa      	ldr	r2, [r7, #28]
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	fb92 f3f3 	sdiv	r3, r2, r3
 8000724:	60bb      	str	r3, [r7, #8]

  int x_taken = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  int y_taken = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < max_steps; i++){
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	e04a      	b.n	80007ca <move+0x15a>
    if(i % x_step_ratio == 0){
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	fb93 f2f2 	sdiv	r2, r3, r2
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	fb01 f202 	mul.w	r2, r1, r2
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d109      	bne.n	800075c <move+0xec>
      HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 f90d 	bl	8001970 <HAL_GPIO_WritePin>
      x_taken++;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	3301      	adds	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
    }
    if(i % y_step_ratio == 0){
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	fb93 f2f2 	sdiv	r2, r3, r2
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	fb01 f202 	mul.w	r2, r1, r2
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	2b00      	cmp	r3, #0
 800076e:	d107      	bne.n	8000780 <move+0x110>
      HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	4835      	ldr	r0, [pc, #212]	; (800084c <move+0x1dc>)
 8000776:	f001 f8fb 	bl	8001970 <HAL_GPIO_WritePin>
      y_taken++;
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
    }
    delayms(2);
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff fea3 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f001 f8ee 	bl	8001970 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	482c      	ldr	r0, [pc, #176]	; (800084c <move+0x1dc>)
 800079a:	f001 f8e9 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed)); // 1000000us/1s / (step/mm * mm/s)
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <move+0x1e0>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80007a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ac:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000854 <move+0x1e4>
 80007b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b8:	ee17 3a90 	vmov	r3, s15
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe84 	bl	80004cc <delayms>
  for(int i = 0; i < max_steps; i++){
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	3301      	adds	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	dbb0      	blt.n	8000734 <move+0xc4>
  }

  while (x_steps > x_taken){
 80007d2:	e013      	b.n	80007fc <move+0x18c>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f001 f8c7 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(2);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f7ff fe72 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f001 f8bd 	bl	8001970 <HAL_GPIO_WritePin>
    x_taken++;
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  while (x_steps > x_taken){
 80007fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	429a      	cmp	r2, r3
 8000802:	dce7      	bgt.n	80007d4 <move+0x164>
  }
  while (y_steps > y_taken){
 8000804:	e00f      	b.n	8000826 <move+0x1b6>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2108      	movs	r1, #8
 800080a:	4810      	ldr	r0, [pc, #64]	; (800084c <move+0x1dc>)
 800080c:	f001 f8b0 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(2);
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fe5b 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <move+0x1dc>)
 800081c:	f001 f8a8 	bl	8001970 <HAL_GPIO_WritePin>
    y_taken++;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
  while (y_steps > y_taken){
 8000826:	6a3a      	ldr	r2, [r7, #32]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	429a      	cmp	r2, r3
 800082c:	dceb      	bgt.n	8000806 <move+0x196>
  }
  current_x = x;
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <move+0x1d4>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6013      	str	r3, [r2, #0]
  current_y = y;
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <move+0x1d8>)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	6013      	str	r3, [r2, #0]
}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000004c 	.word	0x2000004c
 8000848:	20000050 	.word	0x20000050
 800084c:	48000400 	.word	0x48000400
 8000850:	20000000 	.word	0x20000000
 8000854:	447a0000 	.word	0x447a0000

08000858 <home>:


void home() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2110      	movs	r1, #16
 8000860:	4859      	ldr	r0, [pc, #356]	; (80009c8 <home+0x170>)
 8000862:	f001 f885 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	4856      	ldr	r0, [pc, #344]	; (80009c8 <home+0x170>)
 800086e:	f001 f87f 	bl	8001970 <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8000872:	e023      	b.n	80008bc <home+0x64>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f001 f877 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(2);
 8000882:	2002      	movs	r0, #2
 8000884:	f7ff fe22 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f001 f86d 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <home+0x174>)
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80008a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008a4:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80009d0 <home+0x178>
 80008a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b0:	ee17 3a90 	vmov	r3, s15
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe08 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	4845      	ldr	r0, [pc, #276]	; (80009d4 <home+0x17c>)
 80008c0:	f001 f83e 	bl	8001940 <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0d4      	beq.n	8000874 <home+0x1c>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80008ca:	e01f      	b.n	800090c <home+0xb4>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2108      	movs	r1, #8
 80008d0:	483d      	ldr	r0, [pc, #244]	; (80009c8 <home+0x170>)
 80008d2:	f001 f84d 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(2);
 80008d6:	2002      	movs	r0, #2
 80008d8:	f7ff fdf8 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2108      	movs	r1, #8
 80008e0:	4839      	ldr	r0, [pc, #228]	; (80009c8 <home+0x170>)
 80008e2:	f001 f845 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <home+0x174>)
 80008e8:	edd3 7a00 	vldr	s15, [r3]
 80008ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80008f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008f4:	eddf 6a36 	vldr	s13, [pc, #216]	; 80009d0 <home+0x178>
 80008f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000900:	ee17 3a90 	vmov	r3, s15
 8000904:	b29b      	uxth	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fde0 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	482e      	ldr	r0, [pc, #184]	; (80009c8 <home+0x170>)
 8000910:	f001 f816 	bl	8001940 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0d8      	beq.n	80008cc <home+0x74>
  }

  current_x = 0;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <home+0x180>)
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  current_y = 0;
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <home+0x184>)
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	601a      	str	r2, [r3, #0]

  //move away from limit switch by small distance
  move(10,10);
 800092a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800092e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000932:	f7ff fe9d 	bl	8000670 <move>

  //move slow towards limit switch
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <home+0x170>)
 800093c:	f001 f818 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000946:	4820      	ldr	r0, [pc, #128]	; (80009c8 <home+0x170>)
 8000948:	f001 f812 	bl	8001970 <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800094c:	e013      	b.n	8000976 <home+0x11e>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f001 f80a 	bl	8001970 <HAL_GPIO_WritePin>
    delayus(2);
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fdc3 	bl	80004e8 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f001 f800 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 8000970:	2005      	movs	r0, #5
 8000972:	f7ff fdab 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	4816      	ldr	r0, [pc, #88]	; (80009d4 <home+0x17c>)
 800097a:	f000 ffe1 	bl	8001940 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0e4      	beq.n	800094e <home+0xf6>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8000984:	e00f      	b.n	80009a6 <home+0x14e>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	480f      	ldr	r0, [pc, #60]	; (80009c8 <home+0x170>)
 800098c:	f000 fff0 	bl	8001970 <HAL_GPIO_WritePin>
    delayus(2);
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fda9 	bl	80004e8 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <home+0x170>)
 800099c:	f000 ffe8 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 80009a0:	2005      	movs	r0, #5
 80009a2:	f7ff fd93 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <home+0x170>)
 80009aa:	f000 ffc9 	bl	8001940 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0e8      	beq.n	8000986 <home+0x12e>
  }

  current_x = 0;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <home+0x180>)
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  current_y = 0;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <home+0x184>)
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	48000400 	.word	0x48000400
 80009cc:	20000000 	.word	0x20000000
 80009d0:	447a0000 	.word	0x447a0000
 80009d4:	48000800 	.word	0x48000800
 80009d8:	2000004c 	.word	0x2000004c
 80009dc:	20000050 	.word	0x20000050

080009e0 <start_extrusion>:

void start_extrusion(){
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  extrusion_on = true;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <start_extrusion+0x14>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000054 	.word	0x20000054

080009f8 <stop_extrusion>:

void stop_extrusion(){
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  extrusion_on = false;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <stop_extrusion+0x14>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000054 	.word	0x20000054

08000a10 <extrude>:

void extrude(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  if(extrusion_on){
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <extrude+0x50>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d01f      	beq.n	8000a5c <extrude+0x4c>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <extrude+0x54>)
 8000a22:	f000 ffa5 	bl	8001970 <HAL_GPIO_WritePin>
    delayus(2);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fd5e 	bl	80004e8 <delayus>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2120      	movs	r1, #32
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <extrude+0x54>)
 8000a32:	f000 ff9d 	bl	8001970 <HAL_GPIO_WritePin>
    delayms(1000 / (Z_STEPS_PER_MM * extrude_speed));
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <extrude+0x58>)
 8000a38:	edd3 7a00 	vldr	s15, [r3]
 8000a3c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000a6c <extrude+0x5c>
 8000a40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a44:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000a70 <extrude+0x60>
 8000a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a50:	ee17 3a90 	vmov	r3, s15
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd38 	bl	80004cc <delayms>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000054 	.word	0x20000054
 8000a64:	48000400 	.word	0x48000400
 8000a68:	20000004 	.word	0x20000004
 8000a6c:	42480000 	.word	0x42480000
 8000a70:	447a0000 	.word	0x447a0000

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f000 fc96 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f868 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f000 f97a 	bl	8000d78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a84:	f000 f948 	bl	8000d18 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a88:	f000 f8f2 	bl	8000c70 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000a8c:	f000 f8b2 	bl	8000bf4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000a90:	f003 fdbc 	bl	800460c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  set_timer(&htim1);
 8000a94:	481c      	ldr	r0, [pc, #112]	; (8000b08 <main+0x94>)
 8000a96:	f7ff fdcb 	bl	8000630 <set_timer>
  motor_init();
 8000a9a:	f7ff fd47 	bl	800052c <motor_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a9e:	f003 febf 	bl	8004820 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &commandQueue_attributes);
 8000aa2:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <main+0x98>)
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	2010      	movs	r0, #16
 8000aa8:	f003 ffb1 	bl	8004a0e <osMessageQueueNew>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <main+0x9c>)
 8000ab0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <main+0xa0>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4818      	ldr	r0, [pc, #96]	; (8000b18 <main+0xa4>)
 8000ab8:	f003 fefc 	bl	80048b4 <osThreadNew>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <main+0xa8>)
 8000ac0:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <main+0xac>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4817      	ldr	r0, [pc, #92]	; (8000b24 <main+0xb0>)
 8000ac8:	f003 fef4 	bl	80048b4 <osThreadNew>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <main+0xb4>)
 8000ad0:	6013      	str	r3, [r2, #0]

  /* creation of parserTask */
  parserTaskHandle = osThreadNew(StartParserTask, NULL, &parserTask_attributes);
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <main+0xb8>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <main+0xbc>)
 8000ad8:	f003 feec 	bl	80048b4 <osThreadNew>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <main+0xc0>)
 8000ae0:	6013      	str	r3, [r2, #0]

  /* creation of menuTask */
  menuTaskHandle = osThreadNew(StartMenuTask, NULL, &menuTask_attributes);
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <main+0xc4>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <main+0xc8>)
 8000ae8:	f003 fee4 	bl	80048b4 <osThreadNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <main+0xcc>)
 8000af0:	6013      	str	r3, [r2, #0]

  /* creation of extruderTask */
  extruderTaskHandle = osThreadNew(StartExtruderTask, NULL, &extruderTask_attributes);
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <main+0xd0>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <main+0xd4>)
 8000af8:	f003 fedc 	bl	80048b4 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <main+0xd8>)
 8000b00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b02:	f003 feb1 	bl	8004868 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b06:	e7fe      	b.n	8000b06 <main+0x92>
 8000b08:	200000bc 	.word	0x200000bc
 8000b0c:	080075c4 	.word	0x080075c4
 8000b10:	200001a4 	.word	0x200001a4
 8000b14:	08007510 	.word	0x08007510
 8000b18:	08000f69 	.word	0x08000f69
 8000b1c:	20000190 	.word	0x20000190
 8000b20:	08007534 	.word	0x08007534
 8000b24:	08000f79 	.word	0x08000f79
 8000b28:	20000194 	.word	0x20000194
 8000b2c:	08007558 	.word	0x08007558
 8000b30:	08000fdd 	.word	0x08000fdd
 8000b34:	20000198 	.word	0x20000198
 8000b38:	0800757c 	.word	0x0800757c
 8000b3c:	08000fed 	.word	0x08000fed
 8000b40:	2000019c 	.word	0x2000019c
 8000b44:	080075a0 	.word	0x080075a0
 8000b48:	08000ffd 	.word	0x08000ffd
 8000b4c:	200001a0 	.word	0x200001a0

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b096      	sub	sp, #88	; 0x58
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2244      	movs	r2, #68	; 0x44
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f006 fc5c 	bl	800741c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b76:	f000 ff21 	bl	80019bc <HAL_PWREx_ControlVoltageScaling>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b80:	f000 fa52 	bl	8001028 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ff58 	bl	8001a68 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bbe:	f000 fa33 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fb20 	bl	8002220 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000be6:	f000 fa1f 	bl	8001028 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3758      	adds	r7, #88	; 0x58
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <MX_SPI1_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c42:	2207      	movs	r2, #7
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c4e:	2208      	movs	r2, #8
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_SPI1_Init+0x74>)
 8000c54:	f002 f9f6 	bl	8003044 <HAL_SPI_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 f9e3 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000058 	.word	0x20000058
 8000c6c:	40013000 	.word	0x40013000

08000c70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000c90:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <MX_TIM1_Init+0xa4>)
 8000c92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000c96:	224f      	movs	r2, #79	; 0x4f
 8000c98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cba:	4815      	ldr	r0, [pc, #84]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000cbc:	f002 fa65 	bl	800318a <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cc6:	f000 f9af 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000cd8:	f002 fcb0 	bl	800363c <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ce2:	f000 f9a1 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_TIM1_Init+0xa0>)
 8000cf8:	f002 fec6 	bl	8003a88 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d02:	f000 f991 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000bc 	.word	0x200000bc
 8000d14:	40012c00 	.word	0x40012c00

08000d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MX_USART2_UART_Init+0x5c>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d5c:	f002 ff3a 	bl	8003bd4 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d66:	f000 f95f 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000108 	.word	0x20000108
 8000d74:	40004400 	.word	0x40004400

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b72      	ldr	r3, [pc, #456]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a71      	ldr	r2, [pc, #452]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b6f      	ldr	r3, [pc, #444]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da6:	4b6c      	ldr	r3, [pc, #432]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a6b      	ldr	r2, [pc, #428]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b69      	ldr	r3, [pc, #420]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b66      	ldr	r3, [pc, #408]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a65      	ldr	r2, [pc, #404]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b60      	ldr	r3, [pc, #384]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a5f      	ldr	r2, [pc, #380]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a59      	ldr	r2, [pc, #356]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <MX_GPIO_Init+0x1e0>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|X_STEP_Pin
 8000e06:	2200      	movs	r2, #0
 8000e08:	f249 7101 	movw	r1, #38657	; 0x9701
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f000 fdae 	bl	8001970 <HAL_GPIO_WritePin>
                          |SD_CS_Pin|Screen_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Touch_CS_Pin|Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin
 8000e14:	2200      	movs	r2, #0
 8000e16:	f240 41ba 	movw	r1, #1210	; 0x4ba
 8000e1a:	4850      	ldr	r0, [pc, #320]	; (8000f5c <MX_GPIO_Init+0x1e4>)
 8000e1c:	f000 fda8 	bl	8001970 <HAL_GPIO_WritePin>
                          |Z_STEP_Pin|Screen_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_RST_GPIO_Port, Screen_RST_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2104      	movs	r1, #4
 8000e24:	484e      	ldr	r0, [pc, #312]	; (8000f60 <MX_GPIO_Init+0x1e8>)
 8000e26:	f000 fda3 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4848      	ldr	r0, [pc, #288]	; (8000f64 <MX_GPIO_Init+0x1ec>)
 8000e42:	f000 fbd3 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_CS_Pin Z_DIR_Pin ENABLE_Pin SD_CS_Pin
                           Screen_DC_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|SD_CS_Pin
 8000e46:	f249 3301 	movw	r3, #37633	; 0x9301
 8000e4a:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fbc3 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_CS_Pin Y_DIR_Pin X_DIR_Pin Screen_LED_Pin */
  GPIO_InitStruct.Pin = Touch_CS_Pin|Y_DIR_Pin|X_DIR_Pin|Screen_LED_Pin;
 8000e66:	f240 4392 	movw	r3, #1170	; 0x492
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4837      	ldr	r0, [pc, #220]	; (8000f5c <MX_GPIO_Init+0x1e4>)
 8000e80:	f000 fbb4 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_IRQ_Pin Y_STOP_Pin */
  GPIO_InitStruct.Pin = Touch_IRQ_Pin|Y_STOP_Pin;
 8000e84:	2344      	movs	r3, #68	; 0x44
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4831      	ldr	r0, [pc, #196]	; (8000f5c <MX_GPIO_Init+0x1e4>)
 8000e98:	f000 fba8 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_SCK_Pin Touch_MISO_Pin Touch_MOSI_Pin */
  GPIO_InitStruct.Pin = Touch_SCK_Pin|Touch_MISO_Pin|Touch_MOSI_Pin;
 8000e9c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4828      	ldr	r0, [pc, #160]	; (8000f5c <MX_GPIO_Init+0x1e4>)
 8000eba:	f000 fb97 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STOP_Pin */
  GPIO_InitStruct.Pin = X_STOP_Pin;
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(X_STOP_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4824      	ldr	r0, [pc, #144]	; (8000f64 <MX_GPIO_Init+0x1ec>)
 8000ed2:	f000 fb8b 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STEP_Pin */
  GPIO_InitStruct.Pin = X_STEP_Pin;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f000 fb7b 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_SCK_Pin Screen_MISO_Pin Screen_MOSI_Pin */
  GPIO_InitStruct.Pin = Screen_SCK_Pin|Screen_MISO_Pin|Screen_MOSI_Pin;
 8000ef6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <MX_GPIO_Init+0x1ec>)
 8000f14:	f000 fb6a 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_RST_Pin */
  GPIO_InitStruct.Pin = Screen_RST_Pin;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Screen_RST_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_GPIO_Init+0x1e8>)
 8000f30:	f000 fb5c 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_STEP_Pin Z_STEP_Pin */
  GPIO_InitStruct.Pin = Y_STEP_Pin|Z_STEP_Pin;
 8000f34:	2328      	movs	r3, #40	; 0x28
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_GPIO_Init+0x1e4>)
 8000f4c:	f000 fb4e 	bl	80015ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	48000c00 	.word	0x48000c00
 8000f64:	48000800 	.word	0x48000800

08000f68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f003 fd31 	bl	80049d8 <osDelay>
 8000f76:	e7fb      	b.n	8000f70 <StartDefaultTask+0x8>

08000f78 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
  /* Infinite loop */
  home();
 8000f80:	f7ff fc6a 	bl	8000858 <home>
  start_extrusion();
 8000f84:	f7ff fd2c 	bl	80009e0 <start_extrusion>
  move(40,40);
 8000f88:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000fd0 <StartCommandTask+0x58>
 8000f8c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000fd0 <StartCommandTask+0x58>
 8000f90:	f7ff fb6e 	bl	8000670 <move>
  osDelay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f98:	f003 fd1e 	bl	80049d8 <osDelay>
  stop_extrusion();
 8000f9c:	f7ff fd2c 	bl	80009f8 <stop_extrusion>
  set_speed(100);
 8000fa0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000fd4 <StartCommandTask+0x5c>
 8000fa4:	f7ff fb54 	bl	8000650 <set_speed>
  move(80,80);
 8000fa8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000fd8 <StartCommandTask+0x60>
 8000fac:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000fd8 <StartCommandTask+0x60>
 8000fb0:	f7ff fb5e 	bl	8000670 <move>
  start_extrusion();
 8000fb4:	f7ff fd14 	bl	80009e0 <start_extrusion>
  move(40,40);
 8000fb8:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000fd0 <StartCommandTask+0x58>
 8000fbc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000fd0 <StartCommandTask+0x58>
 8000fc0:	f7ff fb56 	bl	8000670 <move>
  stop_extrusion();
 8000fc4:	f7ff fd18 	bl	80009f8 <stop_extrusion>
  //reset_extruder();
  for(;;)
  {
    osDelay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f003 fd05 	bl	80049d8 <osDelay>
 8000fce:	e7fb      	b.n	8000fc8 <StartCommandTask+0x50>
 8000fd0:	42200000 	.word	0x42200000
 8000fd4:	42c80000 	.word	0x42c80000
 8000fd8:	42a00000 	.word	0x42a00000

08000fdc <StartParserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParserTask */
void StartParserTask(void *argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParserTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f003 fcf7 	bl	80049d8 <osDelay>
 8000fea:	e7fb      	b.n	8000fe4 <StartParserTask+0x8>

08000fec <StartMenuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMenuTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f003 fcef 	bl	80049d8 <osDelay>
 8000ffa:	e7fb      	b.n	8000ff4 <StartMenuTask+0x8>

08000ffc <StartExtruderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExtruderTask */
void StartExtruderTask(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartExtruderTask */
  /* Infinite loop */
  while(true){
    extrude();
 8001004:	f7ff fd04 	bl	8000a10 <extrude>
 8001008:	e7fc      	b.n	8001004 <StartExtruderTask+0x8>

0800100a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800101a:	d101      	bne.n	8001020 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800101c:	f000 f9e4 	bl	80013e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_MspInit+0x4c>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_MspInit+0x4c>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_MspInit+0x4c>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	210f      	movs	r1, #15
 800106e:	f06f 0001 	mvn.w	r0, #1
 8001072:	f000 fa91 	bl	8001598 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_SPI_MspInit+0x7c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d128      	bne.n	80010f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_SPI_MspInit+0x80>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	4a16      	ldr	r2, [pc, #88]	; (8001104 <HAL_SPI_MspInit+0x80>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b0:	6613      	str	r3, [r2, #96]	; 0x60
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_SPI_MspInit+0x80>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_SPI_MspInit+0x80>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_SPI_MspInit+0x80>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_SPI_MspInit+0x80>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80010d6:	23e0      	movs	r3, #224	; 0xe0
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e6:	2305      	movs	r3, #5
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f000 fa7a 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40013000 	.word	0x40013000
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_TIM_Base_MspInit+0x38>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10b      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 8001120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001124:	6613      	str	r3, [r2, #96]	; 0x60
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40012c00 	.word	0x40012c00
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0ac      	sub	sp, #176	; 0xb0
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2288      	movs	r2, #136	; 0x88
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f006 f957 	bl	800741c <memset>
  if(huart->Instance==USART2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <HAL_UART_MspInit+0xb0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d13b      	bne.n	80011f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001178:	2302      	movs	r3, #2
 800117a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800117c:	2300      	movs	r3, #0
 800117e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f001 faa1 	bl	80026cc <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001190:	f7ff ff4a 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0xb4>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <HAL_UART_MspInit+0xb4>)
 800119a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119e:	6593      	str	r3, [r2, #88]	; 0x58
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_UART_MspInit+0xb4>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_UART_MspInit+0xb4>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_UART_MspInit+0xb4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_UART_MspInit+0xb4>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c4:	230c      	movs	r3, #12
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f000 f9fe 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	37b0      	adds	r7, #176	; 0xb0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800120e:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_InitTick+0xe0>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <HAL_InitTick+0xe0>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6593      	str	r3, [r2, #88]	; 0x58
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_InitTick+0xe0>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001226:	f107 0210 	add.w	r2, r7, #16
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f001 f9b9 	bl	80025a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001240:	f001 f986 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8001244:	6378      	str	r0, [r7, #52]	; 0x34
 8001246:	e004      	b.n	8001252 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001248:	f001 f982 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 800124c:	4603      	mov	r3, r0
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <HAL_InitTick+0xe4>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	3b01      	subs	r3, #1
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_InitTick+0xe8>)
 8001262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001266:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <HAL_InitTick+0xe8>)
 800126a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001270:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_InitTick+0xe8>)
 8001272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001274:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_InitTick+0xe8>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_InitTick+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_InitTick+0xe8>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001288:	4817      	ldr	r0, [pc, #92]	; (80012e8 <HAL_InitTick+0xe8>)
 800128a:	f001 ff7e 	bl	800318a <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11b      	bne.n	80012d4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <HAL_InitTick+0xe8>)
 800129e:	f002 f85b 	bl	8003358 <HAL_TIM_Base_Start_IT>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d111      	bne.n	80012d4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b0:	201c      	movs	r0, #28
 80012b2:	f000 f98d 	bl	80015d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d808      	bhi.n	80012ce <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	201c      	movs	r0, #28
 80012c2:	f000 f969 	bl	8001598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <HAL_InitTick+0xec>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	e002      	b.n	80012d4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3738      	adds	r7, #56	; 0x38
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	431bde83 	.word	0x431bde83
 80012e8:	200001a8 	.word	0x200001a8
 80012ec:	2000000c 	.word	0x2000000c

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM2_IRQHandler+0x10>)
 8001322:	f002 f889 	bl	8003438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001a8 	.word	0x200001a8

08001330 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SystemInit+0x20>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <SystemInit+0x20>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001358:	f7ff ffea 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <LoopForever+0x6>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LoopForever+0xe>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <LoopForever+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f006 f853 	bl	800742c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001386:	f7ff fb75 	bl	8000a74 <main>

0800138a <LoopForever>:

LoopForever:
    b LoopForever
 800138a:	e7fe      	b.n	800138a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800138c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001398:	08007634 	.word	0x08007634
  ldr r2, =_sbss
 800139c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80013a0:	200022e4 	.word	0x200022e4

080013a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC1_2_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_Init+0x3c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_Init+0x3c>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 f8df 	bl	8001582 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c4:	200f      	movs	r0, #15
 80013c6:	f7ff ff1b 	bl	8001200 <HAL_InitTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	e001      	b.n	80013da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d6:	f7ff fe2d 	bl	8001034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013da:	79fb      	ldrb	r3, [r7, #7]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000010 	.word	0x20000010
 800140c:	200001f4 	.word	0x200001f4

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200001f4 	.word	0x200001f4

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff4c 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015aa:	f7ff ff61 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f7ff ffb1 	bl	800151c <NVIC_EncodePriority>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff80 	bl	80014c8 <__NVIC_SetPriority>
}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff54 	bl	800148c <__NVIC_EnableIRQ>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e17f      	b.n	80018fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8171 	beq.w	80018f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d005      	beq.n	800162c <HAL_GPIO_Init+0x40>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d130      	bne.n	800168e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001662:	2201      	movs	r2, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 0201 	and.w	r2, r3, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b03      	cmp	r3, #3
 8001698:	d118      	bne.n	80016cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d017      	beq.n	8001708 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	6939      	ldr	r1, [r7, #16]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80ac 	beq.w	80018f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_GPIO_Init+0x330>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	4a5e      	ldr	r2, [pc, #376]	; (800191c <HAL_GPIO_Init+0x330>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	; 0x60
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_GPIO_Init+0x330>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b6:	4a5a      	ldr	r2, [pc, #360]	; (8001920 <HAL_GPIO_Init+0x334>)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	3302      	adds	r3, #2
 80017be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	220f      	movs	r2, #15
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e0:	d025      	beq.n	800182e <HAL_GPIO_Init+0x242>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <HAL_GPIO_Init+0x338>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01f      	beq.n	800182a <HAL_GPIO_Init+0x23e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x33c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x23a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4d      	ldr	r2, [pc, #308]	; (800192c <HAL_GPIO_Init+0x340>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x236>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x344>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x232>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <HAL_GPIO_Init+0x348>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x22e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_GPIO_Init+0x34c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x22a>
 8001812:	2306      	movs	r3, #6
 8001814:	e00c      	b.n	8001830 <HAL_GPIO_Init+0x244>
 8001816:	2307      	movs	r3, #7
 8001818:	e00a      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800181a:	2305      	movs	r3, #5
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800181e:	2304      	movs	r3, #4
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x244>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x244>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x244>
 800182e:	2300      	movs	r3, #0
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001840:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_GPIO_Init+0x350>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_GPIO_Init+0x350>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_GPIO_Init+0x350>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_GPIO_Init+0x350>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_GPIO_Init+0x350>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_GPIO_Init+0x350>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_GPIO_Init+0x350>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_GPIO_Init+0x350>)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	f47f ae78 	bne.w	80015fc <HAL_GPIO_Init+0x10>
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	48001000 	.word	0x48001000
 8001934:	48001400 	.word	0x48001400
 8001938:	48001800 	.word	0x48001800
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800198c:	e002      	b.n	8001994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40007000 	.word	0x40007000

080019bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ca:	d130      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d8:	d038      	beq.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2232      	movs	r2, #50	; 0x32
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9b      	lsrs	r3, r3, #18
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a00:	e002      	b.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d102      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f2      	bne.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a28:	d110      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e00f      	b.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d007      	beq.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	431bde83 	.word	0x431bde83

08001a68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e3ca      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7a:	4b97      	ldr	r3, [pc, #604]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a84:	4b94      	ldr	r3, [pc, #592]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80e4 	beq.w	8001c64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4a>
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	f040 808b 	bne.w	8001bc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	f040 8087 	bne.w	8001bc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x62>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e3a2      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x7c>
 8001ada:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_OscConfig+0x88>
 8001ae4:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d223      	bcs.n	8001b3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fd87 	bl	800260c <RCC_SetFlashLatencyFromMSIRange>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e383      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b08:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a72      	ldr	r2, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	496d      	ldr	r1, [pc, #436]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b26:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4968      	ldr	r1, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
 8001b3a:	e025      	b.n	8001b88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4960      	ldr	r1, [pc, #384]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	495b      	ldr	r1, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fd47 	bl	800260c <RCC_SetFlashLatencyFromMSIRange>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e343      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b88:	f000 fc4a 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	4950      	ldr	r1, [pc, #320]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <HAL_RCC_OscConfig+0x278>)
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ba8:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb27 	bl	8001200 <HAL_InitTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d052      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	e327      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d032      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc1c 	bl	8001410 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fc18 	bl	8001410 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e310      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a36      	ldr	r2, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4931      	ldr	r1, [pc, #196]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	492c      	ldr	r1, [pc, #176]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e01a      	b.n	8001c64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a29      	ldr	r2, [pc, #164]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fbe9 	bl	8001410 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c42:	f7ff fbe5 	bl	8001410 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e2dd      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x1da>
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d074      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x21a>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d10e      	bne.n	8001c9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d10b      	bne.n	8001c9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d064      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d160      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e2ba      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x24a>
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e026      	b.n	8001d00 <HAL_RCC_OscConfig+0x298>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cba:	d115      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x280>
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a02      	ldr	r2, [pc, #8]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e014      	b.n	8001d00 <HAL_RCC_OscConfig+0x298>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	080075dc 	.word	0x080075dc
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	4ba0      	ldr	r3, [pc, #640]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a9f      	ldr	r2, [pc, #636]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b9d      	ldr	r3, [pc, #628]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a9c      	ldr	r2, [pc, #624]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb82 	bl	8001410 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fb7e 	bl	8001410 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e276      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d22:	4b92      	ldr	r3, [pc, #584]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2a8>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fb6e 	bl	8001410 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fb6a 	bl	8001410 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e262      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4a:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2d0>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d060      	beq.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x310>
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d119      	bne.n	8001da6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d116      	bne.n	8001da6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d78:	4b7c      	ldr	r3, [pc, #496]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_OscConfig+0x328>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e23f      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	4973      	ldr	r1, [pc, #460]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da4:	e040      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d023      	beq.n	8001df6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6e      	ldr	r2, [pc, #440]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fb29 	bl	8001410 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fb25 	bl	8001410 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e21d      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd4:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	495f      	ldr	r1, [pc, #380]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
 8001df4:	e018      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff fb05 	bl	8001410 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fb01 	bl	8001410 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1f9      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1c:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d03c      	beq.n	8001eae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fae0 	bl	8001410 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff fadc 	bl	8001410 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1d4      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e66:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ef      	beq.n	8001e54 <HAL_RCC_OscConfig+0x3ec>
 8001e74:	e01b      	b.n	8001eae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff fac3 	bl	8001410 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fabf 	bl	8001410 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1b7      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea0:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80a6 	beq.w	8002008 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d118      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f00:	f7ff fa86 	bl	8001410 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f08:	f7ff fa82 	bl	8001410 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e17a      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_RCC_OscConfig+0x508>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4d8>
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3e:	e029      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d115      	bne.n	8001f74 <HAL_RCC_OscConfig+0x50c>
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <HAL_RCC_OscConfig+0x504>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f68:	e014      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
 8001f74:	4b9c      	ldr	r3, [pc, #624]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	4a9b      	ldr	r2, [pc, #620]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f84:	4b98      	ldr	r3, [pc, #608]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a97      	ldr	r2, [pc, #604]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d016      	beq.n	8001fca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fa38 	bl	8001410 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fa34 	bl	8001410 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e12a      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fba:	4b8b      	ldr	r3, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ed      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x53c>
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa21 	bl	8001410 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fa1d 	bl	8001410 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e113      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe8:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ed      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a79      	ldr	r2, [pc, #484]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80fe 	beq.w	800220e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	2b02      	cmp	r3, #2
 8002018:	f040 80d0 	bne.w	80021bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800201c:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	429a      	cmp	r2, r3
 800202e:	d130      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	3b01      	subs	r3, #1
 800203c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d127      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d11f      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800205c:	2a07      	cmp	r2, #7
 800205e:	bf14      	ite	ne
 8002060:	2201      	movne	r2, #1
 8002062:	2200      	moveq	r2, #0
 8002064:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	4293      	cmp	r3, r2
 8002068:	d113      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d109      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d06e      	beq.n	8002170 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d069      	beq.n	800216c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0ad      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80020ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c0:	f7ff f9a6 	bl	8001410 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f9a2 	bl	8001410 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e09a      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	4b40      	ldr	r3, [pc, #256]	; (80021ec <HAL_RCC_OscConfig+0x784>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020f6:	3a01      	subs	r2, #1
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002100:	0212      	lsls	r2, r2, #8
 8002102:	4311      	orrs	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002108:	0852      	lsrs	r2, r2, #1
 800210a:	3a01      	subs	r2, #1
 800210c:	0552      	lsls	r2, r2, #21
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002114:	0852      	lsrs	r2, r2, #1
 8002116:	3a01      	subs	r2, #1
 8002118:	0652      	lsls	r2, r2, #25
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002120:	0912      	lsrs	r2, r2, #4
 8002122:	0452      	lsls	r2, r2, #17
 8002124:	430a      	orrs	r2, r1
 8002126:	4930      	ldr	r1, [pc, #192]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800212c:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2d      	ldr	r2, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002144:	f7ff f964 	bl	8001410 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f960 	bl	8001410 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e058      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216a:	e050      	b.n	800220e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e04f      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d148      	bne.n	800220e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002194:	f7ff f93c 	bl	8001410 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f938 	bl	8001410 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e030      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x734>
 80021ba:	e028      	b.n	800220e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d023      	beq.n	800220a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_RCC_OscConfig+0x780>)
 80021c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7ff f91f 	bl	8001410 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d4:	e00c      	b.n	80021f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff f91b 	bl	8001410 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d905      	bls.n	80021f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e013      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_OscConfig+0x7b0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ec      	bne.n	80021d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_OscConfig+0x7b0>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4905      	ldr	r1, [pc, #20]	; (8002218 <HAL_RCC_OscConfig+0x7b0>)
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_OscConfig+0x7b4>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
 8002208:	e001      	b.n	800220e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	feeefffc 	.word	0xfeeefffc

08002220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0e7      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b75      	ldr	r3, [pc, #468]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b72      	ldr	r3, [pc, #456]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4970      	ldr	r1, [pc, #448]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b6e      	ldr	r3, [pc, #440]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0cf      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d010      	beq.n	8002292 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227c:	429a      	cmp	r2, r3
 800227e:	d908      	bls.n	8002292 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4960      	ldr	r1, [pc, #384]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d04c      	beq.n	8002338 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d121      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0a6      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	4b54      	ldr	r3, [pc, #336]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d115      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e09a      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e08e      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e6:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e086      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4943      	ldr	r1, [pc, #268]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002308:	f7ff f882 	bl	8001410 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7ff f87e 	bl	8001410 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e06e      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d010      	beq.n	8002366 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002350:	429a      	cmp	r2, r3
 8002352:	d208      	bcs.n	8002366 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	492b      	ldr	r1, [pc, #172]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d210      	bcs.n	8002396 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 0207 	bic.w	r2, r3, #7
 800237c:	4923      	ldr	r1, [pc, #140]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_RCC_ClockConfig+0x1ec>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d001      	beq.n	8002396 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e036      	b.n	8002404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4918      	ldr	r1, [pc, #96]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4910      	ldr	r1, [pc, #64]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023d4:	f000 f824 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	490b      	ldr	r1, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1f4>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1f8>)
 80023f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1fc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe ff01 	bl	8001200 <HAL_InitTick>
 80023fe:	4603      	mov	r3, r0
 8002400:	72fb      	strb	r3, [r7, #11]

  return status;
 8002402:	7afb      	ldrb	r3, [r7, #11]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	080075dc 	.word	0x080075dc
 8002418:	20000008 	.word	0x20000008
 800241c:	2000000c 	.word	0x2000000c

08002420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002438:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x34>
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d121      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d11e      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d107      	bne.n	8002470 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002460:	4b31      	ldr	r3, [pc, #196]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e005      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800247c:	4a2b      	ldr	r2, [pc, #172]	; (800252c <HAL_RCC_GetSysClockFreq+0x10c>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d102      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_GetSysClockFreq+0x110>)
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e004      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_RCC_GetSysClockFreq+0x114>)
 80024a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d134      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d003      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0xac>
 80024c4:	e005      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c8:	617b      	str	r3, [r7, #20]
      break;
 80024ca:	e005      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ce:	617b      	str	r3, [r7, #20]
      break;
 80024d0:	e002      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	617b      	str	r3, [r7, #20]
      break;
 80024d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	3301      	adds	r3, #1
 80024e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	fb03 f202 	mul.w	r2, r3, r2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_GetSysClockFreq+0x108>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	0e5b      	lsrs	r3, r3, #25
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	3301      	adds	r3, #1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002518:	69bb      	ldr	r3, [r7, #24]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	080075f4 	.word	0x080075f4
 8002530:	00f42400 	.word	0x00f42400
 8002534:	007a1200 	.word	0x007a1200

08002538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002554:	f7ff fff0 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	080075ec 	.word	0x080075ec

0800257c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002580:	f7ff ffda 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0adb      	lsrs	r3, r3, #11
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4904      	ldr	r1, [pc, #16]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	080075ec 	.word	0x080075ec

080025a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	220f      	movs	r2, #15
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_GetClockConfig+0x5c>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_RCC_GetClockConfig+0x5c>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_RCC_GetClockConfig+0x5c>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_GetClockConfig+0x5c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_RCC_GetClockConfig+0x60>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0207 	and.w	r2, r3, #7
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	40022000 	.word	0x40022000

0800260c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002624:	f7ff f9bc 	bl	80019a0 <HAL_PWREx_GetVoltageRange>
 8002628:	6178      	str	r0, [r7, #20]
 800262a:	e014      	b.n	8002656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6593      	str	r3, [r2, #88]	; 0x58
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002644:	f7ff f9ac 	bl	80019a0 <HAL_PWREx_GetVoltageRange>
 8002648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265c:	d10b      	bne.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d919      	bls.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2ba0      	cmp	r3, #160	; 0xa0
 8002668:	d902      	bls.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800266a:	2302      	movs	r3, #2
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e013      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002670:	2301      	movs	r3, #1
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	e010      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d902      	bls.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800267c:	2303      	movs	r3, #3
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e00a      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d102      	bne.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002688:	2302      	movs	r3, #2
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e004      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d101      	bne.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002694:	2301      	movs	r3, #1
 8002696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 0207 	bic.w	r2, r3, #7
 80026a0:	4909      	ldr	r1, [pc, #36]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40022000 	.word	0x40022000

080026cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026d4:	2300      	movs	r3, #0
 80026d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026d8:	2300      	movs	r3, #0
 80026da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d041      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026f0:	d02a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026f6:	d824      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002702:	d81e      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270c:	d010      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800270e:	e018      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002710:	4b86      	ldr	r3, [pc, #536]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a85      	ldr	r2, [pc, #532]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800271c:	e015      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fabb 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800272e:	e00c      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3320      	adds	r3, #32
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fba6 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002740:	e003      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	74fb      	strb	r3, [r7, #19]
      break;
 8002746:	e000      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002750:	4b76      	ldr	r3, [pc, #472]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800275e:	4973      	ldr	r1, [pc, #460]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002766:	e001      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d041      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800277c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002780:	d02a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002786:	d824      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800278c:	d008      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800278e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002792:	d81e      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d010      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800279e:	e018      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027a0:	4b62      	ldr	r3, [pc, #392]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a61      	ldr	r2, [pc, #388]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ac:	e015      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fa73 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027be:	e00c      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3320      	adds	r3, #32
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fb5e 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d0:	e003      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	74fb      	strb	r3, [r7, #19]
      break;
 80027d6:	e000      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027e0:	4b52      	ldr	r3, [pc, #328]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ee:	494f      	ldr	r1, [pc, #316]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027f6:	e001      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a0 	beq.w	800294a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	4a40      	ldr	r2, [pc, #256]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	; 0x58
 8002830:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283c:	2301      	movs	r3, #1
 800283e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002840:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800284c:	f7fe fde0 	bl	8001410 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002852:	e009      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002854:	f7fe fddc 	bl	8001410 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	74fb      	strb	r3, [r7, #19]
        break;
 8002866:	e005      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ef      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d15c      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002884:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01f      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	d019      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a20      	ldr	r2, [pc, #128]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a1c      	ldr	r2, [pc, #112]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe fd9b 	bl	8001410 <HAL_GetTick>
 80028da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028dc:	e00b      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fd97 	bl	8001410 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d902      	bls.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	74fb      	strb	r3, [r7, #19]
            break;
 80028f4:	e006      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ec      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10c      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291a:	4904      	ldr	r1, [pc, #16]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002922:	e009      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
 8002928:	e006      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002938:	7c7b      	ldrb	r3, [r7, #17]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4b9e      	ldr	r3, [pc, #632]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a9d      	ldr	r2, [pc, #628]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002956:	4b98      	ldr	r3, [pc, #608]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 0203 	bic.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	4994      	ldr	r1, [pc, #592]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002978:	4b8f      	ldr	r3, [pc, #572]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 020c 	bic.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	498c      	ldr	r1, [pc, #560]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800299a:	4b87      	ldr	r3, [pc, #540]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4983      	ldr	r1, [pc, #524]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029bc:	4b7e      	ldr	r3, [pc, #504]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	497b      	ldr	r1, [pc, #492]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029de:	4b76      	ldr	r3, [pc, #472]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	4972      	ldr	r1, [pc, #456]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a00:	4b6d      	ldr	r3, [pc, #436]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	496a      	ldr	r1, [pc, #424]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a22:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	4961      	ldr	r1, [pc, #388]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a44:	4b5c      	ldr	r3, [pc, #368]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a52:	4959      	ldr	r1, [pc, #356]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a66:	4b54      	ldr	r3, [pc, #336]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	4950      	ldr	r1, [pc, #320]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a88:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	4948      	ldr	r1, [pc, #288]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aaa:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	493f      	ldr	r1, [pc, #252]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d028      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ada:	4937      	ldr	r1, [pc, #220]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aea:	d106      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
 8002af8:	e011      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f8c8 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d028      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	491f      	ldr	r1, [pc, #124]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4a1a      	ldr	r2, [pc, #104]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b54:	60d3      	str	r3, [r2, #12]
 8002b56:	e011      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2101      	movs	r1, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f899 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d02b      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	4908      	ldr	r1, [pc, #32]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a02      	ldr	r2, [pc, #8]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
 8002bb4:	e014      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f867 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d02f      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfa:	4928      	ldr	r1, [pc, #160]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2102      	movs	r1, #2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f844 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d014      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	74bb      	strb	r3, [r7, #18]
 8002c26:	e011      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3320      	adds	r3, #32
 8002c36:	2102      	movs	r1, #2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f925 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c66:	490d      	ldr	r1, [pc, #52]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8a:	4904      	ldr	r1, [pc, #16]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cae:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10d      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cd2:	4b6c      	ldr	r3, [pc, #432]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d047      	beq.n	8002d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e044      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d018      	beq.n	8002d26 <RCCEx_PLLSAI1_Config+0x86>
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d825      	bhi.n	8002d44 <RCCEx_PLLSAI1_Config+0xa4>
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <RCCEx_PLLSAI1_Config+0x62>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d009      	beq.n	8002d14 <RCCEx_PLLSAI1_Config+0x74>
 8002d00:	e020      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d02:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11d      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d12:	e01a      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d14:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e013      	b.n	8002d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d32:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d42:	e006      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e004      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	4944      	ldr	r1, [pc, #272]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d17d      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d7c:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a40      	ldr	r2, [pc, #256]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe fb42 	bl	8001410 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8e:	e009      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d90:	f7fe fb3e 	bl	8001410 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	73fb      	strb	r3, [r7, #15]
        break;
 8002da2:	e005      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ef      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d160      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	0211      	lsls	r1, r2, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68d2      	ldr	r2, [r2, #12]
 8002dd2:	0912      	lsrs	r2, r2, #4
 8002dd4:	0452      	lsls	r2, r2, #17
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	492a      	ldr	r1, [pc, #168]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	610b      	str	r3, [r1, #16]
 8002dde:	e027      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d112      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	0211      	lsls	r1, r2, #8
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6912      	ldr	r2, [r2, #16]
 8002dfc:	0852      	lsrs	r2, r2, #1
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	0552      	lsls	r2, r2, #21
 8002e02:	430a      	orrs	r2, r1
 8002e04:	491f      	ldr	r1, [pc, #124]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]
 8002e0a:	e011      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6892      	ldr	r2, [r2, #8]
 8002e1c:	0211      	lsls	r1, r2, #8
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6952      	ldr	r2, [r2, #20]
 8002e22:	0852      	lsrs	r2, r2, #1
 8002e24:	3a01      	subs	r2, #1
 8002e26:	0652      	lsls	r2, r2, #25
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	4916      	ldr	r1, [pc, #88]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fae8 	bl	8001410 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e42:	e009      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e44:	f7fe fae4 	bl	8001410 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d902      	bls.n	8002e58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	73fb      	strb	r3, [r7, #15]
          break;
 8002e56:	e005      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4904      	ldr	r1, [pc, #16]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e96:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d018      	beq.n	8002ed4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ea2:	4b67      	ldr	r3, [pc, #412]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0203 	and.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d10d      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eba:	4b61      	ldr	r3, [pc, #388]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d047      	beq.n	8002f5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	e044      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d018      	beq.n	8002f0e <RCCEx_PLLSAI2_Config+0x86>
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d825      	bhi.n	8002f2c <RCCEx_PLLSAI2_Config+0xa4>
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d002      	beq.n	8002eea <RCCEx_PLLSAI2_Config+0x62>
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d009      	beq.n	8002efc <RCCEx_PLLSAI2_Config+0x74>
 8002ee8:	e020      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eea:	4b55      	ldr	r3, [pc, #340]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11d      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efa:	e01a      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d116      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0c:	e013      	b.n	8002f36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f1a:	4b49      	ldr	r3, [pc, #292]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f2a:	e006      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e004      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f32:	bf00      	nop
 8002f34:	e002      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	430b      	orrs	r3, r1
 8002f58:	4939      	ldr	r1, [pc, #228]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d167      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a35      	ldr	r2, [pc, #212]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe fa4e 	bl	8001410 <HAL_GetTick>
 8002f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f76:	e009      	b.n	8002f8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f78:	f7fe fa4a 	bl	8001410 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	73fb      	strb	r3, [r7, #15]
        break;
 8002f8a:	e005      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ef      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d14a      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d111      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fa4:	4b26      	ldr	r3, [pc, #152]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6892      	ldr	r2, [r2, #8]
 8002fb4:	0211      	lsls	r1, r2, #8
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68d2      	ldr	r2, [r2, #12]
 8002fba:	0912      	lsrs	r2, r2, #4
 8002fbc:	0452      	lsls	r2, r2, #17
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	491f      	ldr	r1, [pc, #124]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	614b      	str	r3, [r1, #20]
 8002fc6:	e011      	b.n	8002fec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	0211      	lsls	r1, r2, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6912      	ldr	r2, [r2, #16]
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0652      	lsls	r2, r2, #25
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	4916      	ldr	r1, [pc, #88]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a13      	ldr	r2, [pc, #76]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fa0a 	bl	8001410 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ffe:	e009      	b.n	8003014 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003000:	f7fe fa06 	bl	8001410 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	73fb      	strb	r3, [r7, #15]
          break;
 8003012:	e005      	b.n	8003020 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ef      	beq.n	8003000 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4904      	ldr	r1, [pc, #16]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e095      	b.n	8003182 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003066:	d009      	beq.n	800307c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
 800306e:	e005      	b.n	800307c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fff4 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030bc:	d902      	bls.n	80030c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e002      	b.n	80030ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030d2:	d007      	beq.n	80030e4 <HAL_SPI_Init+0xa0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030dc:	d002      	beq.n	80030e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	ea42 0103 	orr.w	r1, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	f003 0204 	and.w	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003160:	ea42 0103 	orr.w	r1, r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e049      	b.n	8003230 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd ffa9 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f000 fb29 	bl	8003820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e047      	b.n	80032e0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_TIM_Base_Start+0xb4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_TIM_Base_Start+0x66>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d018      	beq.n	800329e <HAL_TIM_Base_Start+0x66>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_TIM_Base_Start+0xb8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_TIM_Base_Start+0x66>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_TIM_Base_Start+0xbc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_TIM_Base_Start+0x66>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_TIM_Base_Start+0xc0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_TIM_Base_Start+0x66>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_TIM_Base_Start+0xc4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIM_Base_Start+0x66>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_TIM_Base_Start+0xc8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d115      	bne.n	80032ca <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <HAL_TIM_Base_Start+0xcc>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d015      	beq.n	80032dc <HAL_TIM_Base_Start+0xa4>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d011      	beq.n	80032dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c8:	e008      	b.n	80032dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e000      	b.n	80032de <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40013400 	.word	0x40013400
 8003300:	40014000 	.word	0x40014000
 8003304:	00010007 	.word	0x00010007

08003308 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	f241 1311 	movw	r3, #4369	; 0x1111
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10f      	bne.n	8003340 <HAL_TIM_Base_Stop+0x38>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	f240 4344 	movw	r3, #1092	; 0x444
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_TIM_Base_Stop+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04f      	b.n	8003410 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a23      	ldr	r2, [pc, #140]	; (800341c <HAL_TIM_Base_Start_IT+0xc4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_TIM_Base_Start_IT+0x76>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d018      	beq.n	80033ce <HAL_TIM_Base_Start_IT+0x76>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_TIM_Base_Start_IT+0xc8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_TIM_Base_Start_IT+0x76>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_TIM_Base_Start_IT+0xcc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_TIM_Base_Start_IT+0x76>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_TIM_Base_Start_IT+0xd0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_TIM_Base_Start_IT+0x76>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1b      	ldr	r2, [pc, #108]	; (800342c <HAL_TIM_Base_Start_IT+0xd4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_TIM_Base_Start_IT+0x76>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d115      	bne.n	80033fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <HAL_TIM_Base_Start_IT+0xdc>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d015      	beq.n	800340c <HAL_TIM_Base_Start_IT+0xb4>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e6:	d011      	beq.n	800340c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f8:	e008      	b.n	800340c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e000      	b.n	800340e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40012c00 	.word	0x40012c00
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40013400 	.word	0x40013400
 8003430:	40014000 	.word	0x40014000
 8003434:	00010007 	.word	0x00010007

08003438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d020      	beq.n	800349c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0202 	mvn.w	r2, #2
 800346c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f9ad 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f99f 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f9b0 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d020      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0204 	mvn.w	r2, #4
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f987 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f979 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f98a 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0208 	mvn.w	r2, #8
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2204      	movs	r2, #4
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f961 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f953 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f964 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0210 	mvn.w	r2, #16
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2208      	movs	r2, #8
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f93b 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f92d 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f93e 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0201 	mvn.w	r2, #1
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fd33 	bl	800100a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 faf2 	bl	8003bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00c      	beq.n	80035ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 faea 	bl	8003bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8fd 	bl	800380a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00c      	beq.n	8003634 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0220 	mvn.w	r2, #32
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fab2 	bl	8003b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_TIM_ConfigClockSource+0x1c>
 8003654:	2302      	movs	r3, #2
 8003656:	e0b6      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x18a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800367a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003694:	d03e      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0xd8>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	f200 8087 	bhi.w	80037ac <HAL_TIM_ConfigClockSource+0x170>
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	f000 8086 	beq.w	80037b2 <HAL_TIM_ConfigClockSource+0x176>
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	d87f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
 80036ac:	2b70      	cmp	r3, #112	; 0x70
 80036ae:	d01a      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xaa>
 80036b0:	2b70      	cmp	r3, #112	; 0x70
 80036b2:	d87b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d050      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x11e>
 80036b8:	2b60      	cmp	r3, #96	; 0x60
 80036ba:	d877      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
 80036bc:	2b50      	cmp	r3, #80	; 0x50
 80036be:	d03c      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xfe>
 80036c0:	2b50      	cmp	r3, #80	; 0x50
 80036c2:	d873      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d058      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x13e>
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d86f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d064      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15e>
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d86b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d060      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15e>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d867      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d05c      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15e>
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d05a      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x15e>
 80036e4:	e062      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036f6:	f000 f9a7 	bl	8003a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	609a      	str	r2, [r3, #8]
      break;
 8003712:	e04f      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003724:	f000 f990 	bl	8003a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003736:	609a      	str	r2, [r3, #8]
      break;
 8003738:	e03c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003746:	461a      	mov	r2, r3
 8003748:	f000 f904 	bl	8003954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2150      	movs	r1, #80	; 0x50
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f95d 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 8003758:	e02c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003766:	461a      	mov	r2, r3
 8003768:	f000 f923 	bl	80039b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2160      	movs	r1, #96	; 0x60
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f94d 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 8003778:	e01c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	461a      	mov	r2, r3
 8003788:	f000 f8e4 	bl	8003954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2140      	movs	r1, #64	; 0x40
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f93d 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 8003798:	e00c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f000 f934 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 80037aa:	e003      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e000      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a40      	ldr	r2, [pc, #256]	; (8003934 <TIM_Base_SetConfig+0x114>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383e:	d00f      	beq.n	8003860 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a3d      	ldr	r2, [pc, #244]	; (8003938 <TIM_Base_SetConfig+0x118>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00b      	beq.n	8003860 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a3c      	ldr	r2, [pc, #240]	; (800393c <TIM_Base_SetConfig+0x11c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3b      	ldr	r2, [pc, #236]	; (8003940 <TIM_Base_SetConfig+0x120>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3a      	ldr	r2, [pc, #232]	; (8003944 <TIM_Base_SetConfig+0x124>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d108      	bne.n	8003872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2f      	ldr	r2, [pc, #188]	; (8003934 <TIM_Base_SetConfig+0x114>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01f      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003880:	d01b      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <TIM_Base_SetConfig+0x118>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d017      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2b      	ldr	r2, [pc, #172]	; (800393c <TIM_Base_SetConfig+0x11c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <TIM_Base_SetConfig+0x120>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00f      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a29      	ldr	r2, [pc, #164]	; (8003944 <TIM_Base_SetConfig+0x124>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00b      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a28      	ldr	r2, [pc, #160]	; (8003948 <TIM_Base_SetConfig+0x128>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <TIM_Base_SetConfig+0x12c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_Base_SetConfig+0x9a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <TIM_Base_SetConfig+0x130>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00f      	beq.n	8003918 <TIM_Base_SetConfig+0xf8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a12      	ldr	r2, [pc, #72]	; (8003944 <TIM_Base_SetConfig+0x124>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_Base_SetConfig+0xf8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a11      	ldr	r2, [pc, #68]	; (8003948 <TIM_Base_SetConfig+0x128>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <TIM_Base_SetConfig+0xf8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <TIM_Base_SetConfig+0x12c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_Base_SetConfig+0xf8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <TIM_Base_SetConfig+0x130>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d103      	bne.n	8003920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	615a      	str	r2, [r3, #20]
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00
 8003944:	40013400 	.word	0x40013400
 8003948:	40014000 	.word	0x40014000
 800394c:	40014400 	.word	0x40014400
 8003950:	40014800 	.word	0x40014800

08003954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f023 0201 	bic.w	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 030a 	bic.w	r3, r3, #10
 8003990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f023 0210 	bic.w	r2, r3, #16
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	031b      	lsls	r3, r3, #12
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 0307 	orr.w	r3, r3, #7
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	609a      	str	r2, [r3, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e068      	b.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d004      	beq.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ada:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d018      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10c      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40013400 	.word	0x40013400
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	40000c00 	.word	0x40000c00
 8003b94:	40014000 	.word	0x40014000

08003b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e040      	b.n	8003c68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd faa6 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fae0 	bl	80041e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f825 	bl	8003c70 <UART_SetConfig>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e01b      	b.n	8003c68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fb5f 	bl	8004324 <UART_CheckIdleState>
 8003c66:	4603      	mov	r3, r0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4ba4      	ldr	r3, [pc, #656]	; (8003f30 <UART_SetConfig+0x2c0>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a99      	ldr	r2, [pc, #612]	; (8003f34 <UART_SetConfig+0x2c4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	430a      	orrs	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a90      	ldr	r2, [pc, #576]	; (8003f38 <UART_SetConfig+0x2c8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d126      	bne.n	8003d48 <UART_SetConfig+0xd8>
 8003cfa:	4b90      	ldr	r3, [pc, #576]	; (8003f3c <UART_SetConfig+0x2cc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d81b      	bhi.n	8003d40 <UART_SetConfig+0xd0>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <UART_SetConfig+0xa0>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d31 	.word	0x08003d31
 8003d18:	08003d29 	.word	0x08003d29
 8003d1c:	08003d39 	.word	0x08003d39
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d26:	e116      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e112      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003d30:	2304      	movs	r3, #4
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e10e      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003d38:	2308      	movs	r3, #8
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e10a      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003d40:	2310      	movs	r3, #16
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e106      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a7c      	ldr	r2, [pc, #496]	; (8003f40 <UART_SetConfig+0x2d0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d138      	bne.n	8003dc4 <UART_SetConfig+0x154>
 8003d52:	4b7a      	ldr	r3, [pc, #488]	; (8003f3c <UART_SetConfig+0x2cc>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d82d      	bhi.n	8003dbc <UART_SetConfig+0x14c>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0xf8>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003dbd 	.word	0x08003dbd
 8003d74:	08003dbd 	.word	0x08003dbd
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dbd 	.word	0x08003dbd
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003da5 	.word	0x08003da5
 8003d8c:	08003dbd 	.word	0x08003dbd
 8003d90:	08003dbd 	.word	0x08003dbd
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e0d8      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003da4:	2302      	movs	r3, #2
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e0d4      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003dac:	2304      	movs	r3, #4
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db2:	e0d0      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003db4:	2308      	movs	r3, #8
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dba:	e0cc      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e0c8      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5e      	ldr	r2, [pc, #376]	; (8003f44 <UART_SetConfig+0x2d4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d125      	bne.n	8003e1a <UART_SetConfig+0x1aa>
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <UART_SetConfig+0x2cc>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d016      	beq.n	8003e0a <UART_SetConfig+0x19a>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d818      	bhi.n	8003e12 <UART_SetConfig+0x1a2>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d00a      	beq.n	8003dfa <UART_SetConfig+0x18a>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d814      	bhi.n	8003e12 <UART_SetConfig+0x1a2>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <UART_SetConfig+0x182>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d008      	beq.n	8003e02 <UART_SetConfig+0x192>
 8003df0:	e00f      	b.n	8003e12 <UART_SetConfig+0x1a2>
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df8:	e0ad      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e00:	e0a9      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e02:	2304      	movs	r3, #4
 8003e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e08:	e0a5      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e10:	e0a1      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e12:	2310      	movs	r3, #16
 8003e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e18:	e09d      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a4a      	ldr	r2, [pc, #296]	; (8003f48 <UART_SetConfig+0x2d8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d125      	bne.n	8003e70 <UART_SetConfig+0x200>
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <UART_SetConfig+0x2cc>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e30:	d016      	beq.n	8003e60 <UART_SetConfig+0x1f0>
 8003e32:	2bc0      	cmp	r3, #192	; 0xc0
 8003e34:	d818      	bhi.n	8003e68 <UART_SetConfig+0x1f8>
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d00a      	beq.n	8003e50 <UART_SetConfig+0x1e0>
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d814      	bhi.n	8003e68 <UART_SetConfig+0x1f8>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <UART_SetConfig+0x1d8>
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d008      	beq.n	8003e58 <UART_SetConfig+0x1e8>
 8003e46:	e00f      	b.n	8003e68 <UART_SetConfig+0x1f8>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4e:	e082      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e50:	2302      	movs	r3, #2
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e56:	e07e      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5e:	e07a      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e60:	2308      	movs	r3, #8
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e66:	e076      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6e:	e072      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <UART_SetConfig+0x2dc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d12a      	bne.n	8003ed0 <UART_SetConfig+0x260>
 8003e7a:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <UART_SetConfig+0x2cc>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e88:	d01a      	beq.n	8003ec0 <UART_SetConfig+0x250>
 8003e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e8e:	d81b      	bhi.n	8003ec8 <UART_SetConfig+0x258>
 8003e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e94:	d00c      	beq.n	8003eb0 <UART_SetConfig+0x240>
 8003e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9a:	d815      	bhi.n	8003ec8 <UART_SetConfig+0x258>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <UART_SetConfig+0x238>
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea4:	d008      	beq.n	8003eb8 <UART_SetConfig+0x248>
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x258>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e052      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e04e      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e04a      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec6:	e046      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e042      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <UART_SetConfig+0x2c4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d13a      	bne.n	8003f50 <UART_SetConfig+0x2e0>
 8003eda:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <UART_SetConfig+0x2cc>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee8:	d01a      	beq.n	8003f20 <UART_SetConfig+0x2b0>
 8003eea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eee:	d81b      	bhi.n	8003f28 <UART_SetConfig+0x2b8>
 8003ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef4:	d00c      	beq.n	8003f10 <UART_SetConfig+0x2a0>
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d815      	bhi.n	8003f28 <UART_SetConfig+0x2b8>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <UART_SetConfig+0x298>
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d008      	beq.n	8003f18 <UART_SetConfig+0x2a8>
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x2b8>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e022      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e01e      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	e01a      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f26:	e016      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2e:	e012      	b.n	8003f56 <UART_SetConfig+0x2e6>
 8003f30:	efff69f3 	.word	0xefff69f3
 8003f34:	40008000 	.word	0x40008000
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40004400 	.word	0x40004400
 8003f44:	40004800 	.word	0x40004800
 8003f48:	40004c00 	.word	0x40004c00
 8003f4c:	40005000 	.word	0x40005000
 8003f50:	2310      	movs	r3, #16
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a9f      	ldr	r2, [pc, #636]	; (80041d8 <UART_SetConfig+0x568>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d17a      	bne.n	8004056 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d824      	bhi.n	8003fb2 <UART_SetConfig+0x342>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <UART_SetConfig+0x300>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fa3 	.word	0x08003fa3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fb3 	.word	0x08003fb3
 8003f90:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f94:	f7fe fadc 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003f98:	61f8      	str	r0, [r7, #28]
        break;
 8003f9a:	e010      	b.n	8003fbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b8f      	ldr	r3, [pc, #572]	; (80041dc <UART_SetConfig+0x56c>)
 8003f9e:	61fb      	str	r3, [r7, #28]
        break;
 8003fa0:	e00d      	b.n	8003fbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe fa3d 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 8003fa6:	61f8      	str	r0, [r7, #28]
        break;
 8003fa8:	e009      	b.n	8003fbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	61fb      	str	r3, [r7, #28]
        break;
 8003fb0:	e005      	b.n	8003fbe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80fb 	beq.w	80041bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d305      	bcc.n	8003fe2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d903      	bls.n	8003fea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe8:	e0e8      	b.n	80041bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2200      	movs	r2, #0
 8003fee:	461c      	mov	r4, r3
 8003ff0:	4615      	mov	r5, r2
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	022b      	lsls	r3, r5, #8
 8003ffc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004000:	0222      	lsls	r2, r4, #8
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	6849      	ldr	r1, [r1, #4]
 8004006:	0849      	lsrs	r1, r1, #1
 8004008:	2000      	movs	r0, #0
 800400a:	4688      	mov	r8, r1
 800400c:	4681      	mov	r9, r0
 800400e:	eb12 0a08 	adds.w	sl, r2, r8
 8004012:	eb43 0b09 	adc.w	fp, r3, r9
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004024:	4650      	mov	r0, sl
 8004026:	4659      	mov	r1, fp
 8004028:	f7fc f8d2 	bl	80001d0 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800403a:	d308      	bcc.n	800404e <UART_SetConfig+0x3de>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004042:	d204      	bcs.n	800404e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	60da      	str	r2, [r3, #12]
 800404c:	e0b6      	b.n	80041bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004054:	e0b2      	b.n	80041bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405e:	d15e      	bne.n	800411e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004064:	2b08      	cmp	r3, #8
 8004066:	d828      	bhi.n	80040ba <UART_SetConfig+0x44a>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0x400>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004095 	.word	0x08004095
 8004074:	0800409d 	.word	0x0800409d
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040bb 	.word	0x080040bb
 8004080:	080040ab 	.word	0x080040ab
 8004084:	080040bb 	.word	0x080040bb
 8004088:	080040bb 	.word	0x080040bb
 800408c:	080040bb 	.word	0x080040bb
 8004090:	080040b3 	.word	0x080040b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004094:	f7fe fa5c 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8004098:	61f8      	str	r0, [r7, #28]
        break;
 800409a:	e014      	b.n	80040c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7fe fa6e 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 80040a0:	61f8      	str	r0, [r7, #28]
        break;
 80040a2:	e010      	b.n	80040c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a4:	4b4d      	ldr	r3, [pc, #308]	; (80041dc <UART_SetConfig+0x56c>)
 80040a6:	61fb      	str	r3, [r7, #28]
        break;
 80040a8:	e00d      	b.n	80040c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040aa:	f7fe f9b9 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80040ae:	61f8      	str	r0, [r7, #28]
        break;
 80040b0:	e009      	b.n	80040c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b6:	61fb      	str	r3, [r7, #28]
        break;
 80040b8:	e005      	b.n	80040c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d077      	beq.n	80041bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005a      	lsls	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b0f      	cmp	r3, #15
 80040e6:	d916      	bls.n	8004116 <UART_SetConfig+0x4a6>
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d212      	bcs.n	8004116 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f023 030f 	bic.w	r3, r3, #15
 80040f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	b29a      	uxth	r2, r3
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	4313      	orrs	r3, r2
 800410a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	8afa      	ldrh	r2, [r7, #22]
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	e052      	b.n	80041bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800411c:	e04e      	b.n	80041bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800411e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004122:	2b08      	cmp	r3, #8
 8004124:	d827      	bhi.n	8004176 <UART_SetConfig+0x506>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <UART_SetConfig+0x4bc>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004151 	.word	0x08004151
 8004130:	08004159 	.word	0x08004159
 8004134:	08004161 	.word	0x08004161
 8004138:	08004177 	.word	0x08004177
 800413c:	08004167 	.word	0x08004167
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
 800414c:	0800416f 	.word	0x0800416f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fe f9fe 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8004154:	61f8      	str	r0, [r7, #28]
        break;
 8004156:	e014      	b.n	8004182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7fe fa10 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 800415c:	61f8      	str	r0, [r7, #28]
        break;
 800415e:	e010      	b.n	8004182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <UART_SetConfig+0x56c>)
 8004162:	61fb      	str	r3, [r7, #28]
        break;
 8004164:	e00d      	b.n	8004182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fe f95b 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 800416a:	61f8      	str	r0, [r7, #28]
        break;
 800416c:	e009      	b.n	8004182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004172:	61fb      	str	r3, [r7, #28]
        break;
 8004174:	e005      	b.n	8004182 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004180:	bf00      	nop
    }

    if (pclk != 0U)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d019      	beq.n	80041bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	085a      	lsrs	r2, r3, #1
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	441a      	add	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	d909      	bls.n	80041b6 <UART_SetConfig+0x546>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d205      	bcs.n	80041b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	e002      	b.n	80041bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	40008000 	.word	0x40008000
 80041dc:	00f42400 	.word	0x00f42400

080041e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042de:	d10a      	bne.n	80042f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b098      	sub	sp, #96	; 0x60
 8004328:	af02      	add	r7, sp, #8
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004334:	f7fd f86c 	bl	8001410 <HAL_GetTick>
 8004338:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b08      	cmp	r3, #8
 8004346:	d12e      	bne.n	80043a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004350:	2200      	movs	r2, #0
 8004352:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f88c 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d021      	beq.n	80043a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004376:	653b      	str	r3, [r7, #80]	; 0x50
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800438e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e6      	bne.n	8004362 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e062      	b.n	800446c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d149      	bne.n	8004448 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043bc:	2200      	movs	r2, #0
 80043be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f856 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d03c      	beq.n	8004448 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	623b      	str	r3, [r7, #32]
   return(result);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
 80043ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e6      	bne.n	80043ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3308      	adds	r3, #8
 800441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004420:	61fa      	str	r2, [r7, #28]
 8004422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	69b9      	ldr	r1, [r7, #24]
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	617b      	str	r3, [r7, #20]
   return(result);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e5      	bne.n	8004400 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e011      	b.n	800446c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3758      	adds	r7, #88	; 0x58
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	e049      	b.n	800451a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d045      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7fc ffbf 	bl	8001410 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e048      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d031      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d110      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2208      	movs	r2, #8
 80044ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f838 	bl	8004542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2208      	movs	r2, #8
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e029      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f4:	d111      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f81e 	bl	8004542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e00f      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4013      	ands	r3, r2
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	429a      	cmp	r2, r3
 8004536:	d0a6      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004542:	b480      	push	{r7}
 8004544:	b095      	sub	sp, #84	; 0x54
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800455e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	643b      	str	r3, [r7, #64]	; 0x40
 800456a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800456e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	61fb      	str	r3, [r7, #28]
   return(result);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800459c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d118      	bne.n	80045ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6979      	ldr	r1, [r7, #20]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	613b      	str	r3, [r7, #16]
   return(result);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e6      	bne.n	80045b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045fe:	bf00      	nop
 8004600:	3754      	adds	r7, #84	; 0x54
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004610:	4904      	ldr	r1, [pc, #16]	; (8004624 <MX_FATFS_Init+0x18>)
 8004612:	4805      	ldr	r0, [pc, #20]	; (8004628 <MX_FATFS_Init+0x1c>)
 8004614:	f000 f8b0 	bl	8004778 <FATFS_LinkDriver>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <MX_FATFS_Init+0x20>)
 800461e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200001fc 	.word	0x200001fc
 8004628:	20000014 	.word	0x20000014
 800462c:	200001f8 	.word	0x200001f8

08004630 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <USER_initialize+0x24>)
 800463c:	2201      	movs	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <USER_initialize+0x24>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000011 	.word	0x20000011

08004658 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <USER_status+0x24>)
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <USER_status+0x24>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000011 	.word	0x20000011

08004680 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004690:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80046ae:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	603a      	str	r2, [r7, #0]
 80046c6:	71fb      	strb	r3, [r7, #7]
 80046c8:	460b      	mov	r3, r1
 80046ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
    return res;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80046f6:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 80046f8:	7a5b      	ldrb	r3, [r3, #9]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d131      	bne.n	8004764 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 8004702:	7a5b      	ldrb	r3, [r3, #9]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 800470a:	2100      	movs	r1, #0
 800470c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 8004710:	7a5b      	ldrb	r3, [r3, #9]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	4a17      	ldr	r2, [pc, #92]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 8004720:	7a5b      	ldrb	r3, [r3, #9]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	4b13      	ldr	r3, [pc, #76]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 8004728:	4413      	add	r3, r2
 800472a:	79fa      	ldrb	r2, [r7, #7]
 800472c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 8004730:	7a5b      	ldrb	r3, [r3, #9]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	b2d1      	uxtb	r1, r2
 8004738:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <FATFS_LinkDriverEx+0x94>)
 800473a:	7251      	strb	r1, [r2, #9]
 800473c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800473e:	7dbb      	ldrb	r3, [r7, #22]
 8004740:	3330      	adds	r3, #48	; 0x30
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3301      	adds	r3, #1
 800474c:	223a      	movs	r2, #58	; 0x3a
 800474e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3302      	adds	r3, #2
 8004754:	222f      	movs	r2, #47	; 0x2f
 8004756:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	3303      	adds	r3, #3
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004764:	7dfb      	ldrb	r3, [r7, #23]
}
 8004766:	4618      	mov	r0, r3
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000200 	.word	0x20000200

08004778 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ffaa 	bl	80046e0 <FATFS_LinkDriverEx>
 800478c:	4603      	mov	r3, r0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <__NVIC_SetPriority>:
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db0a      	blt.n	80047c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	490c      	ldr	r1, [pc, #48]	; (80047e4 <__NVIC_SetPriority+0x4c>)
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047c0:	e00a      	b.n	80047d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4908      	ldr	r1, [pc, #32]	; (80047e8 <__NVIC_SetPriority+0x50>)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3b04      	subs	r3, #4
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	440b      	add	r3, r1
 80047d6:	761a      	strb	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000e100 	.word	0xe000e100
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <SysTick_Handler+0x1c>)
 80047f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047f4:	f001 fdaa 	bl	800634c <xTaskGetSchedulerState>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d001      	beq.n	8004802 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80047fe:	f002 fb93 	bl	8006f28 <xPortSysTickHandler>
  }
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	e000e010 	.word	0xe000e010

0800480c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004810:	2100      	movs	r1, #0
 8004812:	f06f 0004 	mvn.w	r0, #4
 8004816:	f7ff ffbf 	bl	8004798 <__NVIC_SetPriority>
#endif
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004826:	f3ef 8305 	mrs	r3, IPSR
 800482a:	603b      	str	r3, [r7, #0]
  return(result);
 800482c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004832:	f06f 0305 	mvn.w	r3, #5
 8004836:	607b      	str	r3, [r7, #4]
 8004838:	e00c      	b.n	8004854 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <osKernelInitialize+0x44>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d105      	bne.n	800484e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <osKernelInitialize+0x44>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004848:	2300      	movs	r3, #0
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	e002      	b.n	8004854 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004854:	687b      	ldr	r3, [r7, #4]
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	2000020c 	.word	0x2000020c

08004868 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486e:	f3ef 8305 	mrs	r3, IPSR
 8004872:	603b      	str	r3, [r7, #0]
  return(result);
 8004874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <osKernelStart+0x1a>
    stat = osErrorISR;
 800487a:	f06f 0305 	mvn.w	r3, #5
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	e010      	b.n	80048a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <osKernelStart+0x48>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d109      	bne.n	800489e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800488a:	f7ff ffbf 	bl	800480c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <osKernelStart+0x48>)
 8004890:	2202      	movs	r2, #2
 8004892:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004894:	f001 f912 	bl	8005abc <vTaskStartScheduler>
      stat = osOK;
 8004898:	2300      	movs	r3, #0
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	e002      	b.n	80048a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048a4:	687b      	ldr	r3, [r7, #4]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2000020c 	.word	0x2000020c

080048b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af04      	add	r7, sp, #16
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c4:	f3ef 8305 	mrs	r3, IPSR
 80048c8:	617b      	str	r3, [r7, #20]
  return(result);
 80048ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d17e      	bne.n	80049ce <osThreadNew+0x11a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d07b      	beq.n	80049ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048da:	2318      	movs	r3, #24
 80048dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d045      	beq.n	800497a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <osThreadNew+0x48>
        name = attr->name;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <osThreadNew+0x6e>
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b38      	cmp	r3, #56	; 0x38
 8004914:	d805      	bhi.n	8004922 <osThreadNew+0x6e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <osThreadNew+0x72>
        return (NULL);
 8004922:	2300      	movs	r3, #0
 8004924:	e054      	b.n	80049d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <osThreadNew+0xa8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b5b      	cmp	r3, #91	; 0x5b
 8004944:	d90a      	bls.n	800495c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800494a:	2b00      	cmp	r3, #0
 800494c:	d006      	beq.n	800495c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <osThreadNew+0xa8>
        mem = 1;
 8004956:	2301      	movs	r3, #1
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e010      	b.n	800497e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10c      	bne.n	800497e <osThreadNew+0xca>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <osThreadNew+0xca>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <osThreadNew+0xca>
          mem = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e001      	b.n	800497e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d110      	bne.n	80049a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800498c:	9202      	str	r2, [sp, #8]
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6a3a      	ldr	r2, [r7, #32]
 8004998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 feb8 	bl	8005710 <xTaskCreateStatic>
 80049a0:	4603      	mov	r3, r0
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	e013      	b.n	80049ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d110      	bne.n	80049ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 ff03 	bl	80057ca <xTaskCreate>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <osThreadNew+0x11a>
            hTask = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049ce:	693b      	ldr	r3, [r7, #16]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e0:	f3ef 8305 	mrs	r3, IPSR
 80049e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <osDelay+0x1c>
    stat = osErrorISR;
 80049ec:	f06f 0305 	mvn.w	r3, #5
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e007      	b.n	8004a04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <osDelay+0x2c>
      vTaskDelay(ticks);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 f828 	bl	8005a54 <vTaskDelay>
    }
  }

  return (stat);
 8004a04:	68fb      	ldr	r3, [r7, #12]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b08a      	sub	sp, #40	; 0x28
 8004a12:	af02      	add	r7, sp, #8
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a1e:	f3ef 8305 	mrs	r3, IPSR
 8004a22:	613b      	str	r3, [r7, #16]
  return(result);
 8004a24:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d15f      	bne.n	8004aea <osMessageQueueNew+0xdc>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d05c      	beq.n	8004aea <osMessageQueueNew+0xdc>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d059      	beq.n	8004aea <osMessageQueueNew+0xdc>
    mem = -1;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d029      	beq.n	8004a96 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d012      	beq.n	8004a70 <osMessageQueueNew+0x62>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2b4f      	cmp	r3, #79	; 0x4f
 8004a50:	d90e      	bls.n	8004a70 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <osMessageQueueNew+0x62>
        mem = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e014      	b.n	8004a9a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d110      	bne.n	8004a9a <osMessageQueueNew+0x8c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10c      	bne.n	8004a9a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <osMessageQueueNew+0x8c>
          mem = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e001      	b.n	8004a9a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10b      	bne.n	8004ab8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	9100      	str	r1, [sp, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f970 	bl	8004d94 <xQueueGenericCreateStatic>
 8004ab4:	61f8      	str	r0, [r7, #28]
 8004ab6:	e008      	b.n	8004aca <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f9de 	bl	8004e84 <xQueueGenericCreate>
 8004ac8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <osMessageQueueNew+0xd0>
        name = attr->name;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e001      	b.n	8004ae2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004ae2:	6979      	ldr	r1, [r7, #20]
 8004ae4:	69f8      	ldr	r0, [r7, #28]
 8004ae6:	f000 fdb5 	bl	8005654 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004aea:	69fb      	ldr	r3, [r7, #28]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a06      	ldr	r2, [pc, #24]	; (8004b24 <vApplicationGetIdleTaskMemory+0x30>)
 8004b0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000210 	.word	0x20000210
 8004b24:	2000026c 	.word	0x2000026c

08004b28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a06      	ldr	r2, [pc, #24]	; (8004b58 <vApplicationGetTimerTaskMemory+0x30>)
 8004b3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b46:	601a      	str	r2, [r3, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	2000046c 	.word	0x2000046c
 8004b58:	200004c8 	.word	0x200004c8

08004b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f103 0208 	add.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295
 8004b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f103 0208 	add.w	r2, r3, #8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f103 0208 	add.w	r2, r3, #8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d103      	bne.n	8004c1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e00c      	b.n	8004c38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3308      	adds	r3, #8
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e002      	b.n	8004c2c <vListInsert+0x2e>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d2f6      	bcs.n	8004c26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6892      	ldr	r2, [r2, #8]
 8004c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6852      	ldr	r2, [r2, #4]
 8004c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d103      	bne.n	8004ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1e5a      	subs	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cee:	f002 f889 	bl	8006e04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	441a      	add	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	68f9      	ldr	r1, [r7, #12]
 8004d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	441a      	add	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d114      	bne.n	8004d6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01a      	beq.n	8004d82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3310      	adds	r3, #16
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 f93d 	bl	8005fd0 <xTaskRemoveFromEventList>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d012      	beq.n	8004d82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <xQueueGenericReset+0xcc>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	e009      	b.n	8004d82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3310      	adds	r3, #16
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fef2 	bl	8004b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3324      	adds	r3, #36	; 0x24
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff feed 	bl	8004b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d82:	f002 f86f 	bl	8006e64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d86:	2301      	movs	r3, #1
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	; 0x38
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <xQueueGenericCreateStatic+0x52>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <xQueueGenericCreateStatic+0x56>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <xQueueGenericCreateStatic+0x58>
 8004dea:	2300      	movs	r3, #0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	623b      	str	r3, [r7, #32]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <xQueueGenericCreateStatic+0x7e>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <xQueueGenericCreateStatic+0x82>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <xQueueGenericCreateStatic+0x84>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	61fb      	str	r3, [r7, #28]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e32:	2350      	movs	r3, #80	; 0x50
 8004e34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d00a      	beq.n	8004e52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	61bb      	str	r3, [r7, #24]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f83f 	bl	8004ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3730      	adds	r7, #48	; 0x30
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	613b      	str	r3, [r7, #16]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3350      	adds	r3, #80	; 0x50
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 f8c3 	bl	8007048 <pvPortMalloc>
 8004ec2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d011      	beq.n	8004eee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	3350      	adds	r3, #80	; 0x50
 8004ed2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004edc:	79fa      	ldrb	r2, [r7, #7]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f805 	bl	8004ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eee:	69bb      	ldr	r3, [r7, #24]
	}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e002      	b.n	8004f1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f26:	2101      	movs	r1, #1
 8004f28:	69b8      	ldr	r0, [r7, #24]
 8004f2a:	f7ff fecb 	bl	8004cc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	; 0x38
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xQueueGenericSend+0x32>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <xQueueGenericSend+0x40>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <xQueueGenericSend+0x44>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <xQueueGenericSend+0x46>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <xQueueGenericSend+0x60>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d103      	bne.n	8004fae <xQueueGenericSend+0x6e>
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <xQueueGenericSend+0x72>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueGenericSend+0x74>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericSend+0x8e>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	623b      	str	r3, [r7, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fce:	f001 f9bd 	bl	800634c <xTaskGetSchedulerState>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <xQueueGenericSend+0x9e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <xQueueGenericSend+0xa2>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <xQueueGenericSend+0xa4>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericSend+0xbe>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	61fb      	str	r3, [r7, #28]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ffe:	f001 ff01 	bl	8006e04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <xQueueGenericSend+0xd4>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d129      	bne.n	8005068 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501a:	f000 fa0b 	bl	8005434 <prvCopyDataToQueue>
 800501e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	3324      	adds	r3, #36	; 0x24
 800502c:	4618      	mov	r0, r3
 800502e:	f000 ffcf 	bl	8005fd0 <xTaskRemoveFromEventList>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005038:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <xQueueGenericSend+0x1f8>)
 800503a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	e00a      	b.n	8005060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005050:	4b39      	ldr	r3, [pc, #228]	; (8005138 <xQueueGenericSend+0x1f8>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005060:	f001 ff00 	bl	8006e64 <vPortExitCritical>
				return pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	e063      	b.n	8005130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800506e:	f001 fef9 	bl	8006e64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005072:	2300      	movs	r3, #0
 8005074:	e05c      	b.n	8005130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f001 f809 	bl	8006098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800508a:	f001 feeb 	bl	8006e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800508e:	f000 fd7b 	bl	8005b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005092:	f001 feb7 	bl	8006e04 <vPortEnterCritical>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509c:	b25b      	sxtb	r3, r3
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d103      	bne.n	80050ac <xQueueGenericSend+0x16c>
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b2:	b25b      	sxtb	r3, r3
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d103      	bne.n	80050c2 <xQueueGenericSend+0x182>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c2:	f001 fecf 	bl	8006e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050c6:	1d3a      	adds	r2, r7, #4
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fff8 	bl	80060c4 <xTaskCheckForTimeOut>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d124      	bne.n	8005124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050dc:	f000 faa2 	bl	8005624 <prvIsQueueFull>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	3310      	adds	r3, #16
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 ff1e 	bl	8005f30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f6:	f000 fa2d 	bl	8005554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050fa:	f000 fd53 	bl	8005ba4 <xTaskResumeAll>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f47f af7c 	bne.w	8004ffe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <xQueueGenericSend+0x1f8>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	e772      	b.n	8004ffe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 fa1b 	bl	8005554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800511e:	f000 fd41 	bl	8005ba4 <xTaskResumeAll>
 8005122:	e76c      	b.n	8004ffe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005126:	f000 fa15 	bl	8005554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800512a:	f000 fd3b 	bl	8005ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800512e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005130:	4618      	mov	r0, r3
 8005132:	3738      	adds	r7, #56	; 0x38
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b090      	sub	sp, #64	; 0x40
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <xQueueGenericSendFromISR+0x3c>
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <xQueueGenericSendFromISR+0x40>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <xQueueGenericSendFromISR+0x42>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d103      	bne.n	80051a6 <xQueueGenericSendFromISR+0x6a>
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <xQueueGenericSendFromISR+0x6e>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueGenericSendFromISR+0x70>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	623b      	str	r3, [r7, #32]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c6:	f001 feff 	bl	8006fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051ca:	f3ef 8211 	mrs	r2, BASEPRI
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	61fa      	str	r2, [r7, #28]
 80051e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <xQueueGenericSendFromISR+0xbc>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d12f      	bne.n	8005258 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800520e:	f000 f911 	bl	8005434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005212:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d112      	bne.n	8005242 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d016      	beq.n	8005252 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	3324      	adds	r3, #36	; 0x24
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fed1 	bl	8005fd0 <xTaskRemoveFromEventList>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00e      	beq.n	8005252 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e007      	b.n	8005252 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005246:	3301      	adds	r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	b25a      	sxtb	r2, r3
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005252:	2301      	movs	r3, #1
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005256:	e001      	b.n	800525c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005258:	2300      	movs	r3, #0
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800526a:	4618      	mov	r0, r3
 800526c:	3740      	adds	r7, #64	; 0x40
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	; 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005280:	2300      	movs	r3, #0
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <xQueueReceive+0x30>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	623b      	str	r3, [r7, #32]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <xQueueReceive+0x3e>
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <xQueueReceive+0x42>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueReceive+0x44>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xQueueReceive+0x5e>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	61fb      	str	r3, [r7, #28]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052d2:	f001 f83b 	bl	800634c <xTaskGetSchedulerState>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <xQueueReceive+0x6e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <xQueueReceive+0x72>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueReceive+0x74>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <xQueueReceive+0x8e>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	61bb      	str	r3, [r7, #24]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005302:	f001 fd7f 	bl	8006e04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01f      	beq.n	8005352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005316:	f000 f8f7 	bl	8005508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00f      	beq.n	800534a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	3310      	adds	r3, #16
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fe4e 	bl	8005fd0 <xTaskRemoveFromEventList>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800533a:	4b3d      	ldr	r3, [pc, #244]	; (8005430 <xQueueReceive+0x1bc>)
 800533c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800534a:	f001 fd8b 	bl	8006e64 <vPortExitCritical>
				return pdPASS;
 800534e:	2301      	movs	r3, #1
 8005350:	e069      	b.n	8005426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005358:	f001 fd84 	bl	8006e64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800535c:	2300      	movs	r3, #0
 800535e:	e062      	b.n	8005426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005366:	f107 0310 	add.w	r3, r7, #16
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fe94 	bl	8006098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005374:	f001 fd76 	bl	8006e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005378:	f000 fc06 	bl	8005b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800537c:	f001 fd42 	bl	8006e04 <vPortEnterCritical>
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005386:	b25b      	sxtb	r3, r3
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d103      	bne.n	8005396 <xQueueReceive+0x122>
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800539c:	b25b      	sxtb	r3, r3
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d103      	bne.n	80053ac <xQueueReceive+0x138>
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ac:	f001 fd5a 	bl	8006e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053b0:	1d3a      	adds	r2, r7, #4
 80053b2:	f107 0310 	add.w	r3, r7, #16
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fe83 	bl	80060c4 <xTaskCheckForTimeOut>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d123      	bne.n	800540c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c6:	f000 f917 	bl	80055f8 <prvIsQueueEmpty>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d017      	beq.n	8005400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	3324      	adds	r3, #36	; 0x24
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4611      	mov	r1, r2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fda9 	bl	8005f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e0:	f000 f8b8 	bl	8005554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053e4:	f000 fbde 	bl	8005ba4 <xTaskResumeAll>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d189      	bne.n	8005302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <xQueueReceive+0x1bc>)
 80053f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	e780      	b.n	8005302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005402:	f000 f8a7 	bl	8005554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005406:	f000 fbcd 	bl	8005ba4 <xTaskResumeAll>
 800540a:	e77a      	b.n	8005302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800540c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540e:	f000 f8a1 	bl	8005554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005412:	f000 fbc7 	bl	8005ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005418:	f000 f8ee 	bl	80055f8 <prvIsQueueEmpty>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	f43f af6f 	beq.w	8005302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005426:	4618      	mov	r0, r3
 8005428:	3730      	adds	r7, #48	; 0x30
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d14d      	bne.n	80054f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 ff92 	bl	8006388 <xTaskPriorityDisinherit>
 8005464:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	e043      	b.n	80054f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d119      	bne.n	80054a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6858      	ldr	r0, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	461a      	mov	r2, r3
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	f001 fff8 	bl	8007474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	d32b      	bcc.n	80054f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e026      	b.n	80054f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68d8      	ldr	r0, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	461a      	mov	r2, r3
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	f001 ffde 	bl	8007474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	425b      	negs	r3, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d207      	bcs.n	80054e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	425b      	negs	r3, r3
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d105      	bne.n	80054f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d018      	beq.n	800554c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	441a      	add	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	d303      	bcc.n	800553c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68d9      	ldr	r1, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	461a      	mov	r2, r3
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	f001 ff94 	bl	8007474 <memcpy>
	}
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800555c:	f001 fc52 	bl	8006e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005568:	e011      	b.n	800558e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d012      	beq.n	8005598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3324      	adds	r3, #36	; 0x24
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fd2a 	bl	8005fd0 <xTaskRemoveFromEventList>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005582:	f000 fe01 	bl	8006188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	3b01      	subs	r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800558e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	dce9      	bgt.n	800556a <prvUnlockQueue+0x16>
 8005596:	e000      	b.n	800559a <prvUnlockQueue+0x46>
					break;
 8005598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055a2:	f001 fc5f 	bl	8006e64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055a6:	f001 fc2d 	bl	8006e04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b2:	e011      	b.n	80055d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d012      	beq.n	80055e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3310      	adds	r3, #16
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fd05 	bl	8005fd0 <xTaskRemoveFromEventList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055cc:	f000 fddc 	bl	8006188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dce9      	bgt.n	80055b4 <prvUnlockQueue+0x60>
 80055e0:	e000      	b.n	80055e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	22ff      	movs	r2, #255	; 0xff
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055ec:	f001 fc3a 	bl	8006e64 <vPortExitCritical>
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005600:	f001 fc00 	bl	8006e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e001      	b.n	8005616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005616:	f001 fc25 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 800561a:	68fb      	ldr	r3, [r7, #12]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800562c:	f001 fbea 	bl	8006e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	429a      	cmp	r2, r3
 800563a:	d102      	bne.n	8005642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800563c:	2301      	movs	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e001      	b.n	8005646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005646:	f001 fc0d 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e014      	b.n	800568e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005664:	4a0f      	ldr	r2, [pc, #60]	; (80056a4 <vQueueAddToRegistry+0x50>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005670:	490c      	ldr	r1, [pc, #48]	; (80056a4 <vQueueAddToRegistry+0x50>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800567a:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <vQueueAddToRegistry+0x50>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4413      	add	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005686:	e006      	b.n	8005696 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b07      	cmp	r3, #7
 8005692:	d9e7      	bls.n	8005664 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	200008c8 	.word	0x200008c8

080056a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056b8:	f001 fba4 	bl	8006e04 <vPortEnterCritical>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d103      	bne.n	80056d2 <vQueueWaitForMessageRestricted+0x2a>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d8:	b25b      	sxtb	r3, r3
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d103      	bne.n	80056e8 <vQueueWaitForMessageRestricted+0x40>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e8:	f001 fbbc 	bl	8006e64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fc3b 	bl	8005f78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005702:	6978      	ldr	r0, [r7, #20]
 8005704:	f7ff ff26 	bl	8005554 <prvUnlockQueue>
	}
 8005708:	bf00      	nop
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08e      	sub	sp, #56	; 0x38
 8005714:	af04      	add	r7, sp, #16
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	623b      	str	r3, [r7, #32]
}
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xTaskCreateStatic+0x46>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	61fb      	str	r3, [r7, #28]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005756:	235c      	movs	r3, #92	; 0x5c
 8005758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b5c      	cmp	r3, #92	; 0x5c
 800575e:	d00a      	beq.n	8005776 <xTaskCreateStatic+0x66>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61bb      	str	r3, [r7, #24]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01e      	beq.n	80057bc <xTaskCreateStatic+0xac>
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005796:	2300      	movs	r3, #0
 8005798:	9303      	str	r3, [sp, #12]
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f850 	bl	8005854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057b6:	f000 f8dd 	bl	8005974 <prvAddNewTaskToReadyList>
 80057ba:	e001      	b.n	80057c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057c0:	697b      	ldr	r3, [r7, #20]
	}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3728      	adds	r7, #40	; 0x28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b08c      	sub	sp, #48	; 0x30
 80057ce:	af04      	add	r7, sp, #16
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fc32 	bl	8007048 <pvPortMalloc>
 80057e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057ec:	205c      	movs	r0, #92	; 0x5c
 80057ee:	f001 fc2b 	bl	8007048 <pvPortMalloc>
 80057f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005800:	e005      	b.n	800580e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f001 fcec 	bl	80071e0 <vPortFree>
 8005808:	e001      	b.n	800580e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	2300      	movs	r3, #0
 8005820:	9303      	str	r3, [sp, #12]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	9302      	str	r3, [sp, #8]
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f80e 	bl	8005854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005838:	69f8      	ldr	r0, [r7, #28]
 800583a:	f000 f89b 	bl	8005974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800583e:	2301      	movs	r3, #1
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e002      	b.n	800584a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800584a:	69bb      	ldr	r3, [r7, #24]
	}
 800584c:	4618      	mov	r0, r3
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	461a      	mov	r2, r3
 800586c:	21a5      	movs	r1, #165	; 0xa5
 800586e:	f001 fdd5 	bl	800741c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800587c:	3b01      	subs	r3, #1
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f023 0307 	bic.w	r3, r3, #7
 800588a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	617b      	str	r3, [r7, #20]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01f      	beq.n	80058f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e012      	b.n	80058de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	7819      	ldrb	r1, [r3, #0]
 80058c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	3334      	adds	r3, #52	; 0x34
 80058c8:	460a      	mov	r2, r1
 80058ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	3301      	adds	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b0f      	cmp	r3, #15
 80058e2:	d9e9      	bls.n	80058b8 <prvInitialiseNewTask+0x64>
 80058e4:	e000      	b.n	80058e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80058e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f0:	e003      	b.n	80058fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	2b37      	cmp	r3, #55	; 0x37
 80058fe:	d901      	bls.n	8005904 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005900:	2337      	movs	r3, #55	; 0x37
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	2200      	movs	r2, #0
 8005914:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f93e 	bl	8004b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	3318      	adds	r3, #24
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f939 	bl	8004b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	69b8      	ldr	r0, [r7, #24]
 8005954:	f001 f928 	bl	8006ba8 <pxPortInitialiseStack>
 8005958:	4602      	mov	r2, r0
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800596a:	bf00      	nop
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800597c:	f001 fa42 	bl	8006e04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <prvAddNewTaskToReadyList+0xc4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <prvAddNewTaskToReadyList+0xc4>)
 8005988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005992:	4a2a      	ldr	r2, [pc, #168]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <prvAddNewTaskToReadyList+0xc4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d110      	bne.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059a0:	f000 fc16 	bl	80061d0 <prvInitialiseTaskLists>
 80059a4:	e00d      	b.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <prvAddNewTaskToReadyList+0xcc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ae:	4b23      	ldr	r3, [pc, #140]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d802      	bhi.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <prvAddNewTaskToReadyList+0xd0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <prvAddNewTaskToReadyList+0xd0>)
 80059ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <prvAddNewTaskToReadyList+0xd0>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <prvAddNewTaskToReadyList+0xd4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d903      	bls.n	80059e8 <prvAddNewTaskToReadyList+0x74>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <prvAddNewTaskToReadyList+0xd4>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <prvAddNewTaskToReadyList+0xd8>)
 80059f6:	441a      	add	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f7ff f8d9 	bl	8004bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a04:	f001 fa2e 	bl	8006e64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <prvAddNewTaskToReadyList+0xcc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00e      	beq.n	8005a2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d207      	bcs.n	8005a2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <prvAddNewTaskToReadyList+0xdc>)
 8005a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000ddc 	.word	0x20000ddc
 8005a3c:	20000908 	.word	0x20000908
 8005a40:	20000de8 	.word	0x20000de8
 8005a44:	20000df8 	.word	0x20000df8
 8005a48:	20000de4 	.word	0x20000de4
 8005a4c:	2000090c 	.word	0x2000090c
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d017      	beq.n	8005a96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <vTaskDelay+0x60>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <vTaskDelay+0x30>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	60bb      	str	r3, [r7, #8]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a84:	f000 f880 	bl	8005b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a88:	2100      	movs	r1, #0
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fcea 	bl	8006464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a90:	f000 f888 	bl	8005ba4 <xTaskResumeAll>
 8005a94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d107      	bne.n	8005aac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <vTaskDelay+0x64>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000e04 	.word	0x20000e04
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aca:	463a      	mov	r2, r7
 8005acc:	1d39      	adds	r1, r7, #4
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff f80e 	bl	8004af4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	9202      	str	r2, [sp, #8]
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	460a      	mov	r2, r1
 8005aea:	4921      	ldr	r1, [pc, #132]	; (8005b70 <vTaskStartScheduler+0xb4>)
 8005aec:	4821      	ldr	r0, [pc, #132]	; (8005b74 <vTaskStartScheduler+0xb8>)
 8005aee:	f7ff fe0f 	bl	8005710 <xTaskCreateStatic>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4a20      	ldr	r2, [pc, #128]	; (8005b78 <vTaskStartScheduler+0xbc>)
 8005af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005af8:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <vTaskStartScheduler+0xbc>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e001      	b.n	8005b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d102      	bne.n	8005b16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b10:	f000 fcfc 	bl	800650c <xTimerCreateTimerTask>
 8005b14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d116      	bne.n	8005b4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	613b      	str	r3, [r7, #16]
}
 8005b2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b30:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <vTaskStartScheduler+0xc0>)
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <vTaskStartScheduler+0xc4>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <vTaskStartScheduler+0xc8>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b44:	f001 f8bc 	bl	8006cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b48:	e00e      	b.n	8005b68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d10a      	bne.n	8005b68 <vTaskStartScheduler+0xac>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60fb      	str	r3, [r7, #12]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <vTaskStartScheduler+0xaa>
}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	080074f8 	.word	0x080074f8
 8005b74:	080061a1 	.word	0x080061a1
 8005b78:	20000e00 	.word	0x20000e00
 8005b7c:	20000dfc 	.word	0x20000dfc
 8005b80:	20000de8 	.word	0x20000de8
 8005b84:	20000de0 	.word	0x20000de0

08005b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b8c:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <vTaskSuspendAll+0x18>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	4a03      	ldr	r2, [pc, #12]	; (8005ba0 <vTaskSuspendAll+0x18>)
 8005b94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	20000e04 	.word	0x20000e04

08005ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bb2:	4b42      	ldr	r3, [pc, #264]	; (8005cbc <xTaskResumeAll+0x118>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	603b      	str	r3, [r7, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bd0:	f001 f918 	bl	8006e04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <xTaskResumeAll+0x118>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4a38      	ldr	r2, [pc, #224]	; (8005cbc <xTaskResumeAll+0x118>)
 8005bdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bde:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <xTaskResumeAll+0x118>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d162      	bne.n	8005cac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005be6:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <xTaskResumeAll+0x11c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d05e      	beq.n	8005cac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bee:	e02f      	b.n	8005c50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf0:	4b34      	ldr	r3, [pc, #208]	; (8005cc4 <xTaskResumeAll+0x120>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3318      	adds	r3, #24
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff f837 	bl	8004c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f832 	bl	8004c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <xTaskResumeAll+0x124>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d903      	bls.n	8005c20 <xTaskResumeAll+0x7c>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <xTaskResumeAll+0x124>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4a27      	ldr	r2, [pc, #156]	; (8005ccc <xTaskResumeAll+0x128>)
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe ffbd 	bl	8004bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4b23      	ldr	r3, [pc, #140]	; (8005cd0 <xTaskResumeAll+0x12c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <xTaskResumeAll+0x130>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c50:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <xTaskResumeAll+0x120>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1cb      	bne.n	8005bf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c5e:	f000 fb55 	bl	800630c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c62:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <xTaskResumeAll+0x134>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d010      	beq.n	8005c90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c6e:	f000 f847 	bl	8005d00 <xTaskIncrementTick>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c78:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <xTaskResumeAll+0x130>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f1      	bne.n	8005c6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <xTaskResumeAll+0x134>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <xTaskResumeAll+0x130>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <xTaskResumeAll+0x138>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cac:	f001 f8da 	bl	8006e64 <vPortExitCritical>

	return xAlreadyYielded;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000e04 	.word	0x20000e04
 8005cc0:	20000ddc 	.word	0x20000ddc
 8005cc4:	20000d9c 	.word	0x20000d9c
 8005cc8:	20000de4 	.word	0x20000de4
 8005ccc:	2000090c 	.word	0x2000090c
 8005cd0:	20000908 	.word	0x20000908
 8005cd4:	20000df0 	.word	0x20000df0
 8005cd8:	20000dec 	.word	0x20000dec
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <xTaskGetTickCount+0x1c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cec:	687b      	ldr	r3, [r7, #4]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000de0 	.word	0x20000de0

08005d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0a:	4b4f      	ldr	r3, [pc, #316]	; (8005e48 <xTaskIncrementTick+0x148>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 808f 	bne.w	8005e32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d14:	4b4d      	ldr	r3, [pc, #308]	; (8005e4c <xTaskIncrementTick+0x14c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d1c:	4a4b      	ldr	r2, [pc, #300]	; (8005e4c <xTaskIncrementTick+0x14c>)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d120      	bne.n	8005d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d28:	4b49      	ldr	r3, [pc, #292]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	603b      	str	r3, [r7, #0]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xTaskIncrementTick+0x46>
 8005d48:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4a3f      	ldr	r2, [pc, #252]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	4a3d      	ldr	r2, [pc, #244]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	f000 fad1 	bl	800630c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d6a:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d349      	bcc.n	8005e08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d74:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	601a      	str	r2, [r3, #0]
					break;
 8005d86:	e03f      	b.n	8005e08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d88:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d203      	bcs.n	8005da8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005da0:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005da6:	e02f      	b.n	8005e08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe ff5f 	bl	8004c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	3318      	adds	r3, #24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe ff56 	bl	8004c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	4b25      	ldr	r3, [pc, #148]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d903      	bls.n	8005dd8 <xTaskIncrementTick+0xd8>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4a1f      	ldr	r2, [pc, #124]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005de6:	441a      	add	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7fe fee1 	bl	8004bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <xTaskIncrementTick+0x168>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d3b8      	bcc.n	8005d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e06:	e7b5      	b.n	8005d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e08:	4b17      	ldr	r3, [pc, #92]	; (8005e68 <xTaskIncrementTick+0x168>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4915      	ldr	r1, [pc, #84]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d901      	bls.n	8005e24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e24:	4b11      	ldr	r3, [pc, #68]	; (8005e6c <xTaskIncrementTick+0x16c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e004      	b.n	8005e3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <xTaskIncrementTick+0x170>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <xTaskIncrementTick+0x170>)
 8005e3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e3c:	697b      	ldr	r3, [r7, #20]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000e04 	.word	0x20000e04
 8005e4c:	20000de0 	.word	0x20000de0
 8005e50:	20000d94 	.word	0x20000d94
 8005e54:	20000d98 	.word	0x20000d98
 8005e58:	20000df4 	.word	0x20000df4
 8005e5c:	20000dfc 	.word	0x20000dfc
 8005e60:	20000de4 	.word	0x20000de4
 8005e64:	2000090c 	.word	0x2000090c
 8005e68:	20000908 	.word	0x20000908
 8005e6c:	20000df0 	.word	0x20000df0
 8005e70:	20000dec 	.word	0x20000dec

08005e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e7a:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <vTaskSwitchContext+0xa8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e82:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <vTaskSwitchContext+0xac>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e88:	e041      	b.n	8005f0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005e8a:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <vTaskSwitchContext+0xac>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e90:	4b24      	ldr	r3, [pc, #144]	; (8005f24 <vTaskSwitchContext+0xb0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e010      	b.n	8005eba <vTaskSwitchContext+0x46>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <vTaskSwitchContext+0x3e>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	491b      	ldr	r1, [pc, #108]	; (8005f28 <vTaskSwitchContext+0xb4>)
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0e4      	beq.n	8005e98 <vTaskSwitchContext+0x24>
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <vTaskSwitchContext+0xb4>)
 8005eda:	4413      	add	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d104      	bne.n	8005efe <vTaskSwitchContext+0x8a>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <vTaskSwitchContext+0xb8>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4a06      	ldr	r2, [pc, #24]	; (8005f24 <vTaskSwitchContext+0xb0>)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000e04 	.word	0x20000e04
 8005f20:	20000df0 	.word	0x20000df0
 8005f24:	20000de4 	.word	0x20000de4
 8005f28:	2000090c 	.word	0x2000090c
 8005f2c:	20000908 	.word	0x20000908

08005f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <vTaskPlaceOnEventList+0x44>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fe fe4d 	bl	8004bfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f64:	2101      	movs	r1, #1
 8005f66:	6838      	ldr	r0, [r7, #0]
 8005f68:	f000 fa7c 	bl	8006464 <prvAddCurrentTaskToDelayedList>
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20000908 	.word	0x20000908

08005f78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	617b      	str	r3, [r7, #20]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <vTaskPlaceOnEventListRestricted+0x54>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3318      	adds	r3, #24
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7fe fe04 	bl	8004bb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	f000 fa51 	bl	8006464 <prvAddCurrentTaskToDelayedList>
	}
 8005fc2:	bf00      	nop
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000908 	.word	0x20000908

08005fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60fb      	str	r3, [r7, #12]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	3318      	adds	r3, #24
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe fe35 	bl	8004c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <xTaskRemoveFromEventList+0xb0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d11d      	bne.n	800604a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3304      	adds	r3, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fe2c 	bl	8004c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	4b19      	ldr	r3, [pc, #100]	; (8006084 <xTaskRemoveFromEventList+0xb4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d903      	bls.n	800602c <xTaskRemoveFromEventList+0x5c>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	4a16      	ldr	r2, [pc, #88]	; (8006084 <xTaskRemoveFromEventList+0xb4>)
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4a13      	ldr	r2, [pc, #76]	; (8006088 <xTaskRemoveFromEventList+0xb8>)
 800603a:	441a      	add	r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe fdb7 	bl	8004bb6 <vListInsertEnd>
 8006048:	e005      	b.n	8006056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3318      	adds	r3, #24
 800604e:	4619      	mov	r1, r3
 8006050:	480e      	ldr	r0, [pc, #56]	; (800608c <xTaskRemoveFromEventList+0xbc>)
 8006052:	f7fe fdb0 	bl	8004bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <xTaskRemoveFromEventList+0xc0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	429a      	cmp	r2, r3
 8006062:	d905      	bls.n	8006070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <xTaskRemoveFromEventList+0xc4>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e001      	b.n	8006074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006074:	697b      	ldr	r3, [r7, #20]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000e04 	.word	0x20000e04
 8006084:	20000de4 	.word	0x20000de4
 8006088:	2000090c 	.word	0x2000090c
 800608c:	20000d9c 	.word	0x20000d9c
 8006090:	20000908 	.word	0x20000908
 8006094:	20000df0 	.word	0x20000df0

08006098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <vTaskInternalSetTimeOutState+0x24>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <vTaskInternalSetTimeOutState+0x28>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	605a      	str	r2, [r3, #4]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	20000df4 	.word	0x20000df4
 80060c0:	20000de0 	.word	0x20000de0

080060c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	613b      	str	r3, [r7, #16]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006106:	f000 fe7d 	bl	8006e04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800610a:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <xTaskCheckForTimeOut+0xbc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d102      	bne.n	800612a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e023      	b.n	8006172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <xTaskCheckForTimeOut+0xc0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d007      	beq.n	8006146 <xTaskCheckForTimeOut+0x82>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006140:	2301      	movs	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e015      	b.n	8006172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	429a      	cmp	r2, r3
 800614e:	d20b      	bcs.n	8006168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff9b 	bl	8006098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	e004      	b.n	8006172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006172:	f000 fe77 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 8006176:	69fb      	ldr	r3, [r7, #28]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000de0 	.word	0x20000de0
 8006184:	20000df4 	.word	0x20000df4

08006188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <vTaskMissedYield+0x14>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000df0 	.word	0x20000df0

080061a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061a8:	f000 f852 	bl	8006250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <prvIdleTask+0x28>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d9f9      	bls.n	80061a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <prvIdleTask+0x2c>)
 80061b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061c4:	e7f0      	b.n	80061a8 <prvIdleTask+0x8>
 80061c6:	bf00      	nop
 80061c8:	2000090c 	.word	0x2000090c
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d6:	2300      	movs	r3, #0
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e00c      	b.n	80061f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <prvInitialiseTaskLists+0x60>)
 80061e8:	4413      	add	r3, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fcb6 	bl	8004b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3301      	adds	r3, #1
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b37      	cmp	r3, #55	; 0x37
 80061fa:	d9ef      	bls.n	80061dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061fc:	480d      	ldr	r0, [pc, #52]	; (8006234 <prvInitialiseTaskLists+0x64>)
 80061fe:	f7fe fcad 	bl	8004b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006202:	480d      	ldr	r0, [pc, #52]	; (8006238 <prvInitialiseTaskLists+0x68>)
 8006204:	f7fe fcaa 	bl	8004b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006208:	480c      	ldr	r0, [pc, #48]	; (800623c <prvInitialiseTaskLists+0x6c>)
 800620a:	f7fe fca7 	bl	8004b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800620e:	480c      	ldr	r0, [pc, #48]	; (8006240 <prvInitialiseTaskLists+0x70>)
 8006210:	f7fe fca4 	bl	8004b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006214:	480b      	ldr	r0, [pc, #44]	; (8006244 <prvInitialiseTaskLists+0x74>)
 8006216:	f7fe fca1 	bl	8004b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <prvInitialiseTaskLists+0x78>)
 800621c:	4a05      	ldr	r2, [pc, #20]	; (8006234 <prvInitialiseTaskLists+0x64>)
 800621e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <prvInitialiseTaskLists+0x7c>)
 8006222:	4a05      	ldr	r2, [pc, #20]	; (8006238 <prvInitialiseTaskLists+0x68>)
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000090c 	.word	0x2000090c
 8006234:	20000d6c 	.word	0x20000d6c
 8006238:	20000d80 	.word	0x20000d80
 800623c:	20000d9c 	.word	0x20000d9c
 8006240:	20000db0 	.word	0x20000db0
 8006244:	20000dc8 	.word	0x20000dc8
 8006248:	20000d94 	.word	0x20000d94
 800624c:	20000d98 	.word	0x20000d98

08006250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006256:	e019      	b.n	800628c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006258:	f000 fdd4 	bl	8006e04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <prvCheckTasksWaitingTermination+0x50>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fd01 	bl	8004c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <prvCheckTasksWaitingTermination+0x54>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3b01      	subs	r3, #1
 8006274:	4a0b      	ldr	r2, [pc, #44]	; (80062a4 <prvCheckTasksWaitingTermination+0x54>)
 8006276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <prvCheckTasksWaitingTermination+0x58>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <prvCheckTasksWaitingTermination+0x58>)
 8006280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006282:	f000 fdef 	bl	8006e64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f810 	bl	80062ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <prvCheckTasksWaitingTermination+0x58>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e1      	bne.n	8006258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000db0 	.word	0x20000db0
 80062a4:	20000ddc 	.word	0x20000ddc
 80062a8:	20000dc4 	.word	0x20000dc4

080062ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 ff8c 	bl	80071e0 <vPortFree>
				vPortFree( pxTCB );
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 ff89 	bl	80071e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062ce:	e018      	b.n	8006302 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d103      	bne.n	80062e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 ff80 	bl	80071e0 <vPortFree>
	}
 80062e0:	e00f      	b.n	8006302 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d00a      	beq.n	8006302 <prvDeleteTCB+0x56>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <prvDeleteTCB+0x54>
	}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006324:	e008      	b.n	8006338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20000d94 	.word	0x20000d94
 8006348:	20000dfc 	.word	0x20000dfc

0800634c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <xTaskGetSchedulerState+0x34>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800635a:	2301      	movs	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	e008      	b.n	8006372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006360:	4b08      	ldr	r3, [pc, #32]	; (8006384 <xTaskGetSchedulerState+0x38>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006368:	2302      	movs	r3, #2
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e001      	b.n	8006372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006372:	687b      	ldr	r3, [r7, #4]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000de8 	.word	0x20000de8
 8006384:	20000e04 	.word	0x20000e04

08006388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d056      	beq.n	800644c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <xTaskPriorityDisinherit+0xd0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d00a      	beq.n	80063be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	60fb      	str	r3, [r7, #12]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60bb      	str	r3, [r7, #8]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	1e5a      	subs	r2, r3, #1
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d02c      	beq.n	800644c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d128      	bne.n	800644c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fc36 	bl	8004c70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <xTaskPriorityDisinherit+0xd4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d903      	bls.n	800642c <xTaskPriorityDisinherit+0xa4>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4a0c      	ldr	r2, [pc, #48]	; (800645c <xTaskPriorityDisinherit+0xd4>)
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <xTaskPriorityDisinherit+0xd8>)
 800643a:	441a      	add	r2, r3
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fe fbb7 	bl	8004bb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800644c:	697b      	ldr	r3, [r7, #20]
	}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000908 	.word	0x20000908
 800645c:	20000de4 	.word	0x20000de4
 8006460:	2000090c 	.word	0x2000090c

08006464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800646e:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3304      	adds	r3, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fbf8 	bl	8004c70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d10a      	bne.n	800649e <prvAddCurrentTaskToDelayedList+0x3a>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4819      	ldr	r0, [pc, #100]	; (80064fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006498:	f7fe fb8d 	bl	8004bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800649c:	e026      	b.n	80064ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d209      	bcs.n	80064ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <prvAddCurrentTaskToDelayedList+0x9c>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7fe fb9b 	bl	8004bfe <vListInsert>
}
 80064c8:	e010      	b.n	80064ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ca:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7fe fb91 	bl	8004bfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d202      	bcs.n	80064ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064e6:	4a08      	ldr	r2, [pc, #32]	; (8006508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6013      	str	r3, [r2, #0]
}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000de0 	.word	0x20000de0
 80064f8:	20000908 	.word	0x20000908
 80064fc:	20000dc8 	.word	0x20000dc8
 8006500:	20000d98 	.word	0x20000d98
 8006504:	20000d94 	.word	0x20000d94
 8006508:	20000dfc 	.word	0x20000dfc

0800650c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006516:	f000 fb07 	bl	8006b28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <xTimerCreateTimerTask+0x80>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d021      	beq.n	8006566 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800652a:	1d3a      	adds	r2, r7, #4
 800652c:	f107 0108 	add.w	r1, r7, #8
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe faf7 	bl	8004b28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	9202      	str	r2, [sp, #8]
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	2302      	movs	r3, #2
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	2300      	movs	r3, #0
 800654a:	460a      	mov	r2, r1
 800654c:	4910      	ldr	r1, [pc, #64]	; (8006590 <xTimerCreateTimerTask+0x84>)
 800654e:	4811      	ldr	r0, [pc, #68]	; (8006594 <xTimerCreateTimerTask+0x88>)
 8006550:	f7ff f8de 	bl	8005710 <xTaskCreateStatic>
 8006554:	4603      	mov	r3, r0
 8006556:	4a10      	ldr	r2, [pc, #64]	; (8006598 <xTimerCreateTimerTask+0x8c>)
 8006558:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <xTimerCreateTimerTask+0x8c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006562:	2301      	movs	r3, #1
 8006564:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	613b      	str	r3, [r7, #16]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006582:	697b      	ldr	r3, [r7, #20]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000e38 	.word	0x20000e38
 8006590:	08007500 	.word	0x08007500
 8006594:	080066d1 	.word	0x080066d1
 8006598:	20000e3c 	.word	0x20000e3c

0800659c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	623b      	str	r3, [r7, #32]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065ca:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <xTimerGenericCommand+0x98>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d02a      	beq.n	8006628 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b05      	cmp	r3, #5
 80065e2:	dc18      	bgt.n	8006616 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065e4:	f7ff feb2 	bl	800634c <xTaskGetSchedulerState>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d109      	bne.n	8006602 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065ee:	4b11      	ldr	r3, [pc, #68]	; (8006634 <xTimerGenericCommand+0x98>)
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	f107 0110 	add.w	r1, r7, #16
 80065f6:	2300      	movs	r3, #0
 80065f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fa:	f7fe fca1 	bl	8004f40 <xQueueGenericSend>
 80065fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006600:	e012      	b.n	8006628 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <xTimerGenericCommand+0x98>)
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f107 0110 	add.w	r1, r7, #16
 800660a:	2300      	movs	r3, #0
 800660c:	2200      	movs	r2, #0
 800660e:	f7fe fc97 	bl	8004f40 <xQueueGenericSend>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24
 8006614:	e008      	b.n	8006628 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <xTimerGenericCommand+0x98>)
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	f107 0110 	add.w	r1, r7, #16
 800661e:	2300      	movs	r3, #0
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	f7fe fd8b 	bl	800513c <xQueueGenericSendFromISR>
 8006626:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800662a:	4618      	mov	r0, r3
 800662c:	3728      	adds	r7, #40	; 0x28
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000e38 	.word	0x20000e38

08006638 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <prvProcessExpiredTimer+0x94>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fb0d 	bl	8004c70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d022      	beq.n	80066aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	18d1      	adds	r1, r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	6978      	ldr	r0, [r7, #20]
 8006672:	f000 f8d1 	bl	8006818 <prvInsertTimerInActiveList>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01f      	beq.n	80066bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800667c:	2300      	movs	r3, #0
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2300      	movs	r3, #0
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	2100      	movs	r1, #0
 8006686:	6978      	ldr	r0, [r7, #20]
 8006688:	f7ff ff88 	bl	800659c <xTimerGenericCommand>
 800668c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d113      	bne.n	80066bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60fb      	str	r3, [r7, #12]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	6978      	ldr	r0, [r7, #20]
 80066c2:	4798      	blx	r3
}
 80066c4:	bf00      	nop
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000e30 	.word	0x20000e30

080066d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066d8:	f107 0308 	add.w	r3, r7, #8
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f857 	bl	8006790 <prvGetNextExpireTime>
 80066e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f803 	bl	80066f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ee:	f000 f8d5 	bl	800689c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066f2:	e7f1      	b.n	80066d8 <prvTimerTask+0x8>

080066f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066fe:	f7ff fa43 	bl	8005b88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006702:	f107 0308 	add.w	r3, r7, #8
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f866 	bl	80067d8 <prvSampleTimeNow>
 800670c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d130      	bne.n	8006776 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <prvProcessTimerOrBlockTask+0x3c>
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	429a      	cmp	r2, r3
 8006720:	d806      	bhi.n	8006730 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006722:	f7ff fa3f 	bl	8005ba4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff85 	bl	8006638 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800672e:	e024      	b.n	800677a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006736:	4b13      	ldr	r3, [pc, #76]	; (8006784 <prvProcessTimerOrBlockTask+0x90>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <prvProcessTimerOrBlockTask+0x50>
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <prvProcessTimerOrBlockTask+0x52>
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <prvProcessTimerOrBlockTask+0x94>)
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	f7fe ffa7 	bl	80056a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800675a:	f7ff fa23 	bl	8005ba4 <xTaskResumeAll>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006764:	4b09      	ldr	r3, [pc, #36]	; (800678c <prvProcessTimerOrBlockTask+0x98>)
 8006766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
}
 8006774:	e001      	b.n	800677a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006776:	f7ff fa15 	bl	8005ba4 <xTaskResumeAll>
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000e34 	.word	0x20000e34
 8006788:	20000e38 	.word	0x20000e38
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <prvGetNextExpireTime+0x44>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <prvGetNextExpireTime+0x16>
 80067a2:	2201      	movs	r2, #1
 80067a4:	e000      	b.n	80067a8 <prvGetNextExpireTime+0x18>
 80067a6:	2200      	movs	r2, #0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <prvGetNextExpireTime+0x44>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e001      	b.n	80067c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067c4:	68fb      	ldr	r3, [r7, #12]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000e30 	.word	0x20000e30

080067d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067e0:	f7ff fa7e 	bl	8005ce0 <xTaskGetTickCount>
 80067e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <prvSampleTimeNow+0x3c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d205      	bcs.n	80067fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067f0:	f000 f936 	bl	8006a60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e002      	b.n	8006802 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006802:	4a04      	ldr	r2, [pc, #16]	; (8006814 <prvSampleTimeNow+0x3c>)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000e40 	.word	0x20000e40

08006818 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d812      	bhi.n	8006864 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	1ad2      	subs	r2, r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	429a      	cmp	r2, r3
 800684a:	d302      	bcc.n	8006852 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800684c:	2301      	movs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e01b      	b.n	800688a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <prvInsertTimerInActiveList+0x7c>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3304      	adds	r3, #4
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7fe f9ce 	bl	8004bfe <vListInsert>
 8006862:	e012      	b.n	800688a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d206      	bcs.n	800687a <prvInsertTimerInActiveList+0x62>
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d302      	bcc.n	800687a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e007      	b.n	800688a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <prvInsertTimerInActiveList+0x80>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7fe f9ba 	bl	8004bfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800688a:	697b      	ldr	r3, [r7, #20]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000e34 	.word	0x20000e34
 8006898:	20000e30 	.word	0x20000e30

0800689c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08e      	sub	sp, #56	; 0x38
 80068a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068a2:	e0ca      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da18      	bge.n	80068dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	3304      	adds	r3, #4
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61fb      	str	r3, [r7, #28]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d2:	6850      	ldr	r0, [r2, #4]
 80068d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	4611      	mov	r1, r2
 80068da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f2c0 80ab 	blt.w	8006a3a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe f9bb 	bl	8004c70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068fa:	463b      	mov	r3, r7
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff6b 	bl	80067d8 <prvSampleTimeNow>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b09      	cmp	r3, #9
 8006908:	f200 8096 	bhi.w	8006a38 <prvProcessReceivedCommands+0x19c>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <prvProcessReceivedCommands+0x78>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	0800693d 	.word	0x0800693d
 8006918:	0800693d 	.word	0x0800693d
 800691c:	0800693d 	.word	0x0800693d
 8006920:	080069b1 	.word	0x080069b1
 8006924:	080069c5 	.word	0x080069c5
 8006928:	08006a0f 	.word	0x08006a0f
 800692c:	0800693d 	.word	0x0800693d
 8006930:	0800693d 	.word	0x0800693d
 8006934:	080069b1 	.word	0x080069b1
 8006938:	080069c5 	.word	0x080069c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	18d1      	adds	r1, r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695c:	f7ff ff5c 	bl	8006818 <prvInsertTimerInActiveList>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d069      	beq.n	8006a3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d05e      	beq.n	8006a3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	441a      	add	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	2100      	movs	r1, #0
 800698c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698e:	f7ff fe05 	bl	800659c <xTimerGenericCommand>
 8006992:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d14f      	bne.n	8006a3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	61bb      	str	r3, [r7, #24]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80069c2:	e03a      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	617b      	str	r3, [r7, #20]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	18d1      	adds	r1, r2, r3
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a08:	f7ff ff06 	bl	8006818 <prvInsertTimerInActiveList>
					break;
 8006a0c:	e015      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1e:	f000 fbdf 	bl	80071e0 <vPortFree>
 8006a22:	e00a      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a36:	e000      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006a38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a3a:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <prvProcessReceivedCommands+0x1c0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	1d39      	adds	r1, r7, #4
 8006a40:	2200      	movs	r2, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fc16 	bl	8005274 <xQueueReceive>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f47f af2a 	bne.w	80068a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	3730      	adds	r7, #48	; 0x30
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000e38 	.word	0x20000e38

08006a60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a66:	e048      	b.n	8006afa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a68:	4b2d      	ldr	r3, [pc, #180]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a72:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe f8f5 	bl	8004c70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02e      	beq.n	8006afa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d90e      	bls.n	8006acc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006aba:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f7fe f89a 	bl	8004bfe <vListInsert>
 8006aca:	e016      	b.n	8006afa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006acc:	2300      	movs	r3, #0
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff fd60 	bl	800659c <xTimerGenericCommand>
 8006adc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	603b      	str	r3, [r7, #0]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1b1      	bne.n	8006a68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <prvSwitchTimerLists+0xc4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006b10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b12:	4a04      	ldr	r2, [pc, #16]	; (8006b24 <prvSwitchTimerLists+0xc4>)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000e30 	.word	0x20000e30
 8006b24:	20000e34 	.word	0x20000e34

08006b28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b2e:	f000 f969 	bl	8006e04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d120      	bne.n	8006b7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b3a:	4814      	ldr	r0, [pc, #80]	; (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b3c:	f7fe f80e 	bl	8004b5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b40:	4813      	ldr	r0, [pc, #76]	; (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b42:	f7fe f80b 	bl	8004b5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <prvCheckForValidListAndQueue+0x6c>)
 8006b48:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b4c:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <prvCheckForValidListAndQueue+0x70>)
 8006b4e:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b52:	2300      	movs	r3, #0
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <prvCheckForValidListAndQueue+0x74>)
 8006b58:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <prvCheckForValidListAndQueue+0x78>)
 8006b5a:	2110      	movs	r1, #16
 8006b5c:	200a      	movs	r0, #10
 8006b5e:	f7fe f919 	bl	8004d94 <xQueueGenericCreateStatic>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b68:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	490b      	ldr	r1, [pc, #44]	; (8006ba4 <prvCheckForValidListAndQueue+0x7c>)
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fd6c 	bl	8005654 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b7c:	f000 f972 	bl	8006e64 <vPortExitCritical>
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000e38 	.word	0x20000e38
 8006b8c:	20000e08 	.word	0x20000e08
 8006b90:	20000e1c 	.word	0x20000e1c
 8006b94:	20000e30 	.word	0x20000e30
 8006b98:	20000e34 	.word	0x20000e34
 8006b9c:	20000ee4 	.word	0x20000ee4
 8006ba0:	20000e44 	.word	0x20000e44
 8006ba4:	08007508 	.word	0x08007508

08006ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bd8:	4a0c      	ldr	r2, [pc, #48]	; (8006c0c <pxPortInitialiseStack+0x64>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b14      	subs	r3, #20
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b04      	subs	r3, #4
 8006bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f06f 0202 	mvn.w	r2, #2
 8006bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3b20      	subs	r3, #32
 8006bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	08006c11 	.word	0x08006c11

08006c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <prvTaskExitError+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d00a      	beq.n	8006c3a <prvTaskExitError+0x2a>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <prvTaskExitError+0x28>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
}
 8006c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c4e:	bf00      	nop
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0fc      	beq.n	8006c50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20000028 	.word	0x20000028
	...

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	4770      	bx	lr
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst2>:
 8006c90:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c98:	4808      	ldr	r0, [pc, #32]	; (8006cbc <prvPortStartFirstTask+0x24>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8814 	msr	CONTROL, r0
 8006caa:	b662      	cpsie	i
 8006cac:	b661      	cpsie	f
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	df00      	svc	0
 8006cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cba:	bf00      	nop
 8006cbc:	e000ed08 	.word	0xe000ed08

08006cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cc6:	4b46      	ldr	r3, [pc, #280]	; (8006de0 <xPortStartScheduler+0x120>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a46      	ldr	r2, [pc, #280]	; (8006de4 <xPortStartScheduler+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d10a      	bne.n	8006ce6 <xPortStartScheduler+0x26>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	613b      	str	r3, [r7, #16]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ce6:	4b3e      	ldr	r3, [pc, #248]	; (8006de0 <xPortStartScheduler+0x120>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a3f      	ldr	r2, [pc, #252]	; (8006de8 <xPortStartScheduler+0x128>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10a      	bne.n	8006d06 <xPortStartScheduler+0x46>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d06:	4b39      	ldr	r3, [pc, #228]	; (8006dec <xPortStartScheduler+0x12c>)
 8006d08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	22ff      	movs	r2, #255	; 0xff
 8006d16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <xPortStartScheduler+0x130>)
 8006d2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d2e:	4b31      	ldr	r3, [pc, #196]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d30:	2207      	movs	r2, #7
 8006d32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d34:	e009      	b.n	8006d4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d36:	4b2f      	ldr	r3, [pc, #188]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	2b80      	cmp	r3, #128	; 0x80
 8006d54:	d0ef      	beq.n	8006d36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d56:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1c3 0307 	rsb	r3, r3, #7
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d00a      	beq.n	8006d78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60bb      	str	r3, [r7, #8]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d78:	4b1e      	ldr	r3, [pc, #120]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d8a:	4a1a      	ldr	r2, [pc, #104]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d96:	4b18      	ldr	r3, [pc, #96]	; (8006df8 <xPortStartScheduler+0x138>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <xPortStartScheduler+0x138>)
 8006d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006da0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <xPortStartScheduler+0x138>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <xPortStartScheduler+0x138>)
 8006da8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006dac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006dae:	f000 f8dd 	bl	8006f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <xPortStartScheduler+0x13c>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006db8:	f000 f8fc 	bl	8006fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dbc:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <xPortStartScheduler+0x140>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a0f      	ldr	r2, [pc, #60]	; (8006e00 <xPortStartScheduler+0x140>)
 8006dc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006dc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dc8:	f7ff ff66 	bl	8006c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dcc:	f7ff f852 	bl	8005e74 <vTaskSwitchContext>
	prvTaskExitError();
 8006dd0:	f7ff ff1e 	bl	8006c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	e000ed00 	.word	0xe000ed00
 8006de4:	410fc271 	.word	0x410fc271
 8006de8:	410fc270 	.word	0x410fc270
 8006dec:	e000e400 	.word	0xe000e400
 8006df0:	20000f34 	.word	0x20000f34
 8006df4:	20000f38 	.word	0x20000f38
 8006df8:	e000ed20 	.word	0xe000ed20
 8006dfc:	20000028 	.word	0x20000028
 8006e00:	e000ef34 	.word	0xe000ef34

08006e04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e1e:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <vPortEnterCritical+0x58>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3301      	adds	r3, #1
 8006e24:	4a0d      	ldr	r2, [pc, #52]	; (8006e5c <vPortEnterCritical+0x58>)
 8006e26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <vPortEnterCritical+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d10f      	bne.n	8006e50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <vPortEnterCritical+0x5c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	603b      	str	r3, [r7, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vPortEnterCritical+0x4a>
	}
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000028 	.word	0x20000028
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e6a:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <vPortExitCritical+0x24>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	607b      	str	r3, [r7, #4]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e92:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <vPortExitCritical+0x42>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f383 8811 	msr	BASEPRI, r3
}
 8006ea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000028 	.word	0x20000028
	...

08006ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ec0:	f3ef 8009 	mrs	r0, PSP
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <pxCurrentTCBConst>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f01e 0f10 	tst.w	lr, #16
 8006ed0:	bf08      	it	eq
 8006ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	6010      	str	r0, [r2, #0]
 8006edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ee4:	f380 8811 	msr	BASEPRI, r0
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f7fe ffc0 	bl	8005e74 <vTaskSwitchContext>
 8006ef4:	f04f 0000 	mov.w	r0, #0
 8006ef8:	f380 8811 	msr	BASEPRI, r0
 8006efc:	bc09      	pop	{r0, r3}
 8006efe:	6819      	ldr	r1, [r3, #0]
 8006f00:	6808      	ldr	r0, [r1, #0]
 8006f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f06:	f01e 0f10 	tst.w	lr, #16
 8006f0a:	bf08      	it	eq
 8006f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f10:	f380 8809 	msr	PSP, r0
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst>:
 8006f20:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f42:	f7fe fedd 	bl	8005d00 <xTaskIncrementTick>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <xPortSysTickHandler+0x40>)
 8006f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f383 8811 	msr	BASEPRI, r3
}
 8006f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <vPortSetupTimerInterrupt+0x34>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f76:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <vPortSetupTimerInterrupt+0x38>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <vPortSetupTimerInterrupt+0x3c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <vPortSetupTimerInterrupt+0x40>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	099b      	lsrs	r3, r3, #6
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <vPortSetupTimerInterrupt+0x44>)
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f8e:	4b04      	ldr	r3, [pc, #16]	; (8006fa0 <vPortSetupTimerInterrupt+0x34>)
 8006f90:	2207      	movs	r2, #7
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	e000e010 	.word	0xe000e010
 8006fa4:	e000e018 	.word	0xe000e018
 8006fa8:	20000008 	.word	0x20000008
 8006fac:	10624dd3 	.word	0x10624dd3
 8006fb0:	e000e014 	.word	0xe000e014

08006fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fc4 <vPortEnableVFP+0x10>
 8006fb8:	6801      	ldr	r1, [r0, #0]
 8006fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fbe:	6001      	str	r1, [r0, #0]
 8006fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fc2:	bf00      	nop
 8006fc4:	e000ed88 	.word	0xe000ed88

08006fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fce:	f3ef 8305 	mrs	r3, IPSR
 8006fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b0f      	cmp	r3, #15
 8006fd8:	d914      	bls.n	8007004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <vPortValidateInterruptPriority+0x70>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fe4:	4b15      	ldr	r3, [pc, #84]	; (800703c <vPortValidateInterruptPriority+0x74>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	7afa      	ldrb	r2, [r7, #11]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d20a      	bcs.n	8007004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	607b      	str	r3, [r7, #4]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007004:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <vPortValidateInterruptPriority+0x78>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <vPortValidateInterruptPriority+0x7c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d90a      	bls.n	800702a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	603b      	str	r3, [r7, #0]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <vPortValidateInterruptPriority+0x60>
	}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	e000e3f0 	.word	0xe000e3f0
 800703c:	20000f34 	.word	0x20000f34
 8007040:	e000ed0c 	.word	0xe000ed0c
 8007044:	20000f38 	.word	0x20000f38

08007048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007054:	f7fe fd98 	bl	8005b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007058:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <pvPortMalloc+0x180>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007060:	f000 f920 	bl	80072a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007064:	4b59      	ldr	r3, [pc, #356]	; (80071cc <pvPortMalloc+0x184>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	f040 8093 	bne.w	8007198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01d      	beq.n	80070b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007078:	2208      	movs	r2, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d014      	beq.n	80070b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	3308      	adds	r3, #8
 8007092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <pvPortMalloc+0x6c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	617b      	str	r3, [r7, #20]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d06e      	beq.n	8007198 <pvPortMalloc+0x150>
 80070ba:	4b45      	ldr	r3, [pc, #276]	; (80071d0 <pvPortMalloc+0x188>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d869      	bhi.n	8007198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070c4:	4b43      	ldr	r3, [pc, #268]	; (80071d4 <pvPortMalloc+0x18c>)
 80070c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070c8:	4b42      	ldr	r3, [pc, #264]	; (80071d4 <pvPortMalloc+0x18c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ce:	e004      	b.n	80070da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d903      	bls.n	80070ec <pvPortMalloc+0xa4>
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f1      	bne.n	80070d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070ec:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <pvPortMalloc+0x180>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d050      	beq.n	8007198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2208      	movs	r2, #8
 80070fc:	4413      	add	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	2308      	movs	r3, #8
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	429a      	cmp	r2, r3
 8007116:	d91f      	bls.n	8007158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <pvPortMalloc+0xf8>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	613b      	str	r3, [r7, #16]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007152:	69b8      	ldr	r0, [r7, #24]
 8007154:	f000 f908 	bl	8007368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <pvPortMalloc+0x188>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <pvPortMalloc+0x188>)
 8007164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <pvPortMalloc+0x188>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <pvPortMalloc+0x190>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d203      	bcs.n	800717a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007172:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <pvPortMalloc+0x188>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <pvPortMalloc+0x190>)
 8007178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <pvPortMalloc+0x184>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	431a      	orrs	r2, r3
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <pvPortMalloc+0x194>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	4a11      	ldr	r2, [pc, #68]	; (80071dc <pvPortMalloc+0x194>)
 8007196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007198:	f7fe fd04 	bl	8005ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <pvPortMalloc+0x174>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <pvPortMalloc+0x172>
	return pvReturn;
 80071bc:	69fb      	ldr	r3, [r7, #28]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3728      	adds	r7, #40	; 0x28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	200022cc 	.word	0x200022cc
 80071cc:	200022e0 	.word	0x200022e0
 80071d0:	200022d0 	.word	0x200022d0
 80071d4:	200022c4 	.word	0x200022c4
 80071d8:	200022d4 	.word	0x200022d4
 80071dc:	200022d8 	.word	0x200022d8

080071e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04d      	beq.n	800728e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071f2:	2308      	movs	r3, #8
 80071f4:	425b      	negs	r3, r3
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	4b24      	ldr	r3, [pc, #144]	; (8007298 <vPortFree+0xb8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4013      	ands	r3, r2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <vPortFree+0x44>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <vPortFree+0x62>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	60bb      	str	r3, [r7, #8]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <vPortFree+0xb8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d11a      	bne.n	800728e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <vPortFree+0xb8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007268:	f7fe fc8e 	bl	8005b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <vPortFree+0xbc>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4413      	add	r3, r2
 8007276:	4a09      	ldr	r2, [pc, #36]	; (800729c <vPortFree+0xbc>)
 8007278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800727a:	6938      	ldr	r0, [r7, #16]
 800727c:	f000 f874 	bl	8007368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <vPortFree+0xc0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a06      	ldr	r2, [pc, #24]	; (80072a0 <vPortFree+0xc0>)
 8007288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800728a:	f7fe fc8b 	bl	8005ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800728e:	bf00      	nop
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200022e0 	.word	0x200022e0
 800729c:	200022d0 	.word	0x200022d0
 80072a0:	200022dc 	.word	0x200022dc

080072a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80072ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <prvHeapInit+0xac>)
 80072b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00c      	beq.n	80072d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3307      	adds	r3, #7
 80072c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0307 	bic.w	r3, r3, #7
 80072ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <prvHeapInit+0xac>)
 80072d4:	4413      	add	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <prvHeapInit+0xb0>)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <prvHeapInit+0xb0>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	4413      	add	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072f0:	2208      	movs	r2, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a15      	ldr	r2, [pc, #84]	; (8007358 <prvHeapInit+0xb4>)
 8007304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <prvHeapInit+0xb4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800730e:	4b12      	ldr	r3, [pc, #72]	; (8007358 <prvHeapInit+0xb4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <prvHeapInit+0xb4>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4a0a      	ldr	r2, [pc, #40]	; (800735c <prvHeapInit+0xb8>)
 8007332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a09      	ldr	r2, [pc, #36]	; (8007360 <prvHeapInit+0xbc>)
 800733a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <prvHeapInit+0xc0>)
 800733e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000f3c 	.word	0x20000f3c
 8007354:	200022c4 	.word	0x200022c4
 8007358:	200022cc 	.word	0x200022cc
 800735c:	200022d4 	.word	0x200022d4
 8007360:	200022d0 	.word	0x200022d0
 8007364:	200022e0 	.word	0x200022e0

08007368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007370:	4b28      	ldr	r3, [pc, #160]	; (8007414 <prvInsertBlockIntoFreeList+0xac>)
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e002      	b.n	800737c <prvInsertBlockIntoFreeList+0x14>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d8f7      	bhi.n	8007376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d108      	bne.n	80073aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d118      	bne.n	80073f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d00d      	beq.n	80073e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e008      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e003      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d002      	beq.n	8007406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	200022c4 	.word	0x200022c4
 8007418:	200022cc 	.word	0x200022cc

0800741c <memset>:
 800741c:	4402      	add	r2, r0
 800741e:	4603      	mov	r3, r0
 8007420:	4293      	cmp	r3, r2
 8007422:	d100      	bne.n	8007426 <memset+0xa>
 8007424:	4770      	bx	lr
 8007426:	f803 1b01 	strb.w	r1, [r3], #1
 800742a:	e7f9      	b.n	8007420 <memset+0x4>

0800742c <__libc_init_array>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4d0d      	ldr	r5, [pc, #52]	; (8007464 <__libc_init_array+0x38>)
 8007430:	4c0d      	ldr	r4, [pc, #52]	; (8007468 <__libc_init_array+0x3c>)
 8007432:	1b64      	subs	r4, r4, r5
 8007434:	10a4      	asrs	r4, r4, #2
 8007436:	2600      	movs	r6, #0
 8007438:	42a6      	cmp	r6, r4
 800743a:	d109      	bne.n	8007450 <__libc_init_array+0x24>
 800743c:	4d0b      	ldr	r5, [pc, #44]	; (800746c <__libc_init_array+0x40>)
 800743e:	4c0c      	ldr	r4, [pc, #48]	; (8007470 <__libc_init_array+0x44>)
 8007440:	f000 f826 	bl	8007490 <_init>
 8007444:	1b64      	subs	r4, r4, r5
 8007446:	10a4      	asrs	r4, r4, #2
 8007448:	2600      	movs	r6, #0
 800744a:	42a6      	cmp	r6, r4
 800744c:	d105      	bne.n	800745a <__libc_init_array+0x2e>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	f855 3b04 	ldr.w	r3, [r5], #4
 8007454:	4798      	blx	r3
 8007456:	3601      	adds	r6, #1
 8007458:	e7ee      	b.n	8007438 <__libc_init_array+0xc>
 800745a:	f855 3b04 	ldr.w	r3, [r5], #4
 800745e:	4798      	blx	r3
 8007460:	3601      	adds	r6, #1
 8007462:	e7f2      	b.n	800744a <__libc_init_array+0x1e>
 8007464:	0800762c 	.word	0x0800762c
 8007468:	0800762c 	.word	0x0800762c
 800746c:	0800762c 	.word	0x0800762c
 8007470:	08007630 	.word	0x08007630

08007474 <memcpy>:
 8007474:	440a      	add	r2, r1
 8007476:	4291      	cmp	r1, r2
 8007478:	f100 33ff 	add.w	r3, r0, #4294967295
 800747c:	d100      	bne.n	8007480 <memcpy+0xc>
 800747e:	4770      	bx	lr
 8007480:	b510      	push	{r4, lr}
 8007482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800748a:	4291      	cmp	r1, r2
 800748c:	d1f9      	bne.n	8007482 <memcpy+0xe>
 800748e:	bd10      	pop	{r4, pc}

08007490 <_init>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	bf00      	nop
 8007494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007496:	bc08      	pop	{r3}
 8007498:	469e      	mov	lr, r3
 800749a:	4770      	bx	lr

0800749c <_fini>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr
