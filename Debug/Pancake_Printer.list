
Pancake_Printer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007124  08007124  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800712c  0800712c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002240  20000018  0800714c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002258  0800714c  00022258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a78c  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003771  00000000  00000000  0003a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  0003df88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ca  00000000  00000000  0003f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002793b  00000000  00000000  00040832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197c9  00000000  00000000  0006816d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc927  00000000  00000000  00081936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000605c  00000000  00000000  0017e260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001842bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f90 	.word	0x08006f90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08006f90 	.word	0x08006f90

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <delay>:
float speed = 20.0; //mm/s
float extrude_speed = 1.0; //mm/s

bool extrusion_on = false;

void delay(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  delayus(2);
 80004d0:	2002      	movs	r0, #2
 80004d2:	f000 f803 	bl	80004dc <delayus>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <delayus>:

void delayus(uint16_t us){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(htime,0);  // set the counter value a 0
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <delayus+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htime);
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <delayus+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 fce9 	bl	8002ecc <HAL_TIM_Base_Start>
  while (__HAL_TIM_GET_COUNTER(htime) < us);
 80004fa:	bf00      	nop
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <delayus+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	429a      	cmp	r2, r3
 8000508:	d3f8      	bcc.n	80004fc <delayus+0x20>
  HAL_TIM_Base_Stop(htime);// wait for the counter to reach the us input in the parameter
 800050a:	4b04      	ldr	r3, [pc, #16]	; (800051c <delayus+0x40>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fd44 	bl	8002f9c <HAL_TIM_Base_Stop>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000034 	.word	0x20000034

08000520 <set_timer>:

void set_timer(TIM_HandleTypeDef *htim){
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  htime = htim;
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <set_timer+0x1c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000034 	.word	0x20000034

08000540 <move>:

void set_speed(float new_speed){
  speed = new_speed;
}

void move(float x, float y){
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	ed87 0a01 	vstr	s0, [r7, #4]
 800054a:	edc7 0a00 	vstr	s1, [r7]
  int x_steps = (x - current_x) * X_STEPS_PER_MM;
 800054e:	4b6f      	ldr	r3, [pc, #444]	; (800070c <move+0x1cc>)
 8000550:	edd3 7a00 	vldr	s15, [r3]
 8000554:	ed97 7a01 	vldr	s14, [r7, #4]
 8000558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000568:	ee17 3a90 	vmov	r3, s15
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  int y_steps = (y - current_y) * Y_STEPS_PER_MM;
 800056e:	4b68      	ldr	r3, [pc, #416]	; (8000710 <move+0x1d0>)
 8000570:	edd3 7a00 	vldr	s15, [r3]
 8000574:	ed97 7a00 	vldr	s14, [r7]
 8000578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800057c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000588:	ee17 3a90 	vmov	r3, s15
 800058c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2110      	movs	r1, #16
 8000592:	4860      	ldr	r0, [pc, #384]	; (8000714 <move+0x1d4>)
 8000594:	f001 f8d8 	bl	8001748 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	485d      	ldr	r0, [pc, #372]	; (8000714 <move+0x1d4>)
 80005a0:	f001 f8d2 	bl	8001748 <HAL_GPIO_WritePin>
  if(x_steps < 0){
 80005a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	da07      	bge.n	80005ba <move+0x7a>
    HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	4859      	ldr	r0, [pc, #356]	; (8000714 <move+0x1d4>)
 80005b0:	f001 f8ca 	bl	8001748 <HAL_GPIO_WritePin>
    x_steps *= -1;
 80005b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b6:	425b      	negs	r3, r3
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if(y_steps < 0){
 80005ba:	6a3b      	ldr	r3, [r7, #32]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da08      	bge.n	80005d2 <move+0x92>
    HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	4853      	ldr	r0, [pc, #332]	; (8000714 <move+0x1d4>)
 80005c8:	f001 f8be 	bl	8001748 <HAL_GPIO_WritePin>
    y_steps *= -1;
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	425b      	negs	r3, r3
 80005d0:	623b      	str	r3, [r7, #32]
  }

	int max_steps = x_steps;
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	61fb      	str	r3, [r7, #28]
	if(y_steps > x_steps){
 80005d6:	6a3a      	ldr	r2, [r7, #32]
 80005d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005da:	429a      	cmp	r2, r3
 80005dc:	dd01      	ble.n	80005e2 <move+0xa2>
		max_steps = y_steps;
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	61fb      	str	r3, [r7, #28]
	}

	int x_step_ratio = max_steps / x_steps;
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ea:	60fb      	str	r3, [r7, #12]
	int y_step_ratio = max_steps / y_steps;
 80005ec:	69fa      	ldr	r2, [r7, #28]
 80005ee:	6a3b      	ldr	r3, [r7, #32]
 80005f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f4:	60bb      	str	r3, [r7, #8]

	int x_taken = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
	int y_taken = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < max_steps; i++){
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	e049      	b.n	8000698 <move+0x158>
		if(i % x_step_ratio == 0){
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	fb93 f2f2 	sdiv	r2, r3, r2
 800060c:	68f9      	ldr	r1, [r7, #12]
 800060e:	fb01 f202 	mul.w	r2, r1, r2
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d109      	bne.n	800062c <move+0xec>
			HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 f891 	bl	8001748 <HAL_GPIO_WritePin>
			x_taken++;
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	3301      	adds	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]

		}
		if(i % y_step_ratio == 0){
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	fb93 f2f2 	sdiv	r2, r3, r2
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	d107      	bne.n	8000650 <move+0x110>
			HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2108      	movs	r1, #8
 8000644:	4833      	ldr	r0, [pc, #204]	; (8000714 <move+0x1d4>)
 8000646:	f001 f87f 	bl	8001748 <HAL_GPIO_WritePin>
			y_taken++;
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3301      	adds	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
		}
		delay();
 8000650:	f7ff ff3c 	bl	80004cc <delay>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 f873 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	482b      	ldr	r0, [pc, #172]	; (8000714 <move+0x1d4>)
 8000668:	f001 f86e 	bl	8001748 <HAL_GPIO_WritePin>
		delayus(1000000 / (X_STEPS_PER_MM * speed)); // 1000000us/1s / (step/mm * mm/s)
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <move+0x1d8>)
 800066e:	edd3 7a00 	vldr	s15, [r3]
 8000672:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800067a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800071c <move+0x1dc>
 800067e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000686:	ee17 3a90 	vmov	r3, s15
 800068a:	b29b      	uxth	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff25 	bl	80004dc <delayus>
	for(int i = 0; i < max_steps; i++){
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	3301      	adds	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	429a      	cmp	r2, r3
 800069e:	dbb1      	blt.n	8000604 <move+0xc4>
	}

	while (x_steps > x_taken){
 80006a0:	e012      	b.n	80006c8 <move+0x188>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f001 f84c 	bl	8001748 <HAL_GPIO_WritePin>
		delay();
 80006b0:	f7ff ff0c 	bl	80004cc <delay>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 f843 	bl	8001748 <HAL_GPIO_WritePin>
		x_taken++;
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	3301      	adds	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
	while (x_steps > x_taken){
 80006c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dce8      	bgt.n	80006a2 <move+0x162>
	}
	while (y_steps > y_taken){
 80006d0:	e00e      	b.n	80006f0 <move+0x1b0>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2108      	movs	r1, #8
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <move+0x1d4>)
 80006d8:	f001 f836 	bl	8001748 <HAL_GPIO_WritePin>
		delay();
 80006dc:	f7ff fef6 	bl	80004cc <delay>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2108      	movs	r1, #8
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <move+0x1d4>)
 80006e6:	f001 f82f 	bl	8001748 <HAL_GPIO_WritePin>
		y_taken++;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
	while (y_steps > y_taken){
 80006f0:	6a3a      	ldr	r2, [r7, #32]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dcec      	bgt.n	80006d2 <move+0x192>
	}
	current_x = x;
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <move+0x1cc>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
	current_y = y;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <move+0x1d0>)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000038 	.word	0x20000038
 8000710:	2000003c 	.word	0x2000003c
 8000714:	48000400 	.word	0x48000400
 8000718:	20000000 	.word	0x20000000
 800071c:	49742400 	.word	0x49742400

08000720 <home>:


void home() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	4854      	ldr	r0, [pc, #336]	; (800087c <home+0x15c>)
 800072a:	f001 f80d 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000734:	4851      	ldr	r0, [pc, #324]	; (800087c <home+0x15c>)
 8000736:	f001 f807 	bl	8001748 <HAL_GPIO_WritePin>
	//move fast until limit switch hit
	while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800073a:	e022      	b.n	8000782 <home+0x62>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f000 ffff 	bl	8001748 <HAL_GPIO_WritePin>
		delay();
 800074a:	f7ff febf 	bl	80004cc <delay>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f000 fff6 	bl	8001748 <HAL_GPIO_WritePin>
		delayus(1000000 / (X_STEPS_PER_MM * speed));
 800075c:	4b48      	ldr	r3, [pc, #288]	; (8000880 <home+0x160>)
 800075e:	edd3 7a00 	vldr	s15, [r3]
 8000762:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000766:	ee27 7a87 	vmul.f32	s14, s15, s14
 800076a:	eddf 6a46 	vldr	s13, [pc, #280]	; 8000884 <home+0x164>
 800076e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000776:	ee17 3a90 	vmov	r3, s15
 800077a:	b29b      	uxth	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fead 	bl	80004dc <delayus>
	while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	4840      	ldr	r0, [pc, #256]	; (8000888 <home+0x168>)
 8000786:	f000 ffc7 	bl	8001718 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0d5      	beq.n	800073c <home+0x1c>
	}
	while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8000790:	e01e      	b.n	80007d0 <home+0xb0>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2108      	movs	r1, #8
 8000796:	4839      	ldr	r0, [pc, #228]	; (800087c <home+0x15c>)
 8000798:	f000 ffd6 	bl	8001748 <HAL_GPIO_WritePin>
		delay();
 800079c:	f7ff fe96 	bl	80004cc <delay>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2108      	movs	r1, #8
 80007a4:	4835      	ldr	r0, [pc, #212]	; (800087c <home+0x15c>)
 80007a6:	f000 ffcf 	bl	8001748 <HAL_GPIO_WritePin>
		delayus(1000000 / (X_STEPS_PER_MM * speed));
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <home+0x160>)
 80007ac:	edd3 7a00 	vldr	s15, [r3]
 80007b0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80007b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007b8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000884 <home+0x164>
 80007bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c4:	ee17 3a90 	vmov	r3, s15
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe86 	bl	80004dc <delayus>
	while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	482a      	ldr	r0, [pc, #168]	; (800087c <home+0x15c>)
 80007d4:	f000 ffa0 	bl	8001718 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0d9      	beq.n	8000792 <home+0x72>
	}

	//move away from limit switch by small distance
	move(10,10);
 80007de:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80007e2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80007e6:	f7ff feab 	bl	8000540 <move>

	//move slow towards limit switch
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	4823      	ldr	r0, [pc, #140]	; (800087c <home+0x15c>)
 80007f0:	f000 ffaa 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fa:	4820      	ldr	r0, [pc, #128]	; (800087c <home+0x15c>)
 80007fc:	f000 ffa4 	bl	8001748 <HAL_GPIO_WritePin>
	//move fast until limit switch hit
	while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8000800:	e013      	b.n	800082a <home+0x10a>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f000 ff9c 	bl	8001748 <HAL_GPIO_WritePin>
		delay();
 8000810:	f7ff fe5c 	bl	80004cc <delay>
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f000 ff93 	bl	8001748 <HAL_GPIO_WritePin>
		delayus(1000000 / (X_STEPS_PER_MM * 10));
 8000822:	f241 3088 	movw	r0, #5000	; 0x1388
 8000826:	f7ff fe59 	bl	80004dc <delayus>
	while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <home+0x168>)
 800082e:	f000 ff73 	bl	8001718 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0e4      	beq.n	8000802 <home+0xe2>

	}
	while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8000838:	e00f      	b.n	800085a <home+0x13a>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2108      	movs	r1, #8
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <home+0x15c>)
 8000840:	f000 ff82 	bl	8001748 <HAL_GPIO_WritePin>
		delay();
 8000844:	f7ff fe42 	bl	80004cc <delay>
		HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2108      	movs	r1, #8
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <home+0x15c>)
 800084e:	f000 ff7b 	bl	8001748 <HAL_GPIO_WritePin>
		delayus(1000000 / (X_STEPS_PER_MM * 10));
 8000852:	f241 3088 	movw	r0, #5000	; 0x1388
 8000856:	f7ff fe41 	bl	80004dc <delayus>
	while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <home+0x15c>)
 800085e:	f000 ff5b 	bl	8001718 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0e8      	beq.n	800083a <home+0x11a>
	}
	current_x = 0;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <home+0x16c>)
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
	current_y = 0;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <home+0x170>)
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	48000400 	.word	0x48000400
 8000880:	20000000 	.word	0x20000000
 8000884:	49742400 	.word	0x49742400
 8000888:	48000800 	.word	0x48000800
 800088c:	20000038 	.word	0x20000038
 8000890:	2000003c 	.word	0x2000003c

08000894 <extrude>:

void stop_extrusion(){
	extrusion_on = false;
}

void extrude(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  if(extrusion_on){
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <extrude+0x50>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d01e      	beq.n	80008de <extrude+0x4a>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <extrude+0x54>)
 80008a6:	f000 ff4f 	bl	8001748 <HAL_GPIO_WritePin>
    delay();
 80008aa:	f7ff fe0f 	bl	80004cc <delay>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <extrude+0x54>)
 80008b4:	f000 ff48 	bl	8001748 <HAL_GPIO_WritePin>
    delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <extrude+0x58>)
 80008ba:	edd3 7a00 	vldr	s15, [r3]
 80008be:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80008c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008c6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80008f0 <extrude+0x5c>
 80008ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d2:	ee17 3a90 	vmov	r3, s15
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fdff 	bl	80004dc <delayus>
  }
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000040 	.word	0x20000040
 80008e8:	48000400 	.word	0x48000400
 80008ec:	20000004 	.word	0x20000004
 80008f0:	49742400 	.word	0x49742400

080008f4 <reset_extruder>:

void reset_extruder(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  if(current_x < 5){
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <reset_extruder+0x7c>)
 80008fa:	edd3 7a00 	vldr	s15, [r3]
 80008fe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090a:	d508      	bpl.n	800091e <reset_extruder+0x2a>
    move(5, current_y);
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <reset_extruder+0x80>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eef0 0a67 	vmov.f32	s1, s15
 8000916:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800091a:	f7ff fe11 	bl	8000540 <move>
  }

  HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f000 ff0e 	bl	8001748 <HAL_GPIO_WritePin>

  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800092c:	e00f      	b.n	800094e <reset_extruder+0x5a>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2120      	movs	r1, #32
 8000932:	4811      	ldr	r0, [pc, #68]	; (8000978 <reset_extruder+0x84>)
 8000934:	f000 ff08 	bl	8001748 <HAL_GPIO_WritePin>
    delay();
 8000938:	f7ff fdc8 	bl	80004cc <delay>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2120      	movs	r1, #32
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <reset_extruder+0x84>)
 8000942:	f000 ff01 	bl	8001748 <HAL_GPIO_WritePin>
    delayus(1000000 / (X_STEPS_PER_MM * 100));
 8000946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094a:	f7ff fdc7 	bl	80004dc <delayus>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <reset_extruder+0x88>)
 8000952:	f000 fee1 	bl	8001718 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0e8      	beq.n	800092e <reset_extruder+0x3a>
  }

  HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 feef 	bl	8001748 <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000038 	.word	0x20000038
 8000974:	2000003c 	.word	0x2000003c
 8000978:	48000400 	.word	0x48000400
 800097c:	48000800 	.word	0x48000800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fbfc 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f862 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f000 f936 	bl	8000bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000990:	f000 f904 	bl	8000b9c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000994:	f000 f8ae 	bl	8000af4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  set_timer(&htim1);
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <main+0x88>)
 800099a:	f7ff fdc1 	bl	8000520 <set_timer>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800099e:	f003 fcc3 	bl	8004328 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &commandQueue_attributes);
 80009a2:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <main+0x8c>)
 80009a4:	2102      	movs	r1, #2
 80009a6:	2010      	movs	r0, #16
 80009a8:	f003 fdb5 	bl	8004516 <osMessageQueueNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <main+0x90>)
 80009b0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <main+0x94>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4818      	ldr	r0, [pc, #96]	; (8000a18 <main+0x98>)
 80009b8:	f003 fd00 	bl	80043bc <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <main+0x9c>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <main+0xa0>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0xa4>)
 80009c8:	f003 fcf8 	bl	80043bc <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <main+0xa8>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of parserTask */
  parserTaskHandle = osThreadNew(StartParserTask, NULL, &parserTask_attributes);
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <main+0xac>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4816      	ldr	r0, [pc, #88]	; (8000a30 <main+0xb0>)
 80009d8:	f003 fcf0 	bl	80043bc <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <main+0xb4>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of menuTask */
  menuTaskHandle = osThreadNew(StartMenuTask, NULL, &menuTask_attributes);
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <main+0xb8>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4815      	ldr	r0, [pc, #84]	; (8000a3c <main+0xbc>)
 80009e8:	f003 fce8 	bl	80043bc <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <main+0xc0>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of extruderTask */
  extruderTaskHandle = osThreadNew(StartExtruderTask, NULL, &extruderTask_attributes);
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <main+0xc4>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4814      	ldr	r0, [pc, #80]	; (8000a48 <main+0xc8>)
 80009f8:	f003 fce0 	bl	80043bc <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <main+0xcc>)
 8000a00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a02:	f003 fcb5 	bl	8004370 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000a06:	e7fe      	b.n	8000a06 <main+0x86>
 8000a08:	20000044 	.word	0x20000044
 8000a0c:	080070c4 	.word	0x080070c4
 8000a10:	2000012c 	.word	0x2000012c
 8000a14:	08007010 	.word	0x08007010
 8000a18:	08000e11 	.word	0x08000e11
 8000a1c:	20000118 	.word	0x20000118
 8000a20:	08007034 	.word	0x08007034
 8000a24:	08000e21 	.word	0x08000e21
 8000a28:	2000011c 	.word	0x2000011c
 8000a2c:	08007058 	.word	0x08007058
 8000a30:	08000e39 	.word	0x08000e39
 8000a34:	20000120 	.word	0x20000120
 8000a38:	0800707c 	.word	0x0800707c
 8000a3c:	08000e49 	.word	0x08000e49
 8000a40:	20000124 	.word	0x20000124
 8000a44:	080070a0 	.word	0x080070a0
 8000a48:	08000e59 	.word	0x08000e59
 8000a4c:	20000128 	.word	0x20000128

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2244      	movs	r2, #68	; 0x44
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f006 fa5c 	bl	8006f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a76:	f000 fe8d 	bl	8001794 <HAL_PWREx_ControlVoltageScaling>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a80:	f000 fa00 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a96:	2302      	movs	r3, #2
 8000a98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fec4 	bl	8001840 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000abe:	f000 f9e1 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2104      	movs	r1, #4
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fa8c 	bl	8001ff8 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ae6:	f000 f9cd 	bl	8000e84 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3758      	adds	r7, #88	; 0x58
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <MX_TIM1_Init+0xa4>)
 8000b16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b1a:	224f      	movs	r2, #79	; 0x4f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3e:	4815      	ldr	r0, [pc, #84]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b40:	f002 f96c 	bl	8002e1c <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b4a:	f000 f99b 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b5c:	f002 fbb8 	bl	80032d0 <HAL_TIM_ConfigClockSource>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b66:	f000 f98d 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_TIM1_Init+0xa0>)
 8000b7c:	f002 fdce 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b86:	f000 f97d 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000044 	.word	0x20000044
 8000b98:	40012c00 	.word	0x40012c00

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART2_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000be0:	f002 fe42 	bl	8003868 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 f94b 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000090 	.word	0x20000090
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	4b75      	ldr	r3, [pc, #468]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a74      	ldr	r2, [pc, #464]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b72      	ldr	r3, [pc, #456]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b6f      	ldr	r3, [pc, #444]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a6e      	ldr	r2, [pc, #440]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b6c      	ldr	r3, [pc, #432]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b69      	ldr	r3, [pc, #420]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a68      	ldr	r2, [pc, #416]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a62      	ldr	r2, [pc, #392]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <MX_GPIO_Init+0x204>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|X_STEP_Pin
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f249 7101 	movw	r1, #38657	; 0x9701
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f000 fd58 	bl	8001748 <HAL_GPIO_WritePin>
                          |SD_CS_Pin|Screen_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Touch_CS_Pin|Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f240 41ba 	movw	r1, #1210	; 0x4ba
 8000c9e:	4859      	ldr	r0, [pc, #356]	; (8000e04 <MX_GPIO_Init+0x208>)
 8000ca0:	f000 fd52 	bl	8001748 <HAL_GPIO_WritePin>
                          |Z_STEP_Pin|Screen_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_RST_GPIO_Port, Screen_RST_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4857      	ldr	r0, [pc, #348]	; (8000e08 <MX_GPIO_Init+0x20c>)
 8000caa:	f000 fd4d 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4851      	ldr	r0, [pc, #324]	; (8000e0c <MX_GPIO_Init+0x210>)
 8000cc6:	f000 fb7d 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_CS_Pin Z_DIR_Pin ENABLE_Pin SD_CS_Pin
                           Screen_DC_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|SD_CS_Pin
 8000cca:	f249 3301 	movw	r3, #37633	; 0x9301
 8000cce:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f000 fb6d 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SCK_Pin SD_MISO_Pin SD_MOSI_Pin */
  GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000cea:	23e0      	movs	r3, #224	; 0xe0
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fb5c 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_CS_Pin Y_DIR_Pin X_DIR_Pin Screen_LED_Pin */
  GPIO_InitStruct.Pin = Touch_CS_Pin|Y_DIR_Pin|X_DIR_Pin|Screen_LED_Pin;
 8000d0c:	f240 4392 	movw	r3, #1170	; 0x492
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4837      	ldr	r0, [pc, #220]	; (8000e04 <MX_GPIO_Init+0x208>)
 8000d26:	f000 fb4d 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_IRQ_Pin Y_STOP_Pin */
  GPIO_InitStruct.Pin = Touch_IRQ_Pin|Y_STOP_Pin;
 8000d2a:	2344      	movs	r3, #68	; 0x44
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4831      	ldr	r0, [pc, #196]	; (8000e04 <MX_GPIO_Init+0x208>)
 8000d3e:	f000 fb41 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_SCK_Pin Touch_MISO_Pin Touch_MOSI_Pin */
  GPIO_InitStruct.Pin = Touch_SCK_Pin|Touch_MISO_Pin|Touch_MOSI_Pin;
 8000d42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d54:	2305      	movs	r3, #5
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4829      	ldr	r0, [pc, #164]	; (8000e04 <MX_GPIO_Init+0x208>)
 8000d60:	f000 fb30 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STOP_Pin */
  GPIO_InitStruct.Pin = X_STOP_Pin;
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(X_STOP_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4825      	ldr	r0, [pc, #148]	; (8000e0c <MX_GPIO_Init+0x210>)
 8000d78:	f000 fb24 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STEP_Pin */
  GPIO_InitStruct.Pin = X_STEP_Pin;
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f000 fb14 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_SCK_Pin Screen_MISO_Pin Screen_MOSI_Pin */
  GPIO_InitStruct.Pin = Screen_SCK_Pin|Screen_MISO_Pin|Screen_MOSI_Pin;
 8000d9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dae:	2306      	movs	r3, #6
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_GPIO_Init+0x210>)
 8000dba:	f000 fb03 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_RST_Pin */
  GPIO_InitStruct.Pin = Screen_RST_Pin;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Screen_RST_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0x20c>)
 8000dd6:	f000 faf5 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_STEP_Pin Z_STEP_Pin */
  GPIO_InitStruct.Pin = Y_STEP_Pin|Z_STEP_Pin;
 8000dda:	2328      	movs	r3, #40	; 0x28
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_GPIO_Init+0x208>)
 8000df2:	f000 fae7 	bl	80013c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400
 8000e08:	48000c00 	.word	0x48000c00
 8000e0c:	48000800 	.word	0x48000800

08000e10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f003 fb61 	bl	80044e0 <osDelay>
 8000e1e:	e7fb      	b.n	8000e18 <StartDefaultTask+0x8>

08000e20 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
  /* Infinite loop */
  home();
 8000e28:	f7ff fc7a 	bl	8000720 <home>
  reset_extruder();
 8000e2c:	f7ff fd62 	bl	80008f4 <reset_extruder>
  for(;;)
  {
    osDelay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f003 fb55 	bl	80044e0 <osDelay>
 8000e36:	e7fb      	b.n	8000e30 <StartCommandTask+0x10>

08000e38 <StartParserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParserTask */
void StartParserTask(void *argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParserTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f003 fb4d 	bl	80044e0 <osDelay>
 8000e46:	e7fb      	b.n	8000e40 <StartParserTask+0x8>

08000e48 <StartMenuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMenuTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f003 fb45 	bl	80044e0 <osDelay>
 8000e56:	e7fb      	b.n	8000e50 <StartMenuTask+0x8>

08000e58 <StartExtruderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExtruderTask */
void StartExtruderTask(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartExtruderTask */
  /* Infinite loop */
  while(true){
    extrude();
 8000e60:	f7ff fd18 	bl	8000894 <extrude>
 8000e64:	e7fc      	b.n	8000e60 <StartExtruderTask+0x8>

08000e66 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e76:	d101      	bne.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e78:	f000 f9a2 	bl	80011c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_MspInit+0x4c>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210f      	movs	r1, #15
 8000eca:	f06f 0001 	mvn.w	r0, #1
 8000ece:	f000 fa4f 	bl	8001370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_TIM_Base_MspInit+0x38>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10b      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000efc:	6613      	str	r3, [r2, #96]	; 0x60
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40012c00 	.word	0x40012c00
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ac      	sub	sp, #176	; 0xb0
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2288      	movs	r2, #136	; 0x88
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 ffeb 	bl	8006f1c <memset>
  if(huart->Instance==USART2)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <HAL_UART_MspInit+0xb0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d13b      	bne.n	8000fc8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 faa1 	bl	80024a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff ff8c 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f76:	6593      	str	r3, [r2, #88]	; 0x58
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f000 f9fe 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	37b0      	adds	r7, #176	; 0xb0
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40004400 	.word	0x40004400
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <HAL_InitTick+0xe0>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <HAL_InitTick+0xe0>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <HAL_InitTick+0xe0>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ffe:	f107 0210 	add.w	r2, r7, #16
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f001 f9b9 	bl	8002380 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001018:	f001 f986 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 800101c:	6378      	str	r0, [r7, #52]	; 0x34
 800101e:	e004      	b.n	800102a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001020:	f001 f982 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8001024:	4603      	mov	r3, r0
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102c:	4a23      	ldr	r2, [pc, #140]	; (80010bc <HAL_InitTick+0xe4>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0c9b      	lsrs	r3, r3, #18
 8001034:	3b01      	subs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_InitTick+0xe8>)
 800103a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <HAL_InitTick+0xe8>)
 8001042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001046:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_InitTick+0xe8>)
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_InitTick+0xe8>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_InitTick+0xe8>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_InitTick+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001060:	4817      	ldr	r0, [pc, #92]	; (80010c0 <HAL_InitTick+0xe8>)
 8001062:	f001 fedb 	bl	8002e1c <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800106c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001070:	2b00      	cmp	r3, #0
 8001072:	d11b      	bne.n	80010ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001074:	4812      	ldr	r0, [pc, #72]	; (80010c0 <HAL_InitTick+0xe8>)
 8001076:	f001 ffb9 	bl	8002fec <HAL_TIM_Base_Start_IT>
 800107a:	4603      	mov	r3, r0
 800107c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001080:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001088:	201c      	movs	r0, #28
 800108a:	f000 f98d 	bl	80013a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d808      	bhi.n	80010a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	201c      	movs	r0, #28
 800109a:	f000 f969 	bl	8001370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_InitTick+0xec>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e002      	b.n	80010ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3738      	adds	r7, #56	; 0x38
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	20000130 	.word	0x20000130
 80010c4:	2000000c 	.word	0x2000000c

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM2_IRQHandler+0x10>)
 80010fa:	f001 ffe7 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000130 	.word	0x20000130

08001108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff ffea 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f005 fee7 	bl	8006f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fc0f 	bl	8000980 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001170:	08007134 	.word	0x08007134
  ldr r2, =_sbss
 8001174:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001178:	20002258 	.word	0x20002258

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_Init+0x3c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_Init+0x3c>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001196:	2003      	movs	r0, #3
 8001198:	f000 f8df 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119c:	200f      	movs	r0, #15
 800119e:	f7ff ff1b 	bl	8000fd8 <HAL_InitTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	e001      	b.n	80011b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ae:	f7ff fe6f 	bl	8000e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40022000 	.word	0x40022000

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000010 	.word	0x20000010
 80011e4:	2000017c 	.word	0x2000017c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000017c 	.word	0x2000017c

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001382:	f7ff ff61 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001386:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff ffb1 	bl	80012f4 <NVIC_EncodePriority>
 8001392:	4602      	mov	r2, r0
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff80 	bl	80012a0 <__NVIC_SetPriority>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff54 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	e17f      	b.n	80016d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8171 	beq.w	80016ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d005      	beq.n	8001404 <HAL_GPIO_Init+0x40>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d130      	bne.n	8001466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143a:	2201      	movs	r2, #1
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f003 0201 	and.w	r2, r3, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b03      	cmp	r3, #3
 8001470:	d118      	bne.n	80014a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80ac 	beq.w	80016ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_GPIO_Init+0x330>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <HAL_GPIO_Init+0x330>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6613      	str	r3, [r2, #96]	; 0x60
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_GPIO_Init+0x330>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158e:	4a5a      	ldr	r2, [pc, #360]	; (80016f8 <HAL_GPIO_Init+0x334>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015b8:	d025      	beq.n	8001606 <HAL_GPIO_Init+0x242>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4f      	ldr	r2, [pc, #316]	; (80016fc <HAL_GPIO_Init+0x338>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01f      	beq.n	8001602 <HAL_GPIO_Init+0x23e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4e      	ldr	r2, [pc, #312]	; (8001700 <HAL_GPIO_Init+0x33c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x23a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_GPIO_Init+0x340>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x236>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x344>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x232>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4b      	ldr	r2, [pc, #300]	; (800170c <HAL_GPIO_Init+0x348>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x22e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_GPIO_Init+0x34c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x22a>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00c      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00a      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015f2:	2305      	movs	r3, #5
 80015f4:	e008      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e004      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015fe:	2302      	movs	r3, #2
 8001600:	e002      	b.n	8001608 <HAL_GPIO_Init+0x244>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x244>
 8001606:	2300      	movs	r3, #0
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	f002 0203 	and.w	r2, r2, #3
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4093      	lsls	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_GPIO_Init+0x334>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_GPIO_Init+0x350>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800164a:	4a32      	ldr	r2, [pc, #200]	; (8001714 <HAL_GPIO_Init+0x350>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_GPIO_Init+0x350>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <HAL_GPIO_Init+0x350>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_GPIO_Init+0x350>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_GPIO_Init+0x350>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_GPIO_Init+0x350>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <HAL_GPIO_Init+0x350>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f47f ae78 	bne.w	80013d4 <HAL_GPIO_Init+0x10>
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000c00 	.word	0x48000c00
 8001708:	48001000 	.word	0x48001000
 800170c:	48001400 	.word	0x48001400
 8001710:	48001800 	.word	0x48001800
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e001      	b.n	800173a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001764:	e002      	b.n	800176c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <HAL_PWREx_GetVoltageRange+0x18>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40007000 	.word	0x40007000

08001794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a2:	d130      	bne.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b0:	d038      	beq.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ba:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2232      	movs	r2, #50	; 0x32
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9b      	lsrs	r3, r3, #18
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d8:	e002      	b.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ec:	d102      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f2      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001800:	d110      	bne.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e00f      	b.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001812:	d007      	beq.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001822:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40007000 	.word	0x40007000
 8001838:	20000008 	.word	0x20000008
 800183c:	431bde83 	.word	0x431bde83

08001840 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e3ca      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185c:	4b94      	ldr	r3, [pc, #592]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80e4 	beq.w	8001a3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_RCC_OscConfig+0x4a>
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b0c      	cmp	r3, #12
 800187e:	f040 808b 	bne.w	8001998 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b01      	cmp	r3, #1
 8001886:	f040 8087 	bne.w	8001998 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800188a:	4b89      	ldr	r3, [pc, #548]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <HAL_RCC_OscConfig+0x62>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e3a2      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1a      	ldr	r2, [r3, #32]
 80018a6:	4b82      	ldr	r3, [pc, #520]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <HAL_RCC_OscConfig+0x7c>
 80018b2:	4b7f      	ldr	r3, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ba:	e005      	b.n	80018c8 <HAL_RCC_OscConfig+0x88>
 80018bc:	4b7c      	ldr	r3, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d223      	bcs.n	8001914 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fd87 	bl	80023e4 <RCC_SetFlashLatencyFromMSIRange>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e383      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e0:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a72      	ldr	r2, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	496d      	ldr	r1, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fe:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	4968      	ldr	r1, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
 8001912:	e025      	b.n	8001960 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001914:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4960      	ldr	r1, [pc, #384]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	495b      	ldr	r1, [pc, #364]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fd47 	bl	80023e4 <RCC_SetFlashLatencyFromMSIRange>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e343      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001960:	f000 fc4a 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	4950      	ldr	r1, [pc, #320]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	4a4e      	ldr	r2, [pc, #312]	; (8001ab8 <HAL_RCC_OscConfig+0x278>)
 800197e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_RCC_OscConfig+0x27c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb27 	bl	8000fd8 <HAL_InitTick>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d052      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	e327      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d032      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019a0:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fc1c 	bl	80011e8 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019b4:	f7ff fc18 	bl	80011e8 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e310      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a36      	ldr	r2, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4931      	ldr	r1, [pc, #196]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	492c      	ldr	r1, [pc, #176]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e01a      	b.n	8001a3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a29      	ldr	r2, [pc, #164]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fbe9 	bl	80011e8 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fbe5 	bl	80011e8 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e2dd      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x1da>
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d074      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x21a>
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	d10e      	bne.n	8001a72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d10b      	bne.n	8001a72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d064      	beq.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d160      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e2ba      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x24a>
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e026      	b.n	8001ad8 <HAL_RCC_OscConfig+0x298>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a92:	d115      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x280>
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a02      	ldr	r2, [pc, #8]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	e014      	b.n	8001ad8 <HAL_RCC_OscConfig+0x298>
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	080070dc 	.word	0x080070dc
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	4ba0      	ldr	r3, [pc, #640]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a9f      	ldr	r2, [pc, #636]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b9d      	ldr	r3, [pc, #628]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a9c      	ldr	r2, [pc, #624]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb82 	bl	80011e8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fb7e 	bl	80011e8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e276      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afa:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2a8>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fb6e 	bl	80011e8 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fb6a 	bl	80011e8 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e262      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b22:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2d0>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d060      	beq.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x310>
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d116      	bne.n	8001b7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b50:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x328>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e23f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b76      	ldr	r3, [pc, #472]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	4973      	ldr	r1, [pc, #460]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7c:	e040      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d023      	beq.n	8001bce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff fb29 	bl	80011e8 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fb25 	bl	80011e8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e21d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bac:	4b65      	ldr	r3, [pc, #404]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	495f      	ldr	r1, [pc, #380]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
 8001bcc:	e018      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5c      	ldr	r2, [pc, #368]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff fb05 	bl	80011e8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be2:	f7ff fb01 	bl	80011e8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e1f9      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d03c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c14:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1a:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff fae0 	bl	80011e8 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fadc 	bl	80011e8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1d4      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c3e:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ef      	beq.n	8001c2c <HAL_RCC_OscConfig+0x3ec>
 8001c4c:	e01b      	b.n	8001c86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c54:	4a3b      	ldr	r2, [pc, #236]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fac3 	bl	80011e8 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff fabf 	bl	80011e8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1b7      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ef      	bne.n	8001c66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a6 	beq.w	8001de0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_RCC_OscConfig+0x508>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d118      	bne.n	8001cfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x508>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x508>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fa86 	bl	80011e8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce0:	f7ff fa82 	bl	80011e8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e17a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x508>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4d8>
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d16:	e029      	b.n	8001d6c <HAL_RCC_OscConfig+0x52c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d115      	bne.n	8001d4c <HAL_RCC_OscConfig+0x50c>
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <HAL_RCC_OscConfig+0x504>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x52c>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	4b9c      	ldr	r3, [pc, #624]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	4a9b      	ldr	r2, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d5c:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	4a97      	ldr	r2, [pc, #604]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d016      	beq.n	8001da2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7ff fa38 	bl	80011e8 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fa34 	bl	80011e8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e12a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d92:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ed      	beq.n	8001d7c <HAL_RCC_OscConfig+0x53c>
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff fa21 	bl	80011e8 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff fa1d 	bl	80011e8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e113      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc0:	4b7f      	ldr	r3, [pc, #508]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ed      	bne.n	8001daa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dce:	7ffb      	ldrb	r3, [r7, #31]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4b7a      	ldr	r3, [pc, #488]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a79      	ldr	r2, [pc, #484]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80fe 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	f040 80d0 	bne.w	8001f94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001df4:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d130      	bne.n	8001e6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	3b01      	subs	r3, #1
 8001e14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d127      	bne.n	8001e6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d11f      	bne.n	8001e6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e34:	2a07      	cmp	r2, #7
 8001e36:	bf14      	ite	ne
 8001e38:	2201      	movne	r2, #1
 8001e3a:	2200      	moveq	r2, #0
 8001e3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d113      	bne.n	8001e6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	085b      	lsrs	r3, r3, #1
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d06e      	beq.n	8001f48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d069      	beq.n	8001f44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0ad      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4b      	ldr	r2, [pc, #300]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e98:	f7ff f9a6 	bl	80011e8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f9a2 	bl	80011e8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e09a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebe:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_RCC_OscConfig+0x784>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	4311      	orrs	r1, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ed8:	0212      	lsls	r2, r2, #8
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ee0:	0852      	lsrs	r2, r2, #1
 8001ee2:	3a01      	subs	r2, #1
 8001ee4:	0552      	lsls	r2, r2, #21
 8001ee6:	4311      	orrs	r1, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eec:	0852      	lsrs	r2, r2, #1
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	0652      	lsls	r2, r2, #25
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ef8:	0912      	lsrs	r2, r2, #4
 8001efa:	0452      	lsls	r2, r2, #17
 8001efc:	430a      	orrs	r2, r1
 8001efe:	4930      	ldr	r1, [pc, #192]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f1c:	f7ff f964 	bl	80011e8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff f960 	bl	80011e8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e058      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f42:	e050      	b.n	8001fe6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e04f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d148      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f6c:	f7ff f93c 	bl	80011e8 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff f938 	bl	80011e8 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e030      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x734>
 8001f92:	e028      	b.n	8001fe6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d023      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7ff f91f 	bl	80011e8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fac:	e00c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff f91b 	bl	80011e8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d905      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e013      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCC_OscConfig+0x7b0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ec      	bne.n	8001fae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_OscConfig+0x7b0>)
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <HAL_RCC_OscConfig+0x7b0>)
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_OscConfig+0x7b4>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
 8001fe0:	e001      	b.n	8001fe6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	feeefffc 	.word	0xfeeefffc

08001ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0e7      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d910      	bls.n	800203c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4970      	ldr	r1, [pc, #448]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0cf      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	429a      	cmp	r2, r3
 8002056:	d908      	bls.n	800206a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4960      	ldr	r1, [pc, #384]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d04c      	beq.n	8002110 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d121      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0a6      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e09a      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e08e      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020be:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e086      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4943      	ldr	r1, [pc, #268]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e0:	f7ff f882 	bl	80011e8 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7ff f87e 	bl	80011e8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e06e      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002128:	429a      	cmp	r2, r3
 800212a:	d208      	bcs.n	800213e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	492b      	ldr	r1, [pc, #172]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d210      	bcs.n	800216e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 0207 	bic.w	r2, r3, #7
 8002154:	4923      	ldr	r1, [pc, #140]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e036      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4918      	ldr	r1, [pc, #96]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4910      	ldr	r1, [pc, #64]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ac:	f000 f824 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	490b      	ldr	r1, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x1f4>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1f8>)
 80021ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1fc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff01 	bl	8000fd8 <HAL_InitTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021da:	7afb      	ldrb	r3, [r7, #11]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080070dc 	.word	0x080070dc
 80021f0:	20000008 	.word	0x20000008
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x34>
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d121      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d11e      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800222c:	4b34      	ldr	r3, [pc, #208]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002238:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e005      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002254:	4a2b      	ldr	r2, [pc, #172]	; (8002304 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d102      	bne.n	8002276 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_GetSysClockFreq+0x110>)
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	e004      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d101      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_RCC_GetSysClockFreq+0x114>)
 800227e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d134      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0xa6>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d003      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0xac>
 800229c:	e005      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_GetSysClockFreq+0x110>)
 80022a0:	617b      	str	r3, [r7, #20]
      break;
 80022a2:	e005      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x114>)
 80022a6:	617b      	str	r3, [r7, #20]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	617b      	str	r3, [r7, #20]
      break;
 80022ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	3301      	adds	r3, #1
 80022bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	fb03 f202 	mul.w	r2, r3, r2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	0e5b      	lsrs	r3, r3, #25
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	3301      	adds	r3, #1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f0:	69bb      	ldr	r3, [r7, #24]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	080070f4 	.word	0x080070f4
 8002308:	00f42400 	.word	0x00f42400
 800230c:	007a1200 	.word	0x007a1200

08002310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_RCC_GetHCLKFreq+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800232c:	f7ff fff0 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	080070ec 	.word	0x080070ec

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002358:	f7ff ffda 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0adb      	lsrs	r3, r3, #11
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4904      	ldr	r1, [pc, #16]	; (800237c <HAL_RCC_GetPCLK2Freq+0x28>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	080070ec 	.word	0x080070ec

08002380 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	220f      	movs	r2, #15
 800238e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCC_GetClockConfig+0x60>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0207 	and.w	r2, r3, #7
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40022000 	.word	0x40022000

080023e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023fc:	f7ff f9bc 	bl	8001778 <HAL_PWREx_GetVoltageRange>
 8002400:	6178      	str	r0, [r7, #20]
 8002402:	e014      	b.n	800242e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	4a24      	ldr	r2, [pc, #144]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	6593      	str	r3, [r2, #88]	; 0x58
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800241c:	f7ff f9ac 	bl	8001778 <HAL_PWREx_GetVoltageRange>
 8002420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a1d      	ldr	r2, [pc, #116]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002434:	d10b      	bne.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d919      	bls.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2ba0      	cmp	r3, #160	; 0xa0
 8002440:	d902      	bls.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002442:	2302      	movs	r3, #2
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e013      	b.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002448:	2301      	movs	r3, #1
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	e010      	b.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d902      	bls.n	800245a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002454:	2303      	movs	r3, #3
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e00a      	b.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b80      	cmp	r3, #128	; 0x80
 800245e:	d102      	bne.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002460:	2302      	movs	r3, #2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e004      	b.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b70      	cmp	r3, #112	; 0x70
 800246a:	d101      	bne.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800246c:	2301      	movs	r3, #1
 800246e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 0207 	bic.w	r2, r3, #7
 8002478:	4909      	ldr	r1, [pc, #36]	; (80024a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	40022000 	.word	0x40022000

080024a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ac:	2300      	movs	r3, #0
 80024ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b0:	2300      	movs	r3, #0
 80024b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d041      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024c8:	d02a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ce:	d824      	bhi.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024d4:	d008      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024da:	d81e      	bhi.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d010      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024e6:	e018      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e8:	4b86      	ldr	r3, [pc, #536]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a85      	ldr	r2, [pc, #532]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024f4:	e015      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fabb 	bl	8002a78 <RCCEx_PLLSAI1_Config>
 8002502:	4603      	mov	r3, r0
 8002504:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002506:	e00c      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3320      	adds	r3, #32
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fba6 	bl	8002c60 <RCCEx_PLLSAI2_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002518:	e003      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	74fb      	strb	r3, [r7, #19]
      break;
 800251e:	e000      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002528:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002536:	4973      	ldr	r1, [pc, #460]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800253e:	e001      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d041      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002554:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002558:	d02a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800255a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800255e:	d824      	bhi.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002564:	d008      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800256a:	d81e      	bhi.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002574:	d010      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002576:	e018      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002578:	4b62      	ldr	r3, [pc, #392]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a61      	ldr	r2, [pc, #388]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002582:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002584:	e015      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fa73 	bl	8002a78 <RCCEx_PLLSAI1_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002596:	e00c      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3320      	adds	r3, #32
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fb5e 	bl	8002c60 <RCCEx_PLLSAI2_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a8:	e003      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	74fb      	strb	r3, [r7, #19]
      break;
 80025ae:	e000      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10b      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025b8:	4b52      	ldr	r3, [pc, #328]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c6:	494f      	ldr	r1, [pc, #316]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ce:	e001      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a0 	beq.w	8002722 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	4a40      	ldr	r2, [pc, #256]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	; 0x58
 8002608:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002614:	2301      	movs	r3, #1
 8002616:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002618:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a3a      	ldr	r2, [pc, #232]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002624:	f7fe fde0 	bl	80011e8 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800262a:	e009      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262c:	f7fe fddc 	bl	80011e8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d902      	bls.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	74fb      	strb	r3, [r7, #19]
        break;
 800263e:	e005      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ef      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d15c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002652:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01f      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	d019      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800269c:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fd9b 	bl	80011e8 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b4:	e00b      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fd97 	bl	80011e8 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d902      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	74fb      	strb	r3, [r7, #19]
            break;
 80026cc:	e006      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ec      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f2:	4904      	ldr	r1, [pc, #16]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026fa:	e009      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
 8002700:	e006      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002710:	7c7b      	ldrb	r3, [r7, #17]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002716:	4b9e      	ldr	r3, [pc, #632]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	4a9d      	ldr	r2, [pc, #628]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272e:	4b98      	ldr	r3, [pc, #608]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f023 0203 	bic.w	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	4994      	ldr	r1, [pc, #592]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002750:	4b8f      	ldr	r3, [pc, #572]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 020c 	bic.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	498c      	ldr	r1, [pc, #560]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002772:	4b87      	ldr	r3, [pc, #540]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4983      	ldr	r1, [pc, #524]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002794:	4b7e      	ldr	r3, [pc, #504]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	497b      	ldr	r1, [pc, #492]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027b6:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c4:	4972      	ldr	r1, [pc, #456]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d8:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	496a      	ldr	r1, [pc, #424]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	4961      	ldr	r1, [pc, #388]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800281c:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	4959      	ldr	r1, [pc, #356]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284c:	4950      	ldr	r1, [pc, #320]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	4948      	ldr	r1, [pc, #288]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	493f      	ldr	r1, [pc, #252]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d028      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b2:	4937      	ldr	r1, [pc, #220]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c2:	d106      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a31      	ldr	r2, [pc, #196]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ce:	60d3      	str	r3, [r2, #12]
 80028d0:	e011      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028da:	d10c      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	2101      	movs	r1, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f8c8 	bl	8002a78 <RCCEx_PLLSAI1_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d028      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	491f      	ldr	r1, [pc, #124]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002920:	d106      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292c:	60d3      	str	r3, [r2, #12]
 800292e:	e011      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002938:	d10c      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	2101      	movs	r1, #1
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f899 	bl	8002a78 <RCCEx_PLLSAI1_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d02b      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297e:	d109      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a02      	ldr	r2, [pc, #8]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298a:	60d3      	str	r3, [r2, #12]
 800298c:	e014      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800299c:	d10c      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 f867 	bl	8002a78 <RCCEx_PLLSAI1_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02f      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d2:	4928      	ldr	r1, [pc, #160]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	2102      	movs	r1, #2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f844 	bl	8002a78 <RCCEx_PLLSAI1_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d014      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	74bb      	strb	r3, [r7, #18]
 80029fe:	e011      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3320      	adds	r3, #32
 8002a0e:	2102      	movs	r1, #2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f925 	bl	8002c60 <RCCEx_PLLSAI2_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3e:	490d      	ldr	r1, [pc, #52]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a62:	4904      	ldr	r1, [pc, #16]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000

08002a78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a86:	4b75      	ldr	r3, [pc, #468]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d018      	beq.n	8002ac4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a92:	4b72      	ldr	r3, [pc, #456]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0203 	and.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10d      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
       ||
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d047      	beq.n	8002b4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e044      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d018      	beq.n	8002afe <RCCEx_PLLSAI1_Config+0x86>
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d825      	bhi.n	8002b1c <RCCEx_PLLSAI1_Config+0xa4>
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d002      	beq.n	8002ada <RCCEx_PLLSAI1_Config+0x62>
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d009      	beq.n	8002aec <RCCEx_PLLSAI1_Config+0x74>
 8002ad8:	e020      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ada:	4b60      	ldr	r3, [pc, #384]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11d      	bne.n	8002b22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aea:	e01a      	b.n	8002b22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aec:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d116      	bne.n	8002b26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afc:	e013      	b.n	8002b26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afe:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b0a:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b1a:	e006      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e004      	b.n	8002b2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b22:	bf00      	nop
 8002b24:	e002      	b.n	8002b2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10d      	bne.n	8002b4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b32:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	430b      	orrs	r3, r1
 8002b48:	4944      	ldr	r1, [pc, #272]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d17d      	bne.n	8002c50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b54:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a40      	ldr	r2, [pc, #256]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b60:	f7fe fb42 	bl	80011e8 <HAL_GetTick>
 8002b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b66:	e009      	b.n	8002b7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b68:	f7fe fb3e 	bl	80011e8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d902      	bls.n	8002b7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	73fb      	strb	r3, [r7, #15]
        break;
 8002b7a:	e005      	b.n	8002b88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b7c:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ef      	bne.n	8002b68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d160      	bne.n	8002c50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6892      	ldr	r2, [r2, #8]
 8002ba4:	0211      	lsls	r1, r2, #8
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68d2      	ldr	r2, [r2, #12]
 8002baa:	0912      	lsrs	r2, r2, #4
 8002bac:	0452      	lsls	r2, r2, #17
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	492a      	ldr	r1, [pc, #168]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	610b      	str	r3, [r1, #16]
 8002bb6:	e027      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d112      	bne.n	8002be4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6892      	ldr	r2, [r2, #8]
 8002bce:	0211      	lsls	r1, r2, #8
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6912      	ldr	r2, [r2, #16]
 8002bd4:	0852      	lsrs	r2, r2, #1
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	0552      	lsls	r2, r2, #21
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	491f      	ldr	r1, [pc, #124]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
 8002be2:	e011      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6892      	ldr	r2, [r2, #8]
 8002bf4:	0211      	lsls	r1, r2, #8
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6952      	ldr	r2, [r2, #20]
 8002bfa:	0852      	lsrs	r2, r2, #1
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0652      	lsls	r2, r2, #25
 8002c00:	430a      	orrs	r2, r1
 8002c02:	4916      	ldr	r1, [pc, #88]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe fae8 	bl	80011e8 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c1a:	e009      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c1c:	f7fe fae4 	bl	80011e8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d902      	bls.n	8002c30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c2e:	e005      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ef      	beq.n	8002c1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	4904      	ldr	r1, [pc, #16]	; (8002c5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000

08002c60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0203 	and.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d10d      	bne.n	8002ca6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c92:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d047      	beq.n	8002d36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e044      	b.n	8002d36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d018      	beq.n	8002ce6 <RCCEx_PLLSAI2_Config+0x86>
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d825      	bhi.n	8002d04 <RCCEx_PLLSAI2_Config+0xa4>
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d002      	beq.n	8002cc2 <RCCEx_PLLSAI2_Config+0x62>
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d009      	beq.n	8002cd4 <RCCEx_PLLSAI2_Config+0x74>
 8002cc0:	e020      	b.n	8002d04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc2:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11d      	bne.n	8002d0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd2:	e01a      	b.n	8002d0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d116      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e013      	b.n	8002d0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce6:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d02:	e006      	b.n	8002d12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e004      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	4939      	ldr	r1, [pc, #228]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d167      	bne.n	8002e0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fa4e 	bl	80011e8 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d4e:	e009      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d50:	f7fe fa4a 	bl	80011e8 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	73fb      	strb	r3, [r7, #15]
        break;
 8002d62:	e005      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ef      	bne.n	8002d50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d14a      	bne.n	8002e0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d7c:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6892      	ldr	r2, [r2, #8]
 8002d8c:	0211      	lsls	r1, r2, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68d2      	ldr	r2, [r2, #12]
 8002d92:	0912      	lsrs	r2, r2, #4
 8002d94:	0452      	lsls	r2, r2, #17
 8002d96:	430a      	orrs	r2, r1
 8002d98:	491f      	ldr	r1, [pc, #124]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	614b      	str	r3, [r1, #20]
 8002d9e:	e011      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6892      	ldr	r2, [r2, #8]
 8002db0:	0211      	lsls	r1, r2, #8
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6912      	ldr	r2, [r2, #16]
 8002db6:	0852      	lsrs	r2, r2, #1
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0652      	lsls	r2, r2, #25
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4916      	ldr	r1, [pc, #88]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fa0a 	bl	80011e8 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dd6:	e009      	b.n	8002dec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd8:	f7fe fa06 	bl	80011e8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dea:	e005      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4904      	ldr	r1, [pc, #16]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e049      	b.n	8002ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe f84c 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fb2a 	bl	80034b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d001      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e047      	b.n	8002f74 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <HAL_TIM_Base_Start+0xb4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01d      	beq.n	8002f32 <HAL_TIM_Base_Start+0x66>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d018      	beq.n	8002f32 <HAL_TIM_Base_Start+0x66>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_TIM_Base_Start+0xb8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_TIM_Base_Start+0x66>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <HAL_TIM_Base_Start+0xbc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_TIM_Base_Start+0x66>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_TIM_Base_Start+0xc0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_TIM_Base_Start+0x66>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_TIM_Base_Start+0xc4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_TIM_Base_Start+0x66>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_TIM_Base_Start+0xc8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d115      	bne.n	8002f5e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_TIM_Base_Start+0xcc>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d015      	beq.n	8002f70 <HAL_TIM_Base_Start+0xa4>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d011      	beq.n	8002f70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	e008      	b.n	8002f70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40013400 	.word	0x40013400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	00010007 	.word	0x00010007

08002f9c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_TIM_Base_Stop+0x38>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	f240 4344 	movw	r3, #1092	; 0x444
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_Base_Stop+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e04f      	b.n	80030a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01d      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x76>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d018      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x76>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x76>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x76>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_TIM_Base_Start_IT+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x76>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x76>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d115      	bne.n	800308e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800306a:	4013      	ands	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b06      	cmp	r3, #6
 8003072:	d015      	beq.n	80030a0 <HAL_TIM_Base_Start_IT+0xb4>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307a:	d011      	beq.n	80030a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308c:	e008      	b.n	80030a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e000      	b.n	80030a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40013400 	.word	0x40013400
 80030c4:	40014000 	.word	0x40014000
 80030c8:	00010007 	.word	0x00010007

080030cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d020      	beq.n	8003130 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0202 	mvn.w	r2, #2
 8003100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9ad 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f99f 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f9b0 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d020      	beq.n	800317c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0204 	mvn.w	r2, #4
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f987 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f979 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f98a 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d020      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0208 	mvn.w	r2, #8
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f961 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f953 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f964 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d020      	beq.n	8003214 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0210 	mvn.w	r2, #16
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2208      	movs	r2, #8
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f93b 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f92d 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f93e 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0201 	mvn.w	r2, #1
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd fe17 	bl	8000e66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 faf2 	bl	8003840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 faea 	bl	8003854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8fd 	bl	800349e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0220 	mvn.w	r2, #32
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fab2 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_TIM_ConfigClockSource+0x1c>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e0b6      	b.n	800345a <HAL_TIM_ConfigClockSource+0x18a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800330e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d03e      	beq.n	80033a8 <HAL_TIM_ConfigClockSource+0xd8>
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332e:	f200 8087 	bhi.w	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	f000 8086 	beq.w	8003446 <HAL_TIM_ConfigClockSource+0x176>
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333e:	d87f      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003340:	2b70      	cmp	r3, #112	; 0x70
 8003342:	d01a      	beq.n	800337a <HAL_TIM_ConfigClockSource+0xaa>
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d87b      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003348:	2b60      	cmp	r3, #96	; 0x60
 800334a:	d050      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x11e>
 800334c:	2b60      	cmp	r3, #96	; 0x60
 800334e:	d877      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003350:	2b50      	cmp	r3, #80	; 0x50
 8003352:	d03c      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0xfe>
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d873      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d058      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x13e>
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d86f      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d064      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d86b      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003368:	2b20      	cmp	r3, #32
 800336a:	d060      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 800336c:	2b20      	cmp	r3, #32
 800336e:	d867      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05c      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 8003374:	2b10      	cmp	r3, #16
 8003376:	d05a      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 8003378:	e062      	b.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800338a:	f000 f9a7 	bl	80036dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800339c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	609a      	str	r2, [r3, #8]
      break;
 80033a6:	e04f      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033b8:	f000 f990 	bl	80036dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ca:	609a      	str	r2, [r3, #8]
      break;
 80033cc:	e03c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 f904 	bl	80035e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2150      	movs	r1, #80	; 0x50
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f95d 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e02c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 f923 	bl	8003646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2160      	movs	r1, #96	; 0x60
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f94d 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 800340c:	e01c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341a:	461a      	mov	r2, r3
 800341c:	f000 f8e4 	bl	80035e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f93d 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 800342c:	e00c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f000 f934 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 800343e:	e003      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      break;
 8003444:	e000      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3d      	ldr	r2, [pc, #244]	; (80035cc <TIM_Base_SetConfig+0x118>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <TIM_Base_SetConfig+0x11c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <TIM_Base_SetConfig+0x120>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01f      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d01b      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <TIM_Base_SetConfig+0x118>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d017      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <TIM_Base_SetConfig+0x11c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <TIM_Base_SetConfig+0x120>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00f      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00b      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <TIM_Base_SetConfig+0x128>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <TIM_Base_SetConfig+0x12c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <TIM_Base_SetConfig+0x130>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d108      	bne.n	8003560 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00f      	beq.n	80035ac <TIM_Base_SetConfig+0xf8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0xf8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a11      	ldr	r2, [pc, #68]	; (80035dc <TIM_Base_SetConfig+0x128>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0xf8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <TIM_Base_SetConfig+0x12c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0xf8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0f      	ldr	r2, [pc, #60]	; (80035e4 <TIM_Base_SetConfig+0x130>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40013400 	.word	0x40013400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800

080035e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0201 	bic.w	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 030a 	bic.w	r3, r3, #10
 8003624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003646:	b480      	push	{r7}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 0210 	bic.w	r2, r3, #16
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	031b      	lsls	r3, r3, #12
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003682:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f043 0307 	orr.w	r3, r3, #7
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	609a      	str	r2, [r3, #8]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	431a      	orrs	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	609a      	str	r2, [r3, #8]
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e068      	b.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d108      	bne.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800376e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1e      	ldr	r2, [pc, #120]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01d      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d018      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a14      	ldr	r2, [pc, #80]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10c      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40013400 	.word	0x40013400
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40014000 	.word	0x40014000

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e040      	b.n	80038fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fb48 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fae0 	bl	8003e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f825 	bl	8003904 <UART_SetConfig>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e01b      	b.n	80038fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb5f 	bl	8003fb8 <UART_CheckIdleState>
 80038fa:	4603      	mov	r3, r0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b08a      	sub	sp, #40	; 0x28
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4313      	orrs	r3, r2
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4ba4      	ldr	r3, [pc, #656]	; (8003bc4 <UART_SetConfig+0x2c0>)
 8003934:	4013      	ands	r3, r2
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800393c:	430b      	orrs	r3, r1
 800393e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a99      	ldr	r2, [pc, #612]	; (8003bc8 <UART_SetConfig+0x2c4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	4313      	orrs	r3, r2
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	430a      	orrs	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a90      	ldr	r2, [pc, #576]	; (8003bcc <UART_SetConfig+0x2c8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d126      	bne.n	80039dc <UART_SetConfig+0xd8>
 800398e:	4b90      	ldr	r3, [pc, #576]	; (8003bd0 <UART_SetConfig+0x2cc>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b03      	cmp	r3, #3
 800399a:	d81b      	bhi.n	80039d4 <UART_SetConfig+0xd0>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <UART_SetConfig+0xa0>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039c5 	.word	0x080039c5
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e116      	b.n	8003bea <UART_SetConfig+0x2e6>
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e112      	b.n	8003bea <UART_SetConfig+0x2e6>
 80039c4:	2304      	movs	r3, #4
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e10e      	b.n	8003bea <UART_SetConfig+0x2e6>
 80039cc:	2308      	movs	r3, #8
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e10a      	b.n	8003bea <UART_SetConfig+0x2e6>
 80039d4:	2310      	movs	r3, #16
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e106      	b.n	8003bea <UART_SetConfig+0x2e6>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7c      	ldr	r2, [pc, #496]	; (8003bd4 <UART_SetConfig+0x2d0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d138      	bne.n	8003a58 <UART_SetConfig+0x154>
 80039e6:	4b7a      	ldr	r3, [pc, #488]	; (8003bd0 <UART_SetConfig+0x2cc>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	d82d      	bhi.n	8003a50 <UART_SetConfig+0x14c>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <UART_SetConfig+0xf8>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a51 	.word	0x08003a51
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08003a41 	.word	0x08003a41
 8003a10:	08003a51 	.word	0x08003a51
 8003a14:	08003a51 	.word	0x08003a51
 8003a18:	08003a51 	.word	0x08003a51
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	08003a51 	.word	0x08003a51
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003a51 	.word	0x08003a51
 8003a2c:	08003a49 	.word	0x08003a49
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e0d8      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e0d4      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a40:	2304      	movs	r3, #4
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e0d0      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a48:	2308      	movs	r3, #8
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e0cc      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a50:	2310      	movs	r3, #16
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e0c8      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5e      	ldr	r2, [pc, #376]	; (8003bd8 <UART_SetConfig+0x2d4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d125      	bne.n	8003aae <UART_SetConfig+0x1aa>
 8003a62:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <UART_SetConfig+0x2cc>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a6c:	2b30      	cmp	r3, #48	; 0x30
 8003a6e:	d016      	beq.n	8003a9e <UART_SetConfig+0x19a>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d818      	bhi.n	8003aa6 <UART_SetConfig+0x1a2>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d00a      	beq.n	8003a8e <UART_SetConfig+0x18a>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d814      	bhi.n	8003aa6 <UART_SetConfig+0x1a2>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <UART_SetConfig+0x182>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d008      	beq.n	8003a96 <UART_SetConfig+0x192>
 8003a84:	e00f      	b.n	8003aa6 <UART_SetConfig+0x1a2>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8c:	e0ad      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a94:	e0a9      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a96:	2304      	movs	r3, #4
 8003a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9c:	e0a5      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa4:	e0a1      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aac:	e09d      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a4a      	ldr	r2, [pc, #296]	; (8003bdc <UART_SetConfig+0x2d8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d125      	bne.n	8003b04 <UART_SetConfig+0x200>
 8003ab8:	4b45      	ldr	r3, [pc, #276]	; (8003bd0 <UART_SetConfig+0x2cc>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ac4:	d016      	beq.n	8003af4 <UART_SetConfig+0x1f0>
 8003ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ac8:	d818      	bhi.n	8003afc <UART_SetConfig+0x1f8>
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	d00a      	beq.n	8003ae4 <UART_SetConfig+0x1e0>
 8003ace:	2b80      	cmp	r3, #128	; 0x80
 8003ad0:	d814      	bhi.n	8003afc <UART_SetConfig+0x1f8>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <UART_SetConfig+0x1d8>
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d008      	beq.n	8003aec <UART_SetConfig+0x1e8>
 8003ada:	e00f      	b.n	8003afc <UART_SetConfig+0x1f8>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e082      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e07e      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003aec:	2304      	movs	r3, #4
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e07a      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003af4:	2308      	movs	r3, #8
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e076      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003afc:	2310      	movs	r3, #16
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e072      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <UART_SetConfig+0x2dc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d12a      	bne.n	8003b64 <UART_SetConfig+0x260>
 8003b0e:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <UART_SetConfig+0x2cc>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b1c:	d01a      	beq.n	8003b54 <UART_SetConfig+0x250>
 8003b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b22:	d81b      	bhi.n	8003b5c <UART_SetConfig+0x258>
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d00c      	beq.n	8003b44 <UART_SetConfig+0x240>
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d815      	bhi.n	8003b5c <UART_SetConfig+0x258>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <UART_SetConfig+0x238>
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b38:	d008      	beq.n	8003b4c <UART_SetConfig+0x248>
 8003b3a:	e00f      	b.n	8003b5c <UART_SetConfig+0x258>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e052      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e04e      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e04a      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003b54:	2308      	movs	r3, #8
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e046      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e042      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <UART_SetConfig+0x2c4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d13a      	bne.n	8003be4 <UART_SetConfig+0x2e0>
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <UART_SetConfig+0x2cc>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b7c:	d01a      	beq.n	8003bb4 <UART_SetConfig+0x2b0>
 8003b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b82:	d81b      	bhi.n	8003bbc <UART_SetConfig+0x2b8>
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0x2a0>
 8003b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8e:	d815      	bhi.n	8003bbc <UART_SetConfig+0x2b8>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <UART_SetConfig+0x298>
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d008      	beq.n	8003bac <UART_SetConfig+0x2a8>
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x2b8>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e022      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e01e      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e01a      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bba:	e016      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc2:	e012      	b.n	8003bea <UART_SetConfig+0x2e6>
 8003bc4:	efff69f3 	.word	0xefff69f3
 8003bc8:	40008000 	.word	0x40008000
 8003bcc:	40013800 	.word	0x40013800
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40004800 	.word	0x40004800
 8003bdc:	40004c00 	.word	0x40004c00
 8003be0:	40005000 	.word	0x40005000
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a9f      	ldr	r2, [pc, #636]	; (8003e6c <UART_SetConfig+0x568>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d17a      	bne.n	8003cea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d824      	bhi.n	8003c46 <UART_SetConfig+0x342>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0x300>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c47 	.word	0x08003c47
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c37 	.word	0x08003c37
 8003c18:	08003c47 	.word	0x08003c47
 8003c1c:	08003c47 	.word	0x08003c47
 8003c20:	08003c47 	.word	0x08003c47
 8003c24:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c28:	f7fe fb7e 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8003c2c:	61f8      	str	r0, [r7, #28]
        break;
 8003c2e:	e010      	b.n	8003c52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b8f      	ldr	r3, [pc, #572]	; (8003e70 <UART_SetConfig+0x56c>)
 8003c32:	61fb      	str	r3, [r7, #28]
        break;
 8003c34:	e00d      	b.n	8003c52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7fe fadf 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8003c3a:	61f8      	str	r0, [r7, #28]
        break;
 8003c3c:	e009      	b.n	8003c52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	61fb      	str	r3, [r7, #28]
        break;
 8003c44:	e005      	b.n	8003c52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80fb 	beq.w	8003e50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d305      	bcc.n	8003c76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d903      	bls.n	8003c7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c7c:	e0e8      	b.n	8003e50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2200      	movs	r2, #0
 8003c82:	461c      	mov	r4, r3
 8003c84:	4615      	mov	r5, r2
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	022b      	lsls	r3, r5, #8
 8003c90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c94:	0222      	lsls	r2, r4, #8
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6849      	ldr	r1, [r1, #4]
 8003c9a:	0849      	lsrs	r1, r1, #1
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	4688      	mov	r8, r1
 8003ca0:	4681      	mov	r9, r0
 8003ca2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ca6:	eb43 0b09 	adc.w	fp, r3, r9
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cb8:	4650      	mov	r0, sl
 8003cba:	4659      	mov	r1, fp
 8003cbc:	f7fc fa88 	bl	80001d0 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cce:	d308      	bcc.n	8003ce2 <UART_SetConfig+0x3de>
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd6:	d204      	bcs.n	8003ce2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	60da      	str	r2, [r3, #12]
 8003ce0:	e0b6      	b.n	8003e50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce8:	e0b2      	b.n	8003e50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf2:	d15e      	bne.n	8003db2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d828      	bhi.n	8003d4e <UART_SetConfig+0x44a>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x400>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d3f 	.word	0x08003d3f
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe fafe 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	61f8      	str	r0, [r7, #28]
        break;
 8003d2e:	e014      	b.n	8003d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7fe fb10 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8003d34:	61f8      	str	r0, [r7, #28]
        break;
 8003d36:	e010      	b.n	8003d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b4d      	ldr	r3, [pc, #308]	; (8003e70 <UART_SetConfig+0x56c>)
 8003d3a:	61fb      	str	r3, [r7, #28]
        break;
 8003d3c:	e00d      	b.n	8003d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe fa5b 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8003d42:	61f8      	str	r0, [r7, #28]
        break;
 8003d44:	e009      	b.n	8003d5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4a:	61fb      	str	r3, [r7, #28]
        break;
 8003d4c:	e005      	b.n	8003d5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d077      	beq.n	8003e50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	005a      	lsls	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	441a      	add	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b0f      	cmp	r3, #15
 8003d7a:	d916      	bls.n	8003daa <UART_SetConfig+0x4a6>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d82:	d212      	bcs.n	8003daa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f023 030f 	bic.w	r3, r3, #15
 8003d8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	8afb      	ldrh	r3, [r7, #22]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	8afa      	ldrh	r2, [r7, #22]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	e052      	b.n	8003e50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003db0:	e04e      	b.n	8003e50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d827      	bhi.n	8003e0a <UART_SetConfig+0x506>
 8003dba:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <UART_SetConfig+0x4bc>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003df5 	.word	0x08003df5
 8003dcc:	08003e0b 	.word	0x08003e0b
 8003dd0:	08003dfb 	.word	0x08003dfb
 8003dd4:	08003e0b 	.word	0x08003e0b
 8003dd8:	08003e0b 	.word	0x08003e0b
 8003ddc:	08003e0b 	.word	0x08003e0b
 8003de0:	08003e03 	.word	0x08003e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7fe faa0 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8003de8:	61f8      	str	r0, [r7, #28]
        break;
 8003dea:	e014      	b.n	8003e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7fe fab2 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8003df0:	61f8      	str	r0, [r7, #28]
        break;
 8003df2:	e010      	b.n	8003e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <UART_SetConfig+0x56c>)
 8003df6:	61fb      	str	r3, [r7, #28]
        break;
 8003df8:	e00d      	b.n	8003e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfa:	f7fe f9fd 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8003dfe:	61f8      	str	r0, [r7, #28]
        break;
 8003e00:	e009      	b.n	8003e16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	61fb      	str	r3, [r7, #28]
        break;
 8003e08:	e005      	b.n	8003e16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e14:	bf00      	nop
    }

    if (pclk != 0U)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d019      	beq.n	8003e50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	085a      	lsrs	r2, r3, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d909      	bls.n	8003e4a <UART_SetConfig+0x546>
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d205      	bcs.n	8003e4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60da      	str	r2, [r3, #12]
 8003e48:	e002      	b.n	8003e50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3728      	adds	r7, #40	; 0x28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40008000 	.word	0x40008000
 8003e70:	00f42400 	.word	0x00f42400

08003e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f72:	d10a      	bne.n	8003f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b098      	sub	sp, #96	; 0x60
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fc8:	f7fd f90e 	bl	80011e8 <HAL_GetTick>
 8003fcc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d12e      	bne.n	800403a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f88c 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d021      	beq.n	800403a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800400a:	653b      	str	r3, [r7, #80]	; 0x50
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004014:	647b      	str	r3, [r7, #68]	; 0x44
 8004016:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800401a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e6      	bne.n	8003ff6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e062      	b.n	8004100 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d149      	bne.n	80040dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f856 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d03c      	beq.n	80040dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	623b      	str	r3, [r7, #32]
   return(result);
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
 8004082:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e6      	bne.n	8004062 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3308      	adds	r3, #8
 800409a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3308      	adds	r3, #8
 80040b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b4:	61fa      	str	r2, [r7, #28]
 80040b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	69b9      	ldr	r1, [r7, #24]
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	617b      	str	r3, [r7, #20]
   return(result);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e011      	b.n	8004100 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3758      	adds	r7, #88	; 0x58
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	e049      	b.n	80041ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d045      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004122:	f7fd f861 	bl	80011e8 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <UART_WaitOnFlagUntilTimeout+0x30>
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e048      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d031      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d110      	bne.n	800417a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2208      	movs	r2, #8
 800415e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f838 	bl	80041d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2208      	movs	r2, #8
 800416a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e029      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004188:	d111      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f81e 	bl	80041d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e00f      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4013      	ands	r3, r2
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	bf0c      	ite	eq
 80041be:	2301      	moveq	r3, #1
 80041c0:	2300      	movne	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d0a6      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b095      	sub	sp, #84	; 0x54
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	643b      	str	r3, [r7, #64]	; 0x40
 80041fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e6      	bne.n	80041de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e5      	bne.n	8004210 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004248:	2b01      	cmp	r3, #1
 800424a:	d118      	bne.n	800427e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	60bb      	str	r3, [r7, #8]
   return(result);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0310 	bic.w	r3, r3, #16
 8004260:	647b      	str	r3, [r7, #68]	; 0x44
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6979      	ldr	r1, [r7, #20]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	613b      	str	r3, [r7, #16]
   return(result);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e6      	bne.n	800424c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004292:	bf00      	nop
 8004294:	3754      	adds	r7, #84	; 0x54
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <__NVIC_SetPriority>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db0a      	blt.n	80042ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	490c      	ldr	r1, [pc, #48]	; (80042ec <__NVIC_SetPriority+0x4c>)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	0112      	lsls	r2, r2, #4
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	440b      	add	r3, r1
 80042c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042c8:	e00a      	b.n	80042e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4908      	ldr	r1, [pc, #32]	; (80042f0 <__NVIC_SetPriority+0x50>)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	3b04      	subs	r3, #4
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	440b      	add	r3, r1
 80042de:	761a      	strb	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000e100 	.word	0xe000e100
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <SysTick_Handler+0x1c>)
 80042fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042fc:	f001 fdaa 	bl	8005e54 <xTaskGetSchedulerState>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d001      	beq.n	800430a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004306:	f002 fb8f 	bl	8006a28 <xPortSysTickHandler>
  }
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	e000e010 	.word	0xe000e010

08004314 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004318:	2100      	movs	r1, #0
 800431a:	f06f 0004 	mvn.w	r0, #4
 800431e:	f7ff ffbf 	bl	80042a0 <__NVIC_SetPriority>
#endif
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800432e:	f3ef 8305 	mrs	r3, IPSR
 8004332:	603b      	str	r3, [r7, #0]
  return(result);
 8004334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800433a:	f06f 0305 	mvn.w	r3, #5
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	e00c      	b.n	800435c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <osKernelInitialize+0x44>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <osKernelInitialize+0x44>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004350:	2300      	movs	r3, #0
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	e002      	b.n	800435c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800435c:	687b      	ldr	r3, [r7, #4]
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000180 	.word	0x20000180

08004370 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004376:	f3ef 8305 	mrs	r3, IPSR
 800437a:	603b      	str	r3, [r7, #0]
  return(result);
 800437c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004382:	f06f 0305 	mvn.w	r3, #5
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e010      	b.n	80043ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <osKernelStart+0x48>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d109      	bne.n	80043a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004392:	f7ff ffbf 	bl	8004314 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <osKernelStart+0x48>)
 8004398:	2202      	movs	r2, #2
 800439a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800439c:	f001 f912 	bl	80055c4 <vTaskStartScheduler>
      stat = osOK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	607b      	str	r3, [r7, #4]
 80043a4:	e002      	b.n	80043ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043ac:	687b      	ldr	r3, [r7, #4]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000180 	.word	0x20000180

080043bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	; 0x38
 80043c0:	af04      	add	r7, sp, #16
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043cc:	f3ef 8305 	mrs	r3, IPSR
 80043d0:	617b      	str	r3, [r7, #20]
  return(result);
 80043d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d17e      	bne.n	80044d6 <osThreadNew+0x11a>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d07b      	beq.n	80044d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043e2:	2318      	movs	r3, #24
 80043e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d045      	beq.n	8004482 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <osThreadNew+0x48>
        name = attr->name;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <osThreadNew+0x6e>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b38      	cmp	r3, #56	; 0x38
 800441c:	d805      	bhi.n	800442a <osThreadNew+0x6e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <osThreadNew+0x72>
        return (NULL);
 800442a:	2300      	movs	r3, #0
 800442c:	e054      	b.n	80044d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00e      	beq.n	8004464 <osThreadNew+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b5b      	cmp	r3, #91	; 0x5b
 800444c:	d90a      	bls.n	8004464 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004452:	2b00      	cmp	r3, #0
 8004454:	d006      	beq.n	8004464 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <osThreadNew+0xa8>
        mem = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e010      	b.n	8004486 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10c      	bne.n	8004486 <osThreadNew+0xca>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d108      	bne.n	8004486 <osThreadNew+0xca>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <osThreadNew+0xca>
          mem = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	e001      	b.n	8004486 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d110      	bne.n	80044ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004494:	9202      	str	r2, [sp, #8]
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 feb8 	bl	8005218 <xTaskCreateStatic>
 80044a8:	4603      	mov	r3, r0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	e013      	b.n	80044d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d110      	bne.n	80044d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	f107 0310 	add.w	r3, r7, #16
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 ff03 	bl	80052d2 <xTaskCreate>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <osThreadNew+0x11a>
            hTask = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044d6:	693b      	ldr	r3, [r7, #16]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3728      	adds	r7, #40	; 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e8:	f3ef 8305 	mrs	r3, IPSR
 80044ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <osDelay+0x1c>
    stat = osErrorISR;
 80044f4:	f06f 0305 	mvn.w	r3, #5
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e007      	b.n	800450c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f001 f828 	bl	800555c <vTaskDelay>
    }
  }

  return (stat);
 800450c:	68fb      	ldr	r3, [r7, #12]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004516:	b580      	push	{r7, lr}
 8004518:	b08a      	sub	sp, #40	; 0x28
 800451a:	af02      	add	r7, sp, #8
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004526:	f3ef 8305 	mrs	r3, IPSR
 800452a:	613b      	str	r3, [r7, #16]
  return(result);
 800452c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800452e:	2b00      	cmp	r3, #0
 8004530:	d15f      	bne.n	80045f2 <osMessageQueueNew+0xdc>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05c      	beq.n	80045f2 <osMessageQueueNew+0xdc>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d059      	beq.n	80045f2 <osMessageQueueNew+0xdc>
    mem = -1;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d029      	beq.n	800459e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d012      	beq.n	8004578 <osMessageQueueNew+0x62>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b4f      	cmp	r3, #79	; 0x4f
 8004558:	d90e      	bls.n	8004578 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <osMessageQueueNew+0x62>
        mem = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e014      	b.n	80045a2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d110      	bne.n	80045a2 <osMessageQueueNew+0x8c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10c      	bne.n	80045a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800458c:	2b00      	cmp	r3, #0
 800458e:	d108      	bne.n	80045a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <osMessageQueueNew+0x8c>
          mem = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	e001      	b.n	80045a2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10b      	bne.n	80045c0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2100      	movs	r1, #0
 80045b2:	9100      	str	r1, [sp, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f970 	bl	800489c <xQueueGenericCreateStatic>
 80045bc:	61f8      	str	r0, [r7, #28]
 80045be:	e008      	b.n	80045d2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80045c6:	2200      	movs	r2, #0
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f9de 	bl	800498c <xQueueGenericCreate>
 80045d0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e001      	b.n	80045ea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80045ea:	6979      	ldr	r1, [r7, #20]
 80045ec:	69f8      	ldr	r0, [r7, #28]
 80045ee:	f000 fdb5 	bl	800515c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80045f2:	69fb      	ldr	r3, [r7, #28]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a07      	ldr	r2, [pc, #28]	; (8004628 <vApplicationGetIdleTaskMemory+0x2c>)
 800460c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a06      	ldr	r2, [pc, #24]	; (800462c <vApplicationGetIdleTaskMemory+0x30>)
 8004612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000184 	.word	0x20000184
 800462c:	200001e0 	.word	0x200001e0

08004630 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a07      	ldr	r2, [pc, #28]	; (800465c <vApplicationGetTimerTaskMemory+0x2c>)
 8004640:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4a06      	ldr	r2, [pc, #24]	; (8004660 <vApplicationGetTimerTaskMemory+0x30>)
 8004646:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	200003e0 	.word	0x200003e0
 8004660:	2000043c 	.word	0x2000043c

08004664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 0208 	add.w	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f04f 32ff 	mov.w	r2, #4294967295
 800467c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f103 0208 	add.w	r2, r3, #8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f103 0208 	add.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d103      	bne.n	8004726 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e00c      	b.n	8004740 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3308      	adds	r3, #8
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e002      	b.n	8004734 <vListInsert+0x2e>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d2f6      	bcs.n	800472e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6892      	ldr	r2, [r2, #8]
 800478e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6852      	ldr	r2, [r2, #4]
 8004798:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d103      	bne.n	80047ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1e5a      	subs	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047f6:	f002 f885 	bl	8006904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004802:	68f9      	ldr	r1, [r7, #12]
 8004804:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	3b01      	subs	r3, #1
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	22ff      	movs	r2, #255	; 0xff
 800483a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d114      	bne.n	8004876 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01a      	beq.n	800488a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3310      	adds	r3, #16
 8004858:	4618      	mov	r0, r3
 800485a:	f001 f93d 	bl	8005ad8 <xTaskRemoveFromEventList>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <xQueueGenericReset+0xcc>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	e009      	b.n	800488a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3310      	adds	r3, #16
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fef2 	bl	8004664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3324      	adds	r3, #36	; 0x24
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff feed 	bl	8004664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800488a:	f002 f86b 	bl	8006964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800488e:	2301      	movs	r3, #1
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08e      	sub	sp, #56	; 0x38
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <xQueueGenericCreateStatic+0x52>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <xQueueGenericCreateStatic+0x56>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <xQueueGenericCreateStatic+0x58>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	623b      	str	r3, [r7, #32]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <xQueueGenericCreateStatic+0x7e>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <xQueueGenericCreateStatic+0x82>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <xQueueGenericCreateStatic+0x84>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	61fb      	str	r3, [r7, #28]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800493a:	2350      	movs	r3, #80	; 0x50
 800493c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b50      	cmp	r3, #80	; 0x50
 8004942:	d00a      	beq.n	800495a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	61bb      	str	r3, [r7, #24]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800495a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00d      	beq.n	8004982 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800496e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f83f 	bl	8004a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004984:	4618      	mov	r0, r3
 8004986:	3730      	adds	r7, #48	; 0x30
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	613b      	str	r3, [r7, #16]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3350      	adds	r3, #80	; 0x50
 80049c4:	4618      	mov	r0, r3
 80049c6:	f002 f8bf 	bl	8006b48 <pvPortMalloc>
 80049ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d011      	beq.n	80049f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	3350      	adds	r3, #80	; 0x50
 80049da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049e4:	79fa      	ldrb	r2, [r7, #7]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f805 	bl	8004a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049f6:	69bb      	ldr	r3, [r7, #24]
	}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e002      	b.n	8004a22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a2e:	2101      	movs	r1, #1
 8004a30:	69b8      	ldr	r0, [r7, #24]
 8004a32:	f7ff fecb 	bl	80047cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08e      	sub	sp, #56	; 0x38
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a56:	2300      	movs	r3, #0
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <xQueueGenericSend+0x32>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <xQueueGenericSend+0x40>
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <xQueueGenericSend+0x44>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <xQueueGenericSend+0x46>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <xQueueGenericSend+0x60>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d103      	bne.n	8004ab6 <xQueueGenericSend+0x6e>
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <xQueueGenericSend+0x72>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <xQueueGenericSend+0x74>
 8004aba:	2300      	movs	r3, #0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	623b      	str	r3, [r7, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad6:	f001 f9bd 	bl	8005e54 <xTaskGetSchedulerState>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <xQueueGenericSend+0x9e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <xQueueGenericSend+0xa2>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <xQueueGenericSend+0xa4>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xQueueGenericSend+0xbe>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	61fb      	str	r3, [r7, #28]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b06:	f001 fefd 	bl	8006904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <xQueueGenericSend+0xd4>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d129      	bne.n	8004b70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b22:	f000 fa0b 	bl	8004f3c <prvCopyDataToQueue>
 8004b26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 ffcf 	bl	8005ad8 <xTaskRemoveFromEventList>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <xQueueGenericSend+0x1f8>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	e00a      	b.n	8004b68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b58:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <xQueueGenericSend+0x1f8>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b68:	f001 fefc 	bl	8006964 <vPortExitCritical>
				return pdPASS;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e063      	b.n	8004c38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b76:	f001 fef5 	bl	8006964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e05c      	b.n	8004c38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 f809 	bl	8005ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b92:	f001 fee7 	bl	8006964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b96:	f000 fd7b 	bl	8005690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b9a:	f001 feb3 	bl	8006904 <vPortEnterCritical>
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ba4:	b25b      	sxtb	r3, r3
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d103      	bne.n	8004bb4 <xQueueGenericSend+0x16c>
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSend+0x182>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bca:	f001 fecb 	bl	8006964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bce:	1d3a      	adds	r2, r7, #4
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fff8 	bl	8005bcc <xTaskCheckForTimeOut>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d124      	bne.n	8004c2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be4:	f000 faa2 	bl	800512c <prvIsQueueFull>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	3310      	adds	r3, #16
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 ff1e 	bl	8005a38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfe:	f000 fa2d 	bl	800505c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c02:	f000 fd53 	bl	80056ac <xTaskResumeAll>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f af7c 	bne.w	8004b06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <xQueueGenericSend+0x1f8>)
 8004c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	e772      	b.n	8004b06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c22:	f000 fa1b 	bl	800505c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c26:	f000 fd41 	bl	80056ac <xTaskResumeAll>
 8004c2a:	e76c      	b.n	8004b06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2e:	f000 fa15 	bl	800505c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c32:	f000 fd3b 	bl	80056ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3738      	adds	r7, #56	; 0x38
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b090      	sub	sp, #64	; 0x40
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d103      	bne.n	8004c80 <xQueueGenericSendFromISR+0x3c>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <xQueueGenericSendFromISR+0x40>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <xQueueGenericSendFromISR+0x42>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d103      	bne.n	8004cae <xQueueGenericSendFromISR+0x6a>
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x6e>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSendFromISR+0x70>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cce:	f001 fefb 	bl	8006ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cd2:	f3ef 8211 	mrs	r2, BASEPRI
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61fa      	str	r2, [r7, #28]
 8004ce8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <xQueueGenericSendFromISR+0xbc>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d12f      	bne.n	8004d60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d16:	f000 f911 	bl	8004f3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d112      	bne.n	8004d4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d016      	beq.n	8004d5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	3324      	adds	r3, #36	; 0x24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fed1 	bl	8005ad8 <xTaskRemoveFromEventList>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e007      	b.n	8004d5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d4e:	3301      	adds	r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	b25a      	sxtb	r2, r3
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d5e:	e001      	b.n	8004d64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3740      	adds	r7, #64	; 0x40
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xQueueReceive+0x30>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	623b      	str	r3, [r7, #32]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <xQueueReceive+0x3e>
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <xQueueReceive+0x42>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <xQueueReceive+0x44>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueReceive+0x5e>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	61fb      	str	r3, [r7, #28]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dda:	f001 f83b 	bl	8005e54 <xTaskGetSchedulerState>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <xQueueReceive+0x6e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <xQueueReceive+0x72>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueReceive+0x74>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <xQueueReceive+0x8e>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	61bb      	str	r3, [r7, #24]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e0a:	f001 fd7b 	bl	8006904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01f      	beq.n	8004e5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1e:	f000 f8f7 	bl	8005010 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00f      	beq.n	8004e52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	3310      	adds	r3, #16
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fe4e 	bl	8005ad8 <xTaskRemoveFromEventList>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e42:	4b3d      	ldr	r3, [pc, #244]	; (8004f38 <xQueueReceive+0x1bc>)
 8004e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e52:	f001 fd87 	bl	8006964 <vPortExitCritical>
				return pdPASS;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e069      	b.n	8004f2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e60:	f001 fd80 	bl	8006964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e062      	b.n	8004f2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e6e:	f107 0310 	add.w	r3, r7, #16
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fe94 	bl	8005ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e7c:	f001 fd72 	bl	8006964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e80:	f000 fc06 	bl	8005690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e84:	f001 fd3e 	bl	8006904 <vPortEnterCritical>
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d103      	bne.n	8004e9e <xQueueReceive+0x122>
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d103      	bne.n	8004eb4 <xQueueReceive+0x138>
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb4:	f001 fd56 	bl	8006964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eb8:	1d3a      	adds	r2, r7, #4
 8004eba:	f107 0310 	add.w	r3, r7, #16
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fe83 	bl	8005bcc <xTaskCheckForTimeOut>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d123      	bne.n	8004f14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ece:	f000 f917 	bl	8005100 <prvIsQueueEmpty>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	3324      	adds	r3, #36	; 0x24
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fda9 	bl	8005a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee8:	f000 f8b8 	bl	800505c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eec:	f000 fbde 	bl	80056ac <xTaskResumeAll>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d189      	bne.n	8004e0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <xQueueReceive+0x1bc>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	e780      	b.n	8004e0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0a:	f000 f8a7 	bl	800505c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f0e:	f000 fbcd 	bl	80056ac <xTaskResumeAll>
 8004f12:	e77a      	b.n	8004e0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f16:	f000 f8a1 	bl	800505c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f1a:	f000 fbc7 	bl	80056ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f20:	f000 f8ee 	bl	8005100 <prvIsQueueEmpty>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f43f af6f 	beq.w	8004e0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3730      	adds	r7, #48	; 0x30
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d14d      	bne.n	8004ffe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 ff92 	bl	8005e90 <xTaskPriorityDisinherit>
 8004f6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	e043      	b.n	8004ffe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d119      	bne.n	8004fb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6858      	ldr	r0, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	461a      	mov	r2, r3
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	f001 fff4 	bl	8006f74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	441a      	add	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d32b      	bcc.n	8004ffe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	e026      	b.n	8004ffe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68d8      	ldr	r0, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	f001 ffda 	bl	8006f74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	425b      	negs	r3, r3
 8004fca:	441a      	add	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d207      	bcs.n	8004fec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	425b      	negs	r3, r3
 8004fe6:	441a      	add	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d105      	bne.n	8004ffe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005006:	697b      	ldr	r3, [r7, #20]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d018      	beq.n	8005054 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	d303      	bcc.n	8005044 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68d9      	ldr	r1, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	461a      	mov	r2, r3
 800504e:	6838      	ldr	r0, [r7, #0]
 8005050:	f001 ff90 	bl	8006f74 <memcpy>
	}
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005064:	f001 fc4e 	bl	8006904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005070:	e011      	b.n	8005096 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d012      	beq.n	80050a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd2a 	bl	8005ad8 <xTaskRemoveFromEventList>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800508a:	f000 fe01 	bl	8005c90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	3b01      	subs	r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	dce9      	bgt.n	8005072 <prvUnlockQueue+0x16>
 800509e:	e000      	b.n	80050a2 <prvUnlockQueue+0x46>
					break;
 80050a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050aa:	f001 fc5b 	bl	8006964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050ae:	f001 fc29 	bl	8006904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ba:	e011      	b.n	80050e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d012      	beq.n	80050ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3310      	adds	r3, #16
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd05 	bl	8005ad8 <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050d4:	f000 fddc 	bl	8005c90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050d8:	7bbb      	ldrb	r3, [r7, #14]
 80050da:	3b01      	subs	r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	dce9      	bgt.n	80050bc <prvUnlockQueue+0x60>
 80050e8:	e000      	b.n	80050ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050f4:	f001 fc36 	bl	8006964 <vPortExitCritical>
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005108:	f001 fbfc 	bl	8006904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e001      	b.n	800511e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800511e:	f001 fc21 	bl	8006964 <vPortExitCritical>

	return xReturn;
 8005122:	68fb      	ldr	r3, [r7, #12]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005134:	f001 fbe6 	bl	8006904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	429a      	cmp	r2, r3
 8005142:	d102      	bne.n	800514a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e001      	b.n	800514e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800514e:	f001 fc09 	bl	8006964 <vPortExitCritical>

	return xReturn;
 8005152:	68fb      	ldr	r3, [r7, #12]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e014      	b.n	8005196 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800516c:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <vQueueAddToRegistry+0x50>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005178:	490c      	ldr	r1, [pc, #48]	; (80051ac <vQueueAddToRegistry+0x50>)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <vQueueAddToRegistry+0x50>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800518e:	e006      	b.n	800519e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b07      	cmp	r3, #7
 800519a:	d9e7      	bls.n	800516c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	2000083c 	.word	0x2000083c

080051b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051c0:	f001 fba0 	bl	8006904 <vPortEnterCritical>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ca:	b25b      	sxtb	r3, r3
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d103      	bne.n	80051da <vQueueWaitForMessageRestricted+0x2a>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d103      	bne.n	80051f0 <vQueueWaitForMessageRestricted+0x40>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	f001 fbb8 	bl	8006964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3324      	adds	r3, #36	; 0x24
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fc3b 	bl	8005a80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800520a:	6978      	ldr	r0, [r7, #20]
 800520c:	f7ff ff26 	bl	800505c <prvUnlockQueue>
	}
 8005210:	bf00      	nop
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08e      	sub	sp, #56	; 0x38
 800521c:	af04      	add	r7, sp, #16
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xTaskCreateStatic+0x2a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	623b      	str	r3, [r7, #32]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xTaskCreateStatic+0x46>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61fb      	str	r3, [r7, #28]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800525e:	235c      	movs	r3, #92	; 0x5c
 8005260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b5c      	cmp	r3, #92	; 0x5c
 8005266:	d00a      	beq.n	800527e <xTaskCreateStatic+0x66>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61bb      	str	r3, [r7, #24]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800527e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01e      	beq.n	80052c4 <xTaskCreateStatic+0xac>
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800529e:	2300      	movs	r3, #0
 80052a0:	9303      	str	r3, [sp, #12]
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	9302      	str	r3, [sp, #8]
 80052a6:	f107 0314 	add.w	r3, r7, #20
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f850 	bl	800535c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052be:	f000 f8dd 	bl	800547c <prvAddNewTaskToReadyList>
 80052c2:	e001      	b.n	80052c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052c8:	697b      	ldr	r3, [r7, #20]
	}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3728      	adds	r7, #40	; 0x28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b08c      	sub	sp, #48	; 0x30
 80052d6:	af04      	add	r7, sp, #16
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fc2e 	bl	8006b48 <pvPortMalloc>
 80052ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00e      	beq.n	8005312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052f4:	205c      	movs	r0, #92	; 0x5c
 80052f6:	f001 fc27 	bl	8006b48 <pvPortMalloc>
 80052fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
 8005308:	e005      	b.n	8005316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f001 fce8 	bl	8006ce0 <vPortFree>
 8005310:	e001      	b.n	8005316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005324:	88fa      	ldrh	r2, [r7, #6]
 8005326:	2300      	movs	r3, #0
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f80e 	bl	800535c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005340:	69f8      	ldr	r0, [r7, #28]
 8005342:	f000 f89b 	bl	800547c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005346:	2301      	movs	r3, #1
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e002      	b.n	8005352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800534c:	f04f 33ff 	mov.w	r3, #4294967295
 8005350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005352:	69bb      	ldr	r3, [r7, #24]
	}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	461a      	mov	r2, r3
 8005374:	21a5      	movs	r1, #165	; 0xa5
 8005376:	f001 fdd1 	bl	8006f1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005384:	3b01      	subs	r3, #1
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	617b      	str	r3, [r7, #20]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01f      	beq.n	80053fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e012      	b.n	80053e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	7819      	ldrb	r1, [r3, #0]
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	3334      	adds	r3, #52	; 0x34
 80053d0:	460a      	mov	r2, r1
 80053d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d9e9      	bls.n	80053c0 <prvInitialiseNewTask+0x64>
 80053ec:	e000      	b.n	80053f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80053ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f8:	e003      	b.n	8005402 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	2b37      	cmp	r3, #55	; 0x37
 8005406:	d901      	bls.n	800540c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005408:	2337      	movs	r3, #55	; 0x37
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	2200      	movs	r2, #0
 800541c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	3304      	adds	r3, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff f93e 	bl	80046a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	3318      	adds	r3, #24
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff f939 	bl	80046a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	2200      	movs	r2, #0
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	69b8      	ldr	r0, [r7, #24]
 800545c:	f001 f928 	bl	80066b0 <pxPortInitialiseStack>
 8005460:	4602      	mov	r2, r0
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005472:	bf00      	nop
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005484:	f001 fa3e 	bl	8006904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <prvAddNewTaskToReadyList+0xc4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <prvAddNewTaskToReadyList+0xc4>)
 8005490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005492:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <prvAddNewTaskToReadyList+0xc8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800549a:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <prvAddNewTaskToReadyList+0xc8>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <prvAddNewTaskToReadyList+0xc4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d110      	bne.n	80054ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054a8:	f000 fc16 	bl	8005cd8 <prvInitialiseTaskLists>
 80054ac:	e00d      	b.n	80054ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <prvAddNewTaskToReadyList+0xcc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054b6:	4b23      	ldr	r3, [pc, #140]	; (8005544 <prvAddNewTaskToReadyList+0xc8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d802      	bhi.n	80054ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054c4:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <prvAddNewTaskToReadyList+0xc8>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <prvAddNewTaskToReadyList+0xd0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	4a1e      	ldr	r2, [pc, #120]	; (800554c <prvAddNewTaskToReadyList+0xd0>)
 80054d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054d4:	4b1d      	ldr	r3, [pc, #116]	; (800554c <prvAddNewTaskToReadyList+0xd0>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <prvAddNewTaskToReadyList+0xd4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d903      	bls.n	80054f0 <prvAddNewTaskToReadyList+0x74>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	4a18      	ldr	r2, [pc, #96]	; (8005550 <prvAddNewTaskToReadyList+0xd4>)
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <prvAddNewTaskToReadyList+0xd8>)
 80054fe:	441a      	add	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f7ff f8d9 	bl	80046be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800550c:	f001 fa2a 	bl	8006964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005510:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <prvAddNewTaskToReadyList+0xcc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00e      	beq.n	8005536 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <prvAddNewTaskToReadyList+0xc8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	429a      	cmp	r2, r3
 8005524:	d207      	bcs.n	8005536 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvAddNewTaskToReadyList+0xdc>)
 8005528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000d50 	.word	0x20000d50
 8005544:	2000087c 	.word	0x2000087c
 8005548:	20000d5c 	.word	0x20000d5c
 800554c:	20000d6c 	.word	0x20000d6c
 8005550:	20000d58 	.word	0x20000d58
 8005554:	20000880 	.word	0x20000880
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d017      	beq.n	800559e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <vTaskDelay+0x60>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <vTaskDelay+0x30>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	60bb      	str	r3, [r7, #8]
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800558c:	f000 f880 	bl	8005690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005590:	2100      	movs	r1, #0
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fcea 	bl	8005f6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005598:	f000 f888 	bl	80056ac <xTaskResumeAll>
 800559c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d107      	bne.n	80055b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <vTaskDelay+0x64>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000d78 	.word	0x20000d78
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055d2:	463a      	mov	r2, r7
 80055d4:	1d39      	adds	r1, r7, #4
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff f80e 	bl	80045fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	9202      	str	r2, [sp, #8]
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	2300      	movs	r3, #0
 80055f0:	460a      	mov	r2, r1
 80055f2:	4921      	ldr	r1, [pc, #132]	; (8005678 <vTaskStartScheduler+0xb4>)
 80055f4:	4821      	ldr	r0, [pc, #132]	; (800567c <vTaskStartScheduler+0xb8>)
 80055f6:	f7ff fe0f 	bl	8005218 <xTaskCreateStatic>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4a20      	ldr	r2, [pc, #128]	; (8005680 <vTaskStartScheduler+0xbc>)
 80055fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005600:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <vTaskStartScheduler+0xbc>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e001      	b.n	8005612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d102      	bne.n	800561e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005618:	f000 fcfc 	bl	8006014 <xTimerCreateTimerTask>
 800561c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d116      	bne.n	8005652 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	613b      	str	r3, [r7, #16]
}
 8005636:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <vTaskStartScheduler+0xc0>)
 800563a:	f04f 32ff 	mov.w	r2, #4294967295
 800563e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <vTaskStartScheduler+0xc4>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005646:	4b11      	ldr	r3, [pc, #68]	; (800568c <vTaskStartScheduler+0xc8>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800564c:	f001 f8b8 	bl	80067c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005650:	e00e      	b.n	8005670 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d10a      	bne.n	8005670 <vTaskStartScheduler+0xac>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60fb      	str	r3, [r7, #12]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <vTaskStartScheduler+0xaa>
}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	08006ff8 	.word	0x08006ff8
 800567c:	08005ca9 	.word	0x08005ca9
 8005680:	20000d74 	.word	0x20000d74
 8005684:	20000d70 	.word	0x20000d70
 8005688:	20000d5c 	.word	0x20000d5c
 800568c:	20000d54 	.word	0x20000d54

08005690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <vTaskSuspendAll+0x18>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a03      	ldr	r2, [pc, #12]	; (80056a8 <vTaskSuspendAll+0x18>)
 800569c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000d78 	.word	0x20000d78

080056ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ba:	4b42      	ldr	r3, [pc, #264]	; (80057c4 <xTaskResumeAll+0x118>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	603b      	str	r3, [r7, #0]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056d8:	f001 f914 	bl	8006904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056dc:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <xTaskResumeAll+0x118>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	4a38      	ldr	r2, [pc, #224]	; (80057c4 <xTaskResumeAll+0x118>)
 80056e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e6:	4b37      	ldr	r3, [pc, #220]	; (80057c4 <xTaskResumeAll+0x118>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d162      	bne.n	80057b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056ee:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <xTaskResumeAll+0x11c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d05e      	beq.n	80057b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056f6:	e02f      	b.n	8005758 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f8:	4b34      	ldr	r3, [pc, #208]	; (80057cc <xTaskResumeAll+0x120>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3318      	adds	r3, #24
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff f837 	bl	8004778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3304      	adds	r3, #4
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff f832 	bl	8004778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <xTaskResumeAll+0x124>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d903      	bls.n	8005728 <xTaskResumeAll+0x7c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	4a2a      	ldr	r2, [pc, #168]	; (80057d0 <xTaskResumeAll+0x124>)
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <xTaskResumeAll+0x128>)
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f7fe ffbd 	bl	80046be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <xTaskResumeAll+0x12c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005752:	4b22      	ldr	r3, [pc, #136]	; (80057dc <xTaskResumeAll+0x130>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005758:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <xTaskResumeAll+0x120>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1cb      	bne.n	80056f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005766:	f000 fb55 	bl	8005e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800576a:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <xTaskResumeAll+0x134>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005776:	f000 f847 	bl	8005808 <xTaskIncrementTick>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005780:	4b16      	ldr	r3, [pc, #88]	; (80057dc <xTaskResumeAll+0x130>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3b01      	subs	r3, #1
 800578a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f1      	bne.n	8005776 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005792:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <xTaskResumeAll+0x134>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005798:	4b10      	ldr	r3, [pc, #64]	; (80057dc <xTaskResumeAll+0x130>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <xTaskResumeAll+0x138>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057b4:	f001 f8d6 	bl	8006964 <vPortExitCritical>

	return xAlreadyYielded;
 80057b8:	68bb      	ldr	r3, [r7, #8]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000d78 	.word	0x20000d78
 80057c8:	20000d50 	.word	0x20000d50
 80057cc:	20000d10 	.word	0x20000d10
 80057d0:	20000d58 	.word	0x20000d58
 80057d4:	20000880 	.word	0x20000880
 80057d8:	2000087c 	.word	0x2000087c
 80057dc:	20000d64 	.word	0x20000d64
 80057e0:	20000d60 	.word	0x20000d60
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <xTaskGetTickCount+0x1c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057f4:	687b      	ldr	r3, [r7, #4]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000d54 	.word	0x20000d54

08005808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005812:	4b4f      	ldr	r3, [pc, #316]	; (8005950 <xTaskIncrementTick+0x148>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f040 808f 	bne.w	800593a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800581c:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <xTaskIncrementTick+0x14c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005824:	4a4b      	ldr	r2, [pc, #300]	; (8005954 <xTaskIncrementTick+0x14c>)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d120      	bne.n	8005872 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005830:	4b49      	ldr	r3, [pc, #292]	; (8005958 <xTaskIncrementTick+0x150>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <xTaskIncrementTick+0x48>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	603b      	str	r3, [r7, #0]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <xTaskIncrementTick+0x46>
 8005850:	4b41      	ldr	r3, [pc, #260]	; (8005958 <xTaskIncrementTick+0x150>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	4b41      	ldr	r3, [pc, #260]	; (800595c <xTaskIncrementTick+0x154>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a3f      	ldr	r2, [pc, #252]	; (8005958 <xTaskIncrementTick+0x150>)
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4a3f      	ldr	r2, [pc, #252]	; (800595c <xTaskIncrementTick+0x154>)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <xTaskIncrementTick+0x158>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	4a3d      	ldr	r2, [pc, #244]	; (8005960 <xTaskIncrementTick+0x158>)
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	f000 fad1 	bl	8005e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005872:	4b3c      	ldr	r3, [pc, #240]	; (8005964 <xTaskIncrementTick+0x15c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	429a      	cmp	r2, r3
 800587a:	d349      	bcc.n	8005910 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587c:	4b36      	ldr	r3, [pc, #216]	; (8005958 <xTaskIncrementTick+0x150>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005886:	4b37      	ldr	r3, [pc, #220]	; (8005964 <xTaskIncrementTick+0x15c>)
 8005888:	f04f 32ff 	mov.w	r2, #4294967295
 800588c:	601a      	str	r2, [r3, #0]
					break;
 800588e:	e03f      	b.n	8005910 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005890:	4b31      	ldr	r3, [pc, #196]	; (8005958 <xTaskIncrementTick+0x150>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d203      	bcs.n	80058b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058a8:	4a2e      	ldr	r2, [pc, #184]	; (8005964 <xTaskIncrementTick+0x15c>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058ae:	e02f      	b.n	8005910 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe ff5f 	bl	8004778 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d004      	beq.n	80058cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	3318      	adds	r3, #24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe ff56 	bl	8004778 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <xTaskIncrementTick+0x160>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d903      	bls.n	80058e0 <xTaskIncrementTick+0xd8>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <xTaskIncrementTick+0x160>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <xTaskIncrementTick+0x164>)
 80058ee:	441a      	add	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7fe fee1 	bl	80046be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <xTaskIncrementTick+0x168>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	429a      	cmp	r2, r3
 8005908:	d3b8      	bcc.n	800587c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800590a:	2301      	movs	r3, #1
 800590c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800590e:	e7b5      	b.n	800587c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005910:	4b17      	ldr	r3, [pc, #92]	; (8005970 <xTaskIncrementTick+0x168>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	4915      	ldr	r1, [pc, #84]	; (800596c <xTaskIncrementTick+0x164>)
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d901      	bls.n	800592c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <xTaskIncrementTick+0x16c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005934:	2301      	movs	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e004      	b.n	8005944 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <xTaskIncrementTick+0x170>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	4a0d      	ldr	r2, [pc, #52]	; (8005978 <xTaskIncrementTick+0x170>)
 8005942:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005944:	697b      	ldr	r3, [r7, #20]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000d78 	.word	0x20000d78
 8005954:	20000d54 	.word	0x20000d54
 8005958:	20000d08 	.word	0x20000d08
 800595c:	20000d0c 	.word	0x20000d0c
 8005960:	20000d68 	.word	0x20000d68
 8005964:	20000d70 	.word	0x20000d70
 8005968:	20000d58 	.word	0x20000d58
 800596c:	20000880 	.word	0x20000880
 8005970:	2000087c 	.word	0x2000087c
 8005974:	20000d64 	.word	0x20000d64
 8005978:	20000d60 	.word	0x20000d60

0800597c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005982:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <vTaskSwitchContext+0xa8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800598a:	4b27      	ldr	r3, [pc, #156]	; (8005a28 <vTaskSwitchContext+0xac>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005990:	e041      	b.n	8005a16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005992:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <vTaskSwitchContext+0xac>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005998:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <vTaskSwitchContext+0xb0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e010      	b.n	80059c2 <vTaskSwitchContext+0x46>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <vTaskSwitchContext+0x40>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	607b      	str	r3, [r7, #4]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <vTaskSwitchContext+0x3e>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3b01      	subs	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	491b      	ldr	r1, [pc, #108]	; (8005a30 <vTaskSwitchContext+0xb4>)
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0e4      	beq.n	80059a0 <vTaskSwitchContext+0x24>
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <vTaskSwitchContext+0xb4>)
 80059e2:	4413      	add	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	605a      	str	r2, [r3, #4]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	3308      	adds	r3, #8
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d104      	bne.n	8005a06 <vTaskSwitchContext+0x8a>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <vTaskSwitchContext+0xb8>)
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <vTaskSwitchContext+0xb0>)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6013      	str	r3, [r2, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000d78 	.word	0x20000d78
 8005a28:	20000d64 	.word	0x20000d64
 8005a2c:	20000d58 	.word	0x20000d58
 8005a30:	20000880 	.word	0x20000880
 8005a34:	2000087c 	.word	0x2000087c

08005a38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	60fb      	str	r3, [r7, #12]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <vTaskPlaceOnEventList+0x44>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3318      	adds	r3, #24
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fe fe4d 	bl	8004706 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	6838      	ldr	r0, [r7, #0]
 8005a70:	f000 fa7c 	bl	8005f6c <prvAddCurrentTaskToDelayedList>
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	2000087c 	.word	0x2000087c

08005a80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	617b      	str	r3, [r7, #20]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3318      	adds	r3, #24
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7fe fe04 	bl	80046be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	68b8      	ldr	r0, [r7, #8]
 8005ac6:	f000 fa51 	bl	8005f6c <prvAddCurrentTaskToDelayedList>
	}
 8005aca:	bf00      	nop
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	2000087c 	.word	0x2000087c

08005ad8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60fb      	str	r3, [r7, #12]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fe35 	bl	8004778 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b0e:	4b1e      	ldr	r3, [pc, #120]	; (8005b88 <xTaskRemoveFromEventList+0xb0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11d      	bne.n	8005b52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe fe2c 	bl	8004778 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <xTaskRemoveFromEventList+0xb4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d903      	bls.n	8005b34 <xTaskRemoveFromEventList+0x5c>
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <xTaskRemoveFromEventList+0xb4>)
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <xTaskRemoveFromEventList+0xb8>)
 8005b42:	441a      	add	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fe fdb7 	bl	80046be <vListInsertEnd>
 8005b50:	e005      	b.n	8005b5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3318      	adds	r3, #24
 8005b56:	4619      	mov	r1, r3
 8005b58:	480e      	ldr	r0, [pc, #56]	; (8005b94 <xTaskRemoveFromEventList+0xbc>)
 8005b5a:	f7fe fdb0 	bl	80046be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <xTaskRemoveFromEventList+0xc0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d905      	bls.n	8005b78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <xTaskRemoveFromEventList+0xc4>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e001      	b.n	8005b7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b7c:	697b      	ldr	r3, [r7, #20]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000d78 	.word	0x20000d78
 8005b8c:	20000d58 	.word	0x20000d58
 8005b90:	20000880 	.word	0x20000880
 8005b94:	20000d10 	.word	0x20000d10
 8005b98:	2000087c 	.word	0x2000087c
 8005b9c:	20000d64 	.word	0x20000d64

08005ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <vTaskInternalSetTimeOutState+0x24>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <vTaskInternalSetTimeOutState+0x28>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	605a      	str	r2, [r3, #4]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20000d68 	.word	0x20000d68
 8005bc8:	20000d54 	.word	0x20000d54

08005bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	613b      	str	r3, [r7, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c0e:	f000 fe79 	bl	8006904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c12:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <xTaskCheckForTimeOut+0xbc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d102      	bne.n	8005c32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e023      	b.n	8005c7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <xTaskCheckForTimeOut+0xc0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d007      	beq.n	8005c4e <xTaskCheckForTimeOut+0x82>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	e015      	b.n	8005c7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d20b      	bcs.n	8005c70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ff9b 	bl	8005ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	e004      	b.n	8005c7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c7a:	f000 fe73 	bl	8006964 <vPortExitCritical>

	return xReturn;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000d54 	.word	0x20000d54
 8005c8c:	20000d68 	.word	0x20000d68

08005c90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <vTaskMissedYield+0x14>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	20000d64 	.word	0x20000d64

08005ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cb0:	f000 f852 	bl	8005d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <prvIdleTask+0x28>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d9f9      	bls.n	8005cb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <prvIdleTask+0x2c>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ccc:	e7f0      	b.n	8005cb0 <prvIdleTask+0x8>
 8005cce:	bf00      	nop
 8005cd0:	20000880 	.word	0x20000880
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	e00c      	b.n	8005cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <prvInitialiseTaskLists+0x60>)
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe fcb6 	bl	8004664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	607b      	str	r3, [r7, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b37      	cmp	r3, #55	; 0x37
 8005d02:	d9ef      	bls.n	8005ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d04:	480d      	ldr	r0, [pc, #52]	; (8005d3c <prvInitialiseTaskLists+0x64>)
 8005d06:	f7fe fcad 	bl	8004664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d0a:	480d      	ldr	r0, [pc, #52]	; (8005d40 <prvInitialiseTaskLists+0x68>)
 8005d0c:	f7fe fcaa 	bl	8004664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d10:	480c      	ldr	r0, [pc, #48]	; (8005d44 <prvInitialiseTaskLists+0x6c>)
 8005d12:	f7fe fca7 	bl	8004664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d16:	480c      	ldr	r0, [pc, #48]	; (8005d48 <prvInitialiseTaskLists+0x70>)
 8005d18:	f7fe fca4 	bl	8004664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d1c:	480b      	ldr	r0, [pc, #44]	; (8005d4c <prvInitialiseTaskLists+0x74>)
 8005d1e:	f7fe fca1 	bl	8004664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvInitialiseTaskLists+0x78>)
 8005d24:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <prvInitialiseTaskLists+0x64>)
 8005d26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <prvInitialiseTaskLists+0x7c>)
 8005d2a:	4a05      	ldr	r2, [pc, #20]	; (8005d40 <prvInitialiseTaskLists+0x68>)
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000880 	.word	0x20000880
 8005d3c:	20000ce0 	.word	0x20000ce0
 8005d40:	20000cf4 	.word	0x20000cf4
 8005d44:	20000d10 	.word	0x20000d10
 8005d48:	20000d24 	.word	0x20000d24
 8005d4c:	20000d3c 	.word	0x20000d3c
 8005d50:	20000d08 	.word	0x20000d08
 8005d54:	20000d0c 	.word	0x20000d0c

08005d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d5e:	e019      	b.n	8005d94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d60:	f000 fdd0 	bl	8006904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d64:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <prvCheckTasksWaitingTermination+0x50>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe fd01 	bl	8004778 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <prvCheckTasksWaitingTermination+0x54>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	4a0b      	ldr	r2, [pc, #44]	; (8005dac <prvCheckTasksWaitingTermination+0x54>)
 8005d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <prvCheckTasksWaitingTermination+0x58>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <prvCheckTasksWaitingTermination+0x58>)
 8005d88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d8a:	f000 fdeb 	bl	8006964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f810 	bl	8005db4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <prvCheckTasksWaitingTermination+0x58>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e1      	bne.n	8005d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000d24 	.word	0x20000d24
 8005dac:	20000d50 	.word	0x20000d50
 8005db0:	20000d38 	.word	0x20000d38

08005db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 ff88 	bl	8006ce0 <vPortFree>
				vPortFree( pxTCB );
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 ff85 	bl	8006ce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dd6:	e018      	b.n	8005e0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d103      	bne.n	8005dea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 ff7c 	bl	8006ce0 <vPortFree>
	}
 8005de8:	e00f      	b.n	8005e0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d00a      	beq.n	8005e0a <prvDeleteTCB+0x56>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60fb      	str	r3, [r7, #12]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <prvDeleteTCB+0x54>
	}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <prvResetNextTaskUnblockTime+0x38>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvResetNextTaskUnblockTime+0x3c>)
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e2c:	e008      	b.n	8005e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <prvResetNextTaskUnblockTime+0x38>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <prvResetNextTaskUnblockTime+0x3c>)
 8005e3e:	6013      	str	r3, [r2, #0]
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20000d08 	.word	0x20000d08
 8005e50:	20000d70 	.word	0x20000d70

08005e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <xTaskGetSchedulerState+0x34>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e62:	2301      	movs	r3, #1
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	e008      	b.n	8005e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <xTaskGetSchedulerState+0x38>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e70:	2302      	movs	r3, #2
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	e001      	b.n	8005e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e76:	2300      	movs	r3, #0
 8005e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e7a:	687b      	ldr	r3, [r7, #4]
	}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20000d5c 	.word	0x20000d5c
 8005e8c:	20000d78 	.word	0x20000d78

08005e90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d056      	beq.n	8005f54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ea6:	4b2e      	ldr	r3, [pc, #184]	; (8005f60 <xTaskPriorityDisinherit+0xd0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d00a      	beq.n	8005ec6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	60fb      	str	r3, [r7, #12]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	60bb      	str	r3, [r7, #8]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee8:	1e5a      	subs	r2, r3, #1
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d02c      	beq.n	8005f54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d128      	bne.n	8005f54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fc36 	bl	8004778 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <xTaskPriorityDisinherit+0xd4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d903      	bls.n	8005f34 <xTaskPriorityDisinherit+0xa4>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <xTaskPriorityDisinherit+0xd4>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <xTaskPriorityDisinherit+0xd8>)
 8005f42:	441a      	add	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7fe fbb7 	bl	80046be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f54:	697b      	ldr	r3, [r7, #20]
	}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	2000087c 	.word	0x2000087c
 8005f64:	20000d58 	.word	0x20000d58
 8005f68:	20000880 	.word	0x20000880

08005f6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f76:	4b21      	ldr	r3, [pc, #132]	; (8005ffc <prvAddCurrentTaskToDelayedList+0x90>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7c:	4b20      	ldr	r3, [pc, #128]	; (8006000 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe fbf8 	bl	8004778 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d10a      	bne.n	8005fa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f96:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4819      	ldr	r0, [pc, #100]	; (8006004 <prvAddCurrentTaskToDelayedList+0x98>)
 8005fa0:	f7fe fb8d 	bl	80046be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fa4:	e026      	b.n	8005ff4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d209      	bcs.n	8005fd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f7fe fb9b 	bl	8004706 <vListInsert>
}
 8005fd0:	e010      	b.n	8005ff4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	; (800600c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f7fe fb91 	bl	8004706 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d202      	bcs.n	8005ff4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fee:	4a08      	ldr	r2, [pc, #32]	; (8006010 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000d54 	.word	0x20000d54
 8006000:	2000087c 	.word	0x2000087c
 8006004:	20000d3c 	.word	0x20000d3c
 8006008:	20000d0c 	.word	0x20000d0c
 800600c:	20000d08 	.word	0x20000d08
 8006010:	20000d70 	.word	0x20000d70

08006014 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800601e:	f000 fb07 	bl	8006630 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006022:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <xTimerCreateTimerTask+0x80>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d021      	beq.n	800606e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006032:	1d3a      	adds	r2, r7, #4
 8006034:	f107 0108 	add.w	r1, r7, #8
 8006038:	f107 030c 	add.w	r3, r7, #12
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe faf7 	bl	8004630 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	9202      	str	r2, [sp, #8]
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	2302      	movs	r3, #2
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	2300      	movs	r3, #0
 8006052:	460a      	mov	r2, r1
 8006054:	4910      	ldr	r1, [pc, #64]	; (8006098 <xTimerCreateTimerTask+0x84>)
 8006056:	4811      	ldr	r0, [pc, #68]	; (800609c <xTimerCreateTimerTask+0x88>)
 8006058:	f7ff f8de 	bl	8005218 <xTaskCreateStatic>
 800605c:	4603      	mov	r3, r0
 800605e:	4a10      	ldr	r2, [pc, #64]	; (80060a0 <xTimerCreateTimerTask+0x8c>)
 8006060:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006062:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <xTimerCreateTimerTask+0x8c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800606a:	2301      	movs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	613b      	str	r3, [r7, #16]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800608a:	697b      	ldr	r3, [r7, #20]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000dac 	.word	0x20000dac
 8006098:	08007000 	.word	0x08007000
 800609c:	080061d9 	.word	0x080061d9
 80060a0:	20000db0 	.word	0x20000db0

080060a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	623b      	str	r3, [r7, #32]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <xTimerGenericCommand+0x98>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d02a      	beq.n	8006130 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	dc18      	bgt.n	800611e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060ec:	f7ff feb2 	bl	8005e54 <xTaskGetSchedulerState>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d109      	bne.n	800610a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <xTimerGenericCommand+0x98>)
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	f107 0110 	add.w	r1, r7, #16
 80060fe:	2300      	movs	r3, #0
 8006100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006102:	f7fe fca1 	bl	8004a48 <xQueueGenericSend>
 8006106:	6278      	str	r0, [r7, #36]	; 0x24
 8006108:	e012      	b.n	8006130 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <xTimerGenericCommand+0x98>)
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f107 0110 	add.w	r1, r7, #16
 8006112:	2300      	movs	r3, #0
 8006114:	2200      	movs	r2, #0
 8006116:	f7fe fc97 	bl	8004a48 <xQueueGenericSend>
 800611a:	6278      	str	r0, [r7, #36]	; 0x24
 800611c:	e008      	b.n	8006130 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <xTimerGenericCommand+0x98>)
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	f107 0110 	add.w	r1, r7, #16
 8006126:	2300      	movs	r3, #0
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	f7fe fd8b 	bl	8004c44 <xQueueGenericSendFromISR>
 800612e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006132:	4618      	mov	r0, r3
 8006134:	3728      	adds	r7, #40	; 0x28
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000dac 	.word	0x20000dac

08006140 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614a:	4b22      	ldr	r3, [pc, #136]	; (80061d4 <prvProcessExpiredTimer+0x94>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	3304      	adds	r3, #4
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe fb0d 	bl	8004778 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d022      	beq.n	80061b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	18d1      	adds	r1, r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	6978      	ldr	r0, [r7, #20]
 800617a:	f000 f8d1 	bl	8006320 <prvInsertTimerInActiveList>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01f      	beq.n	80061c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006184:	2300      	movs	r3, #0
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	2300      	movs	r3, #0
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	2100      	movs	r1, #0
 800618e:	6978      	ldr	r0, [r7, #20]
 8006190:	f7ff ff88 	bl	80060a4 <xTimerGenericCommand>
 8006194:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d113      	bne.n	80061c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60fb      	str	r3, [r7, #12]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	6978      	ldr	r0, [r7, #20]
 80061ca:	4798      	blx	r3
}
 80061cc:	bf00      	nop
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000da4 	.word	0x20000da4

080061d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061e0:	f107 0308 	add.w	r3, r7, #8
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f857 	bl	8006298 <prvGetNextExpireTime>
 80061ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4619      	mov	r1, r3
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f803 	bl	80061fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061f6:	f000 f8d5 	bl	80063a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061fa:	e7f1      	b.n	80061e0 <prvTimerTask+0x8>

080061fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006206:	f7ff fa43 	bl	8005690 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f866 	bl	80062e0 <prvSampleTimeNow>
 8006214:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d130      	bne.n	800627e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <prvProcessTimerOrBlockTask+0x3c>
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	429a      	cmp	r2, r3
 8006228:	d806      	bhi.n	8006238 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800622a:	f7ff fa3f 	bl	80056ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff85 	bl	8006140 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006236:	e024      	b.n	8006282 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <prvProcessTimerOrBlockTask+0x90>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <prvProcessTimerOrBlockTask+0x50>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <prvProcessTimerOrBlockTask+0x52>
 800624c:	2300      	movs	r3, #0
 800624e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <prvProcessTimerOrBlockTask+0x94>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4619      	mov	r1, r3
 800625e:	f7fe ffa7 	bl	80051b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006262:	f7ff fa23 	bl	80056ac <xTaskResumeAll>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800626c:	4b09      	ldr	r3, [pc, #36]	; (8006294 <prvProcessTimerOrBlockTask+0x98>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
}
 800627c:	e001      	b.n	8006282 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800627e:	f7ff fa15 	bl	80056ac <xTaskResumeAll>
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000da8 	.word	0x20000da8
 8006290:	20000dac 	.word	0x20000dac
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062a0:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <prvGetNextExpireTime+0x44>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <prvGetNextExpireTime+0x16>
 80062aa:	2201      	movs	r2, #1
 80062ac:	e000      	b.n	80062b0 <prvGetNextExpireTime+0x18>
 80062ae:	2200      	movs	r2, #0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062bc:	4b07      	ldr	r3, [pc, #28]	; (80062dc <prvGetNextExpireTime+0x44>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e001      	b.n	80062cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062cc:	68fb      	ldr	r3, [r7, #12]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000da4 	.word	0x20000da4

080062e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062e8:	f7ff fa7e 	bl	80057e8 <xTaskGetTickCount>
 80062ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <prvSampleTimeNow+0x3c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d205      	bcs.n	8006304 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062f8:	f000 f936 	bl	8006568 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e002      	b.n	800630a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800630a:	4a04      	ldr	r2, [pc, #16]	; (800631c <prvSampleTimeNow+0x3c>)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006310:	68fb      	ldr	r3, [r7, #12]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000db4 	.word	0x20000db4

08006320 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d812      	bhi.n	800636c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	e01b      	b.n	8006392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <prvInsertTimerInActiveList+0x7c>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f7fe f9ce 	bl	8004706 <vListInsert>
 800636a:	e012      	b.n	8006392 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d206      	bcs.n	8006382 <prvInsertTimerInActiveList+0x62>
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d302      	bcc.n	8006382 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e007      	b.n	8006392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <prvInsertTimerInActiveList+0x80>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f7fe f9ba 	bl	8004706 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006392:	697b      	ldr	r3, [r7, #20]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000da8 	.word	0x20000da8
 80063a0:	20000da4 	.word	0x20000da4

080063a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08e      	sub	sp, #56	; 0x38
 80063a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063aa:	e0ca      	b.n	8006542 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da18      	bge.n	80063e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063b2:	1d3b      	adds	r3, r7, #4
 80063b4:	3304      	adds	r3, #4
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	61fb      	str	r3, [r7, #28]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063da:	6850      	ldr	r0, [r2, #4]
 80063dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063de:	6892      	ldr	r2, [r2, #8]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f2c0 80ab 	blt.w	8006542 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	3304      	adds	r3, #4
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe f9bb 	bl	8004778 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006402:	463b      	mov	r3, r7
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff ff6b 	bl	80062e0 <prvSampleTimeNow>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b09      	cmp	r3, #9
 8006410:	f200 8096 	bhi.w	8006540 <prvProcessReceivedCommands+0x19c>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <prvProcessReceivedCommands+0x78>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006445 	.word	0x08006445
 8006420:	08006445 	.word	0x08006445
 8006424:	08006445 	.word	0x08006445
 8006428:	080064b9 	.word	0x080064b9
 800642c:	080064cd 	.word	0x080064cd
 8006430:	08006517 	.word	0x08006517
 8006434:	08006445 	.word	0x08006445
 8006438:	08006445 	.word	0x08006445
 800643c:	080064b9 	.word	0x080064b9
 8006440:	080064cd 	.word	0x080064cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	b2da      	uxtb	r2, r3
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	18d1      	adds	r1, r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006464:	f7ff ff5c 	bl	8006320 <prvInsertTimerInActiveList>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d069      	beq.n	8006542 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006474:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d05e      	beq.n	8006542 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	441a      	add	r2, r3
 800648c:	2300      	movs	r3, #0
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	2300      	movs	r3, #0
 8006492:	2100      	movs	r1, #0
 8006494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006496:	f7ff fe05 	bl	80060a4 <xTimerGenericCommand>
 800649a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d14f      	bne.n	8006542 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	61bb      	str	r3, [r7, #24]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80064ca:	e03a      	b.n	8006542 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	617b      	str	r3, [r7, #20]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	18d1      	adds	r1, r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006510:	f7ff ff06 	bl	8006320 <prvInsertTimerInActiveList>
					break;
 8006514:	e015      	b.n	8006542 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006526:	f000 fbdb 	bl	8006ce0 <vPortFree>
 800652a:	e00a      	b.n	8006542 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800653e:	e000      	b.n	8006542 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006540:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006542:	4b08      	ldr	r3, [pc, #32]	; (8006564 <prvProcessReceivedCommands+0x1c0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	1d39      	adds	r1, r7, #4
 8006548:	2200      	movs	r2, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe fc16 	bl	8004d7c <xQueueReceive>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	f47f af2a 	bne.w	80063ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	3730      	adds	r7, #48	; 0x30
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000dac 	.word	0x20000dac

08006568 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800656e:	e048      	b.n	8006602 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006570:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <prvSwitchTimerLists+0xc0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657a:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <prvSwitchTimerLists+0xc0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3304      	adds	r3, #4
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe f8f5 	bl	8004778 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02e      	beq.n	8006602 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4413      	add	r3, r2
 80065ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d90e      	bls.n	80065d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065c2:	4b19      	ldr	r3, [pc, #100]	; (8006628 <prvSwitchTimerLists+0xc0>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3304      	adds	r3, #4
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f7fe f89a 	bl	8004706 <vListInsert>
 80065d2:	e016      	b.n	8006602 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065d4:	2300      	movs	r3, #0
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	2300      	movs	r3, #0
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	2100      	movs	r1, #0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7ff fd60 	bl	80060a4 <xTimerGenericCommand>
 80065e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	603b      	str	r3, [r7, #0]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <prvSwitchTimerLists+0xc0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1b1      	bne.n	8006570 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <prvSwitchTimerLists+0xc0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006612:	4b06      	ldr	r3, [pc, #24]	; (800662c <prvSwitchTimerLists+0xc4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a04      	ldr	r2, [pc, #16]	; (8006628 <prvSwitchTimerLists+0xc0>)
 8006618:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800661a:	4a04      	ldr	r2, [pc, #16]	; (800662c <prvSwitchTimerLists+0xc4>)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6013      	str	r3, [r2, #0]
}
 8006620:	bf00      	nop
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000da4 	.word	0x20000da4
 800662c:	20000da8 	.word	0x20000da8

08006630 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006636:	f000 f965 	bl	8006904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800663a:	4b15      	ldr	r3, [pc, #84]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d120      	bne.n	8006684 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006642:	4814      	ldr	r0, [pc, #80]	; (8006694 <prvCheckForValidListAndQueue+0x64>)
 8006644:	f7fe f80e 	bl	8004664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006648:	4813      	ldr	r0, [pc, #76]	; (8006698 <prvCheckForValidListAndQueue+0x68>)
 800664a:	f7fe f80b 	bl	8004664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <prvCheckForValidListAndQueue+0x6c>)
 8006650:	4a10      	ldr	r2, [pc, #64]	; (8006694 <prvCheckForValidListAndQueue+0x64>)
 8006652:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006654:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <prvCheckForValidListAndQueue+0x70>)
 8006656:	4a10      	ldr	r2, [pc, #64]	; (8006698 <prvCheckForValidListAndQueue+0x68>)
 8006658:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800665a:	2300      	movs	r3, #0
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <prvCheckForValidListAndQueue+0x74>)
 8006660:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <prvCheckForValidListAndQueue+0x78>)
 8006662:	2110      	movs	r1, #16
 8006664:	200a      	movs	r0, #10
 8006666:	f7fe f919 	bl	800489c <xQueueGenericCreateStatic>
 800666a:	4603      	mov	r3, r0
 800666c:	4a08      	ldr	r2, [pc, #32]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 800666e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	490b      	ldr	r1, [pc, #44]	; (80066ac <prvCheckForValidListAndQueue+0x7c>)
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fd6c 	bl	800515c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006684:	f000 f96e 	bl	8006964 <vPortExitCritical>
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000dac 	.word	0x20000dac
 8006694:	20000d7c 	.word	0x20000d7c
 8006698:	20000d90 	.word	0x20000d90
 800669c:	20000da4 	.word	0x20000da4
 80066a0:	20000da8 	.word	0x20000da8
 80066a4:	20000e58 	.word	0x20000e58
 80066a8:	20000db8 	.word	0x20000db8
 80066ac:	08007008 	.word	0x08007008

080066b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3b04      	subs	r3, #4
 80066c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3b04      	subs	r3, #4
 80066ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f023 0201 	bic.w	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b04      	subs	r3, #4
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066e0:	4a0c      	ldr	r2, [pc, #48]	; (8006714 <pxPortInitialiseStack+0x64>)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3b14      	subs	r3, #20
 80066ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3b04      	subs	r3, #4
 80066f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f06f 0202 	mvn.w	r2, #2
 80066fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b20      	subs	r3, #32
 8006704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006706:	68fb      	ldr	r3, [r7, #12]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	08006719 	.word	0x08006719

08006718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006722:	4b12      	ldr	r3, [pc, #72]	; (800676c <prvTaskExitError+0x54>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d00a      	beq.n	8006742 <prvTaskExitError+0x2a>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60fb      	str	r3, [r7, #12]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <prvTaskExitError+0x28>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60bb      	str	r3, [r7, #8]
}
 8006754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006756:	bf00      	nop
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0fc      	beq.n	8006758 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000014 	.word	0x20000014

08006770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <pxCurrentTCBConst2>)
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	6808      	ldr	r0, [r1, #0]
 8006776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	f380 8809 	msr	PSP, r0
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	4770      	bx	lr
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst2>:
 8006790:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006798:	4808      	ldr	r0, [pc, #32]	; (80067bc <prvPortStartFirstTask+0x24>)
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f380 8808 	msr	MSP, r0
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8814 	msr	CONTROL, r0
 80067aa:	b662      	cpsie	i
 80067ac:	b661      	cpsie	f
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	df00      	svc	0
 80067b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ba:	bf00      	nop
 80067bc:	e000ed08 	.word	0xe000ed08

080067c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067c6:	4b46      	ldr	r3, [pc, #280]	; (80068e0 <xPortStartScheduler+0x120>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a46      	ldr	r2, [pc, #280]	; (80068e4 <xPortStartScheduler+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10a      	bne.n	80067e6 <xPortStartScheduler+0x26>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	613b      	str	r3, [r7, #16]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067e6:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <xPortStartScheduler+0x120>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3f      	ldr	r2, [pc, #252]	; (80068e8 <xPortStartScheduler+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10a      	bne.n	8006806 <xPortStartScheduler+0x46>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60fb      	str	r3, [r7, #12]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <xPortStartScheduler+0x12c>)
 8006808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	22ff      	movs	r2, #255	; 0xff
 8006816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006828:	b2da      	uxtb	r2, r3
 800682a:	4b31      	ldr	r3, [pc, #196]	; (80068f0 <xPortStartScheduler+0x130>)
 800682c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800682e:	4b31      	ldr	r3, [pc, #196]	; (80068f4 <xPortStartScheduler+0x134>)
 8006830:	2207      	movs	r2, #7
 8006832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006834:	e009      	b.n	800684a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <xPortStartScheduler+0x134>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3b01      	subs	r3, #1
 800683c:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <xPortStartScheduler+0x134>)
 800683e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	b2db      	uxtb	r3, r3
 8006848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d0ef      	beq.n	8006836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006856:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <xPortStartScheduler+0x134>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1c3 0307 	rsb	r3, r3, #7
 800685e:	2b04      	cmp	r3, #4
 8006860:	d00a      	beq.n	8006878 <xPortStartScheduler+0xb8>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60bb      	str	r3, [r7, #8]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <xPortStartScheduler+0x134>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <xPortStartScheduler+0x134>)
 8006880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <xPortStartScheduler+0x134>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800688a:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <xPortStartScheduler+0x134>)
 800688c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006896:	4b18      	ldr	r3, [pc, #96]	; (80068f8 <xPortStartScheduler+0x138>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <xPortStartScheduler+0x138>)
 800689c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <xPortStartScheduler+0x138>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <xPortStartScheduler+0x138>)
 80068a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068ae:	f000 f8dd 	bl	8006a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <xPortStartScheduler+0x13c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068b8:	f000 f8fc 	bl	8006ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068bc:	4b10      	ldr	r3, [pc, #64]	; (8006900 <xPortStartScheduler+0x140>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <xPortStartScheduler+0x140>)
 80068c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068c8:	f7ff ff66 	bl	8006798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068cc:	f7ff f856 	bl	800597c <vTaskSwitchContext>
	prvTaskExitError();
 80068d0:	f7ff ff22 	bl	8006718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	e000ed00 	.word	0xe000ed00
 80068e4:	410fc271 	.word	0x410fc271
 80068e8:	410fc270 	.word	0x410fc270
 80068ec:	e000e400 	.word	0xe000e400
 80068f0:	20000ea8 	.word	0x20000ea8
 80068f4:	20000eac 	.word	0x20000eac
 80068f8:	e000ed20 	.word	0xe000ed20
 80068fc:	20000014 	.word	0x20000014
 8006900:	e000ef34 	.word	0xe000ef34

08006904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	607b      	str	r3, [r7, #4]
}
 800691c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <vPortEnterCritical+0x58>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	4a0d      	ldr	r2, [pc, #52]	; (800695c <vPortEnterCritical+0x58>)
 8006926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006928:	4b0c      	ldr	r3, [pc, #48]	; (800695c <vPortEnterCritical+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10f      	bne.n	8006950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <vPortEnterCritical+0x5c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <vPortEnterCritical+0x4c>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	603b      	str	r3, [r7, #0]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <vPortEnterCritical+0x4a>
	}
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20000014 	.word	0x20000014
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <vPortExitCritical+0x50>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <vPortExitCritical+0x24>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <vPortExitCritical+0x50>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3b01      	subs	r3, #1
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <vPortExitCritical+0x50>)
 8006990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <vPortExitCritical+0x50>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d105      	bne.n	80069a6 <vPortExitCritical+0x42>
 800699a:	2300      	movs	r3, #0
 800699c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	f383 8811 	msr	BASEPRI, r3
}
 80069a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000014 	.word	0x20000014
	...

080069c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069c0:	f3ef 8009 	mrs	r0, PSP
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <pxCurrentTCBConst>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	f01e 0f10 	tst.w	lr, #16
 80069d0:	bf08      	it	eq
 80069d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	6010      	str	r0, [r2, #0]
 80069dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069e4:	f380 8811 	msr	BASEPRI, r0
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f7fe ffc4 	bl	800597c <vTaskSwitchContext>
 80069f4:	f04f 0000 	mov.w	r0, #0
 80069f8:	f380 8811 	msr	BASEPRI, r0
 80069fc:	bc09      	pop	{r0, r3}
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	6808      	ldr	r0, [r1, #0]
 8006a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a06:	f01e 0f10 	tst.w	lr, #16
 8006a0a:	bf08      	it	eq
 8006a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a10:	f380 8809 	msr	PSP, r0
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst>:
 8006a20:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a42:	f7fe fee1 	bl	8005808 <xTaskIncrementTick>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <xPortSysTickHandler+0x40>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f383 8811 	msr	BASEPRI, r3
}
 8006a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <vPortSetupTimerInterrupt+0x38>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <vPortSetupTimerInterrupt+0x3c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <vPortSetupTimerInterrupt+0x40>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <vPortSetupTimerInterrupt+0x44>)
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a8e:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010
 8006aa4:	e000e018 	.word	0xe000e018
 8006aa8:	20000008 	.word	0x20000008
 8006aac:	10624dd3 	.word	0x10624dd3
 8006ab0:	e000e014 	.word	0xe000e014

08006ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ac4 <vPortEnableVFP+0x10>
 8006ab8:	6801      	ldr	r1, [r0, #0]
 8006aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006abe:	6001      	str	r1, [r0, #0]
 8006ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ac2:	bf00      	nop
 8006ac4:	e000ed88 	.word	0xe000ed88

08006ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ace:	f3ef 8305 	mrs	r3, IPSR
 8006ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d914      	bls.n	8006b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <vPortValidateInterruptPriority+0x70>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <vPortValidateInterruptPriority+0x74>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	7afa      	ldrb	r2, [r7, #11]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d20a      	bcs.n	8006b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <vPortValidateInterruptPriority+0x78>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <vPortValidateInterruptPriority+0x7c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d90a      	bls.n	8006b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	603b      	str	r3, [r7, #0]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <vPortValidateInterruptPriority+0x60>
	}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000e3f0 	.word	0xe000e3f0
 8006b3c:	20000ea8 	.word	0x20000ea8
 8006b40:	e000ed0c 	.word	0xe000ed0c
 8006b44:	20000eac 	.word	0x20000eac

08006b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08a      	sub	sp, #40	; 0x28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b54:	f7fe fd9c 	bl	8005690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b58:	4b5b      	ldr	r3, [pc, #364]	; (8006cc8 <pvPortMalloc+0x180>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b60:	f000 f920 	bl	8006da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <pvPortMalloc+0x184>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8093 	bne.w	8006c98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01d      	beq.n	8006bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b78:	2208      	movs	r2, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d014      	beq.n	8006bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f023 0307 	bic.w	r3, r3, #7
 8006b90:	3308      	adds	r3, #8
 8006b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	617b      	str	r3, [r7, #20]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d06e      	beq.n	8006c98 <pvPortMalloc+0x150>
 8006bba:	4b45      	ldr	r3, [pc, #276]	; (8006cd0 <pvPortMalloc+0x188>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d869      	bhi.n	8006c98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bc4:	4b43      	ldr	r3, [pc, #268]	; (8006cd4 <pvPortMalloc+0x18c>)
 8006bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bc8:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <pvPortMalloc+0x18c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bce:	e004      	b.n	8006bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d903      	bls.n	8006bec <pvPortMalloc+0xa4>
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f1      	bne.n	8006bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bec:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <pvPortMalloc+0x180>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d050      	beq.n	8006c98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	4413      	add	r3, r2
 8006bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	1ad2      	subs	r2, r2, r3
 8006c10:	2308      	movs	r3, #8
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d91f      	bls.n	8006c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <pvPortMalloc+0xf8>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	613b      	str	r3, [r7, #16]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c52:	69b8      	ldr	r0, [r7, #24]
 8006c54:	f000 f908 	bl	8006e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c58:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <pvPortMalloc+0x190>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d203      	bcs.n	8006c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c72:	4b17      	ldr	r3, [pc, #92]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <pvPortMalloc+0x190>)
 8006c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <pvPortMalloc+0x184>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <pvPortMalloc+0x194>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a11      	ldr	r2, [pc, #68]	; (8006cdc <pvPortMalloc+0x194>)
 8006c96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c98:	f7fe fd08 	bl	80056ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <pvPortMalloc+0x174>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60fb      	str	r3, [r7, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <pvPortMalloc+0x172>
	return pvReturn;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3728      	adds	r7, #40	; 0x28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20002240 	.word	0x20002240
 8006ccc:	20002254 	.word	0x20002254
 8006cd0:	20002244 	.word	0x20002244
 8006cd4:	20002238 	.word	0x20002238
 8006cd8:	20002248 	.word	0x20002248
 8006cdc:	2000224c 	.word	0x2000224c

08006ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d04d      	beq.n	8006d8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <vPortFree+0xb8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <vPortFree+0x44>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	60fb      	str	r3, [r7, #12]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <vPortFree+0x62>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	60bb      	str	r3, [r7, #8]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <vPortFree+0xb8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01e      	beq.n	8006d8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11a      	bne.n	8006d8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <vPortFree+0xb8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	43db      	mvns	r3, r3
 8006d62:	401a      	ands	r2, r3
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d68:	f7fe fc92 	bl	8005690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <vPortFree+0xbc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4413      	add	r3, r2
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <vPortFree+0xbc>)
 8006d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d7a:	6938      	ldr	r0, [r7, #16]
 8006d7c:	f000 f874 	bl	8006e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <vPortFree+0xc0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <vPortFree+0xc0>)
 8006d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d8a:	f7fe fc8f 	bl	80056ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20002254 	.word	0x20002254
 8006d9c:	20002244 	.word	0x20002244
 8006da0:	20002250 	.word	0x20002250

08006da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8006dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006db0:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <prvHeapInit+0xac>)
 8006db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3307      	adds	r3, #7
 8006dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0307 	bic.w	r3, r3, #7
 8006dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <prvHeapInit+0xac>)
 8006dd4:	4413      	add	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <prvHeapInit+0xb0>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <prvHeapInit+0xb0>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006df0:	2208      	movs	r2, #8
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <prvHeapInit+0xb4>)
 8006e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <prvHeapInit+0xb4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <prvHeapInit+0xb4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <prvHeapInit+0xb4>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <prvHeapInit+0xb8>)
 8006e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <prvHeapInit+0xbc>)
 8006e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <prvHeapInit+0xc0>)
 8006e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20000eb0 	.word	0x20000eb0
 8006e54:	20002238 	.word	0x20002238
 8006e58:	20002240 	.word	0x20002240
 8006e5c:	20002248 	.word	0x20002248
 8006e60:	20002244 	.word	0x20002244
 8006e64:	20002254 	.word	0x20002254

08006e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e70:	4b28      	ldr	r3, [pc, #160]	; (8006f14 <prvInsertBlockIntoFreeList+0xac>)
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e002      	b.n	8006e7c <prvInsertBlockIntoFreeList+0x14>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d8f7      	bhi.n	8006e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4413      	add	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d108      	bne.n	8006eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d118      	bne.n	8006ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b15      	ldr	r3, [pc, #84]	; (8006f18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d00d      	beq.n	8006ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	441a      	add	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e008      	b.n	8006ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e003      	b.n	8006ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d002      	beq.n	8006f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20002238 	.word	0x20002238
 8006f18:	20002240 	.word	0x20002240

08006f1c <memset>:
 8006f1c:	4402      	add	r2, r0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d100      	bne.n	8006f26 <memset+0xa>
 8006f24:	4770      	bx	lr
 8006f26:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2a:	e7f9      	b.n	8006f20 <memset+0x4>

08006f2c <__libc_init_array>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	4d0d      	ldr	r5, [pc, #52]	; (8006f64 <__libc_init_array+0x38>)
 8006f30:	4c0d      	ldr	r4, [pc, #52]	; (8006f68 <__libc_init_array+0x3c>)
 8006f32:	1b64      	subs	r4, r4, r5
 8006f34:	10a4      	asrs	r4, r4, #2
 8006f36:	2600      	movs	r6, #0
 8006f38:	42a6      	cmp	r6, r4
 8006f3a:	d109      	bne.n	8006f50 <__libc_init_array+0x24>
 8006f3c:	4d0b      	ldr	r5, [pc, #44]	; (8006f6c <__libc_init_array+0x40>)
 8006f3e:	4c0c      	ldr	r4, [pc, #48]	; (8006f70 <__libc_init_array+0x44>)
 8006f40:	f000 f826 	bl	8006f90 <_init>
 8006f44:	1b64      	subs	r4, r4, r5
 8006f46:	10a4      	asrs	r4, r4, #2
 8006f48:	2600      	movs	r6, #0
 8006f4a:	42a6      	cmp	r6, r4
 8006f4c:	d105      	bne.n	8006f5a <__libc_init_array+0x2e>
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f54:	4798      	blx	r3
 8006f56:	3601      	adds	r6, #1
 8006f58:	e7ee      	b.n	8006f38 <__libc_init_array+0xc>
 8006f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5e:	4798      	blx	r3
 8006f60:	3601      	adds	r6, #1
 8006f62:	e7f2      	b.n	8006f4a <__libc_init_array+0x1e>
 8006f64:	0800712c 	.word	0x0800712c
 8006f68:	0800712c 	.word	0x0800712c
 8006f6c:	0800712c 	.word	0x0800712c
 8006f70:	08007130 	.word	0x08007130

08006f74 <memcpy>:
 8006f74:	440a      	add	r2, r1
 8006f76:	4291      	cmp	r1, r2
 8006f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f7c:	d100      	bne.n	8006f80 <memcpy+0xc>
 8006f7e:	4770      	bx	lr
 8006f80:	b510      	push	{r4, lr}
 8006f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f8a:	4291      	cmp	r1, r2
 8006f8c:	d1f9      	bne.n	8006f82 <memcpy+0xe>
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
