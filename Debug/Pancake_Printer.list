
Pancake_Printer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b178  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6dc  0800b6dc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6dc  0800b6dc  0001b6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6e4  0800b6e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6e4  0800b6e4  0001b6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6e8  0800b6e8  0001b6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b6ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ec8  20000080  0800b76c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009f48  0800b76c  00029f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020841  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046de  00000000  00000000  00040934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c80  00000000  00000000  00045018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000161a  00000000  00000000  00046c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aa84  00000000  00000000  000482b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000236c7  00000000  00000000  00072d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010123e  00000000  00000000  000963fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c80  00000000  00000000  0019763c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0019f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2f0 	.word	0x0800b2f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800b2f0 	.word	0x0800b2f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <delayms>:
float speed = 20.0; //mm/s
float extrude_speed = 10.0; //mm/s

bool extrusion_on = false;

void delayms(uint16_t ms){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
  osDelay(ms);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	4618      	mov	r0, r3
 800058a:	f006 ff95 	bl	80074b8 <osDelay>
  //delayus(ms * 1000);
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <delayus>:

void delayus(uint16_t us){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <delayus+0x34>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim1);
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <delayus+0x34>)
 80005ac:	f003 f80c 	bl	80035c8 <HAL_TIM_Base_Start>
  while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 80005b0:	bf00      	nop
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <delayus+0x34>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3f9      	bcc.n	80005b2 <delayus+0x1a>
  HAL_TIM_Base_Stop(&htim1);// wait for the counter to reach the us input in the parameter
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <delayus+0x34>)
 80005c0:	f003 f86a 	bl	8003698 <HAL_TIM_Base_Stop>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000010c 	.word	0x2000010c

080005d0 <motor_init>:

void motor_init(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //For some reason non-syncronus delay needed before synchronous delay will work.
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	483a      	ldr	r0, [pc, #232]	; (80006c4 <motor_init+0xf4>)
 80005da:	f001 fb91 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e4:	4837      	ldr	r0, [pc, #220]	; (80006c4 <motor_init+0xf4>)
 80005e6:	f001 fb8b 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f001 fb84 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f001 fb7d 	bl	8001d00 <HAL_GPIO_WritePin>
  delayus(2);
 8000606:	2002      	movs	r0, #2
 8000608:	f7ff ffc6 	bl	8000598 <delayus>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fb73 	bl	8001d00 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <motor_init+0xf8>)
 800061c:	edd3 7a00 	vldr	s15, [r3]
 8000620:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80006cc <motor_init+0xfc>
 8000624:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000628:	eddf 6a29 	vldr	s13, [pc, #164]	; 80006d0 <motor_init+0x100>
 800062c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000634:	ee17 3a90 	vmov	r3, s15
 8000638:	b29b      	uxth	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ffac 	bl	8000598 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2108      	movs	r1, #8
 8000644:	481f      	ldr	r0, [pc, #124]	; (80006c4 <motor_init+0xf4>)
 8000646:	f001 fb5b 	bl	8001d00 <HAL_GPIO_WritePin>
  delayus(2);
 800064a:	2002      	movs	r0, #2
 800064c:	f7ff ffa4 	bl	8000598 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2108      	movs	r1, #8
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <motor_init+0xf4>)
 8000656:	f001 fb53 	bl	8001d00 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <motor_init+0xf8>)
 800065c:	edd3 7a00 	vldr	s15, [r3]
 8000660:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80006cc <motor_init+0xfc>
 8000664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000668:	eddf 6a19 	vldr	s13, [pc, #100]	; 80006d0 <motor_init+0x100>
 800066c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000674:	ee17 3a90 	vmov	r3, s15
 8000678:	b29b      	uxth	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff8c 	bl	8000598 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	480f      	ldr	r0, [pc, #60]	; (80006c4 <motor_init+0xf4>)
 8000686:	f001 fb3b 	bl	8001d00 <HAL_GPIO_WritePin>
  delayus(2);
 800068a:	2002      	movs	r0, #2
 800068c:	f7ff ff84 	bl	8000598 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2120      	movs	r1, #32
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <motor_init+0xf4>)
 8000696:	f001 fb33 	bl	8001d00 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <motor_init+0xf8>)
 800069c:	edd3 7a00 	vldr	s15, [r3]
 80006a0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80006cc <motor_init+0xfc>
 80006a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80006d0 <motor_init+0x100>
 80006ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b4:	ee17 3a90 	vmov	r3, s15
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff6c 	bl	8000598 <delayus>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	48000400 	.word	0x48000400
 80006c8:	20000004 	.word	0x20000004
 80006cc:	42480000 	.word	0x42480000
 80006d0:	49742400 	.word	0x49742400

080006d4 <set_speed>:

void set_speed(float new_speed){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	ed87 0a01 	vstr	s0, [r7, #4]
  speed = new_speed;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <set_speed+0x1c>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20000000 	.word	0x20000000

080006f4 <move>:

void move(float x, float y){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80006fe:	edc7 0a00 	vstr	s1, [r7]
  int x_steps = (x - current_x) * X_STEPS_PER_MM;
 8000702:	4b71      	ldr	r3, [pc, #452]	; (80008c8 <move+0x1d4>)
 8000704:	edd3 7a00 	vldr	s15, [r3]
 8000708:	ed97 7a01 	vldr	s14, [r7, #4]
 800070c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000710:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071c:	ee17 3a90 	vmov	r3, s15
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  int y_steps = (y - current_y) * Y_STEPS_PER_MM;
 8000722:	4b6a      	ldr	r3, [pc, #424]	; (80008cc <move+0x1d8>)
 8000724:	edd3 7a00 	vldr	s15, [r3]
 8000728:	ed97 7a00 	vldr	s14, [r7]
 800072c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000730:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800073c:	ee17 3a90 	vmov	r3, s15
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2110      	movs	r1, #16
 8000746:	4862      	ldr	r0, [pc, #392]	; (80008d0 <move+0x1dc>)
 8000748:	f001 fada 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	485f      	ldr	r0, [pc, #380]	; (80008d0 <move+0x1dc>)
 8000754:	f001 fad4 	bl	8001d00 <HAL_GPIO_WritePin>
  if(x_steps < 0){
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	2b00      	cmp	r3, #0
 800075c:	da07      	bge.n	800076e <move+0x7a>
    HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2110      	movs	r1, #16
 8000762:	485b      	ldr	r0, [pc, #364]	; (80008d0 <move+0x1dc>)
 8000764:	f001 facc 	bl	8001d00 <HAL_GPIO_WritePin>
    x_steps *= -1;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	425b      	negs	r3, r3
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if(y_steps < 0){
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da08      	bge.n	8000786 <move+0x92>
    HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077a:	4855      	ldr	r0, [pc, #340]	; (80008d0 <move+0x1dc>)
 800077c:	f001 fac0 	bl	8001d00 <HAL_GPIO_WritePin>
    y_steps *= -1;
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	425b      	negs	r3, r3
 8000784:	623b      	str	r3, [r7, #32]
  }

  int max_steps = x_steps;
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	61fb      	str	r3, [r7, #28]
  if(y_steps > x_steps){
 800078a:	6a3a      	ldr	r2, [r7, #32]
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	429a      	cmp	r2, r3
 8000790:	dd01      	ble.n	8000796 <move+0xa2>
    max_steps = y_steps;
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	61fb      	str	r3, [r7, #28]
  }

  int x_step_ratio = max_steps / x_steps;
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	fb92 f3f3 	sdiv	r3, r2, r3
 800079e:	60fb      	str	r3, [r7, #12]
  int y_step_ratio = max_steps / y_steps;
 80007a0:	69fa      	ldr	r2, [r7, #28]
 80007a2:	6a3b      	ldr	r3, [r7, #32]
 80007a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80007a8:	60bb      	str	r3, [r7, #8]

  int x_taken = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  int y_taken = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < max_steps; i++){
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e04a      	b.n	800084e <move+0x15a>
    if(i % x_step_ratio == 0){
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80007c0:	68f9      	ldr	r1, [r7, #12]
 80007c2:	fb01 f202 	mul.w	r2, r1, r2
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d109      	bne.n	80007e0 <move+0xec>
      HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f001 fa93 	bl	8001d00 <HAL_GPIO_WritePin>
      x_taken++;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	3301      	adds	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
    }
    if(i % y_step_ratio == 0){
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	fb93 f2f2 	sdiv	r2, r3, r2
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	fb01 f202 	mul.w	r2, r1, r2
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d107      	bne.n	8000804 <move+0x110>
      HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2108      	movs	r1, #8
 80007f8:	4835      	ldr	r0, [pc, #212]	; (80008d0 <move+0x1dc>)
 80007fa:	f001 fa81 	bl	8001d00 <HAL_GPIO_WritePin>
      y_taken++;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
    }
    delayus(2);
 8000804:	2002      	movs	r0, #2
 8000806:	f7ff fec7 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f001 fa74 	bl	8001d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2108      	movs	r1, #8
 800081c:	482c      	ldr	r0, [pc, #176]	; (80008d0 <move+0x1dc>)
 800081e:	f001 fa6f 	bl	8001d00 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed)); // 1000000us/1s / (step/mm * mm/s)
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <move+0x1e0>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800082c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000830:	eddf 6a29 	vldr	s13, [pc, #164]	; 80008d8 <move+0x1e4>
 8000834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083c:	ee17 3a90 	vmov	r3, s15
 8000840:	b29b      	uxth	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe9a 	bl	800057c <delayms>
  for(int i = 0; i < max_steps; i++){
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	3301      	adds	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	429a      	cmp	r2, r3
 8000854:	dbb0      	blt.n	80007b8 <move+0xc4>
  }

  while (x_steps > x_taken){
 8000856:	e013      	b.n	8000880 <move+0x18c>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f001 fa4d 	bl	8001d00 <HAL_GPIO_WritePin>
    delayus(2);
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fe96 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f001 fa43 	bl	8001d00 <HAL_GPIO_WritePin>
    x_taken++;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	3301      	adds	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  while (x_steps > x_taken){
 8000880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	429a      	cmp	r2, r3
 8000886:	dce7      	bgt.n	8000858 <move+0x164>
  }
  while (y_steps > y_taken){
 8000888:	e00f      	b.n	80008aa <move+0x1b6>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2108      	movs	r1, #8
 800088e:	4810      	ldr	r0, [pc, #64]	; (80008d0 <move+0x1dc>)
 8000890:	f001 fa36 	bl	8001d00 <HAL_GPIO_WritePin>
    delayus(2);
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff fe7f 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <move+0x1dc>)
 80008a0:	f001 fa2e 	bl	8001d00 <HAL_GPIO_WritePin>
    y_taken++;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3301      	adds	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
  while (y_steps > y_taken){
 80008aa:	6a3a      	ldr	r2, [r7, #32]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dceb      	bgt.n	800088a <move+0x196>
  }
  current_x = x;
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <move+0x1d4>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6013      	str	r3, [r2, #0]
  current_y = y;
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <move+0x1d8>)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	6013      	str	r3, [r2, #0]
}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000009c 	.word	0x2000009c
 80008cc:	200000a0 	.word	0x200000a0
 80008d0:	48000400 	.word	0x48000400
 80008d4:	20000000 	.word	0x20000000
 80008d8:	447a0000 	.word	0x447a0000

080008dc <home>:

void home() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2110      	movs	r1, #16
 80008e4:	4859      	ldr	r0, [pc, #356]	; (8000a4c <home+0x170>)
 80008e6:	f001 fa0b 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f0:	4856      	ldr	r0, [pc, #344]	; (8000a4c <home+0x170>)
 80008f2:	f001 fa05 	bl	8001d00 <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80008f6:	e023      	b.n	8000940 <home+0x64>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f001 f9fd 	bl	8001d00 <HAL_GPIO_WritePin>
    delayus(2);
 8000906:	2002      	movs	r0, #2
 8000908:	f7ff fe46 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f001 f9f3 	bl	8001d00 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 800091a:	4b4d      	ldr	r3, [pc, #308]	; (8000a50 <home+0x174>)
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000924:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000928:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8000a54 <home+0x178>
 800092c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	b29b      	uxth	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe1e 	bl	800057c <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	4845      	ldr	r0, [pc, #276]	; (8000a58 <home+0x17c>)
 8000944:	f001 f9c4 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0d4      	beq.n	80008f8 <home+0x1c>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 800094e:	e01f      	b.n	8000990 <home+0xb4>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2108      	movs	r1, #8
 8000954:	483d      	ldr	r0, [pc, #244]	; (8000a4c <home+0x170>)
 8000956:	f001 f9d3 	bl	8001d00 <HAL_GPIO_WritePin>
    delayus(2);
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff fe1c 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2108      	movs	r1, #8
 8000964:	4839      	ldr	r0, [pc, #228]	; (8000a4c <home+0x170>)
 8000966:	f001 f9cb 	bl	8001d00 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <home+0x174>)
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000974:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000978:	eddf 6a36 	vldr	s13, [pc, #216]	; 8000a54 <home+0x178>
 800097c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000984:	ee17 3a90 	vmov	r3, s15
 8000988:	b29b      	uxth	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fdf6 	bl	800057c <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	482e      	ldr	r0, [pc, #184]	; (8000a4c <home+0x170>)
 8000994:	f001 f99c 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0d8      	beq.n	8000950 <home+0x74>
  }

  current_x = 0;
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <home+0x180>)
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
  current_y = 0;
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <home+0x184>)
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]

  //move away from limit switch by small distance
  move(10,10);
 80009ae:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80009b2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80009b6:	f7ff fe9d 	bl	80006f4 <move>

  //move slow towards limit switch
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2110      	movs	r1, #16
 80009be:	4823      	ldr	r0, [pc, #140]	; (8000a4c <home+0x170>)
 80009c0:	f001 f99e 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ca:	4820      	ldr	r0, [pc, #128]	; (8000a4c <home+0x170>)
 80009cc:	f001 f998 	bl	8001d00 <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80009d0:	e013      	b.n	80009fa <home+0x11e>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f001 f990 	bl	8001d00 <HAL_GPIO_WritePin>
    delayus(2);
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff fdd9 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 f986 	bl	8001d00 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 80009f4:	2005      	movs	r0, #5
 80009f6:	f7ff fdc1 	bl	800057c <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <home+0x17c>)
 80009fe:	f001 f967 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0e4      	beq.n	80009d2 <home+0xf6>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8000a08:	e00f      	b.n	8000a2a <home+0x14e>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <home+0x170>)
 8000a10:	f001 f976 	bl	8001d00 <HAL_GPIO_WritePin>
    delayus(2);
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff fdbf 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <home+0x170>)
 8000a20:	f001 f96e 	bl	8001d00 <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 8000a24:	2005      	movs	r0, #5
 8000a26:	f7ff fda9 	bl	800057c <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <home+0x170>)
 8000a2e:	f001 f94f 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0e8      	beq.n	8000a0a <home+0x12e>
  }

  current_x = 0;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <home+0x180>)
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
  current_y = 0;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <home+0x184>)
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	48000400 	.word	0x48000400
 8000a50:	20000000 	.word	0x20000000
 8000a54:	447a0000 	.word	0x447a0000
 8000a58:	48000800 	.word	0x48000800
 8000a5c:	2000009c 	.word	0x2000009c
 8000a60:	200000a0 	.word	0x200000a0

08000a64 <start_extrusion>:

void start_extrusion(){
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  extrusion_on = true;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <start_extrusion+0x14>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	200000a4 	.word	0x200000a4

08000a7c <stop_extrusion>:

void stop_extrusion(){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  extrusion_on = false;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <stop_extrusion+0x14>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	200000a4 	.word	0x200000a4

08000a94 <extrude>:

void extrude(){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  if(extrusion_on){
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <extrude+0x50>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d01f      	beq.n	8000ae0 <extrude+0x4c>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4810      	ldr	r0, [pc, #64]	; (8000ae8 <extrude+0x54>)
 8000aa6:	f001 f92b 	bl	8001d00 <HAL_GPIO_WritePin>
    delayus(2);
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f7ff fd74 	bl	8000598 <delayus>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <extrude+0x54>)
 8000ab6:	f001 f923 	bl	8001d00 <HAL_GPIO_WritePin>
    delayms(1000 / (Z_STEPS_PER_MM * extrude_speed));
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <extrude+0x58>)
 8000abc:	edd3 7a00 	vldr	s15, [r3]
 8000ac0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000af0 <extrude+0x5c>
 8000ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ac8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000af4 <extrude+0x60>
 8000acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad4:	ee17 3a90 	vmov	r3, s15
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd4e 	bl	800057c <delayms>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000a4 	.word	0x200000a4
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	20000004 	.word	0x20000004
 8000af0:	42480000 	.word	0x42480000
 8000af4:	447a0000 	.word	0x447a0000

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fdf8 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f872 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 f984 	bl	8000e10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b08:	f000 f952 	bl	8000db0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b0c:	f000 f8fc 	bl	8000d08 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000b10:	f000 f8bc 	bl	8000c8c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000b14:	f003 ffcc 	bl	8004ab0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  motor_init();
 8000b18:	f7ff fd5a 	bl	80005d0 <motor_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b1c:	f006 fbf0 	bl	8007300 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &commandQueue_attributes);
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <main+0xa0>)
 8000b22:	2102      	movs	r1, #2
 8000b24:	2010      	movs	r0, #16
 8000b26:	f006 fe25 	bl	8007774 <osMessageQueueNew>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <main+0xa4>)
 8000b2e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <main+0xa8>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <main+0xac>)
 8000b36:	f006 fc2d 	bl	8007394 <osThreadNew>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <main+0xb0>)
 8000b3e:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <main+0xb4>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <main+0xb8>)
 8000b46:	f006 fc25 	bl	8007394 <osThreadNew>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <main+0xbc>)
 8000b4e:	6013      	str	r3, [r2, #0]

  /* creation of parserTask */
  parserTaskHandle = osThreadNew(StartParserTask, NULL, &parserTask_attributes);
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <main+0xc0>)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4819      	ldr	r0, [pc, #100]	; (8000bbc <main+0xc4>)
 8000b56:	f006 fc1d 	bl	8007394 <osThreadNew>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <main+0xc8>)
 8000b5e:	6013      	str	r3, [r2, #0]

  /* creation of menuTask */
  menuTaskHandle = osThreadNew(StartMenuTask, NULL, &menuTask_attributes);
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <main+0xcc>)
 8000b62:	2100      	movs	r1, #0
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <main+0xd0>)
 8000b66:	f006 fc15 	bl	8007394 <osThreadNew>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <main+0xd4>)
 8000b6e:	6013      	str	r3, [r2, #0]

  /* creation of extruderTask */
  extruderTaskHandle = osThreadNew(StartExtruderTask, NULL, &extruderTask_attributes);
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <main+0xd8>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <main+0xdc>)
 8000b76:	f006 fc0d 	bl	8007394 <osThreadNew>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <main+0xe0>)
 8000b7e:	6013      	str	r3, [r2, #0]

  /* creation of SDcardTask */
  sdcardTaskHandle = osThreadNew(StartsdcardTask, NULL, &sdcardTask_attributes);
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <main+0xe4>)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4816      	ldr	r0, [pc, #88]	; (8000be0 <main+0xe8>)
 8000b86:	f006 fc05 	bl	8007394 <osThreadNew>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <main+0xec>)
 8000b8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b90:	f006 fbda 	bl	8007348 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x9c>
 8000b96:	bf00      	nop
 8000b98:	0800b5a4 	.word	0x0800b5a4
 8000b9c:	200001f4 	.word	0x200001f4
 8000ba0:	0800b4f0 	.word	0x0800b4f0
 8000ba4:	08001001 	.word	0x08001001
 8000ba8:	200001e0 	.word	0x200001e0
 8000bac:	0800b514 	.word	0x0800b514
 8000bb0:	08001011 	.word	0x08001011
 8000bb4:	200001e4 	.word	0x200001e4
 8000bb8:	0800b538 	.word	0x0800b538
 8000bbc:	08001075 	.word	0x08001075
 8000bc0:	200001e8 	.word	0x200001e8
 8000bc4:	0800b55c 	.word	0x0800b55c
 8000bc8:	08001085 	.word	0x08001085
 8000bcc:	200001ec 	.word	0x200001ec
 8000bd0:	0800b580 	.word	0x0800b580
 8000bd4:	08001095 	.word	0x08001095
 8000bd8:	200001f0 	.word	0x200001f0
 8000bdc:	0800b5bc 	.word	0x0800b5bc
 8000be0:	080010a3 	.word	0x080010a3
 8000be4:	200001f8 	.word	0x200001f8

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b096      	sub	sp, #88	; 0x58
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2244      	movs	r2, #68	; 0x44
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f009 fee2 	bl	800a9c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c0e:	f001 f89d 	bl	8001d4c <HAL_PWREx_ControlVoltageScaling>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c18:	f000 fa5b 	bl	80010d2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c26:	2310      	movs	r3, #16
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c36:	230a      	movs	r3, #10
 8000c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 f8d4 	bl	8001df8 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c56:	f000 fa3c 	bl	80010d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2104      	movs	r1, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fc9c 	bl	80025b0 <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c7e:	f000 fa28 	bl	80010d2 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3758      	adds	r7, #88	; 0x58
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <MX_SPI1_Init+0x78>)
 8000c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ca6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000caa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cda:	2207      	movs	r2, #7
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cec:	f002 fb72 	bl	80033d4 <HAL_SPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cf6:	f000 f9ec 	bl	80010d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000a8 	.word	0x200000a8
 8000d04:	40013000 	.word	0x40013000

08000d08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d28:	4a20      	ldr	r2, [pc, #128]	; (8000dac <MX_TIM1_Init+0xa4>)
 8000d2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d2e:	224f      	movs	r2, #79	; 0x4f
 8000d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d52:	4815      	ldr	r0, [pc, #84]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d54:	f002 fbe1 	bl	800351a <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d5e:	f000 f9b8 	bl	80010d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d70:	f002 fe2c 	bl	80039cc <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d7a:	f000 f9aa 	bl	80010d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_TIM1_Init+0xa0>)
 8000d90:	f003 f842 	bl	8003e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d9a:	f000 f99a 	bl	80010d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000010c 	.word	0x2000010c
 8000dac:	40012c00 	.word	0x40012c00

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000db6:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <MX_USART2_UART_Init+0x5c>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART2_UART_Init+0x58>)
 8000df4:	f003 f8b6 	bl	8003f64 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dfe:	f000 f968 	bl	80010d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000158 	.word	0x20000158
 8000e0c:	40004400 	.word	0x40004400

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b72      	ldr	r3, [pc, #456]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a71      	ldr	r2, [pc, #452]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b6f      	ldr	r3, [pc, #444]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	4b6c      	ldr	r3, [pc, #432]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a6b      	ldr	r2, [pc, #428]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b69      	ldr	r3, [pc, #420]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b66      	ldr	r3, [pc, #408]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a65      	ldr	r2, [pc, #404]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b63      	ldr	r3, [pc, #396]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b60      	ldr	r3, [pc, #384]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a5f      	ldr	r2, [pc, #380]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b5d      	ldr	r3, [pc, #372]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	4b5a      	ldr	r3, [pc, #360]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a59      	ldr	r2, [pc, #356]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b57      	ldr	r3, [pc, #348]	; (8000ff0 <MX_GPIO_Init+0x1e0>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|X_STEP_Pin
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f249 7101 	movw	r1, #38657	; 0x9701
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f000 ff2a 	bl	8001d00 <HAL_GPIO_WritePin>
                          |SD_CS_Pin|Screen_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Touch_CS_Pin|Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin
 8000eac:	2200      	movs	r2, #0
 8000eae:	f240 41ba 	movw	r1, #1210	; 0x4ba
 8000eb2:	4850      	ldr	r0, [pc, #320]	; (8000ff4 <MX_GPIO_Init+0x1e4>)
 8000eb4:	f000 ff24 	bl	8001d00 <HAL_GPIO_WritePin>
                          |Z_STEP_Pin|Screen_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_RST_GPIO_Port, Screen_RST_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2104      	movs	r1, #4
 8000ebc:	484e      	ldr	r0, [pc, #312]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000ebe:	f000 ff1f 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4848      	ldr	r0, [pc, #288]	; (8000ffc <MX_GPIO_Init+0x1ec>)
 8000eda:	f000 fd4f 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_CS_Pin Z_DIR_Pin ENABLE_Pin SD_CS_Pin
                           Screen_DC_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|SD_CS_Pin
 8000ede:	f249 3301 	movw	r3, #37633	; 0x9301
 8000ee2:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 fd3f 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_CS_Pin Y_DIR_Pin X_DIR_Pin Screen_LED_Pin */
  GPIO_InitStruct.Pin = Touch_CS_Pin|Y_DIR_Pin|X_DIR_Pin|Screen_LED_Pin;
 8000efe:	f240 4392 	movw	r3, #1170	; 0x492
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4837      	ldr	r0, [pc, #220]	; (8000ff4 <MX_GPIO_Init+0x1e4>)
 8000f18:	f000 fd30 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_IRQ_Pin Y_STOP_Pin */
  GPIO_InitStruct.Pin = Touch_IRQ_Pin|Y_STOP_Pin;
 8000f1c:	2344      	movs	r3, #68	; 0x44
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4831      	ldr	r0, [pc, #196]	; (8000ff4 <MX_GPIO_Init+0x1e4>)
 8000f30:	f000 fd24 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_SCK_Pin Touch_MISO_Pin Touch_MOSI_Pin */
  GPIO_InitStruct.Pin = Touch_SCK_Pin|Touch_MISO_Pin|Touch_MOSI_Pin;
 8000f34:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f46:	2305      	movs	r3, #5
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4828      	ldr	r0, [pc, #160]	; (8000ff4 <MX_GPIO_Init+0x1e4>)
 8000f52:	f000 fd13 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STOP_Pin */
  GPIO_InitStruct.Pin = X_STOP_Pin;
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(X_STOP_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4824      	ldr	r0, [pc, #144]	; (8000ffc <MX_GPIO_Init+0x1ec>)
 8000f6a:	f000 fd07 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STEP_Pin */
  GPIO_InitStruct.Pin = X_STEP_Pin;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f000 fcf7 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_SCK_Pin Screen_MISO_Pin Screen_MOSI_Pin */
  GPIO_InitStruct.Pin = Screen_SCK_Pin|Screen_MISO_Pin|Screen_MOSI_Pin;
 8000f8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4814      	ldr	r0, [pc, #80]	; (8000ffc <MX_GPIO_Init+0x1ec>)
 8000fac:	f000 fce6 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_RST_Pin */
  GPIO_InitStruct.Pin = Screen_RST_Pin;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Screen_RST_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000fc8:	f000 fcd8 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_STEP_Pin Z_STEP_Pin */
  GPIO_InitStruct.Pin = Y_STEP_Pin|Z_STEP_Pin;
 8000fcc:	2328      	movs	r3, #40	; 0x28
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_GPIO_Init+0x1e4>)
 8000fe4:	f000 fcca 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000c00 	.word	0x48000c00
 8000ffc:	48000800 	.word	0x48000800

08001000 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f006 fa55 	bl	80074b8 <osDelay>
 800100e:	e7fb      	b.n	8001008 <StartDefaultTask+0x8>

08001010 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
  /* Infinite loop */
  home();
 8001018:	f7ff fc60 	bl	80008dc <home>
  start_extrusion();
 800101c:	f7ff fd22 	bl	8000a64 <start_extrusion>
  move(40,40);
 8001020:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001068 <StartCommandTask+0x58>
 8001024:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001068 <StartCommandTask+0x58>
 8001028:	f7ff fb64 	bl	80006f4 <move>
  osDelay(1000);
 800102c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001030:	f006 fa42 	bl	80074b8 <osDelay>
  stop_extrusion();
 8001034:	f7ff fd22 	bl	8000a7c <stop_extrusion>
  set_speed(100);
 8001038:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800106c <StartCommandTask+0x5c>
 800103c:	f7ff fb4a 	bl	80006d4 <set_speed>
  move(80,80);
 8001040:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001070 <StartCommandTask+0x60>
 8001044:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001070 <StartCommandTask+0x60>
 8001048:	f7ff fb54 	bl	80006f4 <move>
  start_extrusion();
 800104c:	f7ff fd0a 	bl	8000a64 <start_extrusion>
  move(40,40);
 8001050:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001068 <StartCommandTask+0x58>
 8001054:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001068 <StartCommandTask+0x58>
 8001058:	f7ff fb4c 	bl	80006f4 <move>
  stop_extrusion();
 800105c:	f7ff fd0e 	bl	8000a7c <stop_extrusion>
  //reset_extruder();
  for(;;)
  {
    osDelay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f006 fa29 	bl	80074b8 <osDelay>
 8001066:	e7fb      	b.n	8001060 <StartCommandTask+0x50>
 8001068:	42200000 	.word	0x42200000
 800106c:	42c80000 	.word	0x42c80000
 8001070:	42a00000 	.word	0x42a00000

08001074 <StartParserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParserTask */
void StartParserTask(void *argument)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParserTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f006 fa1b 	bl	80074b8 <osDelay>
 8001082:	e7fb      	b.n	800107c <StartParserTask+0x8>

08001084 <StartMenuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMenuTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f006 fa13 	bl	80074b8 <osDelay>
 8001092:	e7fb      	b.n	800108c <StartMenuTask+0x8>

08001094 <StartExtruderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExtruderTask */
void StartExtruderTask(void *argument)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartExtruderTask */
  /* Infinite loop */
  while(true){
    extrude();
 800109c:	f7ff fcfa 	bl	8000a94 <extrude>
 80010a0:	e7fc      	b.n	800109c <StartExtruderTask+0x8>

080010a2 <StartsdcardTask>:
  }
  /* USER CODE END StartExtruderTask */
}

void StartsdcardTask(void *argument)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartExtruderTask */
	OpenFilesystem();
 80010aa:	f000 f83d 	bl	8001128 <OpenFilesystem>
	GCodeEnqueueFromCard();
 80010ae:	f000 f8c1 	bl	8001234 <GCodeEnqueueFromCard>
	  /* USER CODE BEGIN 5 */
	  /* Infinite loop */
	  while(1)
 80010b2:	e7fe      	b.n	80010b2 <StartsdcardTask+0x10>

080010b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c4:	d101      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010c6:	f000 fb33 	bl	8001730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d6:	b672      	cpsid	i
}
 80010d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010da:	e7fe      	b.n	80010da <Error_Handler+0x8>

080010dc <myprintf>:
volatile uint8_t dequeueNumber = 1;
volatile uint8_t queueFlag = 1;
volatile uint8_t isPrinting = 1;

void myprintf(const char *fmt, ...)
{
 80010dc:	b40f      	push	{r0, r1, r2, r3}
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <myprintf+0x44>)
 80010f4:	f009 fc56 	bl	800a9a4 <vsniprintf>
  va_end(args);
  int len = strlen(buffer);
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <myprintf+0x44>)
 80010fa:	f7ff f869 	bl	80001d0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	b29a      	uxth	r2, r3
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	4905      	ldr	r1, [pc, #20]	; (8001120 <myprintf+0x44>)
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <myprintf+0x48>)
 800110e:	f002 ff77 	bl	8004000 <HAL_UART_Transmit>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr
 8001120:	20007b98 	.word	0x20007b98
 8001124:	20000158 	.word	0x20000158

08001128 <OpenFilesystem>:
void OpenFilesystem(void)
  {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800112e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001132:	f000 fb1d 	bl	8001770 <HAL_Delay>
  	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001136:	2201      	movs	r2, #1
 8001138:	491f      	ldr	r1, [pc, #124]	; (80011b8 <OpenFilesystem+0x90>)
 800113a:	4820      	ldr	r0, [pc, #128]	; (80011bc <OpenFilesystem+0x94>)
 800113c:	f005 fab2 	bl	80066a4 <f_mount>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <OpenFilesystem+0x98>)
 8001146:	701a      	strb	r2, [r3, #0]
  	  if (fres != FR_OK)
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <OpenFilesystem+0x98>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <OpenFilesystem+0x30>
  	  {
  		osDelay(50);
 8001150:	2032      	movs	r0, #50	; 0x32
 8001152:	f006 f9b1 	bl	80074b8 <osDelay>
  		while(1);
 8001156:	e7fe      	b.n	8001156 <OpenFilesystem+0x2e>
  	  //Let's get some statistics from the SD card
  	  DWORD free_clusters, free_sectors, total_sectors;

  	  FATFS* getFreeFs;

  	  fres = f_getfree("", &free_clusters, &getFreeFs);
 8001158:	463a      	mov	r2, r7
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4816      	ldr	r0, [pc, #88]	; (80011b8 <OpenFilesystem+0x90>)
 8001160:	f005 feef 	bl	8006f42 <f_getfree>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <OpenFilesystem+0x98>)
 800116a:	701a      	strb	r2, [r3, #0]
  	  if (fres != FR_OK) {
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <OpenFilesystem+0x98>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <OpenFilesystem+0x5a>
  		myprintf("f_getfree error (%i)\r\n", fres);
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <OpenFilesystem+0x98>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <OpenFilesystem+0x9c>)
 800117c:	f7ff ffae 	bl	80010dc <myprintf>
  		while(1);
 8001180:	e7fe      	b.n	8001180 <OpenFilesystem+0x58>
  	  }

  	  //Formula comes from ChaN's documentation
  	  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	3b02      	subs	r3, #2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	8952      	ldrh	r2, [r2, #10]
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	60fb      	str	r3, [r7, #12]
  	  free_sectors = free_clusters * getFreeFs->csize;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	895b      	ldrh	r3, [r3, #10]
 8001196:	461a      	mov	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	60bb      	str	r3, [r7, #8]

  	  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	0859      	lsrs	r1, r3, #1
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	085b      	lsrs	r3, r3, #1
 80011a8:	461a      	mov	r2, r3
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <OpenFilesystem+0xa0>)
 80011ac:	f7ff ff96 	bl	80010dc <myprintf>

  }
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	0800b364 	.word	0x0800b364
 80011bc:	200001fc 	.word	0x200001fc
 80011c0:	20000660 	.word	0x20000660
 80011c4:	0800b368 	.word	0x0800b368
 80011c8:	0800b380 	.word	0x0800b380

080011cc <Enqueue>:
        osDelay(500);
		}

}
void Enqueue(const char* line)// add gcode lines from the test.txt files to the queue.
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    // Add the line to the queue
    strncpy((char*)queue[queueRear], line, sizeof(queue[queueRear]));
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <Enqueue+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	4613      	mov	r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4a10      	ldr	r2, [pc, #64]	; (8001228 <Enqueue+0x5c>)
 80011e6:	4413      	add	r3, r2
 80011e8:	223c      	movs	r2, #60	; 0x3c
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f009 fbef 	bl	800a9d0 <strncpy>
    queueRear = (queueRear + 1) % QUEUE_SIZE;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <Enqueue+0x58>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <Enqueue+0x60>)
 80011fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001200:	1151      	asrs	r1, r2, #5
 8001202:	17da      	asrs	r2, r3, #31
 8001204:	1a8a      	subs	r2, r1, r2
 8001206:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800120a:	fb01 f202 	mul.w	r2, r1, r2
 800120e:	1a9a      	subs	r2, r3, r2
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <Enqueue+0x58>)
 8001214:	701a      	strb	r2, [r3, #0]
    queueFlag = 1;  // Set the flag to indicate there's something in the queue
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <Enqueue+0x64>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20007b94 	.word	0x20007b94
 8001228:	20000664 	.word	0x20000664
 800122c:	10624dd3 	.word	0x10624dd3
 8001230:	20000009 	.word	0x20000009

08001234 <GCodeEnqueueFromCard>:

        }
    }
}
void GCodeEnqueueFromCard(void)// will add all the lines from test.txt file to the queueue, so they can m=be read and dequeued once they are printed.
  {
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
	myprintf("Starting Queues.\r\n");
 800123a:	482b      	ldr	r0, [pc, #172]	; (80012e8 <GCodeEnqueueFromCard+0xb4>)
 800123c:	f7ff ff4e 	bl	80010dc <myprintf>
	HAL_Delay(2000);
 8001240:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001244:	f000 fa94 	bl	8001770 <HAL_Delay>
  	fres = f_open(&fil, "test.txt", FA_READ);
 8001248:	2201      	movs	r2, #1
 800124a:	4928      	ldr	r1, [pc, #160]	; (80012ec <GCodeEnqueueFromCard+0xb8>)
 800124c:	4828      	ldr	r0, [pc, #160]	; (80012f0 <GCodeEnqueueFromCard+0xbc>)
 800124e:	f005 fa8d 	bl	800676c <f_open>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <GCodeEnqueueFromCard+0xc0>)
 8001258:	701a      	strb	r2, [r3, #0]
  	  if (fres != FR_OK) {
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <GCodeEnqueueFromCard+0xc0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <GCodeEnqueueFromCard+0x3c>
  	      myprintf("f_open error (%i)\r\n", fres);
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <GCodeEnqueueFromCard+0xc0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	4823      	ldr	r0, [pc, #140]	; (80012f8 <GCodeEnqueueFromCard+0xc4>)
 800126a:	f7ff ff37 	bl	80010dc <myprintf>
  	      while (1);
 800126e:	e7fe      	b.n	800126e <GCodeEnqueueFromCard+0x3a>
  	  }
  	  myprintf("Reading from 'test.txt'\r\n");
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <GCodeEnqueueFromCard+0xc8>)
 8001272:	f7ff ff33 	bl	80010dc <myprintf>
  	  TCHAR* rres;

  	  while (1) {


  	      rres = f_gets((TCHAR*)readBuf, sizeof(readBuf), &fil);
 8001276:	463b      	mov	r3, r7
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <GCodeEnqueueFromCard+0xbc>)
 800127a:	2132      	movs	r1, #50	; 0x32
 800127c:	4618      	mov	r0, r3
 800127e:	f005 ff1c 	bl	80070ba <f_gets>
 8001282:	6378      	str	r0, [r7, #52]	; 0x34

  	      // Check if a line was successfully read
  	      if (rres != 0) {
 8001284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001286:	2b00      	cmp	r3, #0
 8001288:	d014      	beq.n	80012b4 <GCodeEnqueueFromCard+0x80>

  	          // Add the line to the queue
  	          Enqueue((const char*)readBuf);
 800128a:	463b      	mov	r3, r7
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff9d 	bl	80011cc <Enqueue>
  	          myprintf("Enqueued Gcode Line %lu: %s\r", lineNumber, readBuf);
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <GCodeEnqueueFromCard+0xcc>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	463b      	mov	r3, r7
 800129c:	461a      	mov	r2, r3
 800129e:	4819      	ldr	r0, [pc, #100]	; (8001304 <GCodeEnqueueFromCard+0xd0>)
 80012a0:	f7ff ff1c 	bl	80010dc <myprintf>

  	          // Optionally, introduce a delay before reading the next line
  	          lineNumber++;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <GCodeEnqueueFromCard+0xcc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <GCodeEnqueueFromCard+0xcc>)
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e7e0      	b.n	8001276 <GCodeEnqueueFromCard+0x42>
  	      } else {
  	          // If we reach the end of the file, break out of the loop
  	          if (f_eof(&fil)) {
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <GCodeEnqueueFromCard+0xbc>)
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <GCodeEnqueueFromCard+0xbc>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d106      	bne.n	80012ce <GCodeEnqueueFromCard+0x9a>
  	        	  lineNumber=1;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <GCodeEnqueueFromCard+0xcc>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
  	        	  myprintf("Finished Enqueing");
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <GCodeEnqueueFromCard+0xd4>)
 80012c8:	f7ff ff08 	bl	80010dc <myprintf>
  	              break;
 80012cc:	e005      	b.n	80012da <GCodeEnqueueFromCard+0xa6>
  	          } else {
  	              myprintf("f_gets error (%i)\r\n", fres);
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <GCodeEnqueueFromCard+0xc0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <GCodeEnqueueFromCard+0xd8>)
 80012d6:	f7ff ff01 	bl	80010dc <myprintf>
  	          }
  	      }
  	  }

  	  //Be a tidy kiwi - don't forget to close your file!
  	  f_close(&fil);
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <GCodeEnqueueFromCard+0xbc>)
 80012dc:	f005 fe02 	bl	8006ee4 <f_close>


  }
 80012e0:	bf00      	nop
 80012e2:	3738      	adds	r7, #56	; 0x38
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	0800b3fc 	.word	0x0800b3fc
 80012ec:	0800b410 	.word	0x0800b410
 80012f0:	20000430 	.word	0x20000430
 80012f4:	20000660 	.word	0x20000660
 80012f8:	0800b41c 	.word	0x0800b41c
 80012fc:	0800b430 	.word	0x0800b430
 8001300:	20000008 	.word	0x20000008
 8001304:	0800b44c 	.word	0x0800b44c
 8001308:	0800b46c 	.word	0x0800b46c
 800130c:	0800b480 	.word	0x0800b480

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_MspInit+0x4c>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6613      	str	r3, [r2, #96]	; 0x60
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_MspInit+0x4c>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_MspInit+0x4c>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6593      	str	r3, [r2, #88]	; 0x58
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	210f      	movs	r1, #15
 800134a:	f06f 0001 	mvn.w	r0, #1
 800134e:	f000 faeb 	bl	8001928 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_SPI_MspInit+0x7c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d128      	bne.n	80013d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_SPI_MspInit+0x80>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <HAL_SPI_MspInit+0x80>)
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_SPI_MspInit+0x80>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_SPI_MspInit+0x80>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_SPI_MspInit+0x80>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_SPI_MspInit+0x80>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80013b2:	23e0      	movs	r3, #224	; 0xe0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c2:	2305      	movs	r3, #5
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f000 fad4 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_TIM_Base_MspInit+0x38>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10b      	bne.n	800140e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_TIM_Base_MspInit+0x3c>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_TIM_Base_MspInit+0x3c>)
 80013fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001400:	6613      	str	r3, [r2, #96]	; 0x60
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_TIM_Base_MspInit+0x3c>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40012c00 	.word	0x40012c00
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0ac      	sub	sp, #176	; 0xb0
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2288      	movs	r2, #136	; 0x88
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f009 fabb 	bl	800a9c0 <memset>
  if(huart->Instance==USART2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_UART_MspInit+0xb0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d13b      	bne.n	80014cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fafb 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f7ff fe31 	bl	80010d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 8001476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014a0:	230c      	movs	r3, #12
 80014a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b8:	2307      	movs	r3, #7
 80014ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f000 fa58 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	37b0      	adds	r7, #176	; 0xb0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <HAL_InitTick+0xe0>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <HAL_InitTick+0xe0>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_InitTick+0xe0>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001502:	f107 0210 	add.w	r2, r7, #16
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fa13 	bl	8002938 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800151c:	f001 f9e0 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8001520:	6378      	str	r0, [r7, #52]	; 0x34
 8001522:	e004      	b.n	800152e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001524:	f001 f9dc 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8001528:	4603      	mov	r3, r0
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <HAL_InitTick+0xe4>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3b01      	subs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_InitTick+0xe8>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_InitTick+0xe8>)
 8001546:	f240 32e7 	movw	r2, #999	; 0x3e7
 800154a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_InitTick+0xe8>)
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_InitTick+0xe8>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_InitTick+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_InitTick+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001564:	4817      	ldr	r0, [pc, #92]	; (80015c4 <HAL_InitTick+0xe8>)
 8001566:	f001 ffd8 	bl	800351a <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11b      	bne.n	80015b0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <HAL_InitTick+0xe8>)
 800157a:	f002 f8b5 	bl	80036e8 <HAL_TIM_Base_Start_IT>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001584:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800158c:	201c      	movs	r0, #28
 800158e:	f000 f9e7 	bl	8001960 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d808      	bhi.n	80015aa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	201c      	movs	r0, #28
 800159e:	f000 f9c3 	bl	8001928 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_InitTick+0xec>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e002      	b.n	80015b0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	20007c98 	.word	0x20007c98
 80015c8:	20000010 	.word	0x20000010

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <TIM2_IRQHandler+0x10>)
 80015fe:	f002 f8e3 	bl	80037c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20007c98 	.word	0x20007c98

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f009 f9dc 	bl	800a9f8 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20018000 	.word	0x20018000
 800166c:	00000400 	.word	0x00000400
 8001670:	20007ce4 	.word	0x20007ce4
 8001674:	20009f48 	.word	0x20009f48

08001678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a0:	f7ff ffea 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	; (80016dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <LoopForever+0xe>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	; (80016e8 <LoopForever+0x16>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f009 f99b 	bl	800aa04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ce:	f7ff fa13 	bl	8000af8 <main>

080016d2 <LoopForever>:

LoopForever:
    b LoopForever
 80016d2:	e7fe      	b.n	80016d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80016e0:	0800b6ec 	.word	0x0800b6ec
  ldr r2, =_sbss
 80016e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80016e8:	20009f48 	.word	0x20009f48

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_Init+0x3c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_Init+0x3c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001706:	2003      	movs	r0, #3
 8001708:	f000 f903 	bl	8001912 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170c:	200f      	movs	r0, #15
 800170e:	f7ff fee5 	bl	80014dc <HAL_InitTick>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	e001      	b.n	8001722 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171e:	f7ff fdf7 	bl	8001310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001722:	79fb      	ldrb	r3, [r7, #7]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000014 	.word	0x20000014
 8001754:	20007ce8 	.word	0x20007ce8

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20007ce8 	.word	0x20007ce8

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000014 	.word	0x20000014

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff4c 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800193a:	f7ff ff61 	bl	8001800 <__NVIC_GetPriorityGrouping>
 800193e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7ff ffb1 	bl	80018ac <NVIC_EncodePriority>
 800194a:	4602      	mov	r2, r0
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff80 	bl	8001858 <__NVIC_SetPriority>
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff54 	bl	800181c <__NVIC_EnableIRQ>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e17f      	b.n	8001c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8171 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d005      	beq.n	80019bc <HAL_GPIO_Init+0x40>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d130      	bne.n	8001a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019f2:	2201      	movs	r2, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 0201 	and.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d118      	bne.n	8001a5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d017      	beq.n	8001a98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	6939      	ldr	r1, [r7, #16]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80ac 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	4a5e      	ldr	r2, [pc, #376]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3a:	4b5c      	ldr	r3, [pc, #368]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b46:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b70:	d025      	beq.n	8001bbe <HAL_GPIO_Init+0x242>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x338>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_GPIO_Init+0x33c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_GPIO_Init+0x340>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_GPIO_Init+0x344>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_GPIO_Init+0x348>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x22a>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00c      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00a      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd0:	4937      	ldr	r1, [pc, #220]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c02:	4a32      	ldr	r2, [pc, #200]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f ae78 	bne.w	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48000c00 	.word	0x48000c00
 8001cc0:	48001000 	.word	0x48001000
 8001cc4:	48001400 	.word	0x48001400
 8001cc8:	48001800 	.word	0x48001800
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40007000 	.word	0x40007000

08001d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d5a:	d130      	bne.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d68:	d038      	beq.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d72:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2232      	movs	r2, #50	; 0x32
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0c9b      	lsrs	r3, r3, #18
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d90:	e002      	b.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da4:	d102      	bne.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x60>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f2      	bne.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d110      	bne.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e00f      	b.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dca:	d007      	beq.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd4:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40007000 	.word	0x40007000
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e3ca      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0a:	4b97      	ldr	r3, [pc, #604]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e14:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80e4 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4a>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	f040 808b 	bne.w	8001f50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	f040 8087 	bne.w	8001f50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x62>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e3a2      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1a      	ldr	r2, [r3, #32]
 8001e5e:	4b82      	ldr	r3, [pc, #520]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <HAL_RCC_OscConfig+0x7c>
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e72:	e005      	b.n	8001e80 <HAL_RCC_OscConfig+0x88>
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d223      	bcs.n	8001ecc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fd87 	bl	800299c <RCC_SetFlashLatencyFromMSIRange>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e383      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e98:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a72      	ldr	r2, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b70      	ldr	r3, [pc, #448]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	496d      	ldr	r1, [pc, #436]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb6:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	4968      	ldr	r1, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
 8001eca:	e025      	b.n	8001f18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4960      	ldr	r1, [pc, #384]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	495b      	ldr	r1, [pc, #364]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fd47 	bl	800299c <RCC_SetFlashLatencyFromMSIRange>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e343      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f18:	f000 fc4a 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b52      	ldr	r3, [pc, #328]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	4950      	ldr	r1, [pc, #320]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_RCC_OscConfig+0x278>)
 8001f36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f38:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff facd 	bl	80014dc <HAL_InitTick>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d052      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	e327      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d032      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a42      	ldr	r2, [pc, #264]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fbf8 	bl	8001758 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fbf4 	bl	8001758 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e310      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8a:	4b37      	ldr	r3, [pc, #220]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a36      	ldr	r2, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4931      	ldr	r1, [pc, #196]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	492c      	ldr	r1, [pc, #176]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
 8001fbc:	e01a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a29      	ldr	r2, [pc, #164]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fbc5 	bl	8001758 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd2:	f7ff fbc1 	bl	8001758 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e2dd      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x1da>
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ff2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d074      	beq.n	80020ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b08      	cmp	r3, #8
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x21a>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d10e      	bne.n	800202a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d10b      	bne.n	800202a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d064      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d160      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e2ba      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x24a>
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e026      	b.n	8002090 <HAL_RCC_OscConfig+0x298>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800204a:	d115      	bne.n	8002078 <HAL_RCC_OscConfig+0x280>
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a05      	ldr	r2, [pc, #20]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8002052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a02      	ldr	r2, [pc, #8]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x298>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	0800b5e0 	.word	0x0800b5e0
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000010 	.word	0x20000010
 8002078:	4ba0      	ldr	r3, [pc, #640]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a9f      	ldr	r2, [pc, #636]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800207e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b9d      	ldr	r3, [pc, #628]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a9c      	ldr	r2, [pc, #624]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800208a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff fb5e 	bl	8001758 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff fb5a 	bl	8001758 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e276      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b2:	4b92      	ldr	r3, [pc, #584]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x2a8>
 80020be:	e014      	b.n	80020ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff fb4a 	bl	8001758 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff fb46 	bl	8001758 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e262      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x2d0>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d060      	beq.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x310>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d119      	bne.n	8002136 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d116      	bne.n	8002136 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002108:	4b7c      	ldr	r3, [pc, #496]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_OscConfig+0x328>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e23f      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b76      	ldr	r3, [pc, #472]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	4973      	ldr	r1, [pc, #460]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002134:	e040      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d023      	beq.n	8002186 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213e:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff fb05 	bl	8001758 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff fb01 	bl	8001758 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e21d      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002164:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	061b      	lsls	r3, r3, #24
 800217e:	495f      	ldr	r1, [pc, #380]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
 8002184:	e018      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a5c      	ldr	r2, [pc, #368]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800218c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff fae1 	bl	8001758 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff fadd 	bl	8001758 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1f9      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d03c      	beq.n	800223e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021cc:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d2:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7ff fabc 	bl	8001758 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff fab8 	bl	8001758 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1d4      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ef      	beq.n	80021e4 <HAL_RCC_OscConfig+0x3ec>
 8002204:	e01b      	b.n	800223e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220c:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7ff fa9f 	bl	8001758 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221e:	f7ff fa9b 	bl	8001758 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1b7      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ef      	bne.n	800221e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80a6 	beq.w	8002398 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10d      	bne.n	8002278 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 8002262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002266:	6593      	str	r3, [r2, #88]	; 0x58
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002274:	2301      	movs	r3, #1
 8002276:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_RCC_OscConfig+0x508>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d118      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002284:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_RCC_OscConfig+0x508>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0x508>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002290:	f7ff fa62 	bl	8001758 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002298:	f7ff fa5e 	bl	8001758 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e17a      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_RCC_OscConfig+0x508>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d108      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4d8>
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ce:	e029      	b.n	8002324 <HAL_RCC_OscConfig+0x52c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d115      	bne.n	8002304 <HAL_RCC_OscConfig+0x50c>
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ee:	4a03      	ldr	r2, [pc, #12]	; (80022fc <HAL_RCC_OscConfig+0x504>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f8:	e014      	b.n	8002324 <HAL_RCC_OscConfig+0x52c>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
 8002304:	4b9c      	ldr	r3, [pc, #624]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a9b      	ldr	r2, [pc, #620]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002314:	4b98      	ldr	r3, [pc, #608]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a97      	ldr	r2, [pc, #604]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d016      	beq.n	800235a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7ff fa14 	bl	8001758 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7ff fa10 	bl	8001758 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e12a      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234a:	4b8b      	ldr	r3, [pc, #556]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ed      	beq.n	8002334 <HAL_RCC_OscConfig+0x53c>
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7ff f9fd 	bl	8001758 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff f9f9 	bl	8001758 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e113      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002378:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1ed      	bne.n	8002362 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238c:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a79      	ldr	r2, [pc, #484]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80fe 	beq.w	800259e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	f040 80d0 	bne.w	800254c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023ac:	4b72      	ldr	r3, [pc, #456]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d130      	bne.n	8002422 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	3b01      	subs	r3, #1
 80023cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d127      	bne.n	8002422 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d11f      	bne.n	8002422 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023ec:	2a07      	cmp	r2, #7
 80023ee:	bf14      	ite	ne
 80023f0:	2201      	movne	r2, #1
 80023f2:	2200      	moveq	r2, #0
 80023f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d113      	bne.n	8002422 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	3b01      	subs	r3, #1
 8002408:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d109      	bne.n	8002422 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d06e      	beq.n	8002500 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d069      	beq.n	80024fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0ad      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a4b      	ldr	r2, [pc, #300]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800244a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002450:	f7ff f982 	bl	8001758 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f97e 	bl	8001758 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e09a      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246a:	4b43      	ldr	r3, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	4b40      	ldr	r3, [pc, #256]	; (800257c <HAL_RCC_OscConfig+0x784>)
 800247c:	4013      	ands	r3, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002486:	3a01      	subs	r2, #1
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002490:	0212      	lsls	r2, r2, #8
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	3a01      	subs	r2, #1
 800249c:	0552      	lsls	r2, r2, #21
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0652      	lsls	r2, r2, #25
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b0:	0912      	lsrs	r2, r2, #4
 80024b2:	0452      	lsls	r2, r2, #17
 80024b4:	430a      	orrs	r2, r1
 80024b6:	4930      	ldr	r1, [pc, #192]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024bc:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2d      	ldr	r2, [pc, #180]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024d4:	f7ff f940 	bl	8001758 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7ff f93c 	bl	8001758 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e058      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024fa:	e050      	b.n	800259e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e04f      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d148      	bne.n	800259e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 800251e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002522:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002524:	f7ff f918 	bl	8001758 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff f914 	bl	8001758 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e030      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x734>
 800254a:	e028      	b.n	800259e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d023      	beq.n	800259a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <HAL_RCC_OscConfig+0x780>)
 8002558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7ff f8fb 	bl	8001758 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002564:	e00c      	b.n	8002580 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff f8f7 	bl	8001758 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d905      	bls.n	8002580 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e013      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
 8002578:	40021000 	.word	0x40021000
 800257c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_OscConfig+0x7b0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ec      	bne.n	8002566 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x7b0>)
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	4905      	ldr	r1, [pc, #20]	; (80025a8 <HAL_RCC_OscConfig+0x7b0>)
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_OscConfig+0x7b4>)
 8002594:	4013      	ands	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
 8002598:	e001      	b.n	800259e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	feeefffc 	.word	0xfeeefffc

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0e7      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b72      	ldr	r3, [pc, #456]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4970      	ldr	r1, [pc, #448]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b6e      	ldr	r3, [pc, #440]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0cf      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260c:	429a      	cmp	r2, r3
 800260e:	d908      	bls.n	8002622 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4960      	ldr	r1, [pc, #384]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d04c      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	4b5a      	ldr	r3, [pc, #360]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d121      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0a6      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264e:	4b54      	ldr	r3, [pc, #336]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d115      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e09a      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002666:	4b4e      	ldr	r3, [pc, #312]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e08e      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e086      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4943      	ldr	r1, [pc, #268]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7ff f85e 	bl	8001758 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7ff f85a 	bl	8001758 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e06e      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d208      	bcs.n	80026f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	492b      	ldr	r1, [pc, #172]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d210      	bcs.n	8002726 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 0207 	bic.w	r2, r3, #7
 800270c:	4923      	ldr	r1, [pc, #140]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_RCC_ClockConfig+0x1ec>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e036      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4918      	ldr	r1, [pc, #96]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4910      	ldr	r1, [pc, #64]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002764:	f000 f824 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	490b      	ldr	r1, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002782:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1fc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fea7 	bl	80014dc <HAL_InitTick>
 800278e:	4603      	mov	r3, r0
 8002790:	72fb      	strb	r3, [r7, #11]

  return status;
 8002792:	7afb      	ldrb	r3, [r7, #11]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40022000 	.word	0x40022000
 80027a0:	40021000 	.word	0x40021000
 80027a4:	0800b5e0 	.word	0x0800b5e0
 80027a8:	2000000c 	.word	0x2000000c
 80027ac:	20000010 	.word	0x20000010

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027be:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x34>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d121      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d11e      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027f0:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e005      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800280c:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10d      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	e004      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d101      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002836:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d134      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0xa6>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d003      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0xac>
 8002854:	e005      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002858:	617b      	str	r3, [r7, #20]
      break;
 800285a:	e005      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800285e:	617b      	str	r3, [r7, #20]
      break;
 8002860:	e002      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	617b      	str	r3, [r7, #20]
      break;
 8002866:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	3301      	adds	r3, #1
 8002874:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	fb03 f202 	mul.w	r2, r3, r2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	0e5b      	lsrs	r3, r3, #25
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	3301      	adds	r3, #1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028a8:	69bb      	ldr	r3, [r7, #24]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	0800b5f8 	.word	0x0800b5f8
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	007a1200 	.word	0x007a1200

080028c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000000c 	.word	0x2000000c

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028e4:	f7ff fff0 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4904      	ldr	r1, [pc, #16]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	0800b5f0 	.word	0x0800b5f0

0800290c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002910:	f7ff ffda 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	0adb      	lsrs	r3, r3, #11
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4904      	ldr	r1, [pc, #16]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	0800b5f0 	.word	0x0800b5f0

08002938 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	220f      	movs	r2, #15
 8002946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_RCC_GetClockConfig+0x60>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	40022000 	.word	0x40022000

0800299c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a8:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029b4:	f7ff f9bc 	bl	8001d30 <HAL_PWREx_GetVoltageRange>
 80029b8:	6178      	str	r0, [r7, #20]
 80029ba:	e014      	b.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029d4:	f7ff f9ac 	bl	8001d30 <HAL_PWREx_GetVoltageRange>
 80029d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ec:	d10b      	bne.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b80      	cmp	r3, #128	; 0x80
 80029f2:	d919      	bls.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2ba0      	cmp	r3, #160	; 0xa0
 80029f8:	d902      	bls.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029fa:	2302      	movs	r3, #2
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	e013      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a00:	2301      	movs	r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e010      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d902      	bls.n	8002a12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	e00a      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d102      	bne.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a18:	2302      	movs	r3, #2
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	e004      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b70      	cmp	r3, #112	; 0x70
 8002a22:	d101      	bne.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a24:	2301      	movs	r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 0207 	bic.w	r2, r3, #7
 8002a30:	4909      	ldr	r1, [pc, #36]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40022000 	.word	0x40022000

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a64:	2300      	movs	r3, #0
 8002a66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a68:	2300      	movs	r3, #0
 8002a6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d041      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a80:	d02a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a86:	d824      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a92:	d81e      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9c:	d010      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a9e:	e018      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aa0:	4b86      	ldr	r3, [pc, #536]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a85      	ldr	r2, [pc, #532]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aac:	e015      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fabb 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002abe:	e00c      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3320      	adds	r3, #32
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fba6 	bl	8003218 <RCCEx_PLLSAI2_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad0:	e003      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ad6:	e000      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae0:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aee:	4973      	ldr	r1, [pc, #460]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002af6:	e001      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d041      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b10:	d02a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b16:	d824      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b22:	d81e      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d010      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b2e:	e018      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b30:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a61      	ldr	r2, [pc, #388]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b3c:	e015      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fa73 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b4e:	e00c      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3320      	adds	r3, #32
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fb5e 	bl	8003218 <RCCEx_PLLSAI2_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b60:	e003      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	74fb      	strb	r3, [r7, #19]
      break;
 8002b66:	e000      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b70:	4b52      	ldr	r3, [pc, #328]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7e:	494f      	ldr	r1, [pc, #316]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b86:	e001      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a0 	beq.w	8002cda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	4a40      	ldr	r2, [pc, #256]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc0:	4b3e      	ldr	r3, [pc, #248]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd0:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fdbc 	bl	8001758 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002be2:	e009      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be4:	f7fe fdb8 	bl	8001758 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	74fb      	strb	r3, [r7, #19]
        break;
 8002bf6:	e005      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ef      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d15c      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01f      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d019      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c54:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe fd77 	bl	8001758 <HAL_GetTick>
 8002c6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fd73 	bl	8001758 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d902      	bls.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	74fb      	strb	r3, [r7, #19]
            break;
 8002c84:	e006      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ec      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002caa:	4904      	ldr	r1, [pc, #16]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cb2:	e009      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
 8002cb8:	e006      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc8:	7c7b      	ldrb	r3, [r7, #17]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b9e      	ldr	r3, [pc, #632]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	4a9d      	ldr	r2, [pc, #628]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce6:	4b98      	ldr	r3, [pc, #608]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f023 0203 	bic.w	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	4994      	ldr	r1, [pc, #592]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d08:	4b8f      	ldr	r3, [pc, #572]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f023 020c 	bic.w	r2, r3, #12
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	498c      	ldr	r1, [pc, #560]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d2a:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4983      	ldr	r1, [pc, #524]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	497b      	ldr	r1, [pc, #492]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	4972      	ldr	r1, [pc, #456]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d90:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	496a      	ldr	r1, [pc, #424]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	4961      	ldr	r1, [pc, #388]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dd4:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de2:	4959      	ldr	r1, [pc, #356]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df6:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	4950      	ldr	r1, [pc, #320]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	4948      	ldr	r1, [pc, #288]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	493f      	ldr	r1, [pc, #252]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d028      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6a:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e7c:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e86:	60d3      	str	r3, [r2, #12]
 8002e88:	e011      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e92:	d10c      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f8c8 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	491f      	ldr	r1, [pc, #124]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee4:	60d3      	str	r3, [r2, #12]
 8002ee6:	e011      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f899 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d02b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	4908      	ldr	r1, [pc, #32]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f36:	d109      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a02      	ldr	r2, [pc, #8]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f42:	60d3      	str	r3, [r2, #12]
 8002f44:	e014      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f867 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d02f      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8a:	4928      	ldr	r1, [pc, #160]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f844 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d014      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	74bb      	strb	r3, [r7, #18]
 8002fb6:	e011      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3320      	adds	r3, #32
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f925 	bl	8003218 <RCCEx_PLLSAI2_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff6:	490d      	ldr	r1, [pc, #52]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301a:	4904      	ldr	r1, [pc, #16]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003022:	7cbb      	ldrb	r3, [r7, #18]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000

08003030 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303e:	4b75      	ldr	r3, [pc, #468]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800304a:	4b72      	ldr	r3, [pc, #456]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d10d      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
       ||
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003062:	4b6c      	ldr	r3, [pc, #432]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
       ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d047      	beq.n	8003106 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e044      	b.n	8003106 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d018      	beq.n	80030b6 <RCCEx_PLLSAI1_Config+0x86>
 8003084:	2b03      	cmp	r3, #3
 8003086:	d825      	bhi.n	80030d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003088:	2b01      	cmp	r3, #1
 800308a:	d002      	beq.n	8003092 <RCCEx_PLLSAI1_Config+0x62>
 800308c:	2b02      	cmp	r3, #2
 800308e:	d009      	beq.n	80030a4 <RCCEx_PLLSAI1_Config+0x74>
 8003090:	e020      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003092:	4b60      	ldr	r3, [pc, #384]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11d      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a2:	e01a      	b.n	80030da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a4:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b4:	e013      	b.n	80030de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030b6:	4b57      	ldr	r3, [pc, #348]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030c2:	4b54      	ldr	r3, [pc, #336]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030d2:	e006      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      break;
 80030d8:	e004      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030da:	bf00      	nop
 80030dc:	e002      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10d      	bne.n	8003106 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ea:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	430b      	orrs	r3, r1
 8003100:	4944      	ldr	r1, [pc, #272]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d17d      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a40      	ldr	r2, [pc, #256]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fe fb1e 	bl	8001758 <HAL_GetTick>
 800311c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800311e:	e009      	b.n	8003134 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003120:	f7fe fb1a 	bl	8001758 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	73fb      	strb	r3, [r7, #15]
        break;
 8003132:	e005      	b.n	8003140 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003134:	4b37      	ldr	r3, [pc, #220]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ef      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d160      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800314c:	4b31      	ldr	r3, [pc, #196]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6892      	ldr	r2, [r2, #8]
 800315c:	0211      	lsls	r1, r2, #8
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	0912      	lsrs	r2, r2, #4
 8003164:	0452      	lsls	r2, r2, #17
 8003166:	430a      	orrs	r2, r1
 8003168:	492a      	ldr	r1, [pc, #168]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316a:	4313      	orrs	r3, r2
 800316c:	610b      	str	r3, [r1, #16]
 800316e:	e027      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d112      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003176:	4b27      	ldr	r3, [pc, #156]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800317e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6892      	ldr	r2, [r2, #8]
 8003186:	0211      	lsls	r1, r2, #8
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6912      	ldr	r2, [r2, #16]
 800318c:	0852      	lsrs	r2, r2, #1
 800318e:	3a01      	subs	r2, #1
 8003190:	0552      	lsls	r2, r2, #21
 8003192:	430a      	orrs	r2, r1
 8003194:	491f      	ldr	r1, [pc, #124]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	610b      	str	r3, [r1, #16]
 800319a:	e011      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6892      	ldr	r2, [r2, #8]
 80031ac:	0211      	lsls	r1, r2, #8
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6952      	ldr	r2, [r2, #20]
 80031b2:	0852      	lsrs	r2, r2, #1
 80031b4:	3a01      	subs	r2, #1
 80031b6:	0652      	lsls	r2, r2, #25
 80031b8:	430a      	orrs	r2, r1
 80031ba:	4916      	ldr	r1, [pc, #88]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a13      	ldr	r2, [pc, #76]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe fac4 	bl	8001758 <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031d2:	e009      	b.n	80031e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d4:	f7fe fac0 	bl	8001758 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d902      	bls.n	80031e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	73fb      	strb	r3, [r7, #15]
          break;
 80031e6:	e005      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ef      	beq.n	80031d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000

08003218 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003226:	4b6a      	ldr	r3, [pc, #424]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003232:	4b67      	ldr	r3, [pc, #412]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0203 	and.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d10d      	bne.n	800325e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
       ||
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800324a:	4b61      	ldr	r3, [pc, #388]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
       ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d047      	beq.n	80032ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	e044      	b.n	80032ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d018      	beq.n	800329e <RCCEx_PLLSAI2_Config+0x86>
 800326c:	2b03      	cmp	r3, #3
 800326e:	d825      	bhi.n	80032bc <RCCEx_PLLSAI2_Config+0xa4>
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <RCCEx_PLLSAI2_Config+0x62>
 8003274:	2b02      	cmp	r3, #2
 8003276:	d009      	beq.n	800328c <RCCEx_PLLSAI2_Config+0x74>
 8003278:	e020      	b.n	80032bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800327a:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11d      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328a:	e01a      	b.n	80032c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d116      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329c:	e013      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800329e:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ba:	e006      	b.n	80032ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e004      	b.n	80032cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032c2:	bf00      	nop
 80032c4:	e002      	b.n	80032cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10d      	bne.n	80032ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	430b      	orrs	r3, r1
 80032e8:	4939      	ldr	r1, [pc, #228]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d167      	bne.n	80033c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a35      	ldr	r2, [pc, #212]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fe fa2a 	bl	8001758 <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003306:	e009      	b.n	800331c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003308:	f7fe fa26 	bl	8001758 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d902      	bls.n	800331c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	73fb      	strb	r3, [r7, #15]
        break;
 800331a:	e005      	b.n	8003328 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ef      	bne.n	8003308 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d14a      	bne.n	80033c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003334:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	0211      	lsls	r1, r2, #8
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68d2      	ldr	r2, [r2, #12]
 800334a:	0912      	lsrs	r2, r2, #4
 800334c:	0452      	lsls	r2, r2, #17
 800334e:	430a      	orrs	r2, r1
 8003350:	491f      	ldr	r1, [pc, #124]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003352:	4313      	orrs	r3, r2
 8003354:	614b      	str	r3, [r1, #20]
 8003356:	e011      	b.n	800337c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6892      	ldr	r2, [r2, #8]
 8003368:	0211      	lsls	r1, r2, #8
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6912      	ldr	r2, [r2, #16]
 800336e:	0852      	lsrs	r2, r2, #1
 8003370:	3a01      	subs	r2, #1
 8003372:	0652      	lsls	r2, r2, #25
 8003374:	430a      	orrs	r2, r1
 8003376:	4916      	ldr	r1, [pc, #88]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003378:	4313      	orrs	r3, r2
 800337a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe f9e6 	bl	8001758 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800338e:	e009      	b.n	80033a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003390:	f7fe f9e2 	bl	8001758 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	73fb      	strb	r3, [r7, #15]
          break;
 80033a2:	e005      	b.n	80033b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ef      	beq.n	8003390 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4904      	ldr	r1, [pc, #16]	; (80033d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e095      	b.n	8003512 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f6:	d009      	beq.n	800340c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]
 80033fe:	e005      	b.n	800340c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd ff9a 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800344c:	d902      	bls.n	8003454 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e002      	b.n	800345a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003458:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003462:	d007      	beq.n	8003474 <HAL_SPI_Init+0xa0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800346c:	d002      	beq.n	8003474 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	ea42 0103 	orr.w	r1, r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	f003 0204 	and.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034f0:	ea42 0103 	orr.w	r1, r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e049      	b.n	80035c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd ff4f 	bl	80013e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 fb29 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d001      	beq.n	80035e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e047      	b.n	8003670 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a23      	ldr	r2, [pc, #140]	; (800367c <HAL_TIM_Base_Start+0xb4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_TIM_Base_Start+0x66>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d018      	beq.n	800362e <HAL_TIM_Base_Start+0x66>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <HAL_TIM_Base_Start+0xb8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_TIM_Base_Start+0x66>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <HAL_TIM_Base_Start+0xbc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_TIM_Base_Start+0x66>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_TIM_Base_Start+0xc0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_TIM_Base_Start+0x66>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_TIM_Base_Start+0xc4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_TIM_Base_Start+0x66>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_TIM_Base_Start+0xc8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d115      	bne.n	800365a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <HAL_TIM_Base_Start+0xcc>)
 8003636:	4013      	ands	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b06      	cmp	r3, #6
 800363e:	d015      	beq.n	800366c <HAL_TIM_Base_Start+0xa4>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003646:	d011      	beq.n	800366c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003658:	e008      	b.n	800366c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e000      	b.n	800366e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40013400 	.word	0x40013400
 8003690:	40014000 	.word	0x40014000
 8003694:	00010007 	.word	0x00010007

08003698 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10f      	bne.n	80036d0 <HAL_TIM_Base_Stop+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a1a      	ldr	r2, [r3, #32]
 80036b6:	f240 4344 	movw	r3, #1092	; 0x444
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_TIM_Base_Stop+0x38>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e04f      	b.n	80037a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <HAL_TIM_Base_Start_IT+0xc4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01d      	beq.n	800375e <HAL_TIM_Base_Start_IT+0x76>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d018      	beq.n	800375e <HAL_TIM_Base_Start_IT+0x76>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1f      	ldr	r2, [pc, #124]	; (80037b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_TIM_Base_Start_IT+0x76>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_TIM_Base_Start_IT+0x76>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_TIM_Base_Start_IT+0x76>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIM_Base_Start_IT+0x76>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d115      	bne.n	800378a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003766:	4013      	ands	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b06      	cmp	r3, #6
 800376e:	d015      	beq.n	800379c <HAL_TIM_Base_Start_IT+0xb4>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d011      	beq.n	800379c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	e008      	b.n	800379c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e000      	b.n	800379e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	00010007 	.word	0x00010007

080037c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d020      	beq.n	800382c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0202 	mvn.w	r2, #2
 80037fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9ad 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f99f 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f9b0 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0204 	mvn.w	r2, #4
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f987 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f979 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f98a 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0208 	mvn.w	r2, #8
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2204      	movs	r2, #4
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f961 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f953 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f964 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0210 	mvn.w	r2, #16
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2208      	movs	r2, #8
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f93b 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f92d 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f93e 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00c      	beq.n	8003934 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0201 	mvn.w	r2, #1
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fbc0 	bl	80010b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 faf2 	bl	8003f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 faea 	bl	8003f50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8fd 	bl	8003b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0220 	mvn.w	r2, #32
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fab2 	bl	8003f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_ConfigClockSource+0x1c>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0b6      	b.n	8003b56 <HAL_TIM_ConfigClockSource+0x18a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d03e      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0xd8>
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	f200 8087 	bhi.w	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	f000 8086 	beq.w	8003b42 <HAL_TIM_ConfigClockSource+0x176>
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d87f      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d01a      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0xaa>
 8003a40:	2b70      	cmp	r3, #112	; 0x70
 8003a42:	d87b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d050      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x11e>
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d877      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d03c      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0xfe>
 8003a50:	2b50      	cmp	r3, #80	; 0x50
 8003a52:	d873      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d058      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x13e>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d86f      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d064      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15e>
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d86b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d060      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15e>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d867      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05c      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15e>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d05a      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15e>
 8003a74:	e062      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	f000 f9a7 	bl	8003dd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	609a      	str	r2, [r3, #8]
      break;
 8003aa2:	e04f      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ab4:	f000 f990 	bl	8003dd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac6:	609a      	str	r2, [r3, #8]
      break;
 8003ac8:	e03c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 f904 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2150      	movs	r1, #80	; 0x50
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f95d 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e02c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 f923 	bl	8003d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2160      	movs	r1, #96	; 0x60
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f94d 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e01c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b16:	461a      	mov	r2, r3
 8003b18:	f000 f8e4 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2140      	movs	r1, #64	; 0x40
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f93d 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003b28:	e00c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f000 f934 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003b3a:	e003      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e000      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a40      	ldr	r2, [pc, #256]	; (8003cc4 <TIM_Base_SetConfig+0x114>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3d      	ldr	r2, [pc, #244]	; (8003cc8 <TIM_Base_SetConfig+0x118>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3c      	ldr	r2, [pc, #240]	; (8003ccc <TIM_Base_SetConfig+0x11c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3b      	ldr	r2, [pc, #236]	; (8003cd0 <TIM_Base_SetConfig+0x120>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3a      	ldr	r2, [pc, #232]	; (8003cd4 <TIM_Base_SetConfig+0x124>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2f      	ldr	r2, [pc, #188]	; (8003cc4 <TIM_Base_SetConfig+0x114>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d01b      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <TIM_Base_SetConfig+0x118>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <TIM_Base_SetConfig+0x11c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <TIM_Base_SetConfig+0x120>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00f      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <TIM_Base_SetConfig+0x124>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <TIM_Base_SetConfig+0x128>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <TIM_Base_SetConfig+0x12c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <TIM_Base_SetConfig+0x130>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <TIM_Base_SetConfig+0x114>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00f      	beq.n	8003ca8 <TIM_Base_SetConfig+0xf8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <TIM_Base_SetConfig+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <TIM_Base_SetConfig+0xf8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <TIM_Base_SetConfig+0x128>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <TIM_Base_SetConfig+0xf8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <TIM_Base_SetConfig+0x12c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0xf8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0f      	ldr	r2, [pc, #60]	; (8003ce0 <TIM_Base_SetConfig+0x130>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d103      	bne.n	8003cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	615a      	str	r2, [r3, #20]
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40013400 	.word	0x40013400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f023 030a 	bic.w	r3, r3, #10
 8003d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b087      	sub	sp, #28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f023 0210 	bic.w	r2, r3, #16
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	031b      	lsls	r3, r3, #12
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f043 0307 	orr.w	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e068      	b.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2e      	ldr	r2, [pc, #184]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01d      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d018      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40013400 	.word	0x40013400
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40014000 	.word	0x40014000

08003f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e040      	b.n	8003ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fa4c 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fb6a 	bl	8004684 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8af 	bl	8004114 <UART_SetConfig>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e01b      	b.n	8003ff8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fbe9 	bl	80047c8 <UART_CheckIdleState>
 8003ff6:	4603      	mov	r3, r0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004014:	2b20      	cmp	r3, #32
 8004016:	d178      	bne.n	800410a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Transmit+0x24>
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e071      	b.n	800410c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2221      	movs	r2, #33	; 0x21
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004036:	f7fd fb8f 	bl	8001758 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004054:	d108      	bne.n	8004068 <HAL_UART_Transmit+0x68>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e003      	b.n	8004070 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004070:	e030      	b.n	80040d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fc4b 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e03c      	b.n	800410c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	881a      	ldrh	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a4:	b292      	uxth	r2, r2
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	3302      	adds	r3, #2
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e008      	b.n	80040c2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	b292      	uxth	r2, r2
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1c8      	bne.n	8004072 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fc14 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e005      	b.n	800410c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004118:	b08a      	sub	sp, #40	; 0x28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	431a      	orrs	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4313      	orrs	r3, r2
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4ba4      	ldr	r3, [pc, #656]	; (80043d4 <UART_SetConfig+0x2c0>)
 8004144:	4013      	ands	r3, r2
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414c:	430b      	orrs	r3, r1
 800414e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a99      	ldr	r2, [pc, #612]	; (80043d8 <UART_SetConfig+0x2c4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	4313      	orrs	r3, r2
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a90      	ldr	r2, [pc, #576]	; (80043dc <UART_SetConfig+0x2c8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d126      	bne.n	80041ec <UART_SetConfig+0xd8>
 800419e:	4b90      	ldr	r3, [pc, #576]	; (80043e0 <UART_SetConfig+0x2cc>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d81b      	bhi.n	80041e4 <UART_SetConfig+0xd0>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <UART_SetConfig+0xa0>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e116      	b.n	80043fa <UART_SetConfig+0x2e6>
 80041cc:	2302      	movs	r3, #2
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e112      	b.n	80043fa <UART_SetConfig+0x2e6>
 80041d4:	2304      	movs	r3, #4
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e10e      	b.n	80043fa <UART_SetConfig+0x2e6>
 80041dc:	2308      	movs	r3, #8
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e10a      	b.n	80043fa <UART_SetConfig+0x2e6>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e106      	b.n	80043fa <UART_SetConfig+0x2e6>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7c      	ldr	r2, [pc, #496]	; (80043e4 <UART_SetConfig+0x2d0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d138      	bne.n	8004268 <UART_SetConfig+0x154>
 80041f6:	4b7a      	ldr	r3, [pc, #488]	; (80043e0 <UART_SetConfig+0x2cc>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d82d      	bhi.n	8004260 <UART_SetConfig+0x14c>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0xf8>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004241 	.word	0x08004241
 8004210:	08004261 	.word	0x08004261
 8004214:	08004261 	.word	0x08004261
 8004218:	08004261 	.word	0x08004261
 800421c:	08004251 	.word	0x08004251
 8004220:	08004261 	.word	0x08004261
 8004224:	08004261 	.word	0x08004261
 8004228:	08004261 	.word	0x08004261
 800422c:	08004249 	.word	0x08004249
 8004230:	08004261 	.word	0x08004261
 8004234:	08004261 	.word	0x08004261
 8004238:	08004261 	.word	0x08004261
 800423c:	08004259 	.word	0x08004259
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e0d8      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004248:	2302      	movs	r3, #2
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e0d4      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004250:	2304      	movs	r3, #4
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e0d0      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004258:	2308      	movs	r3, #8
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e0cc      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004260:	2310      	movs	r3, #16
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e0c8      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5e      	ldr	r2, [pc, #376]	; (80043e8 <UART_SetConfig+0x2d4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d125      	bne.n	80042be <UART_SetConfig+0x1aa>
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <UART_SetConfig+0x2cc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800427c:	2b30      	cmp	r3, #48	; 0x30
 800427e:	d016      	beq.n	80042ae <UART_SetConfig+0x19a>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d818      	bhi.n	80042b6 <UART_SetConfig+0x1a2>
 8004284:	2b20      	cmp	r3, #32
 8004286:	d00a      	beq.n	800429e <UART_SetConfig+0x18a>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d814      	bhi.n	80042b6 <UART_SetConfig+0x1a2>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <UART_SetConfig+0x182>
 8004290:	2b10      	cmp	r3, #16
 8004292:	d008      	beq.n	80042a6 <UART_SetConfig+0x192>
 8004294:	e00f      	b.n	80042b6 <UART_SetConfig+0x1a2>
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429c:	e0ad      	b.n	80043fa <UART_SetConfig+0x2e6>
 800429e:	2302      	movs	r3, #2
 80042a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a4:	e0a9      	b.n	80043fa <UART_SetConfig+0x2e6>
 80042a6:	2304      	movs	r3, #4
 80042a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ac:	e0a5      	b.n	80043fa <UART_SetConfig+0x2e6>
 80042ae:	2308      	movs	r3, #8
 80042b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b4:	e0a1      	b.n	80043fa <UART_SetConfig+0x2e6>
 80042b6:	2310      	movs	r3, #16
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042bc:	e09d      	b.n	80043fa <UART_SetConfig+0x2e6>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <UART_SetConfig+0x2d8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d125      	bne.n	8004314 <UART_SetConfig+0x200>
 80042c8:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <UART_SetConfig+0x2cc>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042d2:	2bc0      	cmp	r3, #192	; 0xc0
 80042d4:	d016      	beq.n	8004304 <UART_SetConfig+0x1f0>
 80042d6:	2bc0      	cmp	r3, #192	; 0xc0
 80042d8:	d818      	bhi.n	800430c <UART_SetConfig+0x1f8>
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d00a      	beq.n	80042f4 <UART_SetConfig+0x1e0>
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d814      	bhi.n	800430c <UART_SetConfig+0x1f8>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <UART_SetConfig+0x1d8>
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d008      	beq.n	80042fc <UART_SetConfig+0x1e8>
 80042ea:	e00f      	b.n	800430c <UART_SetConfig+0x1f8>
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f2:	e082      	b.n	80043fa <UART_SetConfig+0x2e6>
 80042f4:	2302      	movs	r3, #2
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e07e      	b.n	80043fa <UART_SetConfig+0x2e6>
 80042fc:	2304      	movs	r3, #4
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e07a      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004304:	2308      	movs	r3, #8
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e076      	b.n	80043fa <UART_SetConfig+0x2e6>
 800430c:	2310      	movs	r3, #16
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e072      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a35      	ldr	r2, [pc, #212]	; (80043f0 <UART_SetConfig+0x2dc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d12a      	bne.n	8004374 <UART_SetConfig+0x260>
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <UART_SetConfig+0x2cc>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432c:	d01a      	beq.n	8004364 <UART_SetConfig+0x250>
 800432e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004332:	d81b      	bhi.n	800436c <UART_SetConfig+0x258>
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d00c      	beq.n	8004354 <UART_SetConfig+0x240>
 800433a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433e:	d815      	bhi.n	800436c <UART_SetConfig+0x258>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <UART_SetConfig+0x238>
 8004344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004348:	d008      	beq.n	800435c <UART_SetConfig+0x248>
 800434a:	e00f      	b.n	800436c <UART_SetConfig+0x258>
 800434c:	2300      	movs	r3, #0
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e052      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004354:	2302      	movs	r3, #2
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435a:	e04e      	b.n	80043fa <UART_SetConfig+0x2e6>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e04a      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e046      	b.n	80043fa <UART_SetConfig+0x2e6>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e042      	b.n	80043fa <UART_SetConfig+0x2e6>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <UART_SetConfig+0x2c4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d13a      	bne.n	80043f4 <UART_SetConfig+0x2e0>
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <UART_SetConfig+0x2cc>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800438c:	d01a      	beq.n	80043c4 <UART_SetConfig+0x2b0>
 800438e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004392:	d81b      	bhi.n	80043cc <UART_SetConfig+0x2b8>
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	d00c      	beq.n	80043b4 <UART_SetConfig+0x2a0>
 800439a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439e:	d815      	bhi.n	80043cc <UART_SetConfig+0x2b8>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <UART_SetConfig+0x298>
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a8:	d008      	beq.n	80043bc <UART_SetConfig+0x2a8>
 80043aa:	e00f      	b.n	80043cc <UART_SetConfig+0x2b8>
 80043ac:	2300      	movs	r3, #0
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e022      	b.n	80043fa <UART_SetConfig+0x2e6>
 80043b4:	2302      	movs	r3, #2
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e01e      	b.n	80043fa <UART_SetConfig+0x2e6>
 80043bc:	2304      	movs	r3, #4
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e01a      	b.n	80043fa <UART_SetConfig+0x2e6>
 80043c4:	2308      	movs	r3, #8
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e016      	b.n	80043fa <UART_SetConfig+0x2e6>
 80043cc:	2310      	movs	r3, #16
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e012      	b.n	80043fa <UART_SetConfig+0x2e6>
 80043d4:	efff69f3 	.word	0xefff69f3
 80043d8:	40008000 	.word	0x40008000
 80043dc:	40013800 	.word	0x40013800
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40004400 	.word	0x40004400
 80043e8:	40004800 	.word	0x40004800
 80043ec:	40004c00 	.word	0x40004c00
 80043f0:	40005000 	.word	0x40005000
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a9f      	ldr	r2, [pc, #636]	; (800467c <UART_SetConfig+0x568>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d17a      	bne.n	80044fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004408:	2b08      	cmp	r3, #8
 800440a:	d824      	bhi.n	8004456 <UART_SetConfig+0x342>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x300>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004439 	.word	0x08004439
 8004418:	08004457 	.word	0x08004457
 800441c:	08004441 	.word	0x08004441
 8004420:	08004457 	.word	0x08004457
 8004424:	08004447 	.word	0x08004447
 8004428:	08004457 	.word	0x08004457
 800442c:	08004457 	.word	0x08004457
 8004430:	08004457 	.word	0x08004457
 8004434:	0800444f 	.word	0x0800444f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe fa52 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 800443c:	61f8      	str	r0, [r7, #28]
        break;
 800443e:	e010      	b.n	8004462 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004440:	4b8f      	ldr	r3, [pc, #572]	; (8004680 <UART_SetConfig+0x56c>)
 8004442:	61fb      	str	r3, [r7, #28]
        break;
 8004444:	e00d      	b.n	8004462 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004446:	f7fe f9b3 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800444a:	61f8      	str	r0, [r7, #28]
        break;
 800444c:	e009      	b.n	8004462 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004452:	61fb      	str	r3, [r7, #28]
        break;
 8004454:	e005      	b.n	8004462 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80fb 	beq.w	8004660 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	429a      	cmp	r2, r3
 8004478:	d305      	bcc.n	8004486 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	429a      	cmp	r2, r3
 8004484:	d903      	bls.n	800448e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800448c:	e0e8      	b.n	8004660 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	2200      	movs	r2, #0
 8004492:	461c      	mov	r4, r3
 8004494:	4615      	mov	r5, r2
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	022b      	lsls	r3, r5, #8
 80044a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044a4:	0222      	lsls	r2, r4, #8
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	6849      	ldr	r1, [r1, #4]
 80044aa:	0849      	lsrs	r1, r1, #1
 80044ac:	2000      	movs	r0, #0
 80044ae:	4688      	mov	r8, r1
 80044b0:	4681      	mov	r9, r0
 80044b2:	eb12 0a08 	adds.w	sl, r2, r8
 80044b6:	eb43 0b09 	adc.w	fp, r3, r9
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c8:	4650      	mov	r0, sl
 80044ca:	4659      	mov	r1, fp
 80044cc:	f7fb fed8 	bl	8000280 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4613      	mov	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044de:	d308      	bcc.n	80044f2 <UART_SetConfig+0x3de>
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e6:	d204      	bcs.n	80044f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	60da      	str	r2, [r3, #12]
 80044f0:	e0b6      	b.n	8004660 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044f8:	e0b2      	b.n	8004660 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004502:	d15e      	bne.n	80045c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004508:	2b08      	cmp	r3, #8
 800450a:	d828      	bhi.n	800455e <UART_SetConfig+0x44a>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0x400>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004539 	.word	0x08004539
 8004518:	08004541 	.word	0x08004541
 800451c:	08004549 	.word	0x08004549
 8004520:	0800455f 	.word	0x0800455f
 8004524:	0800454f 	.word	0x0800454f
 8004528:	0800455f 	.word	0x0800455f
 800452c:	0800455f 	.word	0x0800455f
 8004530:	0800455f 	.word	0x0800455f
 8004534:	08004557 	.word	0x08004557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004538:	f7fe f9d2 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 800453c:	61f8      	str	r0, [r7, #28]
        break;
 800453e:	e014      	b.n	800456a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7fe f9e4 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8004544:	61f8      	str	r0, [r7, #28]
        break;
 8004546:	e010      	b.n	800456a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004548:	4b4d      	ldr	r3, [pc, #308]	; (8004680 <UART_SetConfig+0x56c>)
 800454a:	61fb      	str	r3, [r7, #28]
        break;
 800454c:	e00d      	b.n	800456a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454e:	f7fe f92f 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8004552:	61f8      	str	r0, [r7, #28]
        break;
 8004554:	e009      	b.n	800456a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455a:	61fb      	str	r3, [r7, #28]
        break;
 800455c:	e005      	b.n	800456a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d077      	beq.n	8004660 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005a      	lsls	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	441a      	add	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d916      	bls.n	80045ba <UART_SetConfig+0x4a6>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d212      	bcs.n	80045ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f023 030f 	bic.w	r3, r3, #15
 800459c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	8afb      	ldrh	r3, [r7, #22]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	8afa      	ldrh	r2, [r7, #22]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	e052      	b.n	8004660 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045c0:	e04e      	b.n	8004660 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d827      	bhi.n	800461a <UART_SetConfig+0x506>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <UART_SetConfig+0x4bc>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fe f974 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 80045f8:	61f8      	str	r0, [r7, #28]
        break;
 80045fa:	e014      	b.n	8004626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe f986 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8004600:	61f8      	str	r0, [r7, #28]
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <UART_SetConfig+0x56c>)
 8004606:	61fb      	str	r3, [r7, #28]
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe f8d1 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800460e:	61f8      	str	r0, [r7, #28]
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	61fb      	str	r3, [r7, #28]
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004624:	bf00      	nop
    }

    if (pclk != 0U)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d019      	beq.n	8004660 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	085a      	lsrs	r2, r3, #1
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	441a      	add	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	d909      	bls.n	800465a <UART_SetConfig+0x546>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d205      	bcs.n	800465a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	e002      	b.n	8004660 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800466c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004670:	4618      	mov	r0, r3
 8004672:	3728      	adds	r7, #40	; 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467a:	bf00      	nop
 800467c:	40008000 	.word	0x40008000
 8004680:	00f42400 	.word	0x00f42400

08004684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01a      	beq.n	800479a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004782:	d10a      	bne.n	800479a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b098      	sub	sp, #96	; 0x60
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047d8:	f7fc ffbe 	bl	8001758 <HAL_GetTick>
 80047dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d12e      	bne.n	800484a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f88c 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d021      	beq.n	800484a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800481a:	653b      	str	r3, [r7, #80]	; 0x50
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004824:	647b      	str	r3, [r7, #68]	; 0x44
 8004826:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800482a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e062      	b.n	8004910 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d149      	bne.n	80048ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f856 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d03c      	beq.n	80048ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	623b      	str	r3, [r7, #32]
   return(result);
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	633b      	str	r3, [r7, #48]	; 0x30
 8004892:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e6      	bne.n	8004872 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c4:	61fa      	str	r2, [r7, #28]
 80048c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	617b      	str	r3, [r7, #20]
   return(result);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e011      	b.n	8004910 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3758      	adds	r7, #88	; 0x58
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004928:	e049      	b.n	80049be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d045      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fc ff11 	bl	8001758 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <UART_WaitOnFlagUntilTimeout+0x30>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e048      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d031      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d110      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2208      	movs	r2, #8
 800496e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f838 	bl	80049e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2208      	movs	r2, #8
 800497a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e029      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d111      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f81e 	bl	80049e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e00f      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d0a6      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b095      	sub	sp, #84	; 0x54
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d118      	bne.n	8004a8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6979      	ldr	r1, [r7, #20]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	613b      	str	r3, [r7, #16]
   return(result);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e6      	bne.n	8004a5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aa2:	bf00      	nop
 8004aa4:	3754      	adds	r7, #84	; 0x54
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004ab4:	4904      	ldr	r1, [pc, #16]	; (8004ac8 <MX_FATFS_Init+0x18>)
 8004ab6:	4805      	ldr	r0, [pc, #20]	; (8004acc <MX_FATFS_Init+0x1c>)
 8004ab8:	f002 fb88 	bl	80071cc <FATFS_LinkDriver>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <MX_FATFS_Init+0x20>)
 8004ac2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ac4:	bf00      	nop
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20007cf0 	.word	0x20007cf0
 8004acc:	20000018 	.word	0x20000018
 8004ad0:	20007cec 	.word	0x20007cec

08004ad4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ad8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <USER_initialize+0x24>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <USER_initialize+0x24>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000015 	.word	0x20000015

08004b0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <USER_status+0x24>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <USER_status+0x24>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000015 	.word	0x20000015

08004b34 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004b44:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004b62:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	603a      	str	r2, [r7, #0]
 8004b7a:	71fb      	strb	r3, [r7, #7]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
    return res;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <disk_status+0x30>)
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	79fa      	ldrb	r2, [r7, #7]
 8004bac:	4905      	ldr	r1, [pc, #20]	; (8004bc4 <disk_status+0x30>)
 8004bae:	440a      	add	r2, r1
 8004bb0:	7a12      	ldrb	r2, [r2, #8]
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4798      	blx	r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20007d1c 	.word	0x20007d1c

08004bc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <disk_initialize+0x48>)
 8004bda:	5cd3      	ldrb	r3, [r2, r3]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d111      	bne.n	8004c04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <disk_initialize+0x48>)
 8004be4:	2101      	movs	r1, #1
 8004be6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <disk_initialize+0x48>)
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	79fa      	ldrb	r2, [r7, #7]
 8004bf6:	4906      	ldr	r1, [pc, #24]	; (8004c10 <disk_initialize+0x48>)
 8004bf8:	440a      	add	r2, r1
 8004bfa:	7a12      	ldrb	r2, [r2, #8]
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4798      	blx	r3
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20007d1c 	.word	0x20007d1c

08004c14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4603      	mov	r3, r0
 8004c22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <disk_read+0x3c>)
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	689c      	ldr	r4, [r3, #8]
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <disk_read+0x3c>)
 8004c34:	4413      	add	r3, r2
 8004c36:	7a18      	ldrb	r0, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	47a0      	blx	r4
 8004c40:	4603      	mov	r3, r0
 8004c42:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd90      	pop	{r4, r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20007d1c 	.word	0x20007d1c

08004c54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <disk_write+0x3c>)
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	68dc      	ldr	r4, [r3, #12]
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <disk_write+0x3c>)
 8004c74:	4413      	add	r3, r2
 8004c76:	7a18      	ldrb	r0, [r3, #8]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	47a0      	blx	r4
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20007d1c 	.word	0x20007d1c

08004c94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	603a      	str	r2, [r7, #0]
 8004c9e:	71fb      	strb	r3, [r7, #7]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <disk_ioctl+0x38>)
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	79fa      	ldrb	r2, [r7, #7]
 8004cb2:	4906      	ldr	r1, [pc, #24]	; (8004ccc <disk_ioctl+0x38>)
 8004cb4:	440a      	add	r2, r1
 8004cb6:	7a10      	ldrb	r0, [r2, #8]
 8004cb8:	79b9      	ldrb	r1, [r7, #6]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	4798      	blx	r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  return res;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20007d1c 	.word	0x20007d1c

08004cd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ce0:	89fb      	ldrh	r3, [r7, #14]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3303      	adds	r3, #3
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	3202      	adds	r2, #2
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	3201      	adds	r2, #1
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
	return rv;
 8004d38:	68fb      	ldr	r3, [r7, #12]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	887a      	ldrh	r2, [r7, #2]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	0a1b      	lsrs	r3, r3, #8
 8004d96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00d      	beq.n	8004e0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	1c53      	adds	r3, r2, #1
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	6179      	str	r1, [r7, #20]
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f1      	bne.n	8004dee <mem_cpy+0x1a>
	}
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e16:	b480      	push	{r7}
 8004e18:	b087      	sub	sp, #28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	617a      	str	r2, [r7, #20]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f3      	bne.n	8004e26 <mem_set+0x10>
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	61fa      	str	r2, [r7, #28]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	61ba      	str	r2, [r7, #24]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	1acb      	subs	r3, r1, r3
 8004e78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <mem_cmp+0x40>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0eb      	beq.n	8004e64 <mem_cmp+0x18>

	return r;
 8004e8c:	697b      	ldr	r3, [r7, #20]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	; 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ea4:	e002      	b.n	8004eac <chk_chr+0x12>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <chk_chr+0x26>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d1f2      	bne.n	8004ea6 <chk_chr+0xc>
	return *str;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <lock_fs+0x22>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f002 f9a8 	bl	8007238 <ff_req_grant>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <lock_fs+0x22>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <lock_fs+0x24>
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <unlock_fs+0x2e>
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d00a      	beq.n	8004f2a <unlock_fs+0x2e>
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b0b      	cmp	r3, #11
 8004f18:	d007      	beq.n	8004f2a <unlock_fs+0x2e>
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	2b0f      	cmp	r3, #15
 8004f1e:	d004      	beq.n	8004f2a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f002 f99c 	bl	8007262 <ff_rel_grant>
	}
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e029      	b.n	8004f9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f48:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <chk_lock+0xb4>)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	4413      	add	r3, r2
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01d      	beq.n	8004f92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f56:	4a24      	ldr	r2, [pc, #144]	; (8004fe8 <chk_lock+0xb4>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4413      	add	r3, r2
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d116      	bne.n	8004f96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f68:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <chk_lock+0xb4>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	4413      	add	r3, r2
 8004f70:	3304      	adds	r3, #4
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d10c      	bne.n	8004f96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <chk_lock+0xb4>)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	4413      	add	r3, r2
 8004f84:	3308      	adds	r3, #8
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d102      	bne.n	8004f96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f90:	e007      	b.n	8004fa2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d9d2      	bls.n	8004f48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d109      	bne.n	8004fbc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <chk_lock+0x80>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d101      	bne.n	8004fb8 <chk_lock+0x84>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e010      	b.n	8004fda <chk_lock+0xa6>
 8004fb8:	2312      	movs	r3, #18
 8004fba:	e00e      	b.n	8004fda <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d108      	bne.n	8004fd4 <chk_lock+0xa0>
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <chk_lock+0xb4>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	4413      	add	r3, r2
 8004fca:	330c      	adds	r3, #12
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd2:	d101      	bne.n	8004fd8 <chk_lock+0xa4>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	e000      	b.n	8004fda <chk_lock+0xa6>
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20007cfc 	.word	0x20007cfc

08004fec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	e002      	b.n	8004ffe <enq_lock+0x12>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d806      	bhi.n	8005012 <enq_lock+0x26>
 8005004:	4a09      	ldr	r2, [pc, #36]	; (800502c <enq_lock+0x40>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	4413      	add	r3, r2
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f2      	bne.n	8004ff8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b02      	cmp	r3, #2
 8005016:	bf14      	ite	ne
 8005018:	2301      	movne	r3, #1
 800501a:	2300      	moveq	r3, #0
 800501c:	b2db      	uxtb	r3, r3
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20007cfc 	.word	0x20007cfc

08005030 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e01f      	b.n	8005080 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005040:	4a41      	ldr	r2, [pc, #260]	; (8005148 <inc_lock+0x118>)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	4413      	add	r3, r2
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d113      	bne.n	800507a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005052:	4a3d      	ldr	r2, [pc, #244]	; (8005148 <inc_lock+0x118>)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	4413      	add	r3, r2
 800505a:	3304      	adds	r3, #4
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005062:	429a      	cmp	r2, r3
 8005064:	d109      	bne.n	800507a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005066:	4a38      	ldr	r2, [pc, #224]	; (8005148 <inc_lock+0x118>)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	4413      	add	r3, r2
 800506e:	3308      	adds	r3, #8
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005076:	429a      	cmp	r2, r3
 8005078:	d006      	beq.n	8005088 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d9dc      	bls.n	8005040 <inc_lock+0x10>
 8005086:	e000      	b.n	800508a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005088:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d132      	bne.n	80050f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e002      	b.n	800509c <inc_lock+0x6c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d806      	bhi.n	80050b0 <inc_lock+0x80>
 80050a2:	4a29      	ldr	r2, [pc, #164]	; (8005148 <inc_lock+0x118>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	4413      	add	r3, r2
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f2      	bne.n	8005096 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d101      	bne.n	80050ba <inc_lock+0x8a>
 80050b6:	2300      	movs	r3, #0
 80050b8:	e040      	b.n	800513c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4922      	ldr	r1, [pc, #136]	; (8005148 <inc_lock+0x118>)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	440b      	add	r3, r1
 80050c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	491e      	ldr	r1, [pc, #120]	; (8005148 <inc_lock+0x118>)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	440b      	add	r3, r1
 80050d4:	3304      	adds	r3, #4
 80050d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	491a      	ldr	r1, [pc, #104]	; (8005148 <inc_lock+0x118>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	440b      	add	r3, r1
 80050e4:	3308      	adds	r3, #8
 80050e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80050e8:	4a17      	ldr	r2, [pc, #92]	; (8005148 <inc_lock+0x118>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	330c      	adds	r3, #12
 80050f2:	2200      	movs	r2, #0
 80050f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d009      	beq.n	8005110 <inc_lock+0xe0>
 80050fc:	4a12      	ldr	r2, [pc, #72]	; (8005148 <inc_lock+0x118>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4413      	add	r3, r2
 8005104:	330c      	adds	r3, #12
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <inc_lock+0xe0>
 800510c:	2300      	movs	r3, #0
 800510e:	e015      	b.n	800513c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d108      	bne.n	8005128 <inc_lock+0xf8>
 8005116:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <inc_lock+0x118>)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	4413      	add	r3, r2
 800511e:	330c      	adds	r3, #12
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	e001      	b.n	800512c <inc_lock+0xfc>
 8005128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800512c:	4906      	ldr	r1, [pc, #24]	; (8005148 <inc_lock+0x118>)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	440b      	add	r3, r1
 8005134:	330c      	adds	r3, #12
 8005136:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	20007cfc 	.word	0x20007cfc

0800514c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3b01      	subs	r3, #1
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d825      	bhi.n	80051ac <dec_lock+0x60>
		n = Files[i].ctr;
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <dec_lock+0x74>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4413      	add	r3, r2
 8005168:	330c      	adds	r3, #12
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800516e:	89fb      	ldrh	r3, [r7, #14]
 8005170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005174:	d101      	bne.n	800517a <dec_lock+0x2e>
 8005176:	2300      	movs	r3, #0
 8005178:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <dec_lock+0x3a>
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	3b01      	subs	r3, #1
 8005184:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005186:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <dec_lock+0x74>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	4413      	add	r3, r2
 800518e:	330c      	adds	r3, #12
 8005190:	89fa      	ldrh	r2, [r7, #14]
 8005192:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005194:	89fb      	ldrh	r3, [r7, #14]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <dec_lock+0x5a>
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <dec_lock+0x74>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	4413      	add	r3, r2
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	737b      	strb	r3, [r7, #13]
 80051aa:	e001      	b.n	80051b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051ac:	2302      	movs	r3, #2
 80051ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20007cfc 	.word	0x20007cfc

080051c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e010      	b.n	80051f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80051d2:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <clear_lock+0x44>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	4413      	add	r3, r2
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d105      	bne.n	80051ee <clear_lock+0x2a>
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <clear_lock+0x44>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	4413      	add	r3, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d9eb      	bls.n	80051d2 <clear_lock+0xe>
	}
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20007cfc 	.word	0x20007cfc

0800520c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d034      	beq.n	800528a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	7858      	ldrb	r0, [r3, #1]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005230:	2301      	movs	r3, #1
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	f7ff fd0e 	bl	8004c54 <disk_write>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <sync_window+0x38>
			res = FR_DISK_ERR;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e022      	b.n	800528a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	1ad2      	subs	r2, r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	429a      	cmp	r2, r3
 8005258:	d217      	bcs.n	800528a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	789b      	ldrb	r3, [r3, #2]
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	e010      	b.n	8005284 <sync_window+0x78>
					wsect += fs->fsize;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	7858      	ldrb	r0, [r3, #1]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005276:	2301      	movs	r3, #1
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	f7ff fceb 	bl	8004c54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3b01      	subs	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d8eb      	bhi.n	8005262 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d01b      	beq.n	80052e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ffad 	bl	800520c <sync_window>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d113      	bne.n	80052e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7858      	ldrb	r0, [r3, #1]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052c6:	2301      	movs	r3, #1
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	f7ff fca3 	bl	8004c14 <disk_read>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ff87 	bl	800520c <sync_window>
 80052fe:	4603      	mov	r3, r0
 8005300:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d158      	bne.n	80053ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d148      	bne.n	80053a2 <sync_fs+0xb2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	791b      	ldrb	r3, [r3, #4]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d144      	bne.n	80053a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3334      	adds	r3, #52	; 0x34
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fd77 	bl	8004e16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3334      	adds	r3, #52	; 0x34
 800532c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005330:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fd06 	bl	8004d46 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3334      	adds	r3, #52	; 0x34
 800533e:	4921      	ldr	r1, [pc, #132]	; (80053c4 <sync_fs+0xd4>)
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fd1b 	bl	8004d7c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3334      	adds	r3, #52	; 0x34
 800534a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800534e:	491e      	ldr	r1, [pc, #120]	; (80053c8 <sync_fs+0xd8>)
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff fd13 	bl	8004d7c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3334      	adds	r3, #52	; 0x34
 800535a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7ff fd09 	bl	8004d7c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3334      	adds	r3, #52	; 0x34
 800536e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7ff fcff 	bl	8004d7c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	7858      	ldrb	r0, [r3, #1]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	2301      	movs	r3, #1
 8005398:	f7ff fc5c 	bl	8004c54 <disk_write>
			fs->fsi_flag = 0;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	2200      	movs	r2, #0
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fc72 	bl	8004c94 <disk_ioctl>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <sync_fs+0xca>
 80053b6:	2301      	movs	r3, #1
 80053b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	41615252 	.word	0x41615252
 80053c8:	61417272 	.word	0x61417272

080053cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	3b02      	subs	r3, #2
 80053da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	3b02      	subs	r3, #2
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d301      	bcc.n	80053ec <clust2sect+0x20>
 80053e8:	2300      	movs	r3, #0
 80053ea:	e008      	b.n	80053fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	895b      	ldrh	r3, [r3, #10]
 80053f0:	461a      	mov	r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	fb03 f202 	mul.w	r2, r3, r2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	4413      	add	r3, r2
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d904      	bls.n	800542a <get_fat+0x20>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <get_fat+0x26>
		val = 1;	/* Internal error */
 800542a:	2301      	movs	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e08f      	b.n	8005550 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d062      	beq.n	8005504 <get_fat+0xfa>
 800543e:	2b03      	cmp	r3, #3
 8005440:	dc7c      	bgt.n	800553c <get_fat+0x132>
 8005442:	2b01      	cmp	r3, #1
 8005444:	d002      	beq.n	800544c <get_fat+0x42>
 8005446:	2b02      	cmp	r3, #2
 8005448:	d042      	beq.n	80054d0 <get_fat+0xc6>
 800544a:	e077      	b.n	800553c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	0a5b      	lsrs	r3, r3, #9
 8005462:	4413      	add	r3, r2
 8005464:	4619      	mov	r1, r3
 8005466:	6938      	ldr	r0, [r7, #16]
 8005468:	f7ff ff14 	bl	8005294 <move_window>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d167      	bne.n	8005542 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	60fa      	str	r2, [r7, #12]
 8005478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005484:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	0a5b      	lsrs	r3, r3, #9
 800548e:	4413      	add	r3, r2
 8005490:	4619      	mov	r1, r3
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f7ff fefe 	bl	8005294 <move_window>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d153      	bne.n	8005546 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	461a      	mov	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <get_fat+0xbc>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	e002      	b.n	80054cc <get_fat+0xc2>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054cc:	617b      	str	r3, [r7, #20]
			break;
 80054ce:	e03f      	b.n	8005550 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	4413      	add	r3, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	6938      	ldr	r0, [r7, #16]
 80054de:	f7ff fed9 	bl	8005294 <move_window>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d130      	bne.n	800554a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80054f6:	4413      	add	r3, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fbe9 	bl	8004cd0 <ld_word>
 80054fe:	4603      	mov	r3, r0
 8005500:	617b      	str	r3, [r7, #20]
			break;
 8005502:	e025      	b.n	8005550 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	09db      	lsrs	r3, r3, #7
 800550c:	4413      	add	r3, r2
 800550e:	4619      	mov	r1, r3
 8005510:	6938      	ldr	r0, [r7, #16]
 8005512:	f7ff febf 	bl	8005294 <move_window>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d118      	bne.n	800554e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800552a:	4413      	add	r3, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fbe7 	bl	8004d00 <ld_dword>
 8005532:	4603      	mov	r3, r0
 8005534:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005538:	617b      	str	r3, [r7, #20]
			break;
 800553a:	e009      	b.n	8005550 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800553c:	2301      	movs	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e006      	b.n	8005550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005542:	bf00      	nop
 8005544:	e004      	b.n	8005550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005546:	bf00      	nop
 8005548:	e002      	b.n	8005550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800554e:	bf00      	nop
		}
	}

	return val;
 8005550:	697b      	ldr	r3, [r7, #20]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800555a:	b590      	push	{r4, r7, lr}
 800555c:	b089      	sub	sp, #36	; 0x24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005566:	2302      	movs	r3, #2
 8005568:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b01      	cmp	r3, #1
 800556e:	f240 80d9 	bls.w	8005724 <put_fat+0x1ca>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	429a      	cmp	r2, r3
 800557a:	f080 80d3 	bcs.w	8005724 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b03      	cmp	r3, #3
 8005584:	f000 8096 	beq.w	80056b4 <put_fat+0x15a>
 8005588:	2b03      	cmp	r3, #3
 800558a:	f300 80cb 	bgt.w	8005724 <put_fat+0x1ca>
 800558e:	2b01      	cmp	r3, #1
 8005590:	d002      	beq.n	8005598 <put_fat+0x3e>
 8005592:	2b02      	cmp	r3, #2
 8005594:	d06e      	beq.n	8005674 <put_fat+0x11a>
 8005596:	e0c5      	b.n	8005724 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4413      	add	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	0a5b      	lsrs	r3, r3, #9
 80055ae:	4413      	add	r3, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff fe6e 	bl	8005294 <move_window>
 80055b8:	4603      	mov	r3, r0
 80055ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 80a9 	bne.w	8005716 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	61b9      	str	r1, [r7, #24]
 80055d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d4:	4413      	add	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <put_fat+0xa4>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	b25a      	sxtb	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	b25b      	sxtb	r3, r3
 80055f6:	4313      	orrs	r3, r2
 80055f8:	b25b      	sxtb	r3, r3
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	e001      	b.n	8005602 <put_fat+0xa8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	0a5b      	lsrs	r3, r3, #9
 8005614:	4413      	add	r3, r2
 8005616:	4619      	mov	r1, r3
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fe3b 	bl	8005294 <move_window>
 800561e:	4603      	mov	r3, r0
 8005620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005622:	7ffb      	ldrb	r3, [r7, #31]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d178      	bne.n	800571a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005634:	4413      	add	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <put_fat+0xf0>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	b2db      	uxtb	r3, r3
 8005648:	e00e      	b.n	8005668 <put_fat+0x10e>
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	b25b      	sxtb	r3, r3
 8005650:	f023 030f 	bic.w	r3, r3, #15
 8005654:	b25a      	sxtb	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	b25b      	sxtb	r3, r3
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	b25b      	sxtb	r3, r3
 8005662:	4313      	orrs	r3, r2
 8005664:	b25b      	sxtb	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	70da      	strb	r2, [r3, #3]
			break;
 8005672:	e057      	b.n	8005724 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	4413      	add	r3, r2
 800567e:	4619      	mov	r1, r3
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff fe07 	bl	8005294 <move_window>
 8005686:	4603      	mov	r3, r0
 8005688:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800568a:	7ffb      	ldrb	r3, [r7, #31]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d146      	bne.n	800571e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800569e:	4413      	add	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	b292      	uxth	r2, r2
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fb4d 	bl	8004d46 <st_word>
			fs->wflag = 1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	70da      	strb	r2, [r3, #3]
			break;
 80056b2:	e037      	b.n	8005724 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	09db      	lsrs	r3, r3, #7
 80056bc:	4413      	add	r3, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff fde7 	bl	8005294 <move_window>
 80056c6:	4603      	mov	r3, r0
 80056c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d128      	bne.n	8005722 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80056e4:	4413      	add	r3, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fb0a 	bl	8004d00 <ld_dword>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056f2:	4323      	orrs	r3, r4
 80056f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005704:	4413      	add	r3, r2
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fb37 	bl	8004d7c <st_dword>
			fs->wflag = 1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	70da      	strb	r2, [r3, #3]
			break;
 8005714:	e006      	b.n	8005724 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005716:	bf00      	nop
 8005718:	e004      	b.n	8005724 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800571a:	bf00      	nop
 800571c:	e002      	b.n	8005724 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005722:	bf00      	nop
		}
	}
	return res;
 8005724:	7ffb      	ldrb	r3, [r7, #31]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3724      	adds	r7, #36	; 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd90      	pop	{r4, r7, pc}

0800572e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b088      	sub	sp, #32
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d904      	bls.n	8005754 <remove_chain+0x26>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	d301      	bcc.n	8005758 <remove_chain+0x2a>
 8005754:	2302      	movs	r3, #2
 8005756:	e04b      	b.n	80057f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800575e:	f04f 32ff 	mov.w	r2, #4294967295
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	69b8      	ldr	r0, [r7, #24]
 8005766:	f7ff fef8 	bl	800555a <put_fat>
 800576a:	4603      	mov	r3, r0
 800576c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800576e:	7ffb      	ldrb	r3, [r7, #31]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <remove_chain+0x4a>
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	e03b      	b.n	80057f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff fe45 	bl	800540a <get_fat>
 8005780:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d031      	beq.n	80057ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <remove_chain+0x64>
 800578e:	2302      	movs	r3, #2
 8005790:	e02e      	b.n	80057f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d101      	bne.n	800579e <remove_chain+0x70>
 800579a:	2301      	movs	r3, #1
 800579c:	e028      	b.n	80057f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800579e:	2200      	movs	r2, #0
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	69b8      	ldr	r0, [r7, #24]
 80057a4:	f7ff fed9 	bl	800555a <put_fat>
 80057a8:	4603      	mov	r3, r0
 80057aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80057ac:	7ffb      	ldrb	r3, [r7, #31]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <remove_chain+0x88>
 80057b2:	7ffb      	ldrb	r3, [r7, #31]
 80057b4:	e01c      	b.n	80057f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	3b02      	subs	r3, #2
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d20b      	bcs.n	80057dc <remove_chain+0xae>
			fs->free_clst++;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	791b      	ldrb	r3, [r3, #4]
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d3c6      	bcc.n	8005778 <remove_chain+0x4a>
 80057ea:	e000      	b.n	80057ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80057ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <create_chain+0x2c>
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d31b      	bcc.n	800585c <create_chain+0x64>
 8005824:	2301      	movs	r3, #1
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e018      	b.n	800585c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff fdec 	bl	800540a <get_fat>
 8005832:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d801      	bhi.n	800583e <create_chain+0x46>
 800583a:	2301      	movs	r3, #1
 800583c:	e070      	b.n	8005920 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d101      	bne.n	800584a <create_chain+0x52>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	e06a      	b.n	8005920 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	429a      	cmp	r2, r3
 8005852:	d201      	bcs.n	8005858 <create_chain+0x60>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	e063      	b.n	8005920 <create_chain+0x128>
		scl = clst;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3301      	adds	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	429a      	cmp	r2, r3
 800586e:	d307      	bcc.n	8005880 <create_chain+0x88>
				ncl = 2;
 8005870:	2302      	movs	r3, #2
 8005872:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	429a      	cmp	r2, r3
 800587a:	d901      	bls.n	8005880 <create_chain+0x88>
 800587c:	2300      	movs	r3, #0
 800587e:	e04f      	b.n	8005920 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005880:	69f9      	ldr	r1, [r7, #28]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fdc1 	bl	800540a <get_fat>
 8005888:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d003      	beq.n	800589e <create_chain+0xa6>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d101      	bne.n	80058a2 <create_chain+0xaa>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	e03e      	b.n	8005920 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d1da      	bne.n	8005860 <create_chain+0x68>
 80058aa:	2300      	movs	r3, #0
 80058ac:	e038      	b.n	8005920 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80058ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80058b0:	f04f 32ff 	mov.w	r2, #4294967295
 80058b4:	69f9      	ldr	r1, [r7, #28]
 80058b6:	6938      	ldr	r0, [r7, #16]
 80058b8:	f7ff fe4f 	bl	800555a <put_fat>
 80058bc:	4603      	mov	r3, r0
 80058be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <create_chain+0xe2>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6938      	ldr	r0, [r7, #16]
 80058d2:	f7ff fe42 	bl	800555a <put_fat>
 80058d6:	4603      	mov	r3, r0
 80058d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d116      	bne.n	800590e <create_chain+0x116>
		fs->last_clst = ncl;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	3b02      	subs	r3, #2
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d804      	bhi.n	80058fe <create_chain+0x106>
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	1e5a      	subs	r2, r3, #1
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	791b      	ldrb	r3, [r3, #4]
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	711a      	strb	r2, [r3, #4]
 800590c:	e007      	b.n	800591e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d102      	bne.n	800591a <create_chain+0x122>
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	e000      	b.n	800591c <create_chain+0x124>
 800591a:	2301      	movs	r3, #1
 800591c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800591e:	69fb      	ldr	r3, [r7, #28]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	3304      	adds	r3, #4
 800593e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	0a5b      	lsrs	r3, r3, #9
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	8952      	ldrh	r2, [r2, #10]
 8005948:	fbb3 f3f2 	udiv	r3, r3, r2
 800594c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	613a      	str	r2, [r7, #16]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <clmt_clust+0x3a>
 800595e:	2300      	movs	r3, #0
 8005960:	e010      	b.n	8005984 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	d307      	bcc.n	800597a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	3304      	adds	r3, #4
 8005976:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005978:	e7e9      	b.n	800594e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800597a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
}
 8005984:	4618      	mov	r0, r3
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a6:	d204      	bcs.n	80059b2 <dir_sdi+0x22>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80059b2:	2302      	movs	r3, #2
 80059b4:	e063      	b.n	8005a7e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <dir_sdi+0x46>
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d902      	bls.n	80059d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10c      	bne.n	80059f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	8912      	ldrh	r2, [r2, #8]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d301      	bcc.n	80059ec <dir_sdi+0x5c>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e048      	b.n	8005a7e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	61da      	str	r2, [r3, #28]
 80059f4:	e029      	b.n	8005a4a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	895b      	ldrh	r3, [r3, #10]
 80059fa:	025b      	lsls	r3, r3, #9
 80059fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059fe:	e019      	b.n	8005a34 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6979      	ldr	r1, [r7, #20]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fd00 	bl	800540a <get_fat>
 8005a0a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d101      	bne.n	8005a18 <dir_sdi+0x88>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e032      	b.n	8005a7e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d904      	bls.n	8005a28 <dir_sdi+0x98>
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d301      	bcc.n	8005a2c <dir_sdi+0x9c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e028      	b.n	8005a7e <dir_sdi+0xee>
			ofs -= csz;
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d2e1      	bcs.n	8005a00 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	6938      	ldr	r0, [r7, #16]
 8005a40:	f7ff fcc4 	bl	80053cc <clust2sect>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <dir_sdi+0xcc>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e010      	b.n	8005a7e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	0a5b      	lsrs	r3, r3, #9
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	441a      	add	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	3320      	adds	r3, #32
 8005a9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <dir_next+0x28>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aac:	d301      	bcc.n	8005ab2 <dir_next+0x2c>
 8005aae:	2304      	movs	r3, #4
 8005ab0:	e0aa      	b.n	8005c08 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 8098 	bne.w	8005bee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	8912      	ldrh	r2, [r2, #8]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	f0c0 8088 	bcc.w	8005bee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	61da      	str	r2, [r3, #28]
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	e08f      	b.n	8005c08 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	0a5b      	lsrs	r3, r3, #9
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	8952      	ldrh	r2, [r2, #10]
 8005af0:	3a01      	subs	r2, #1
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d17a      	bne.n	8005bee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f7ff fc82 	bl	800540a <get_fat>
 8005b06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d801      	bhi.n	8005b12 <dir_next+0x8c>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e07a      	b.n	8005c08 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d101      	bne.n	8005b1e <dir_next+0x98>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e074      	b.n	8005c08 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d358      	bcc.n	8005bda <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	61da      	str	r2, [r3, #28]
 8005b34:	2304      	movs	r3, #4
 8005b36:	e067      	b.n	8005c08 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7ff fe59 	bl	80057f8 <create_chain>
 8005b46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <dir_next+0xcc>
 8005b4e:	2307      	movs	r3, #7
 8005b50:	e05a      	b.n	8005c08 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <dir_next+0xd6>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e055      	b.n	8005c08 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d101      	bne.n	8005b68 <dir_next+0xe2>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e04f      	b.n	8005c08 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff fb4f 	bl	800520c <sync_window>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <dir_next+0xf2>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e047      	b.n	8005c08 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3334      	adds	r3, #52	; 0x34
 8005b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff f947 	bl	8004e16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fc1c 	bl	80053cc <clust2sect>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
 8005b9a:	e012      	b.n	8005bc2 <dir_next+0x13c>
						fs->wflag = 1;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fb32 	bl	800520c <sync_window>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <dir_next+0x12c>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e02a      	b.n	8005c08 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	895b      	ldrh	r3, [r3, #10]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d3e6      	bcc.n	8005b9c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad2      	subs	r2, r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fbf2 	bl	80053cc <clust2sect>
 8005be8:	4602      	mov	r2, r0
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c00:	441a      	add	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff feb4 	bl	8005990 <dir_sdi>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d12b      	bne.n	8005c8a <dir_alloc+0x7a>
		n = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff fb29 	bl	8005294 <move_window>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11d      	bne.n	8005c88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2be5      	cmp	r3, #229	; 0xe5
 8005c54:	d004      	beq.n	8005c60 <dir_alloc+0x50>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d107      	bne.n	8005c70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	3301      	adds	r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d102      	bne.n	8005c74 <dir_alloc+0x64>
 8005c6e:	e00c      	b.n	8005c8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c74:	2101      	movs	r1, #1
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff ff05 	bl	8005a86 <dir_next>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0d7      	beq.n	8005c36 <dir_alloc+0x26>
 8005c86:	e000      	b.n	8005c8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005c88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d101      	bne.n	8005c94 <dir_alloc+0x84>
 8005c90:	2307      	movs	r3, #7
 8005c92:	75fb      	strb	r3, [r7, #23]
	return res;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	331a      	adds	r3, #26
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f80f 	bl	8004cd0 <ld_word>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d109      	bne.n	8005cd2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff f804 	bl	8004cd0 <ld_word>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	331a      	adds	r3, #26
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	b292      	uxth	r2, r2
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff f827 	bl	8004d46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d109      	bne.n	8005d14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f103 0214 	add.w	r2, r3, #20
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7ff f819 	bl	8004d46 <st_word>
	}
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff fe2f 	bl	8005990 <dir_sdi>
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <dir_find+0x24>
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	e03e      	b.n	8005dbe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	4619      	mov	r1, r3
 8005d46:	6938      	ldr	r0, [r7, #16]
 8005d48:	f7ff faa4 	bl	8005294 <move_window>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d12f      	bne.n	8005db6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <dir_find+0x4e>
 8005d64:	2304      	movs	r3, #4
 8005d66:	75fb      	strb	r3, [r7, #23]
 8005d68:	e028      	b.n	8005dbc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	330b      	adds	r3, #11
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	330b      	adds	r3, #11
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <dir_find+0x86>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a18      	ldr	r0, [r3, #32]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	220b      	movs	r2, #11
 8005d96:	4619      	mov	r1, r3
 8005d98:	f7ff f858 	bl	8004e4c <mem_cmp>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005da2:	2100      	movs	r1, #0
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fe6e 	bl	8005a86 <dir_next>
 8005daa:	4603      	mov	r3, r0
 8005dac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0c5      	beq.n	8005d40 <dir_find+0x24>
 8005db4:	e002      	b.n	8005dbc <dir_find+0xa0>
		if (res != FR_OK) break;
 8005db6:	bf00      	nop
 8005db8:	e000      	b.n	8005dbc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005dba:	bf00      	nop

	return res;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff ff1a 	bl	8005c10 <dir_alloc>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11c      	bne.n	8005e20 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	4619      	mov	r1, r3
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f7ff fa51 	bl	8005294 <move_window>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d111      	bne.n	8005e20 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	2220      	movs	r2, #32
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff f806 	bl	8004e16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a18      	ldr	r0, [r3, #32]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3324      	adds	r3, #36	; 0x24
 8005e12:	220b      	movs	r2, #11
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fe ffdd 	bl	8004dd4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3324      	adds	r3, #36	; 0x24
 8005e40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e42:	220b      	movs	r2, #11
 8005e44:	2120      	movs	r1, #32
 8005e46:	68b8      	ldr	r0, [r7, #8]
 8005e48:	f7fe ffe5 	bl	8004e16 <mem_set>
	si = i = 0; ni = 8;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	2308      	movs	r3, #8
 8005e56:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e66:	7efb      	ldrb	r3, [r7, #27]
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d94e      	bls.n	8005f0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e6c:	7efb      	ldrb	r3, [r7, #27]
 8005e6e:	2b2f      	cmp	r3, #47	; 0x2f
 8005e70:	d006      	beq.n	8005e80 <create_name+0x54>
 8005e72:	7efb      	ldrb	r3, [r7, #27]
 8005e74:	2b5c      	cmp	r3, #92	; 0x5c
 8005e76:	d110      	bne.n	8005e9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e78:	e002      	b.n	8005e80 <create_name+0x54>
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b2f      	cmp	r3, #47	; 0x2f
 8005e8a:	d0f6      	beq.n	8005e7a <create_name+0x4e>
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b5c      	cmp	r3, #92	; 0x5c
 8005e96:	d0f0      	beq.n	8005e7a <create_name+0x4e>
			break;
 8005e98:	e038      	b.n	8005f0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005e9a:	7efb      	ldrb	r3, [r7, #27]
 8005e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9e:	d003      	beq.n	8005ea8 <create_name+0x7c>
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d30c      	bcc.n	8005ec2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b0b      	cmp	r3, #11
 8005eac:	d002      	beq.n	8005eb4 <create_name+0x88>
 8005eae:	7efb      	ldrb	r3, [r7, #27]
 8005eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb2:	d001      	beq.n	8005eb8 <create_name+0x8c>
 8005eb4:	2306      	movs	r3, #6
 8005eb6:	e044      	b.n	8005f42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005eb8:	2308      	movs	r3, #8
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	230b      	movs	r3, #11
 8005ebe:	617b      	str	r3, [r7, #20]
			continue;
 8005ec0:	e022      	b.n	8005f08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005ec2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da04      	bge.n	8005ed4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005eca:	7efb      	ldrb	r3, [r7, #27]
 8005ecc:	3b80      	subs	r3, #128	; 0x80
 8005ece:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <create_name+0x120>)
 8005ed0:	5cd3      	ldrb	r3, [r2, r3]
 8005ed2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005ed4:	7efb      	ldrb	r3, [r7, #27]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	481d      	ldr	r0, [pc, #116]	; (8005f50 <create_name+0x124>)
 8005eda:	f7fe ffde 	bl	8004e9a <chk_chr>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <create_name+0xbc>
 8005ee4:	2306      	movs	r3, #6
 8005ee6:	e02c      	b.n	8005f42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005ee8:	7efb      	ldrb	r3, [r7, #27]
 8005eea:	2b60      	cmp	r3, #96	; 0x60
 8005eec:	d905      	bls.n	8005efa <create_name+0xce>
 8005eee:	7efb      	ldrb	r3, [r7, #27]
 8005ef0:	2b7a      	cmp	r3, #122	; 0x7a
 8005ef2:	d802      	bhi.n	8005efa <create_name+0xce>
 8005ef4:	7efb      	ldrb	r3, [r7, #27]
 8005ef6:	3b20      	subs	r3, #32
 8005ef8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	613a      	str	r2, [r7, #16]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	4413      	add	r3, r2
 8005f04:	7efa      	ldrb	r2, [r7, #27]
 8005f06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005f08:	e7a6      	b.n	8005e58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	441a      	add	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <create_name+0xf4>
 8005f1c:	2306      	movs	r3, #6
 8005f1e:	e010      	b.n	8005f42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2be5      	cmp	r3, #229	; 0xe5
 8005f26:	d102      	bne.n	8005f2e <create_name+0x102>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f2e:	7efb      	ldrb	r3, [r7, #27]
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d801      	bhi.n	8005f38 <create_name+0x10c>
 8005f34:	2204      	movs	r2, #4
 8005f36:	e000      	b.n	8005f3a <create_name+0x10e>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	330b      	adds	r3, #11
 8005f3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	0800b628 	.word	0x0800b628
 8005f50:	0800b494 	.word	0x0800b494

08005f54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f68:	e002      	b.n	8005f70 <follow_path+0x1c>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b2f      	cmp	r3, #47	; 0x2f
 8005f76:	d0f8      	beq.n	8005f6a <follow_path+0x16>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f7e:	d0f4      	beq.n	8005f6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b1f      	cmp	r3, #31
 8005f8c:	d80a      	bhi.n	8005fa4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2280      	movs	r2, #128	; 0x80
 8005f92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005f96:	2100      	movs	r1, #0
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fcf9 	bl	8005990 <dir_sdi>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75fb      	strb	r3, [r7, #23]
 8005fa2:	e043      	b.n	800602c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff3f 	bl	8005e2c <create_name>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d134      	bne.n	8006022 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff feaf 	bl	8005d1c <dir_find>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005fc8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d127      	bne.n	8006026 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d122      	bne.n	8006026 <follow_path+0xd2>
 8005fe0:	2305      	movs	r3, #5
 8005fe2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005fe4:	e01f      	b.n	8006026 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11c      	bne.n	800602a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	799b      	ldrb	r3, [r3, #6]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ffc:	2305      	movs	r3, #5
 8005ffe:	75fb      	strb	r3, [r7, #23]
 8006000:	e014      	b.n	800602c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006010:	4413      	add	r3, r2
 8006012:	4619      	mov	r1, r3
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fe42 	bl	8005c9e <ld_clust>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006020:	e7c0      	b.n	8005fa4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006022:	bf00      	nop
 8006024:	e002      	b.n	800602c <follow_path+0xd8>
				break;
 8006026:	bf00      	nop
 8006028:	e000      	b.n	800602c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800602a:	bf00      	nop
			}
		}
	}

	return res;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006036:	b480      	push	{r7}
 8006038:	b087      	sub	sp, #28
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295
 8006042:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d031      	beq.n	80060b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	e002      	b.n	800605a <get_ldnumber+0x24>
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	3301      	adds	r3, #1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b20      	cmp	r3, #32
 8006060:	d903      	bls.n	800606a <get_ldnumber+0x34>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b3a      	cmp	r3, #58	; 0x3a
 8006068:	d1f4      	bne.n	8006054 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b3a      	cmp	r3, #58	; 0x3a
 8006070:	d11c      	bne.n	80060ac <get_ldnumber+0x76>
			tp = *path;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	60fa      	str	r2, [r7, #12]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	3b30      	subs	r3, #48	; 0x30
 8006082:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b09      	cmp	r3, #9
 8006088:	d80e      	bhi.n	80060a8 <get_ldnumber+0x72>
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	429a      	cmp	r2, r3
 8006090:	d10a      	bne.n	80060a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <get_ldnumber+0x72>
					vol = (int)i;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	e002      	b.n	80060b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060b0:	693b      	ldr	r3, [r7, #16]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	70da      	strb	r2, [r3, #3]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f04f 32ff 	mov.w	r2, #4294967295
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff f8da 	bl	8005294 <move_window>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <check_fs+0x2a>
 80060e6:	2304      	movs	r3, #4
 80060e8:	e038      	b.n	800615c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3334      	adds	r3, #52	; 0x34
 80060ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fdec 	bl	8004cd0 <ld_word>
 80060f8:	4603      	mov	r3, r0
 80060fa:	461a      	mov	r2, r3
 80060fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <check_fs+0x48>
 8006104:	2303      	movs	r3, #3
 8006106:	e029      	b.n	800615c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800610e:	2be9      	cmp	r3, #233	; 0xe9
 8006110:	d009      	beq.n	8006126 <check_fs+0x66>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006118:	2beb      	cmp	r3, #235	; 0xeb
 800611a:	d11e      	bne.n	800615a <check_fs+0x9a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006122:	2b90      	cmp	r3, #144	; 0x90
 8006124:	d119      	bne.n	800615a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3334      	adds	r3, #52	; 0x34
 800612a:	3336      	adds	r3, #54	; 0x36
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe fde7 	bl	8004d00 <ld_dword>
 8006132:	4603      	mov	r3, r0
 8006134:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006138:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <check_fs+0xa4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <check_fs+0x82>
 800613e:	2300      	movs	r3, #0
 8006140:	e00c      	b.n	800615c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3334      	adds	r3, #52	; 0x34
 8006146:	3352      	adds	r3, #82	; 0x52
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fdd9 	bl	8004d00 <ld_dword>
 800614e:	4603      	mov	r3, r0
 8006150:	4a05      	ldr	r2, [pc, #20]	; (8006168 <check_fs+0xa8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <check_fs+0x9a>
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800615a:	2302      	movs	r3, #2
}
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	00544146 	.word	0x00544146
 8006168:	33544146 	.word	0x33544146

0800616c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b096      	sub	sp, #88	; 0x58
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff ff58 	bl	8006036 <get_ldnumber>
 8006186:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	2b00      	cmp	r3, #0
 800618c:	da01      	bge.n	8006192 <find_volume+0x26>
 800618e:	230b      	movs	r3, #11
 8006190:	e235      	b.n	80065fe <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006192:	4aa5      	ldr	r2, [pc, #660]	; (8006428 <find_volume+0x2bc>)
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <find_volume+0x3a>
 80061a2:	230c      	movs	r3, #12
 80061a4:	e22b      	b.n	80065fe <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80061a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061a8:	f7fe fe92 	bl	8004ed0 <lock_fs>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <find_volume+0x4a>
 80061b2:	230f      	movs	r3, #15
 80061b4:	e223      	b.n	80065fe <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01a      	beq.n	8006202 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe fcdf 	bl	8004b94 <disk_status>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80061dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10c      	bne.n	8006202 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <find_volume+0x92>
 80061ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80061fa:	230a      	movs	r3, #10
 80061fc:	e1ff      	b.n	80065fe <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80061fe:	2300      	movs	r3, #0
 8006200:	e1fd      	b.n	80065fe <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	b2da      	uxtb	r2, r3
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe fcd7 	bl	8004bc8 <disk_initialize>
 800621a:	4603      	mov	r3, r0
 800621c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800622c:	2303      	movs	r3, #3
 800622e:	e1e6      	b.n	80065fe <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <find_volume+0xda>
 8006236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8006242:	230a      	movs	r3, #10
 8006244:	e1db      	b.n	80065fe <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800624a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800624c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800624e:	f7ff ff37 	bl	80060c0 <check_fs>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006258:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800625c:	2b02      	cmp	r3, #2
 800625e:	d149      	bne.n	80062f4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006260:	2300      	movs	r3, #0
 8006262:	643b      	str	r3, [r7, #64]	; 0x40
 8006264:	e01e      	b.n	80062a4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800626c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006274:	4413      	add	r3, r2
 8006276:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	3304      	adds	r3, #4
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <find_volume+0x124>
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	3308      	adds	r3, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fd3a 	bl	8004d00 <ld_dword>
 800628c:	4602      	mov	r2, r0
 800628e:	e000      	b.n	8006292 <find_volume+0x126>
 8006290:	2200      	movs	r2, #0
 8006292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	3358      	adds	r3, #88	; 0x58
 8006298:	443b      	add	r3, r7
 800629a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800629e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a0:	3301      	adds	r3, #1
 80062a2:	643b      	str	r3, [r7, #64]	; 0x40
 80062a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d9dd      	bls.n	8006266 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80062aa:	2300      	movs	r3, #0
 80062ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80062ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <find_volume+0x14e>
 80062b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b6:	3b01      	subs	r3, #1
 80062b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	3358      	adds	r3, #88	; 0x58
 80062c0:	443b      	add	r3, r7
 80062c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <find_volume+0x16e>
 80062ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062d2:	f7ff fef5 	bl	80060c0 <check_fs>
 80062d6:	4603      	mov	r3, r0
 80062d8:	e000      	b.n	80062dc <find_volume+0x170>
 80062da:	2303      	movs	r3, #3
 80062dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d905      	bls.n	80062f4 <find_volume+0x188>
 80062e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ea:	3301      	adds	r3, #1
 80062ec:	643b      	str	r3, [r7, #64]	; 0x40
 80062ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d9e2      	bls.n	80062ba <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d101      	bne.n	8006300 <find_volume+0x194>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e17e      	b.n	80065fe <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006304:	2b01      	cmp	r3, #1
 8006306:	d901      	bls.n	800630c <find_volume+0x1a0>
 8006308:	230d      	movs	r3, #13
 800630a:	e178      	b.n	80065fe <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	3334      	adds	r3, #52	; 0x34
 8006310:	330b      	adds	r3, #11
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fcdc 	bl	8004cd0 <ld_word>
 8006318:	4603      	mov	r3, r0
 800631a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631e:	d001      	beq.n	8006324 <find_volume+0x1b8>
 8006320:	230d      	movs	r3, #13
 8006322:	e16c      	b.n	80065fe <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	3334      	adds	r3, #52	; 0x34
 8006328:	3316      	adds	r3, #22
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fcd0 	bl	8004cd0 <ld_word>
 8006330:	4603      	mov	r3, r0
 8006332:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <find_volume+0x1dc>
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	3334      	adds	r3, #52	; 0x34
 800633e:	3324      	adds	r3, #36	; 0x24
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fcdd 	bl	8004d00 <ld_dword>
 8006346:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	789b      	ldrb	r3, [r3, #2]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d005      	beq.n	800636c <find_volume+0x200>
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	789b      	ldrb	r3, [r3, #2]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d001      	beq.n	800636c <find_volume+0x200>
 8006368:	230d      	movs	r3, #13
 800636a:	e148      	b.n	80065fe <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	789b      	ldrb	r3, [r3, #2]
 8006370:	461a      	mov	r2, r3
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006380:	b29a      	uxth	r2, r3
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	895b      	ldrh	r3, [r3, #10]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d008      	beq.n	80063a0 <find_volume+0x234>
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	895b      	ldrh	r3, [r3, #10]
 8006392:	461a      	mov	r2, r3
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	895b      	ldrh	r3, [r3, #10]
 8006398:	3b01      	subs	r3, #1
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <find_volume+0x238>
 80063a0:	230d      	movs	r3, #13
 80063a2:	e12c      	b.n	80065fe <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	3334      	adds	r3, #52	; 0x34
 80063a8:	3311      	adds	r3, #17
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fc90 	bl	8004cd0 <ld_word>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	891b      	ldrh	r3, [r3, #8]
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <find_volume+0x25e>
 80063c6:	230d      	movs	r3, #13
 80063c8:	e119      	b.n	80065fe <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	3334      	adds	r3, #52	; 0x34
 80063ce:	3313      	adds	r3, #19
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fc7d 	bl	8004cd0 <ld_word>
 80063d6:	4603      	mov	r3, r0
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80063da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <find_volume+0x282>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	3334      	adds	r3, #52	; 0x34
 80063e4:	3320      	adds	r3, #32
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fc8a 	bl	8004d00 <ld_dword>
 80063ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	3334      	adds	r3, #52	; 0x34
 80063f2:	330e      	adds	r3, #14
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe fc6b 	bl	8004cd0 <ld_word>
 80063fa:	4603      	mov	r3, r0
 80063fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80063fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <find_volume+0x29c>
 8006404:	230d      	movs	r3, #13
 8006406:	e0fa      	b.n	80065fe <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006408:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800640a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640c:	4413      	add	r3, r2
 800640e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006410:	8912      	ldrh	r2, [r2, #8]
 8006412:	0912      	lsrs	r2, r2, #4
 8006414:	b292      	uxth	r2, r2
 8006416:	4413      	add	r3, r2
 8006418:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800641a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	429a      	cmp	r2, r3
 8006420:	d204      	bcs.n	800642c <find_volume+0x2c0>
 8006422:	230d      	movs	r3, #13
 8006424:	e0eb      	b.n	80065fe <find_volume+0x492>
 8006426:	bf00      	nop
 8006428:	20007cf4 	.word	0x20007cf4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800642c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006434:	8952      	ldrh	r2, [r2, #10]
 8006436:	fbb3 f3f2 	udiv	r3, r3, r2
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <find_volume+0x2da>
 8006442:	230d      	movs	r3, #13
 8006444:	e0db      	b.n	80065fe <find_volume+0x492>
		fmt = FS_FAT32;
 8006446:	2303      	movs	r3, #3
 8006448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006452:	4293      	cmp	r3, r2
 8006454:	d802      	bhi.n	800645c <find_volume+0x2f0>
 8006456:	2302      	movs	r3, #2
 8006458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006462:	4293      	cmp	r3, r2
 8006464:	d802      	bhi.n	800646c <find_volume+0x300>
 8006466:	2301      	movs	r3, #1
 8006468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1c9a      	adds	r2, r3, #2
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006478:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800647a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800647c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647e:	441a      	add	r2, r3
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006484:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	441a      	add	r2, r3
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800648e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006492:	2b03      	cmp	r3, #3
 8006494:	d11e      	bne.n	80064d4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	3334      	adds	r3, #52	; 0x34
 800649a:	332a      	adds	r3, #42	; 0x2a
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fc17 	bl	8004cd0 <ld_word>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <find_volume+0x340>
 80064a8:	230d      	movs	r3, #13
 80064aa:	e0a8      	b.n	80065fe <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	891b      	ldrh	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <find_volume+0x34c>
 80064b4:	230d      	movs	r3, #13
 80064b6:	e0a2      	b.n	80065fe <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	3334      	adds	r3, #52	; 0x34
 80064bc:	332c      	adds	r3, #44	; 0x2c
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fc1e 	bl	8004d00 <ld_dword>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	647b      	str	r3, [r7, #68]	; 0x44
 80064d2:	e01f      	b.n	8006514 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	891b      	ldrh	r3, [r3, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <find_volume+0x374>
 80064dc:	230d      	movs	r3, #13
 80064de:	e08e      	b.n	80065fe <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e6:	441a      	add	r2, r3
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d103      	bne.n	80064fc <find_volume+0x390>
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	e00a      	b.n	8006512 <find_volume+0x3a6>
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	4613      	mov	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	4413      	add	r3, r2
 8006506:	085a      	lsrs	r2, r3, #1
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800651e:	0a5b      	lsrs	r3, r3, #9
 8006520:	429a      	cmp	r2, r3
 8006522:	d201      	bcs.n	8006528 <find_volume+0x3bc>
 8006524:	230d      	movs	r3, #13
 8006526:	e06a      	b.n	80065fe <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	615a      	str	r2, [r3, #20]
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	2280      	movs	r2, #128	; 0x80
 800653c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800653e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006542:	2b03      	cmp	r3, #3
 8006544:	d149      	bne.n	80065da <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	3334      	adds	r3, #52	; 0x34
 800654a:	3330      	adds	r3, #48	; 0x30
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe fbbf 	bl	8004cd0 <ld_word>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d140      	bne.n	80065da <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655a:	3301      	adds	r3, #1
 800655c:	4619      	mov	r1, r3
 800655e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006560:	f7fe fe98 	bl	8005294 <move_window>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d137      	bne.n	80065da <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	2200      	movs	r2, #0
 800656e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	3334      	adds	r3, #52	; 0x34
 8006574:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe fba9 	bl	8004cd0 <ld_word>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006586:	429a      	cmp	r2, r3
 8006588:	d127      	bne.n	80065da <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	3334      	adds	r3, #52	; 0x34
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fbb6 	bl	8004d00 <ld_dword>
 8006594:	4603      	mov	r3, r0
 8006596:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <find_volume+0x49c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d11e      	bne.n	80065da <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659e:	3334      	adds	r3, #52	; 0x34
 80065a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe fbab 	bl	8004d00 <ld_dword>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4a17      	ldr	r2, [pc, #92]	; (800660c <find_volume+0x4a0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d113      	bne.n	80065da <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	3334      	adds	r3, #52	; 0x34
 80065b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fba0 	bl	8004d00 <ld_dword>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	3334      	adds	r3, #52	; 0x34
 80065ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fb96 	bl	8004d00 <ld_dword>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80065e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <find_volume+0x4a4>)
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <find_volume+0x4a4>)
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	4b08      	ldr	r3, [pc, #32]	; (8006610 <find_volume+0x4a4>)
 80065f0:	881a      	ldrh	r2, [r3, #0]
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80065f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065f8:	f7fe fde4 	bl	80051c4 <clear_lock>
#endif
	return FR_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3758      	adds	r7, #88	; 0x58
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	41615252 	.word	0x41615252
 800660c:	61417272 	.word	0x61417272
 8006610:	20007cf8 	.word	0x20007cf8

08006614 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800661e:	2309      	movs	r3, #9
 8006620:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02e      	beq.n	8006686 <validate+0x72>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02a      	beq.n	8006686 <validate+0x72>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d025      	beq.n	8006686 <validate+0x72>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	889a      	ldrh	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	88db      	ldrh	r3, [r3, #6]
 8006644:	429a      	cmp	r2, r3
 8006646:	d11e      	bne.n	8006686 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fc3f 	bl	8004ed0 <lock_fs>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d014      	beq.n	8006682 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fa98 	bl	8004b94 <disk_status>
 8006664:	4603      	mov	r3, r0
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <validate+0x60>
				res = FR_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	e008      	b.n	8006686 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fc3e 	bl	8004efc <unlock_fs>
 8006680:	e001      	b.n	8006686 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8006682:	230f      	movs	r3, #15
 8006684:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <validate+0x7e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	e000      	b.n	8006694 <validate+0x80>
 8006692:	2300      	movs	r3, #0
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	6013      	str	r3, [r2, #0]
	return res;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80066b6:	f107 0310 	add.w	r3, r7, #16
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fcbb 	bl	8006036 <get_ldnumber>
 80066c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	da01      	bge.n	80066cc <f_mount+0x28>
 80066c8:	230b      	movs	r3, #11
 80066ca:	e048      	b.n	800675e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80066cc:	4a26      	ldr	r2, [pc, #152]	; (8006768 <f_mount+0xc4>)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00f      	beq.n	80066fc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80066dc:	69b8      	ldr	r0, [r7, #24]
 80066de:	f7fe fd71 	bl	80051c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fd9a 	bl	8007220 <ff_del_syncobj>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <f_mount+0x52>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e033      	b.n	800675e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00f      	beq.n	8006722 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	330c      	adds	r3, #12
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f000 fd69 	bl	80071ea <ff_cre_syncobj>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <f_mount+0x7e>
 800671e:	2302      	movs	r3, #2
 8006720:	e01d      	b.n	800675e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4910      	ldr	r1, [pc, #64]	; (8006768 <f_mount+0xc4>)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <f_mount+0x94>
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <f_mount+0x98>
 8006738:	2300      	movs	r3, #0
 800673a:	e010      	b.n	800675e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800673c:	f107 010c 	add.w	r1, r7, #12
 8006740:	f107 0308 	add.w	r3, r7, #8
 8006744:	2200      	movs	r2, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fd10 	bl	800616c <find_volume>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	7dfa      	ldrb	r2, [r7, #23]
 8006754:	4611      	mov	r1, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fbd0 	bl	8004efc <unlock_fs>
 800675c:	7dfb      	ldrb	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20007cf4 	.word	0x20007cf4

0800676c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b098      	sub	sp, #96	; 0x60
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <f_open+0x18>
 8006780:	2309      	movs	r3, #9
 8006782:	e1b4      	b.n	8006aee <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800678a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800678c:	79fa      	ldrb	r2, [r7, #7]
 800678e:	f107 0110 	add.w	r1, r7, #16
 8006792:	f107 0308 	add.w	r3, r7, #8
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fce8 	bl	800616c <find_volume>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80067a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 8191 	bne.w	8006ace <f_open+0x362>
		dj.obj.fs = fs;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	f107 0314 	add.w	r3, r7, #20
 80067b6:	4611      	mov	r1, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fbcb 	bl	8005f54 <follow_path>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11a      	bne.n	8006802 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80067cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067d0:	b25b      	sxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da03      	bge.n	80067de <f_open+0x72>
				res = FR_INVALID_NAME;
 80067d6:	2306      	movs	r3, #6
 80067d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80067dc:	e011      	b.n	8006802 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bf14      	ite	ne
 80067e8:	2301      	movne	r3, #1
 80067ea:	2300      	moveq	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4611      	mov	r1, r2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fb9c 	bl	8004f34 <chk_lock>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	f003 031c 	and.w	r3, r3, #28
 8006808:	2b00      	cmp	r3, #0
 800680a:	d07f      	beq.n	800690c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800680c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006818:	2b04      	cmp	r3, #4
 800681a:	d10e      	bne.n	800683a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800681c:	f7fe fbe6 	bl	8004fec <enq_lock>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d006      	beq.n	8006834 <f_open+0xc8>
 8006826:	f107 0314 	add.w	r3, r7, #20
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff facb 	bl	8005dc6 <dir_register>
 8006830:	4603      	mov	r3, r0
 8006832:	e000      	b.n	8006836 <f_open+0xca>
 8006834:	2312      	movs	r3, #18
 8006836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	f043 0308 	orr.w	r3, r3, #8
 8006840:	71fb      	strb	r3, [r7, #7]
 8006842:	e010      	b.n	8006866 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006844:	7ebb      	ldrb	r3, [r7, #26]
 8006846:	f003 0311 	and.w	r3, r3, #17
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <f_open+0xea>
					res = FR_DENIED;
 800684e:	2307      	movs	r3, #7
 8006850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006854:	e007      	b.n	8006866 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <f_open+0xfa>
 8006860:	2308      	movs	r3, #8
 8006862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800686a:	2b00      	cmp	r3, #0
 800686c:	d168      	bne.n	8006940 <f_open+0x1d4>
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d063      	beq.n	8006940 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006878:	f7fe f92c 	bl	8004ad4 <get_fattime>
 800687c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	330e      	adds	r3, #14
 8006882:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fa79 	bl	8004d7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800688a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688c:	3316      	adds	r3, #22
 800688e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006890:	4618      	mov	r0, r3
 8006892:	f7fe fa73 	bl	8004d7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	330b      	adds	r3, #11
 800689a:	2220      	movs	r2, #32
 800689c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff f9fa 	bl	8005c9e <ld_clust>
 80068aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068b0:	2200      	movs	r2, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fa12 	bl	8005cdc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	331c      	adds	r3, #28
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fe fa5c 	bl	8004d7c <st_dword>
					fs->wflag = 1;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2201      	movs	r2, #1
 80068c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80068ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d037      	beq.n	8006940 <f_open+0x1d4>
						dw = fs->winsect;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80068d6:	f107 0314 	add.w	r3, r7, #20
 80068da:	2200      	movs	r2, #0
 80068dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe ff25 	bl	800572e <remove_chain>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80068ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d126      	bne.n	8006940 <f_open+0x1d4>
							res = move_window(fs, dw);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fccc 	bl	8005294 <move_window>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006906:	3a01      	subs	r2, #1
 8006908:	611a      	str	r2, [r3, #16]
 800690a:	e019      	b.n	8006940 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800690c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006910:	2b00      	cmp	r3, #0
 8006912:	d115      	bne.n	8006940 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006914:	7ebb      	ldrb	r3, [r7, #26]
 8006916:	f003 0310 	and.w	r3, r3, #16
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <f_open+0x1ba>
					res = FR_NO_FILE;
 800691e:	2304      	movs	r3, #4
 8006920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006924:	e00c      	b.n	8006940 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <f_open+0x1d4>
 8006930:	7ebb      	ldrb	r3, [r7, #26]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <f_open+0x1d4>
						res = FR_DENIED;
 800693a:	2307      	movs	r3, #7
 800693c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006944:	2b00      	cmp	r3, #0
 8006946:	d128      	bne.n	800699a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006958:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf14      	ite	ne
 8006972:	2301      	movne	r3, #1
 8006974:	2300      	moveq	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	f107 0314 	add.w	r3, r7, #20
 800697e:	4611      	mov	r1, r2
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe fb55 	bl	8005030 <inc_lock>
 8006986:	4602      	mov	r2, r0
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <f_open+0x22e>
 8006994:	2302      	movs	r3, #2
 8006996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800699a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 8095 	bne.w	8006ace <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff f977 	bl	8005c9e <ld_clust>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	331c      	adds	r3, #28
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe f9a0 	bl	8004d00 <ld_dword>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	88da      	ldrh	r2, [r3, #6]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	79fa      	ldrb	r2, [r7, #7]
 80069de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3330      	adds	r3, #48	; 0x30
 80069f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe fa0a 	bl	8004e16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d060      	beq.n	8006ace <f_open+0x362>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d05c      	beq.n	8006ace <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	895b      	ldrh	r3, [r3, #10]
 8006a20:	025b      	lsls	r3, r3, #9
 8006a22:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a30:	e016      	b.n	8006a60 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fce7 	bl	800540a <get_fat>
 8006a3c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d802      	bhi.n	8006a4a <f_open+0x2de>
 8006a44:	2302      	movs	r3, #2
 8006a46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d102      	bne.n	8006a58 <f_open+0x2ec>
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <f_open+0x304>
 8006a68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d8e0      	bhi.n	8006a32 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006a76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d127      	bne.n	8006ace <f_open+0x362>
 8006a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d022      	beq.n	8006ace <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fc9d 	bl	80053cc <clust2sect>
 8006a92:	6478      	str	r0, [r7, #68]	; 0x44
 8006a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <f_open+0x336>
						res = FR_INT_ERR;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006aa0:	e015      	b.n	8006ace <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa4:	0a5a      	lsrs	r2, r3, #9
 8006aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa8:	441a      	add	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	7858      	ldrb	r0, [r3, #1]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	2301      	movs	r3, #1
 8006abe:	f7fe f8a9 	bl	8004c14 <disk_read>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <f_open+0x362>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <f_open+0x370>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fa09 	bl	8004efc <unlock_fs>
 8006aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3760      	adds	r7, #96	; 0x60
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b08e      	sub	sp, #56	; 0x38
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f107 0214 	add.w	r2, r7, #20
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fd7c 	bl	8006614 <validate>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d107      	bne.n	8006b3a <f_read+0x44>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	7d5b      	ldrb	r3, [r3, #21]
 8006b2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006b32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <f_read+0x58>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe f9da 	bl	8004efc <unlock_fs>
 8006b48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b4c:	e13d      	b.n	8006dca <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	7d1b      	ldrb	r3, [r3, #20]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <f_read+0x72>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2107      	movs	r1, #7
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe f9cc 	bl	8004efc <unlock_fs>
 8006b64:	2307      	movs	r3, #7
 8006b66:	e130      	b.n	8006dca <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	f240 811c 	bls.w	8006db6 <f_read+0x2c0>
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006b82:	e118      	b.n	8006db6 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 80e4 	bne.w	8006d5a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	0a5b      	lsrs	r3, r3, #9
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	8952      	ldrh	r2, [r2, #10]
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d139      	bne.n	8006c1c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb6:	e013      	b.n	8006be0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7fe feae 	bl	8005928 <clmt_clust>
 8006bcc:	6338      	str	r0, [r7, #48]	; 0x30
 8006bce:	e007      	b.n	8006be0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7fe fc16 	bl	800540a <get_fat>
 8006bde:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d809      	bhi.n	8006bfa <f_read+0x104>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2202      	movs	r2, #2
 8006bea:	755a      	strb	r2, [r3, #21]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2102      	movs	r1, #2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe f983 	bl	8004efc <unlock_fs>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e0e7      	b.n	8006dca <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c00:	d109      	bne.n	8006c16 <f_read+0x120>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	755a      	strb	r2, [r3, #21]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe f975 	bl	8004efc <unlock_fs>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e0d9      	b.n	8006dca <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fe fbd1 	bl	80053cc <clust2sect>
 8006c2a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <f_read+0x150>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2202      	movs	r2, #2
 8006c36:	755a      	strb	r2, [r3, #21]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2102      	movs	r1, #2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe f95d 	bl	8004efc <unlock_fs>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e0c1      	b.n	8006dca <f_read+0x2d4>
			sect += csect;
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	0a5b      	lsrs	r3, r3, #9
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d03e      	beq.n	8006cd8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	4413      	add	r3, r2
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	8952      	ldrh	r2, [r2, #10]
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d905      	bls.n	8006c74 <f_read+0x17e>
					cc = fs->csize - csect;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	895b      	ldrh	r3, [r3, #10]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	7858      	ldrb	r0, [r3, #1]
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c7e:	f7fd ffc9 	bl	8004c14 <disk_read>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <f_read+0x1a6>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	755a      	strb	r2, [r3, #21]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe f932 	bl	8004efc <unlock_fs>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e096      	b.n	8006dca <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	da14      	bge.n	8006cd0 <f_read+0x1da>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1a      	ldr	r2, [r3, #32]
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d90d      	bls.n	8006cd0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1a      	ldr	r2, [r3, #32]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	025b      	lsls	r3, r3, #9
 8006cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc0:	18d0      	adds	r0, r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3330      	adds	r3, #48	; 0x30
 8006cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cca:	4619      	mov	r1, r3
 8006ccc:	f7fe f882 	bl	8004dd4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	025b      	lsls	r3, r3, #9
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006cd6:	e05a      	b.n	8006d8e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d038      	beq.n	8006d54 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	7d1b      	ldrb	r3, [r3, #20]
 8006ce6:	b25b      	sxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	da1d      	bge.n	8006d28 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	7858      	ldrb	r0, [r3, #1]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f7fd ffaa 	bl	8004c54 <disk_write>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <f_read+0x224>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	755a      	strb	r2, [r3, #21]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2101      	movs	r1, #1
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe f8f3 	bl	8004efc <unlock_fs>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e057      	b.n	8006dca <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	7d1b      	ldrb	r3, [r3, #20]
 8006d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	7858      	ldrb	r0, [r3, #1]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d32:	2301      	movs	r3, #1
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	f7fd ff6d 	bl	8004c14 <disk_read>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <f_read+0x25e>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	755a      	strb	r2, [r3, #21]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe f8d6 	bl	8004efc <unlock_fs>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e03a      	b.n	8006dca <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d901      	bls.n	8006d74 <f_read+0x27e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	4413      	add	r3, r2
 8006d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d86:	4619      	mov	r1, r3
 8006d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d8a:	f7fe f823 	bl	8004dd4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	4413      	add	r3, r2
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	441a      	add	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	619a      	str	r2, [r3, #24]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	441a      	add	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f aee3 	bne.w	8006b84 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe f89a 	bl	8004efc <unlock_fs>
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3738      	adds	r7, #56	; 0x38
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f107 0208 	add.w	r2, r7, #8
 8006de0:	4611      	mov	r1, r2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff fc16 	bl	8006614 <validate>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d16d      	bne.n	8006ece <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7d1b      	ldrb	r3, [r3, #20]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d067      	beq.n	8006ece <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7d1b      	ldrb	r3, [r3, #20]
 8006e02:	b25b      	sxtb	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da1a      	bge.n	8006e3e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	7858      	ldrb	r0, [r3, #1]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	2301      	movs	r3, #1
 8006e18:	f7fd ff1c 	bl	8004c54 <disk_write>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d006      	beq.n	8006e30 <f_sync+0x5e>
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2101      	movs	r1, #1
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe f868 	bl	8004efc <unlock_fs>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e055      	b.n	8006edc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7d1b      	ldrb	r3, [r3, #20]
 8006e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006e3e:	f7fd fe49 	bl	8004ad4 <get_fattime>
 8006e42:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7fe fa21 	bl	8005294 <move_window>
 8006e52:	4603      	mov	r3, r0
 8006e54:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d138      	bne.n	8006ece <f_sync+0xfc>
					dir = fp->dir_ptr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	330b      	adds	r3, #11
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	330b      	adds	r3, #11
 8006e6c:	f042 0220 	orr.w	r2, r2, #32
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	f7fe ff2c 	bl	8005cdc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f103 021c 	add.w	r2, r3, #28
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fd ff73 	bl	8004d7c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3316      	adds	r3, #22
 8006e9a:	6939      	ldr	r1, [r7, #16]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fd ff6d 	bl	8004d7c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3312      	adds	r3, #18
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fd ff4c 	bl	8004d46 <st_word>
					fs->wflag = 1;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fa1a 	bl	80052f0 <sync_fs>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	7d1b      	ldrb	r3, [r3, #20]
 8006ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	7dfa      	ldrb	r2, [r7, #23]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe f811 	bl	8004efc <unlock_fs>
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ff70 	bl	8006dd2 <f_sync>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d11d      	bne.n	8006f38 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f107 0208 	add.w	r2, r7, #8
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff fb85 	bl	8006614 <validate>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d111      	bne.n	8006f38 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe f917 	bl	800514c <dec_lock>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fd ffe2 	bl	8004efc <unlock_fs>
#endif
		}
	}
	return res;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b092      	sub	sp, #72	; 0x48
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006f4e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006f52:	f107 030c 	add.w	r3, r7, #12
 8006f56:	2200      	movs	r2, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff f907 	bl	800616c <find_volume>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006f64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8099 	bne.w	80070a0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	3b02      	subs	r3, #2
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d804      	bhi.n	8006f8c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e089      	b.n	80070a0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d128      	bne.n	8006fea <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006fa0:	f107 0314 	add.w	r3, r7, #20
 8006fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fa2f 	bl	800540a <get_fat>
 8006fac:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb4:	d103      	bne.n	8006fbe <f_getfree+0x7c>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006fbc:	e063      	b.n	8007086 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d103      	bne.n	8006fcc <f_getfree+0x8a>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006fca:	e05c      	b.n	8007086 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <f_getfree+0x96>
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fda:	3301      	adds	r3, #1
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d3db      	bcc.n	8006fa0 <f_getfree+0x5e>
 8006fe8:	e04d      	b.n	8007086 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007000:	2b00      	cmp	r3, #0
 8007002:	d113      	bne.n	800702c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	63ba      	str	r2, [r7, #56]	; 0x38
 800700c:	4619      	mov	r1, r3
 800700e:	f7fe f941 	bl	8005294 <move_window>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007018:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800701c:	2b00      	cmp	r3, #0
 800701e:	d131      	bne.n	8007084 <f_getfree+0x142>
							p = fs->win;
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	3334      	adds	r3, #52	; 0x34
 8007024:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d10f      	bne.n	8007054 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007036:	f7fd fe4b 	bl	8004cd0 <ld_word>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <f_getfree+0x104>
 8007040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007042:	3301      	adds	r3, #1
 8007044:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	3302      	adds	r3, #2
 800704a:	633b      	str	r3, [r7, #48]	; 0x30
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	3b02      	subs	r3, #2
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
 8007052:	e010      	b.n	8007076 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007056:	f7fd fe53 	bl	8004d00 <ld_dword>
 800705a:	4603      	mov	r3, r0
 800705c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <f_getfree+0x128>
 8007064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007066:	3301      	adds	r3, #1
 8007068:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	3304      	adds	r3, #4
 800706e:	633b      	str	r3, [r7, #48]	; 0x30
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	3b04      	subs	r3, #4
 8007074:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	3b01      	subs	r3, #1
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800707c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1bd      	bne.n	8006ffe <f_getfree+0xbc>
 8007082:	e000      	b.n	8007086 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007084:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800708a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007090:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	791a      	ldrb	r2, [r3, #4]
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	f042 0201 	orr.w	r2, r2, #1
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd ff27 	bl	8004efc <unlock_fs>
 80070ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3748      	adds	r7, #72	; 0x48
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b088      	sub	sp, #32
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80070ce:	e01b      	b.n	8007108 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80070d0:	f107 0310 	add.w	r3, r7, #16
 80070d4:	f107 0114 	add.w	r1, r7, #20
 80070d8:	2201      	movs	r2, #1
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fd0b 	bl	8006af6 <f_read>
		if (rc != 1) break;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d116      	bne.n	8007114 <f_gets+0x5a>
		c = s[0];
 80070e6:	7d3b      	ldrb	r3, [r7, #20]
 80070e8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b0d      	cmp	r3, #13
 80070ee:	d100      	bne.n	80070f2 <f_gets+0x38>
 80070f0:	e00a      	b.n	8007108 <f_gets+0x4e>
		*p++ = c;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	61ba      	str	r2, [r7, #24]
 80070f8:	7dfa      	ldrb	r2, [r7, #23]
 80070fa:	701a      	strb	r2, [r3, #0]
		n++;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	3301      	adds	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b0a      	cmp	r3, #10
 8007106:	d007      	beq.n	8007118 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	3b01      	subs	r3, #1
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	429a      	cmp	r2, r3
 8007110:	dbde      	blt.n	80070d0 <f_gets+0x16>
 8007112:	e002      	b.n	800711a <f_gets+0x60>
		if (rc != 1) break;
 8007114:	bf00      	nop
 8007116:	e000      	b.n	800711a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007118:	bf00      	nop
	}
	*p = 0;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <f_gets+0x70>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	e000      	b.n	800712c <f_gets+0x72>
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800714a:	4b1f      	ldr	r3, [pc, #124]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 800714c:	7a5b      	ldrb	r3, [r3, #9]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d131      	bne.n	80071b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007154:	4b1c      	ldr	r3, [pc, #112]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 8007156:	7a5b      	ldrb	r3, [r3, #9]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 800715e:	2100      	movs	r1, #0
 8007160:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007162:	4b19      	ldr	r3, [pc, #100]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 8007164:	7a5b      	ldrb	r3, [r3, #9]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 8007174:	7a5b      	ldrb	r3, [r3, #9]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 800717c:	4413      	add	r3, r2
 800717e:	79fa      	ldrb	r2, [r7, #7]
 8007180:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007182:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 8007184:	7a5b      	ldrb	r3, [r3, #9]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	b2d1      	uxtb	r1, r2
 800718c:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <FATFS_LinkDriverEx+0x94>)
 800718e:	7251      	strb	r1, [r2, #9]
 8007190:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007192:	7dbb      	ldrb	r3, [r7, #22]
 8007194:	3330      	adds	r3, #48	; 0x30
 8007196:	b2da      	uxtb	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3301      	adds	r3, #1
 80071a0:	223a      	movs	r2, #58	; 0x3a
 80071a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	3302      	adds	r3, #2
 80071a8:	222f      	movs	r2, #47	; 0x2f
 80071aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	3303      	adds	r3, #3
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20007d1c 	.word	0x20007d1c

080071cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80071d6:	2200      	movs	r2, #0
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff ffaa 	bl	8007134 <FATFS_LinkDriverEx>
 80071e0:	4603      	mov	r3, r0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	4603      	mov	r3, r0
 80071f2:	6039      	str	r1, [r7, #0]
 80071f4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80071f6:	2200      	movs	r2, #0
 80071f8:	2101      	movs	r1, #1
 80071fa:	2001      	movs	r0, #1
 80071fc:	f000 f977 	bl	80074ee <osSemaphoreNew>
 8007200:	4602      	mov	r2, r0
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	bf14      	ite	ne
 800720e:	2301      	movne	r3, #1
 8007210:	2300      	moveq	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	60fb      	str	r3, [r7, #12]

    return ret;
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fa7f 	bl	800772c <osSemaphoreDelete>
#endif
    return 1;
 800722e:	2301      	movs	r3, #1
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8007244:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f9d9 	bl	8007600 <osSemaphoreAcquire>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8007254:	2301      	movs	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa1a 	bl	80076a4 <osSemaphoreRelease>
#endif
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <__NVIC_SetPriority>:
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007288:	2b00      	cmp	r3, #0
 800728a:	db0a      	blt.n	80072a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	490c      	ldr	r1, [pc, #48]	; (80072c4 <__NVIC_SetPriority+0x4c>)
 8007292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007296:	0112      	lsls	r2, r2, #4
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	440b      	add	r3, r1
 800729c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072a0:	e00a      	b.n	80072b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	4908      	ldr	r1, [pc, #32]	; (80072c8 <__NVIC_SetPriority+0x50>)
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	3b04      	subs	r3, #4
 80072b0:	0112      	lsls	r2, r2, #4
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	440b      	add	r3, r1
 80072b6:	761a      	strb	r2, [r3, #24]
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	e000e100 	.word	0xe000e100
 80072c8:	e000ed00 	.word	0xe000ed00

080072cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <SysTick_Handler+0x1c>)
 80072d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072d4:	f002 f9d6 	bl	8009684 <xTaskGetSchedulerState>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d001      	beq.n	80072e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072de:	f003 f8bb 	bl	800a458 <xPortSysTickHandler>
  }
}
 80072e2:	bf00      	nop
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	e000e010 	.word	0xe000e010

080072ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072f0:	2100      	movs	r1, #0
 80072f2:	f06f 0004 	mvn.w	r0, #4
 80072f6:	f7ff ffbf 	bl	8007278 <__NVIC_SetPriority>
#endif
}
 80072fa:	bf00      	nop
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007306:	f3ef 8305 	mrs	r3, IPSR
 800730a:	603b      	str	r3, [r7, #0]
  return(result);
 800730c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007312:	f06f 0305 	mvn.w	r3, #5
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	e00c      	b.n	8007334 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800731a:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <osKernelInitialize+0x44>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007322:	4b08      	ldr	r3, [pc, #32]	; (8007344 <osKernelInitialize+0x44>)
 8007324:	2201      	movs	r2, #1
 8007326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007328:	2300      	movs	r3, #0
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	e002      	b.n	8007334 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007334:	687b      	ldr	r3, [r7, #4]
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20007d28 	.word	0x20007d28

08007348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800734e:	f3ef 8305 	mrs	r3, IPSR
 8007352:	603b      	str	r3, [r7, #0]
  return(result);
 8007354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <osKernelStart+0x1a>
    stat = osErrorISR;
 800735a:	f06f 0305 	mvn.w	r3, #5
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	e010      	b.n	8007384 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <osKernelStart+0x48>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d109      	bne.n	800737e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800736a:	f7ff ffbf 	bl	80072ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <osKernelStart+0x48>)
 8007370:	2202      	movs	r2, #2
 8007372:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007374:	f001 fd3e 	bl	8008df4 <vTaskStartScheduler>
      stat = osOK;
 8007378:	2300      	movs	r3, #0
 800737a:	607b      	str	r3, [r7, #4]
 800737c:	e002      	b.n	8007384 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800737e:	f04f 33ff 	mov.w	r3, #4294967295
 8007382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007384:	687b      	ldr	r3, [r7, #4]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20007d28 	.word	0x20007d28

08007394 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b08e      	sub	sp, #56	; 0x38
 8007398:	af04      	add	r7, sp, #16
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a4:	f3ef 8305 	mrs	r3, IPSR
 80073a8:	617b      	str	r3, [r7, #20]
  return(result);
 80073aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d17e      	bne.n	80074ae <osThreadNew+0x11a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d07b      	beq.n	80074ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073ba:	2318      	movs	r3, #24
 80073bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d045      	beq.n	800745a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <osThreadNew+0x48>
        name = attr->name;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d008      	beq.n	8007402 <osThreadNew+0x6e>
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b38      	cmp	r3, #56	; 0x38
 80073f4:	d805      	bhi.n	8007402 <osThreadNew+0x6e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <osThreadNew+0x72>
        return (NULL);
 8007402:	2300      	movs	r3, #0
 8007404:	e054      	b.n	80074b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	089b      	lsrs	r3, r3, #2
 8007414:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00e      	beq.n	800743c <osThreadNew+0xa8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b5b      	cmp	r3, #91	; 0x5b
 8007424:	d90a      	bls.n	800743c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800742a:	2b00      	cmp	r3, #0
 800742c:	d006      	beq.n	800743c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <osThreadNew+0xa8>
        mem = 1;
 8007436:	2301      	movs	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e010      	b.n	800745e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10c      	bne.n	800745e <osThreadNew+0xca>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d108      	bne.n	800745e <osThreadNew+0xca>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <osThreadNew+0xca>
          mem = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	e001      	b.n	800745e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d110      	bne.n	8007486 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800746c:	9202      	str	r2, [sp, #8]
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6a3a      	ldr	r2, [r7, #32]
 8007478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f001 fae4 	bl	8008a48 <xTaskCreateStatic>
 8007480:	4603      	mov	r3, r0
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	e013      	b.n	80074ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d110      	bne.n	80074ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	b29a      	uxth	r2, r3
 8007490:	f107 0310 	add.w	r3, r7, #16
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f001 fb2f 	bl	8008b02 <xTaskCreate>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <osThreadNew+0x11a>
            hTask = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074ae:	693b      	ldr	r3, [r7, #16]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3728      	adds	r7, #40	; 0x28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c0:	f3ef 8305 	mrs	r3, IPSR
 80074c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80074c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <osDelay+0x1c>
    stat = osErrorISR;
 80074cc:	f06f 0305 	mvn.w	r3, #5
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e007      	b.n	80074e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fc54 	bl	8008d8c <vTaskDelay>
    }
  }

  return (stat);
 80074e4:	68fb      	ldr	r3, [r7, #12]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b08a      	sub	sp, #40	; 0x28
 80074f2:	af02      	add	r7, sp, #8
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fe:	f3ef 8305 	mrs	r3, IPSR
 8007502:	613b      	str	r3, [r7, #16]
  return(result);
 8007504:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007506:	2b00      	cmp	r3, #0
 8007508:	d175      	bne.n	80075f6 <osSemaphoreNew+0x108>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d072      	beq.n	80075f6 <osSemaphoreNew+0x108>
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	429a      	cmp	r2, r3
 8007516:	d86e      	bhi.n	80075f6 <osSemaphoreNew+0x108>
    mem = -1;
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
 800751c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d015      	beq.n	8007550 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d006      	beq.n	800753a <osSemaphoreNew+0x4c>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b4f      	cmp	r3, #79	; 0x4f
 8007532:	d902      	bls.n	800753a <osSemaphoreNew+0x4c>
        mem = 1;
 8007534:	2301      	movs	r3, #1
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	e00c      	b.n	8007554 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d108      	bne.n	8007554 <osSemaphoreNew+0x66>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <osSemaphoreNew+0x66>
          mem = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	e001      	b.n	8007554 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d04c      	beq.n	80075f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d128      	bne.n	80075b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d10a      	bne.n	800757e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2203      	movs	r2, #3
 800756e:	9200      	str	r2, [sp, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	2100      	movs	r1, #0
 8007574:	2001      	movs	r0, #1
 8007576:	f000 fac1 	bl	8007afc <xQueueGenericCreateStatic>
 800757a:	61f8      	str	r0, [r7, #28]
 800757c:	e005      	b.n	800758a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800757e:	2203      	movs	r2, #3
 8007580:	2100      	movs	r1, #0
 8007582:	2001      	movs	r0, #1
 8007584:	f000 fb32 	bl	8007bec <xQueueGenericCreate>
 8007588:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d022      	beq.n	80075d6 <osSemaphoreNew+0xe8>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01f      	beq.n	80075d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007596:	2300      	movs	r3, #0
 8007598:	2200      	movs	r2, #0
 800759a:	2100      	movs	r1, #0
 800759c:	69f8      	ldr	r0, [r7, #28]
 800759e:	f000 fbed 	bl	8007d7c <xQueueGenericSend>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d016      	beq.n	80075d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80075a8:	69f8      	ldr	r0, [r7, #28]
 80075aa:	f001 f879 	bl	80086a0 <vQueueDelete>
            hSemaphore = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	e010      	b.n	80075d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d108      	bne.n	80075cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	461a      	mov	r2, r3
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fb6f 	bl	8007ca6 <xQueueCreateCountingSemaphoreStatic>
 80075c8:	61f8      	str	r0, [r7, #28]
 80075ca:	e004      	b.n	80075d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fba0 	bl	8007d14 <xQueueCreateCountingSemaphore>
 80075d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00c      	beq.n	80075f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <osSemaphoreNew+0xfc>
          name = attr->name;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e001      	b.n	80075ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80075ee:	6979      	ldr	r1, [r7, #20]
 80075f0:	69f8      	ldr	r0, [r7, #28]
 80075f2:	f001 f9a1 	bl	8008938 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80075f6:	69fb      	ldr	r3, [r7, #28]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007618:	f06f 0303 	mvn.w	r3, #3
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	e039      	b.n	8007694 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007620:	f3ef 8305 	mrs	r3, IPSR
 8007624:	60fb      	str	r3, [r7, #12]
  return(result);
 8007626:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007628:	2b00      	cmp	r3, #0
 800762a:	d022      	beq.n	8007672 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007632:	f06f 0303 	mvn.w	r3, #3
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	e02c      	b.n	8007694 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800763e:	f107 0308 	add.w	r3, r7, #8
 8007642:	461a      	mov	r2, r3
 8007644:	2100      	movs	r1, #0
 8007646:	6938      	ldr	r0, [r7, #16]
 8007648:	f000 ffaa 	bl	80085a0 <xQueueReceiveFromISR>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d003      	beq.n	800765a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007652:	f06f 0302 	mvn.w	r3, #2
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	e01c      	b.n	8007694 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d019      	beq.n	8007694 <osSemaphoreAcquire+0x94>
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <osSemaphoreAcquire+0xa0>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	e010      	b.n	8007694 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6938      	ldr	r0, [r7, #16]
 8007676:	f000 fe87 	bl	8008388 <xQueueSemaphoreTake>
 800767a:	4603      	mov	r3, r0
 800767c:	2b01      	cmp	r3, #1
 800767e:	d009      	beq.n	8007694 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007686:	f06f 0301 	mvn.w	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e002      	b.n	8007694 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800768e:	f06f 0302 	mvn.w	r3, #2
 8007692:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007694:	697b      	ldr	r3, [r7, #20]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80076ba:	f06f 0303 	mvn.w	r3, #3
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e02c      	b.n	800771c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c2:	f3ef 8305 	mrs	r3, IPSR
 80076c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01a      	beq.n	8007704 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4619      	mov	r1, r3
 80076d8:	6938      	ldr	r0, [r7, #16]
 80076da:	f000 fce8 	bl	80080ae <xQueueGiveFromISR>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d003      	beq.n	80076ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80076e4:	f06f 0302 	mvn.w	r3, #2
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e017      	b.n	800771c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d014      	beq.n	800771c <osSemaphoreRelease+0x78>
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <osSemaphoreRelease+0x84>)
 80076f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	e00b      	b.n	800771c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007704:	2300      	movs	r3, #0
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	6938      	ldr	r0, [r7, #16]
 800770c:	f000 fb36 	bl	8007d7c <xQueueGenericSend>
 8007710:	4603      	mov	r3, r0
 8007712:	2b01      	cmp	r3, #1
 8007714:	d002      	beq.n	800771c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007716:	f06f 0302 	mvn.w	r3, #2
 800771a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800771c:	697b      	ldr	r3, [r7, #20]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007738:	f3ef 8305 	mrs	r3, IPSR
 800773c:	60fb      	str	r3, [r7, #12]
  return(result);
 800773e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8007744:	f06f 0305 	mvn.w	r3, #5
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e00e      	b.n	800776a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8007752:	f06f 0303 	mvn.w	r3, #3
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e007      	b.n	800776a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800775a:	6938      	ldr	r0, [r7, #16]
 800775c:	f001 f916 	bl	800898c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8007764:	6938      	ldr	r0, [r7, #16]
 8007766:	f000 ff9b 	bl	80086a0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800776a:	697b      	ldr	r3, [r7, #20]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af02      	add	r7, sp, #8
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007784:	f3ef 8305 	mrs	r3, IPSR
 8007788:	613b      	str	r3, [r7, #16]
  return(result);
 800778a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800778c:	2b00      	cmp	r3, #0
 800778e:	d15f      	bne.n	8007850 <osMessageQueueNew+0xdc>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d05c      	beq.n	8007850 <osMessageQueueNew+0xdc>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d059      	beq.n	8007850 <osMessageQueueNew+0xdc>
    mem = -1;
 800779c:	f04f 33ff 	mov.w	r3, #4294967295
 80077a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d029      	beq.n	80077fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d012      	beq.n	80077d6 <osMessageQueueNew+0x62>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b4f      	cmp	r3, #79	; 0x4f
 80077b6:	d90e      	bls.n	80077d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d302      	bcc.n	80077d6 <osMessageQueueNew+0x62>
        mem = 1;
 80077d0:	2301      	movs	r3, #1
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	e014      	b.n	8007800 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d110      	bne.n	8007800 <osMessageQueueNew+0x8c>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10c      	bne.n	8007800 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d108      	bne.n	8007800 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <osMessageQueueNew+0x8c>
          mem = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e001      	b.n	8007800 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d10b      	bne.n	800781e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2100      	movs	r1, #0
 8007810:	9100      	str	r1, [sp, #0]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f971 	bl	8007afc <xQueueGenericCreateStatic>
 800781a:	61f8      	str	r0, [r7, #28]
 800781c:	e008      	b.n	8007830 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007824:	2200      	movs	r2, #0
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f9df 	bl	8007bec <xQueueGenericCreate>
 800782e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00c      	beq.n	8007850 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <osMessageQueueNew+0xd0>
        name = attr->name;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	e001      	b.n	8007848 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007848:	6979      	ldr	r1, [r7, #20]
 800784a:	69f8      	ldr	r0, [r7, #28]
 800784c:	f001 f874 	bl	8008938 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007850:	69fb      	ldr	r3, [r7, #28]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a07      	ldr	r2, [pc, #28]	; (8007888 <vApplicationGetIdleTaskMemory+0x2c>)
 800786c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a06      	ldr	r2, [pc, #24]	; (800788c <vApplicationGetIdleTaskMemory+0x30>)
 8007872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2280      	movs	r2, #128	; 0x80
 8007878:	601a      	str	r2, [r3, #0]
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20007d2c 	.word	0x20007d2c
 800788c:	20007d88 	.word	0x20007d88

08007890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a07      	ldr	r2, [pc, #28]	; (80078bc <vApplicationGetTimerTaskMemory+0x2c>)
 80078a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a06      	ldr	r2, [pc, #24]	; (80078c0 <vApplicationGetTimerTaskMemory+0x30>)
 80078a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078ae:	601a      	str	r2, [r3, #0]
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	20007f88 	.word	0x20007f88
 80078c0:	20007fe4 	.word	0x20007fe4

080078c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f103 0208 	add.w	r2, r3, #8
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295
 80078dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f103 0208 	add.w	r2, r3, #8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f103 0208 	add.w	r2, r3, #8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d103      	bne.n	8007986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e00c      	b.n	80079a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3308      	adds	r3, #8
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	e002      	b.n	8007994 <vListInsert+0x2e>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	429a      	cmp	r2, r3
 800799e:	d2f6      	bcs.n	800798e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6892      	ldr	r2, [r2, #8]
 80079ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6852      	ldr	r2, [r2, #4]
 80079f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d103      	bne.n	8007a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	1e5a      	subs	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a56:	f002 fc6d 	bl	800a334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a66:	fb01 f303 	mul.w	r3, r1, r3
 8007a6a:	441a      	add	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	3b01      	subs	r3, #1
 8007a88:	68f9      	ldr	r1, [r7, #12]
 8007a8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a8c:	fb01 f303 	mul.w	r3, r1, r3
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	22ff      	movs	r2, #255	; 0xff
 8007a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d114      	bne.n	8007ad6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01a      	beq.n	8007aea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3310      	adds	r3, #16
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 fc25 	bl	8009308 <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d012      	beq.n	8007aea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <xQueueGenericReset+0xcc>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	e009      	b.n	8007aea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3310      	adds	r3, #16
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff fef2 	bl	80078c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3324      	adds	r3, #36	; 0x24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff feed 	bl	80078c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007aea:	f002 fc53 	bl	800a394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007aee:	2301      	movs	r3, #1
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08e      	sub	sp, #56	; 0x38
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <xQueueGenericCreateStatic+0x52>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <xQueueGenericCreateStatic+0x56>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <xQueueGenericCreateStatic+0x58>
 8007b52:	2300      	movs	r3, #0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	623b      	str	r3, [r7, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <xQueueGenericCreateStatic+0x7e>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <xQueueGenericCreateStatic+0x82>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <xQueueGenericCreateStatic+0x84>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	61fb      	str	r3, [r7, #28]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b9a:	2350      	movs	r3, #80	; 0x50
 8007b9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b50      	cmp	r3, #80	; 0x50
 8007ba2:	d00a      	beq.n	8007bba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	61bb      	str	r3, [r7, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00d      	beq.n	8007be2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f83f 	bl	8007c60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3730      	adds	r7, #48	; 0x30
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	3350      	adds	r3, #80	; 0x50
 8007c24:	4618      	mov	r0, r3
 8007c26:	f002 fca7 	bl	800a578 <pvPortMalloc>
 8007c2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d011      	beq.n	8007c56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	3350      	adds	r3, #80	; 0x50
 8007c3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c44:	79fa      	ldrb	r2, [r7, #7]
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f805 	bl	8007c60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c56:	69bb      	ldr	r3, [r7, #24]
	}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e002      	b.n	8007c82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c8e:	2101      	movs	r1, #1
 8007c90:	69b8      	ldr	r0, [r7, #24]
 8007c92:	f7ff fecb 	bl	8007a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b08a      	sub	sp, #40	; 0x28
 8007caa:	af02      	add	r7, sp, #8
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d90a      	bls.n	8007cec <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	617b      	str	r3, [r7, #20]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007cec:	2302      	movs	r3, #2
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff ff00 	bl	8007afc <xQueueGenericCreateStatic>
 8007cfc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
	}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3720      	adds	r7, #32
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	613b      	str	r3, [r7, #16]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d90a      	bls.n	8007d58 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60fb      	str	r3, [r7, #12]
}
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d58:	2202      	movs	r2, #2
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff ff45 	bl	8007bec <xQueueGenericCreate>
 8007d62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d70:	697b      	ldr	r3, [r7, #20]
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08e      	sub	sp, #56	; 0x38
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <xQueueGenericSend+0x32>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <xQueueGenericSend+0x40>
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <xQueueGenericSend+0x44>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e000      	b.n	8007dc2 <xQueueGenericSend+0x46>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <xQueueGenericSend+0x60>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d103      	bne.n	8007dea <xQueueGenericSend+0x6e>
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d101      	bne.n	8007dee <xQueueGenericSend+0x72>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <xQueueGenericSend+0x74>
 8007dee:	2300      	movs	r3, #0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <xQueueGenericSend+0x8e>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	623b      	str	r3, [r7, #32]
}
 8007e06:	bf00      	nop
 8007e08:	e7fe      	b.n	8007e08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e0a:	f001 fc3b 	bl	8009684 <xTaskGetSchedulerState>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <xQueueGenericSend+0x9e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <xQueueGenericSend+0xa2>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <xQueueGenericSend+0xa4>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <xQueueGenericSend+0xbe>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	61fb      	str	r3, [r7, #28]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e3a:	f002 fa7b 	bl	800a334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d302      	bcc.n	8007e50 <xQueueGenericSend+0xd4>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d129      	bne.n	8007ea4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e56:	f000 fc5e 	bl	8008716 <prvCopyDataToQueue>
 8007e5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d010      	beq.n	8007e86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	3324      	adds	r3, #36	; 0x24
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 fa4d 	bl	8009308 <xTaskRemoveFromEventList>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d013      	beq.n	8007e9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e74:	4b3f      	ldr	r3, [pc, #252]	; (8007f74 <xQueueGenericSend+0x1f8>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	e00a      	b.n	8007e9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e8c:	4b39      	ldr	r3, [pc, #228]	; (8007f74 <xQueueGenericSend+0x1f8>)
 8007e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e9c:	f002 fa7a 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e063      	b.n	8007f6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eaa:	f002 fa73 	bl	800a394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e05c      	b.n	8007f6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d106      	bne.n	8007ec6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eb8:	f107 0314 	add.w	r3, r7, #20
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 fa87 	bl	80093d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ec6:	f002 fa65 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eca:	f000 fff9 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ece:	f002 fa31 	bl	800a334 <vPortEnterCritical>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d103      	bne.n	8007ee8 <xQueueGenericSend+0x16c>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSend+0x182>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007efe:	f002 fa49 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f02:	1d3a      	adds	r2, r7, #4
 8007f04:	f107 0314 	add.w	r3, r7, #20
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fa76 	bl	80093fc <xTaskCheckForTimeOut>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d124      	bne.n	8007f60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f18:	f000 fcf5 	bl	8008906 <prvIsQueueFull>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d018      	beq.n	8007f54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	3310      	adds	r3, #16
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f99c 	bl	8009268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f32:	f000 fc80 	bl	8008836 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f36:	f000 ffd1 	bl	8008edc <xTaskResumeAll>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f47f af7c 	bne.w	8007e3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f42:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <xQueueGenericSend+0x1f8>)
 8007f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	e772      	b.n	8007e3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f56:	f000 fc6e 	bl	8008836 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f5a:	f000 ffbf 	bl	8008edc <xTaskResumeAll>
 8007f5e:	e76c      	b.n	8007e3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f62:	f000 fc68 	bl	8008836 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f66:	f000 ffb9 	bl	8008edc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3738      	adds	r7, #56	; 0x38
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b090      	sub	sp, #64	; 0x40
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <xQueueGenericSendFromISR+0x3c>
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <xQueueGenericSendFromISR+0x40>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <xQueueGenericSendFromISR+0x42>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d103      	bne.n	8007fe2 <xQueueGenericSendFromISR+0x6a>
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <xQueueGenericSendFromISR+0x6e>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <xQueueGenericSendFromISR+0x70>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	623b      	str	r3, [r7, #32]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008002:	f002 fa79 	bl	800a4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008006:	f3ef 8211 	mrs	r2, BASEPRI
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	61fa      	str	r2, [r7, #28]
 800801c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800801e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	429a      	cmp	r2, r3
 800802c:	d302      	bcc.n	8008034 <xQueueGenericSendFromISR+0xbc>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d12f      	bne.n	8008094 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800804a:	f000 fb64 	bl	8008716 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800804e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008056:	d112      	bne.n	800807e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2b00      	cmp	r3, #0
 800805e:	d016      	beq.n	800808e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	3324      	adds	r3, #36	; 0x24
 8008064:	4618      	mov	r0, r3
 8008066:	f001 f94f 	bl	8009308 <xTaskRemoveFromEventList>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00e      	beq.n	800808e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	e007      	b.n	800808e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800807e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008082:	3301      	adds	r3, #1
 8008084:	b2db      	uxtb	r3, r3
 8008086:	b25a      	sxtb	r2, r3
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800808e:	2301      	movs	r3, #1
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008092:	e001      	b.n	8008098 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008094:	2300      	movs	r3, #0
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3740      	adds	r7, #64	; 0x40
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08e      	sub	sp, #56	; 0x38
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	623b      	str	r3, [r7, #32]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	61fb      	str	r3, [r7, #28]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <xQueueGiveFromISR+0x58>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <xQueueGiveFromISR+0x5c>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <xQueueGiveFromISR+0x5e>
 800810a:	2300      	movs	r3, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	61bb      	str	r3, [r7, #24]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008126:	f002 f9e7 	bl	800a4f8 <vPortValidateInterruptPriority>
	__asm volatile
 800812a:	f3ef 8211 	mrs	r2, BASEPRI
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	617a      	str	r2, [r7, #20]
 8008140:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008142:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008152:	429a      	cmp	r2, r3
 8008154:	d22b      	bcs.n	80081ae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800815c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008168:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d112      	bne.n	8008198 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b00      	cmp	r3, #0
 8008178:	d016      	beq.n	80081a8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	3324      	adds	r3, #36	; 0x24
 800817e:	4618      	mov	r0, r3
 8008180:	f001 f8c2 	bl	8009308 <xTaskRemoveFromEventList>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00e      	beq.n	80081a8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e007      	b.n	80081a8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819c:	3301      	adds	r3, #1
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	b25a      	sxtb	r2, r3
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081a8:	2301      	movs	r3, #1
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
 80081ac:	e001      	b.n	80081b2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f383 8811 	msr	BASEPRI, r3
}
 80081bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3738      	adds	r7, #56	; 0x38
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <xQueueReceive+0x30>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	623b      	str	r3, [r7, #32]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <xQueueReceive+0x3e>
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <xQueueReceive+0x42>
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <xQueueReceive+0x44>
 800820a:	2300      	movs	r3, #0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <xQueueReceive+0x5e>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	61fb      	str	r3, [r7, #28]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008226:	f001 fa2d 	bl	8009684 <xTaskGetSchedulerState>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <xQueueReceive+0x6e>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <xQueueReceive+0x72>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueReceive+0x74>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueReceive+0x8e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	61bb      	str	r3, [r7, #24]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008256:	f002 f86d 	bl	800a334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	2b00      	cmp	r3, #0
 8008264:	d01f      	beq.n	80082a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800826a:	f000 fabe 	bl	80087ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	1e5a      	subs	r2, r3, #1
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00f      	beq.n	800829e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	3310      	adds	r3, #16
 8008282:	4618      	mov	r0, r3
 8008284:	f001 f840 	bl	8009308 <xTaskRemoveFromEventList>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800828e:	4b3d      	ldr	r3, [pc, #244]	; (8008384 <xQueueReceive+0x1bc>)
 8008290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800829e:	f002 f879 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e069      	b.n	800837a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d103      	bne.n	80082b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ac:	f002 f872 	bl	800a394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082b0:	2300      	movs	r3, #0
 80082b2:	e062      	b.n	800837a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ba:	f107 0310 	add.w	r3, r7, #16
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 f886 	bl	80093d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c4:	2301      	movs	r3, #1
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082c8:	f002 f864 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082cc:	f000 fdf8 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082d0:	f002 f830 	bl	800a334 <vPortEnterCritical>
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082da:	b25b      	sxtb	r3, r3
 80082dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e0:	d103      	bne.n	80082ea <xQueueReceive+0x122>
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f0:	b25b      	sxtb	r3, r3
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d103      	bne.n	8008300 <xQueueReceive+0x138>
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008300:	f002 f848 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008304:	1d3a      	adds	r2, r7, #4
 8008306:	f107 0310 	add.w	r3, r7, #16
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f001 f875 	bl	80093fc <xTaskCheckForTimeOut>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d123      	bne.n	8008360 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831a:	f000 fade 	bl	80088da <prvIsQueueEmpty>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d017      	beq.n	8008354 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	3324      	adds	r3, #36	; 0x24
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f000 ff9b 	bl	8009268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008334:	f000 fa7f 	bl	8008836 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008338:	f000 fdd0 	bl	8008edc <xTaskResumeAll>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d189      	bne.n	8008256 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008342:	4b10      	ldr	r3, [pc, #64]	; (8008384 <xQueueReceive+0x1bc>)
 8008344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	e780      	b.n	8008256 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008356:	f000 fa6e 	bl	8008836 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800835a:	f000 fdbf 	bl	8008edc <xTaskResumeAll>
 800835e:	e77a      	b.n	8008256 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008362:	f000 fa68 	bl	8008836 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008366:	f000 fdb9 	bl	8008edc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800836a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836c:	f000 fab5 	bl	80088da <prvIsQueueEmpty>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	f43f af6f 	beq.w	8008256 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008378:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800837a:	4618      	mov	r0, r3
 800837c:	3730      	adds	r7, #48	; 0x30
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08e      	sub	sp, #56	; 0x38
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008392:	2300      	movs	r3, #0
 8008394:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	623b      	str	r3, [r7, #32]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	61fb      	str	r3, [r7, #28]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083d8:	f001 f954 	bl	8009684 <xTaskGetSchedulerState>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <xQueueSemaphoreTake+0x60>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <xQueueSemaphoreTake+0x64>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <xQueueSemaphoreTake+0x66>
 80083ec:	2300      	movs	r3, #0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	61bb      	str	r3, [r7, #24]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008408:	f001 ff94 	bl	800a334 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	2b00      	cmp	r3, #0
 8008416:	d024      	beq.n	8008462 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	1e5a      	subs	r2, r3, #1
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008428:	f001 faa2 	bl	8009970 <pvTaskIncrementMutexHeldCount>
 800842c:	4602      	mov	r2, r0
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00f      	beq.n	800845a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	3310      	adds	r3, #16
 800843e:	4618      	mov	r0, r3
 8008440:	f000 ff62 	bl	8009308 <xTaskRemoveFromEventList>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800844a:	4b54      	ldr	r3, [pc, #336]	; (800859c <xQueueSemaphoreTake+0x214>)
 800844c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800845a:	f001 ff9b 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 800845e:	2301      	movs	r3, #1
 8008460:	e097      	b.n	8008592 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d111      	bne.n	800848c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	617b      	str	r3, [r7, #20]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008484:	f001 ff86 	bl	800a394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008488:	2300      	movs	r3, #0
 800848a:	e082      	b.n	8008592 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848e:	2b00      	cmp	r3, #0
 8008490:	d106      	bne.n	80084a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008492:	f107 030c 	add.w	r3, r7, #12
 8008496:	4618      	mov	r0, r3
 8008498:	f000 ff9a 	bl	80093d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084a0:	f001 ff78 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084a4:	f000 fd0c 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a8:	f001 ff44 	bl	800a334 <vPortEnterCritical>
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084b2:	b25b      	sxtb	r3, r3
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b8:	d103      	bne.n	80084c2 <xQueueSemaphoreTake+0x13a>
 80084ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c8:	b25b      	sxtb	r3, r3
 80084ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ce:	d103      	bne.n	80084d8 <xQueueSemaphoreTake+0x150>
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084d8:	f001 ff5c 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084dc:	463a      	mov	r2, r7
 80084de:	f107 030c 	add.w	r3, r7, #12
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 ff89 	bl	80093fc <xTaskCheckForTimeOut>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d132      	bne.n	8008556 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084f2:	f000 f9f2 	bl	80088da <prvIsQueueEmpty>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d026      	beq.n	800854a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008504:	f001 ff16 	bl	800a334 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	4618      	mov	r0, r3
 800850e:	f001 f8d7 	bl	80096c0 <xTaskPriorityInherit>
 8008512:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008514:	f001 ff3e 	bl	800a394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	3324      	adds	r3, #36	; 0x24
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	4611      	mov	r1, r2
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fea1 	bl	8009268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008528:	f000 f985 	bl	8008836 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800852c:	f000 fcd6 	bl	8008edc <xTaskResumeAll>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	f47f af68 	bne.w	8008408 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008538:	4b18      	ldr	r3, [pc, #96]	; (800859c <xQueueSemaphoreTake+0x214>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	e75e      	b.n	8008408 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800854a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800854c:	f000 f973 	bl	8008836 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008550:	f000 fcc4 	bl	8008edc <xTaskResumeAll>
 8008554:	e758      	b.n	8008408 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008558:	f000 f96d 	bl	8008836 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800855c:	f000 fcbe 	bl	8008edc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008562:	f000 f9ba 	bl	80088da <prvIsQueueEmpty>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	f43f af4d 	beq.w	8008408 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00d      	beq.n	8008590 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008574:	f001 fede 	bl	800a334 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800857a:	f000 f8b4 	bl	80086e6 <prvGetDisinheritPriorityAfterTimeout>
 800857e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f970 	bl	800986c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800858c:	f001 ff02 	bl	800a394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008590:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008592:	4618      	mov	r0, r3
 8008594:	3738      	adds	r7, #56	; 0x38
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	e000ed04 	.word	0xe000ed04

080085a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08e      	sub	sp, #56	; 0x38
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	623b      	str	r3, [r7, #32]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d103      	bne.n	80085da <xQueueReceiveFromISR+0x3a>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <xQueueReceiveFromISR+0x3e>
 80085da:	2301      	movs	r3, #1
 80085dc:	e000      	b.n	80085e0 <xQueueReceiveFromISR+0x40>
 80085de:	2300      	movs	r3, #0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	61fb      	str	r3, [r7, #28]
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085fa:	f001 ff7d 	bl	800a4f8 <vPortValidateInterruptPriority>
	__asm volatile
 80085fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	61ba      	str	r2, [r7, #24]
 8008614:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008616:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	d02f      	beq.n	8008686 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008634:	f000 f8d9 	bl	80087ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	1e5a      	subs	r2, r3, #1
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d112      	bne.n	8008670 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d016      	beq.n	8008680 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	3310      	adds	r3, #16
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fe56 	bl	8009308 <xTaskRemoveFromEventList>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00e      	beq.n	8008680 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e007      	b.n	8008680 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008674:	3301      	adds	r3, #1
 8008676:	b2db      	uxtb	r3, r3
 8008678:	b25a      	sxtb	r2, r3
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008680:	2301      	movs	r3, #1
 8008682:	637b      	str	r3, [r7, #52]	; 0x34
 8008684:	e001      	b.n	800868a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008686:	2300      	movs	r3, #0
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f383 8811 	msr	BASEPRI, r3
}
 8008694:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008698:	4618      	mov	r0, r3
 800869a:	3738      	adds	r7, #56	; 0x38
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <vQueueDelete+0x28>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	60bb      	str	r3, [r7, #8]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f95f 	bl	800898c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d102      	bne.n	80086de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f002 f819 	bl	800a710 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	e001      	b.n	8008708 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008708:	68fb      	ldr	r3, [r7, #12]
	}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b086      	sub	sp, #24
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10d      	bne.n	8008750 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d14d      	bne.n	80087d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	4618      	mov	r0, r3
 8008742:	f001 f825 	bl	8009790 <xTaskPriorityDisinherit>
 8008746:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	609a      	str	r2, [r3, #8]
 800874e:	e043      	b.n	80087d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d119      	bne.n	800878a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6858      	ldr	r0, [r3, #4]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	461a      	mov	r2, r3
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	f002 f975 	bl	800aa50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	441a      	add	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	429a      	cmp	r2, r3
 800877e:	d32b      	bcc.n	80087d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	605a      	str	r2, [r3, #4]
 8008788:	e026      	b.n	80087d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68d8      	ldr	r0, [r3, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	461a      	mov	r2, r3
 8008794:	68b9      	ldr	r1, [r7, #8]
 8008796:	f002 f95b 	bl	800aa50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	425b      	negs	r3, r3
 80087a4:	441a      	add	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d207      	bcs.n	80087c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	425b      	negs	r3, r3
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d105      	bne.n	80087d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087e0:	697b      	ldr	r3, [r7, #20]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d018      	beq.n	800882e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	441a      	add	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	d303      	bcc.n	800881e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68d9      	ldr	r1, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	461a      	mov	r2, r3
 8008828:	6838      	ldr	r0, [r7, #0]
 800882a:	f002 f911 	bl	800aa50 <memcpy>
	}
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800883e:	f001 fd79 	bl	800a334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008848:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800884a:	e011      	b.n	8008870 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b00      	cmp	r3, #0
 8008852:	d012      	beq.n	800887a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3324      	adds	r3, #36	; 0x24
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fd55 	bl	8009308 <xTaskRemoveFromEventList>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008864:	f000 fe2c 	bl	80094c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	3b01      	subs	r3, #1
 800886c:	b2db      	uxtb	r3, r3
 800886e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dce9      	bgt.n	800884c <prvUnlockQueue+0x16>
 8008878:	e000      	b.n	800887c <prvUnlockQueue+0x46>
					break;
 800887a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	22ff      	movs	r2, #255	; 0xff
 8008880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008884:	f001 fd86 	bl	800a394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008888:	f001 fd54 	bl	800a334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008892:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008894:	e011      	b.n	80088ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d012      	beq.n	80088c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3310      	adds	r3, #16
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fd30 	bl	8009308 <xTaskRemoveFromEventList>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088ae:	f000 fe07 	bl	80094c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dce9      	bgt.n	8008896 <prvUnlockQueue+0x60>
 80088c2:	e000      	b.n	80088c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	22ff      	movs	r2, #255	; 0xff
 80088ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088ce:	f001 fd61 	bl	800a394 <vPortExitCritical>
}
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088e2:	f001 fd27 	bl	800a334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	e001      	b.n	80088f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088f8:	f001 fd4c 	bl	800a394 <vPortExitCritical>

	return xReturn;
 80088fc:	68fb      	ldr	r3, [r7, #12]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800890e:	f001 fd11 	bl	800a334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891a:	429a      	cmp	r2, r3
 800891c:	d102      	bne.n	8008924 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800891e:	2301      	movs	r3, #1
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	e001      	b.n	8008928 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008928:	f001 fd34 	bl	800a394 <vPortExitCritical>

	return xReturn;
 800892c:	68fb      	ldr	r3, [r7, #12]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e014      	b.n	8008972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008948:	4a0f      	ldr	r2, [pc, #60]	; (8008988 <vQueueAddToRegistry+0x50>)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008954:	490c      	ldr	r1, [pc, #48]	; (8008988 <vQueueAddToRegistry+0x50>)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800895e:	4a0a      	ldr	r2, [pc, #40]	; (8008988 <vQueueAddToRegistry+0x50>)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800896a:	e006      	b.n	800897a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b07      	cmp	r3, #7
 8008976:	d9e7      	bls.n	8008948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	200083e4 	.word	0x200083e4

0800898c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	e016      	b.n	80089c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800899a:	4a10      	ldr	r2, [pc, #64]	; (80089dc <vQueueUnregisterQueue+0x50>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d10b      	bne.n	80089c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80089aa:	4a0c      	ldr	r2, [pc, #48]	; (80089dc <vQueueUnregisterQueue+0x50>)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2100      	movs	r1, #0
 80089b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80089b4:	4a09      	ldr	r2, [pc, #36]	; (80089dc <vQueueUnregisterQueue+0x50>)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	4413      	add	r3, r2
 80089bc:	2200      	movs	r2, #0
 80089be:	605a      	str	r2, [r3, #4]
				break;
 80089c0:	e006      	b.n	80089d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b07      	cmp	r3, #7
 80089cc:	d9e5      	bls.n	800899a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	200083e4 	.word	0x200083e4

080089e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089f0:	f001 fca0 	bl	800a334 <vPortEnterCritical>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089fa:	b25b      	sxtb	r3, r3
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d103      	bne.n	8008a0a <vQueueWaitForMessageRestricted+0x2a>
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a10:	b25b      	sxtb	r3, r3
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a16:	d103      	bne.n	8008a20 <vQueueWaitForMessageRestricted+0x40>
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a20:	f001 fcb8 	bl	800a394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d106      	bne.n	8008a3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3324      	adds	r3, #36	; 0x24
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fc3b 	bl	80092b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a3a:	6978      	ldr	r0, [r7, #20]
 8008a3c:	f7ff fefb 	bl	8008836 <prvUnlockQueue>
	}
 8008a40:	bf00      	nop
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08e      	sub	sp, #56	; 0x38
 8008a4c:	af04      	add	r7, sp, #16
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	623b      	str	r3, [r7, #32]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <xTaskCreateStatic+0x46>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	61fb      	str	r3, [r7, #28]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a8e:	235c      	movs	r3, #92	; 0x5c
 8008a90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2b5c      	cmp	r3, #92	; 0x5c
 8008a96:	d00a      	beq.n	8008aae <xTaskCreateStatic+0x66>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	61bb      	str	r3, [r7, #24]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01e      	beq.n	8008af4 <xTaskCreateStatic+0xac>
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01b      	beq.n	8008af4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9303      	str	r3, [sp, #12]
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	f107 0314 	add.w	r3, r7, #20
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f850 	bl	8008b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aee:	f000 f8dd 	bl	8008cac <prvAddNewTaskToReadyList>
 8008af2:	e001      	b.n	8008af8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008af8:	697b      	ldr	r3, [r7, #20]
	}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3728      	adds	r7, #40	; 0x28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b08c      	sub	sp, #48	; 0x30
 8008b06:	af04      	add	r7, sp, #16
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	603b      	str	r3, [r7, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fd2e 	bl	800a578 <pvPortMalloc>
 8008b1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00e      	beq.n	8008b42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b24:	205c      	movs	r0, #92	; 0x5c
 8008b26:	f001 fd27 	bl	800a578 <pvPortMalloc>
 8008b2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
 8008b38:	e005      	b.n	8008b46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f001 fde8 	bl	800a710 <vPortFree>
 8008b40:	e001      	b.n	8008b46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d017      	beq.n	8008b7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 f80e 	bl	8008b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b70:	69f8      	ldr	r0, [r7, #28]
 8008b72:	f000 f89b 	bl	8008cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b76:	2301      	movs	r3, #1
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	e002      	b.n	8008b82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b82:	69bb      	ldr	r3, [r7, #24]
	}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	21a5      	movs	r1, #165	; 0xa5
 8008ba6:	f001 ff0b 	bl	800a9c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f023 0307 	bic.w	r3, r3, #7
 8008bc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	617b      	str	r3, [r7, #20]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d01f      	beq.n	8008c2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
 8008bee:	e012      	b.n	8008c16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	7819      	ldrb	r1, [r3, #0]
 8008bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	3334      	adds	r3, #52	; 0x34
 8008c00:	460a      	mov	r2, r1
 8008c02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4413      	add	r3, r2
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	2b0f      	cmp	r3, #15
 8008c1a:	d9e9      	bls.n	8008bf0 <prvInitialiseNewTask+0x64>
 8008c1c:	e000      	b.n	8008c20 <prvInitialiseNewTask+0x94>
			{
				break;
 8008c1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c28:	e003      	b.n	8008c32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	2b37      	cmp	r3, #55	; 0x37
 8008c36:	d901      	bls.n	8008c3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c38:	2337      	movs	r3, #55	; 0x37
 8008c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	3304      	adds	r3, #4
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe fe56 	bl	8007904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	3318      	adds	r3, #24
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fe51 	bl	8007904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	68f9      	ldr	r1, [r7, #12]
 8008c8a:	69b8      	ldr	r0, [r7, #24]
 8008c8c:	f001 fa26 	bl	800a0dc <pxPortInitialiseStack>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca2:	bf00      	nop
 8008ca4:	3720      	adds	r7, #32
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cb4:	f001 fb3e 	bl	800a334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cb8:	4b2d      	ldr	r3, [pc, #180]	; (8008d70 <prvAddNewTaskToReadyList+0xc4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	4a2c      	ldr	r2, [pc, #176]	; (8008d70 <prvAddNewTaskToReadyList+0xc4>)
 8008cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cc2:	4b2c      	ldr	r3, [pc, #176]	; (8008d74 <prvAddNewTaskToReadyList+0xc8>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cca:	4a2a      	ldr	r2, [pc, #168]	; (8008d74 <prvAddNewTaskToReadyList+0xc8>)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cd0:	4b27      	ldr	r3, [pc, #156]	; (8008d70 <prvAddNewTaskToReadyList+0xc4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d110      	bne.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cd8:	f000 fc16 	bl	8009508 <prvInitialiseTaskLists>
 8008cdc:	e00d      	b.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cde:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <prvAddNewTaskToReadyList+0xcc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ce6:	4b23      	ldr	r3, [pc, #140]	; (8008d74 <prvAddNewTaskToReadyList+0xc8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d802      	bhi.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cf4:	4a1f      	ldr	r2, [pc, #124]	; (8008d74 <prvAddNewTaskToReadyList+0xc8>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cfa:	4b20      	ldr	r3, [pc, #128]	; (8008d7c <prvAddNewTaskToReadyList+0xd0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	4a1e      	ldr	r2, [pc, #120]	; (8008d7c <prvAddNewTaskToReadyList+0xd0>)
 8008d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d04:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <prvAddNewTaskToReadyList+0xd0>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d10:	4b1b      	ldr	r3, [pc, #108]	; (8008d80 <prvAddNewTaskToReadyList+0xd4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d903      	bls.n	8008d20 <prvAddNewTaskToReadyList+0x74>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	4a18      	ldr	r2, [pc, #96]	; (8008d80 <prvAddNewTaskToReadyList+0xd4>)
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <prvAddNewTaskToReadyList+0xd8>)
 8008d2e:	441a      	add	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f7fe fdf1 	bl	800791e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d3c:	f001 fb2a 	bl	800a394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <prvAddNewTaskToReadyList+0xcc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00e      	beq.n	8008d66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d48:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <prvAddNewTaskToReadyList+0xc8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d207      	bcs.n	8008d66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <prvAddNewTaskToReadyList+0xdc>)
 8008d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200088f8 	.word	0x200088f8
 8008d74:	20008424 	.word	0x20008424
 8008d78:	20008904 	.word	0x20008904
 8008d7c:	20008914 	.word	0x20008914
 8008d80:	20008900 	.word	0x20008900
 8008d84:	20008428 	.word	0x20008428
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d017      	beq.n	8008dce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <vTaskDelay+0x60>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <vTaskDelay+0x30>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	60bb      	str	r3, [r7, #8]
}
 8008db8:	bf00      	nop
 8008dba:	e7fe      	b.n	8008dba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008dbc:	f000 f880 	bl	8008ec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fde8 	bl	8009998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dc8:	f000 f888 	bl	8008edc <xTaskResumeAll>
 8008dcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d107      	bne.n	8008de4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <vTaskDelay+0x64>)
 8008dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20008920 	.word	0x20008920
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e02:	463a      	mov	r2, r7
 8008e04:	1d39      	adds	r1, r7, #4
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fd26 	bl	800785c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	9202      	str	r2, [sp, #8]
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	460a      	mov	r2, r1
 8008e22:	4921      	ldr	r1, [pc, #132]	; (8008ea8 <vTaskStartScheduler+0xb4>)
 8008e24:	4821      	ldr	r0, [pc, #132]	; (8008eac <vTaskStartScheduler+0xb8>)
 8008e26:	f7ff fe0f 	bl	8008a48 <xTaskCreateStatic>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	4a20      	ldr	r2, [pc, #128]	; (8008eb0 <vTaskStartScheduler+0xbc>)
 8008e2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e30:	4b1f      	ldr	r3, [pc, #124]	; (8008eb0 <vTaskStartScheduler+0xbc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e001      	b.n	8008e42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d102      	bne.n	8008e4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e48:	f000 fdfa 	bl	8009a40 <xTimerCreateTimerTask>
 8008e4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d116      	bne.n	8008e82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	613b      	str	r3, [r7, #16]
}
 8008e66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e68:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <vTaskStartScheduler+0xc0>)
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e70:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <vTaskStartScheduler+0xc4>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e76:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <vTaskStartScheduler+0xc8>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e7c:	f001 f9b8 	bl	800a1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e80:	e00e      	b.n	8008ea0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e88:	d10a      	bne.n	8008ea0 <vTaskStartScheduler+0xac>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	60fb      	str	r3, [r7, #12]
}
 8008e9c:	bf00      	nop
 8008e9e:	e7fe      	b.n	8008e9e <vTaskStartScheduler+0xaa>
}
 8008ea0:	bf00      	nop
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	0800b4d8 	.word	0x0800b4d8
 8008eac:	080094d9 	.word	0x080094d9
 8008eb0:	2000891c 	.word	0x2000891c
 8008eb4:	20008918 	.word	0x20008918
 8008eb8:	20008904 	.word	0x20008904
 8008ebc:	200088fc 	.word	0x200088fc

08008ec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ec4:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <vTaskSuspendAll+0x18>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	4a03      	ldr	r2, [pc, #12]	; (8008ed8 <vTaskSuspendAll+0x18>)
 8008ecc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ece:	bf00      	nop
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	20008920 	.word	0x20008920

08008edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eea:	4b42      	ldr	r3, [pc, #264]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <xTaskResumeAll+0x2c>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	603b      	str	r3, [r7, #0]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f08:	f001 fa14 	bl	800a334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f0c:	4b39      	ldr	r3, [pc, #228]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	4a38      	ldr	r2, [pc, #224]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008f14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f16:	4b37      	ldr	r3, [pc, #220]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d162      	bne.n	8008fe4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f1e:	4b36      	ldr	r3, [pc, #216]	; (8008ff8 <xTaskResumeAll+0x11c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d05e      	beq.n	8008fe4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f26:	e02f      	b.n	8008f88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f28:	4b34      	ldr	r3, [pc, #208]	; (8008ffc <xTaskResumeAll+0x120>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	3318      	adds	r3, #24
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe fd4f 	bl	80079d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fd4a 	bl	80079d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	4b2d      	ldr	r3, [pc, #180]	; (8009000 <xTaskResumeAll+0x124>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d903      	bls.n	8008f58 <xTaskResumeAll+0x7c>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	4a2a      	ldr	r2, [pc, #168]	; (8009000 <xTaskResumeAll+0x124>)
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4a27      	ldr	r2, [pc, #156]	; (8009004 <xTaskResumeAll+0x128>)
 8008f66:	441a      	add	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7fe fcd5 	bl	800791e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f78:	4b23      	ldr	r3, [pc, #140]	; (8009008 <xTaskResumeAll+0x12c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d302      	bcc.n	8008f88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f82:	4b22      	ldr	r3, [pc, #136]	; (800900c <xTaskResumeAll+0x130>)
 8008f84:	2201      	movs	r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f88:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <xTaskResumeAll+0x120>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1cb      	bne.n	8008f28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f96:	f000 fb55 	bl	8009644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f9a:	4b1d      	ldr	r3, [pc, #116]	; (8009010 <xTaskResumeAll+0x134>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d010      	beq.n	8008fc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fa6:	f000 f847 	bl	8009038 <xTaskIncrementTick>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fb0:	4b16      	ldr	r3, [pc, #88]	; (800900c <xTaskResumeAll+0x130>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f1      	bne.n	8008fa6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008fc2:	4b13      	ldr	r3, [pc, #76]	; (8009010 <xTaskResumeAll+0x134>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fc8:	4b10      	ldr	r3, [pc, #64]	; (800900c <xTaskResumeAll+0x130>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d009      	beq.n	8008fe4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fd4:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <xTaskResumeAll+0x138>)
 8008fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fe4:	f001 f9d6 	bl	800a394 <vPortExitCritical>

	return xAlreadyYielded;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20008920 	.word	0x20008920
 8008ff8:	200088f8 	.word	0x200088f8
 8008ffc:	200088b8 	.word	0x200088b8
 8009000:	20008900 	.word	0x20008900
 8009004:	20008428 	.word	0x20008428
 8009008:	20008424 	.word	0x20008424
 800900c:	2000890c 	.word	0x2000890c
 8009010:	20008908 	.word	0x20008908
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <xTaskGetTickCount+0x1c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009024:	687b      	ldr	r3, [r7, #4]
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	200088fc 	.word	0x200088fc

08009038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009042:	4b4f      	ldr	r3, [pc, #316]	; (8009180 <xTaskIncrementTick+0x148>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f040 808f 	bne.w	800916a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800904c:	4b4d      	ldr	r3, [pc, #308]	; (8009184 <xTaskIncrementTick+0x14c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009054:	4a4b      	ldr	r2, [pc, #300]	; (8009184 <xTaskIncrementTick+0x14c>)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d120      	bne.n	80090a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009060:	4b49      	ldr	r3, [pc, #292]	; (8009188 <xTaskIncrementTick+0x150>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <xTaskIncrementTick+0x48>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	603b      	str	r3, [r7, #0]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <xTaskIncrementTick+0x46>
 8009080:	4b41      	ldr	r3, [pc, #260]	; (8009188 <xTaskIncrementTick+0x150>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	4b41      	ldr	r3, [pc, #260]	; (800918c <xTaskIncrementTick+0x154>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a3f      	ldr	r2, [pc, #252]	; (8009188 <xTaskIncrementTick+0x150>)
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	4a3f      	ldr	r2, [pc, #252]	; (800918c <xTaskIncrementTick+0x154>)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	4b3e      	ldr	r3, [pc, #248]	; (8009190 <xTaskIncrementTick+0x158>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3301      	adds	r3, #1
 800909a:	4a3d      	ldr	r2, [pc, #244]	; (8009190 <xTaskIncrementTick+0x158>)
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	f000 fad1 	bl	8009644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090a2:	4b3c      	ldr	r3, [pc, #240]	; (8009194 <xTaskIncrementTick+0x15c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d349      	bcc.n	8009140 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ac:	4b36      	ldr	r3, [pc, #216]	; (8009188 <xTaskIncrementTick+0x150>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d104      	bne.n	80090c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b6:	4b37      	ldr	r3, [pc, #220]	; (8009194 <xTaskIncrementTick+0x15c>)
 80090b8:	f04f 32ff 	mov.w	r2, #4294967295
 80090bc:	601a      	str	r2, [r3, #0]
					break;
 80090be:	e03f      	b.n	8009140 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c0:	4b31      	ldr	r3, [pc, #196]	; (8009188 <xTaskIncrementTick+0x150>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d203      	bcs.n	80090e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090d8:	4a2e      	ldr	r2, [pc, #184]	; (8009194 <xTaskIncrementTick+0x15c>)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090de:	e02f      	b.n	8009140 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fe fc77 	bl	80079d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d004      	beq.n	80090fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	3318      	adds	r3, #24
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fc6e 	bl	80079d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	4b25      	ldr	r3, [pc, #148]	; (8009198 <xTaskIncrementTick+0x160>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d903      	bls.n	8009110 <xTaskIncrementTick+0xd8>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	4a22      	ldr	r2, [pc, #136]	; (8009198 <xTaskIncrementTick+0x160>)
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4a1f      	ldr	r2, [pc, #124]	; (800919c <xTaskIncrementTick+0x164>)
 800911e:	441a      	add	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	3304      	adds	r3, #4
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7fe fbf9 	bl	800791e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <xTaskIncrementTick+0x168>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009136:	429a      	cmp	r2, r3
 8009138:	d3b8      	bcc.n	80090ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800913a:	2301      	movs	r3, #1
 800913c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800913e:	e7b5      	b.n	80090ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009140:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <xTaskIncrementTick+0x168>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009146:	4915      	ldr	r1, [pc, #84]	; (800919c <xTaskIncrementTick+0x164>)
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d901      	bls.n	800915c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800915c:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <xTaskIncrementTick+0x16c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d007      	beq.n	8009174 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e004      	b.n	8009174 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <xTaskIncrementTick+0x170>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3301      	adds	r3, #1
 8009170:	4a0d      	ldr	r2, [pc, #52]	; (80091a8 <xTaskIncrementTick+0x170>)
 8009172:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009174:	697b      	ldr	r3, [r7, #20]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20008920 	.word	0x20008920
 8009184:	200088fc 	.word	0x200088fc
 8009188:	200088b0 	.word	0x200088b0
 800918c:	200088b4 	.word	0x200088b4
 8009190:	20008910 	.word	0x20008910
 8009194:	20008918 	.word	0x20008918
 8009198:	20008900 	.word	0x20008900
 800919c:	20008428 	.word	0x20008428
 80091a0:	20008424 	.word	0x20008424
 80091a4:	2000890c 	.word	0x2000890c
 80091a8:	20008908 	.word	0x20008908

080091ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091b2:	4b28      	ldr	r3, [pc, #160]	; (8009254 <vTaskSwitchContext+0xa8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091ba:	4b27      	ldr	r3, [pc, #156]	; (8009258 <vTaskSwitchContext+0xac>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091c0:	e041      	b.n	8009246 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80091c2:	4b25      	ldr	r3, [pc, #148]	; (8009258 <vTaskSwitchContext+0xac>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c8:	4b24      	ldr	r3, [pc, #144]	; (800925c <vTaskSwitchContext+0xb0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	e010      	b.n	80091f2 <vTaskSwitchContext+0x46>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <vTaskSwitchContext+0x40>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	607b      	str	r3, [r7, #4]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <vTaskSwitchContext+0x3e>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	491b      	ldr	r1, [pc, #108]	; (8009260 <vTaskSwitchContext+0xb4>)
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0e4      	beq.n	80091d0 <vTaskSwitchContext+0x24>
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4a13      	ldr	r2, [pc, #76]	; (8009260 <vTaskSwitchContext+0xb4>)
 8009212:	4413      	add	r3, r2
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	605a      	str	r2, [r3, #4]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	3308      	adds	r3, #8
 8009228:	429a      	cmp	r2, r3
 800922a:	d104      	bne.n	8009236 <vTaskSwitchContext+0x8a>
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	605a      	str	r2, [r3, #4]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	4a09      	ldr	r2, [pc, #36]	; (8009264 <vTaskSwitchContext+0xb8>)
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4a06      	ldr	r2, [pc, #24]	; (800925c <vTaskSwitchContext+0xb0>)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6013      	str	r3, [r2, #0]
}
 8009246:	bf00      	nop
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20008920 	.word	0x20008920
 8009258:	2000890c 	.word	0x2000890c
 800925c:	20008900 	.word	0x20008900
 8009260:	20008428 	.word	0x20008428
 8009264:	20008424 	.word	0x20008424

08009268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	60fb      	str	r3, [r7, #12]
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800928e:	4b07      	ldr	r3, [pc, #28]	; (80092ac <vTaskPlaceOnEventList+0x44>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3318      	adds	r3, #24
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7fe fb65 	bl	8007966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800929c:	2101      	movs	r1, #1
 800929e:	6838      	ldr	r0, [r7, #0]
 80092a0:	f000 fb7a 	bl	8009998 <prvAddCurrentTaskToDelayedList>
}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20008424 	.word	0x20008424

080092b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	617b      	str	r3, [r7, #20]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092d8:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <vTaskPlaceOnEventListRestricted+0x54>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3318      	adds	r3, #24
 80092de:	4619      	mov	r1, r3
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7fe fb1c 	bl	800791e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80092ec:	f04f 33ff 	mov.w	r3, #4294967295
 80092f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	68b8      	ldr	r0, [r7, #8]
 80092f6:	f000 fb4f 	bl	8009998 <prvAddCurrentTaskToDelayedList>
	}
 80092fa:	bf00      	nop
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20008424 	.word	0x20008424

08009308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60fb      	str	r3, [r7, #12]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3318      	adds	r3, #24
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fb4d 	bl	80079d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933e:	4b1e      	ldr	r3, [pc, #120]	; (80093b8 <xTaskRemoveFromEventList+0xb0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d11d      	bne.n	8009382 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	3304      	adds	r3, #4
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fb44 	bl	80079d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009354:	4b19      	ldr	r3, [pc, #100]	; (80093bc <xTaskRemoveFromEventList+0xb4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d903      	bls.n	8009364 <xTaskRemoveFromEventList+0x5c>
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a16      	ldr	r2, [pc, #88]	; (80093bc <xTaskRemoveFromEventList+0xb4>)
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4a13      	ldr	r2, [pc, #76]	; (80093c0 <xTaskRemoveFromEventList+0xb8>)
 8009372:	441a      	add	r2, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	3304      	adds	r3, #4
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7fe facf 	bl	800791e <vListInsertEnd>
 8009380:	e005      	b.n	800938e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	3318      	adds	r3, #24
 8009386:	4619      	mov	r1, r3
 8009388:	480e      	ldr	r0, [pc, #56]	; (80093c4 <xTaskRemoveFromEventList+0xbc>)
 800938a:	f7fe fac8 	bl	800791e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	4b0d      	ldr	r3, [pc, #52]	; (80093c8 <xTaskRemoveFromEventList+0xc0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d905      	bls.n	80093a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800939c:	2301      	movs	r3, #1
 800939e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093a0:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <xTaskRemoveFromEventList+0xc4>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	e001      	b.n	80093ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093a8:	2300      	movs	r3, #0
 80093aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093ac:	697b      	ldr	r3, [r7, #20]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20008920 	.word	0x20008920
 80093bc:	20008900 	.word	0x20008900
 80093c0:	20008428 	.word	0x20008428
 80093c4:	200088b8 	.word	0x200088b8
 80093c8:	20008424 	.word	0x20008424
 80093cc:	2000890c 	.word	0x2000890c

080093d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093d8:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <vTaskInternalSetTimeOutState+0x24>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <vTaskInternalSetTimeOutState+0x28>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	605a      	str	r2, [r3, #4]
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20008910 	.word	0x20008910
 80093f8:	200088fc 	.word	0x200088fc

080093fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	613b      	str	r3, [r7, #16]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	60fb      	str	r3, [r7, #12]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800943e:	f000 ff79 	bl	800a334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009442:	4b1d      	ldr	r3, [pc, #116]	; (80094b8 <xTaskCheckForTimeOut+0xbc>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d102      	bne.n	8009462 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800945c:	2300      	movs	r3, #0
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e023      	b.n	80094aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <xTaskCheckForTimeOut+0xc0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d007      	beq.n	800947e <xTaskCheckForTimeOut+0x82>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	69ba      	ldr	r2, [r7, #24]
 8009474:	429a      	cmp	r2, r3
 8009476:	d302      	bcc.n	800947e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	61fb      	str	r3, [r7, #28]
 800947c:	e015      	b.n	80094aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	429a      	cmp	r2, r3
 8009486:	d20b      	bcs.n	80094a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff ff9b 	bl	80093d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	e004      	b.n	80094aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094a6:	2301      	movs	r3, #1
 80094a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094aa:	f000 ff73 	bl	800a394 <vPortExitCritical>

	return xReturn;
 80094ae:	69fb      	ldr	r3, [r7, #28]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3720      	adds	r7, #32
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	200088fc 	.word	0x200088fc
 80094bc:	20008910 	.word	0x20008910

080094c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094c4:	4b03      	ldr	r3, [pc, #12]	; (80094d4 <vTaskMissedYield+0x14>)
 80094c6:	2201      	movs	r2, #1
 80094c8:	601a      	str	r2, [r3, #0]
}
 80094ca:	bf00      	nop
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	2000890c 	.word	0x2000890c

080094d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094e0:	f000 f852 	bl	8009588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094e4:	4b06      	ldr	r3, [pc, #24]	; (8009500 <prvIdleTask+0x28>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d9f9      	bls.n	80094e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <prvIdleTask+0x2c>)
 80094ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094fc:	e7f0      	b.n	80094e0 <prvIdleTask+0x8>
 80094fe:	bf00      	nop
 8009500:	20008428 	.word	0x20008428
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
 8009512:	e00c      	b.n	800952e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4a12      	ldr	r2, [pc, #72]	; (8009568 <prvInitialiseTaskLists+0x60>)
 8009520:	4413      	add	r3, r2
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe f9ce 	bl	80078c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3301      	adds	r3, #1
 800952c:	607b      	str	r3, [r7, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b37      	cmp	r3, #55	; 0x37
 8009532:	d9ef      	bls.n	8009514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009534:	480d      	ldr	r0, [pc, #52]	; (800956c <prvInitialiseTaskLists+0x64>)
 8009536:	f7fe f9c5 	bl	80078c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800953a:	480d      	ldr	r0, [pc, #52]	; (8009570 <prvInitialiseTaskLists+0x68>)
 800953c:	f7fe f9c2 	bl	80078c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009540:	480c      	ldr	r0, [pc, #48]	; (8009574 <prvInitialiseTaskLists+0x6c>)
 8009542:	f7fe f9bf 	bl	80078c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009546:	480c      	ldr	r0, [pc, #48]	; (8009578 <prvInitialiseTaskLists+0x70>)
 8009548:	f7fe f9bc 	bl	80078c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800954c:	480b      	ldr	r0, [pc, #44]	; (800957c <prvInitialiseTaskLists+0x74>)
 800954e:	f7fe f9b9 	bl	80078c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009552:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <prvInitialiseTaskLists+0x78>)
 8009554:	4a05      	ldr	r2, [pc, #20]	; (800956c <prvInitialiseTaskLists+0x64>)
 8009556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <prvInitialiseTaskLists+0x7c>)
 800955a:	4a05      	ldr	r2, [pc, #20]	; (8009570 <prvInitialiseTaskLists+0x68>)
 800955c:	601a      	str	r2, [r3, #0]
}
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20008428 	.word	0x20008428
 800956c:	20008888 	.word	0x20008888
 8009570:	2000889c 	.word	0x2000889c
 8009574:	200088b8 	.word	0x200088b8
 8009578:	200088cc 	.word	0x200088cc
 800957c:	200088e4 	.word	0x200088e4
 8009580:	200088b0 	.word	0x200088b0
 8009584:	200088b4 	.word	0x200088b4

08009588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800958e:	e019      	b.n	80095c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009590:	f000 fed0 	bl	800a334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009594:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <prvCheckTasksWaitingTermination+0x50>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3304      	adds	r3, #4
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fe fa19 	bl	80079d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095a6:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <prvCheckTasksWaitingTermination+0x54>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	4a0b      	ldr	r2, [pc, #44]	; (80095dc <prvCheckTasksWaitingTermination+0x54>)
 80095ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095b0:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <prvCheckTasksWaitingTermination+0x58>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	4a0a      	ldr	r2, [pc, #40]	; (80095e0 <prvCheckTasksWaitingTermination+0x58>)
 80095b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095ba:	f000 feeb 	bl	800a394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f810 	bl	80095e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095c4:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <prvCheckTasksWaitingTermination+0x58>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e1      	bne.n	8009590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200088cc 	.word	0x200088cc
 80095dc:	200088f8 	.word	0x200088f8
 80095e0:	200088e0 	.word	0x200088e0

080095e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d108      	bne.n	8009608 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 f888 	bl	800a710 <vPortFree>
				vPortFree( pxTCB );
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 f885 	bl	800a710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009606:	e018      	b.n	800963a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800960e:	2b01      	cmp	r3, #1
 8009610:	d103      	bne.n	800961a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 f87c 	bl	800a710 <vPortFree>
	}
 8009618:	e00f      	b.n	800963a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009620:	2b02      	cmp	r3, #2
 8009622:	d00a      	beq.n	800963a <prvDeleteTCB+0x56>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	60fb      	str	r3, [r7, #12]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <prvDeleteTCB+0x54>
	}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <prvResetNextTaskUnblockTime+0x38>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d104      	bne.n	800965e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <prvResetNextTaskUnblockTime+0x3c>)
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800965c:	e008      	b.n	8009670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <prvResetNextTaskUnblockTime+0x38>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	4a04      	ldr	r2, [pc, #16]	; (8009680 <prvResetNextTaskUnblockTime+0x3c>)
 800966e:	6013      	str	r3, [r2, #0]
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	200088b0 	.word	0x200088b0
 8009680:	20008918 	.word	0x20008918

08009684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800968a:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <xTaskGetSchedulerState+0x34>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009692:	2301      	movs	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	e008      	b.n	80096aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <xTaskGetSchedulerState+0x38>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096a0:	2302      	movs	r3, #2
 80096a2:	607b      	str	r3, [r7, #4]
 80096a4:	e001      	b.n	80096aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096aa:	687b      	ldr	r3, [r7, #4]
	}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20008904 	.word	0x20008904
 80096bc:	20008920 	.word	0x20008920

080096c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d051      	beq.n	800977a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	4b2a      	ldr	r3, [pc, #168]	; (8009784 <xTaskPriorityInherit+0xc4>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d241      	bcs.n	8009768 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	db06      	blt.n	80096fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ec:	4b25      	ldr	r3, [pc, #148]	; (8009784 <xTaskPriorityInherit+0xc4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6959      	ldr	r1, [r3, #20]
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4a1f      	ldr	r2, [pc, #124]	; (8009788 <xTaskPriorityInherit+0xc8>)
 800970c:	4413      	add	r3, r2
 800970e:	4299      	cmp	r1, r3
 8009710:	d122      	bne.n	8009758 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	3304      	adds	r3, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe f95e 	bl	80079d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800971c:	4b19      	ldr	r3, [pc, #100]	; (8009784 <xTaskPriorityInherit+0xc4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972a:	4b18      	ldr	r3, [pc, #96]	; (800978c <xTaskPriorityInherit+0xcc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d903      	bls.n	800973a <xTaskPriorityInherit+0x7a>
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	4a15      	ldr	r2, [pc, #84]	; (800978c <xTaskPriorityInherit+0xcc>)
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4a10      	ldr	r2, [pc, #64]	; (8009788 <xTaskPriorityInherit+0xc8>)
 8009748:	441a      	add	r2, r3
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	3304      	adds	r3, #4
 800974e:	4619      	mov	r1, r3
 8009750:	4610      	mov	r0, r2
 8009752:	f7fe f8e4 	bl	800791e <vListInsertEnd>
 8009756:	e004      	b.n	8009762 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <xTaskPriorityInherit+0xc4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009762:	2301      	movs	r3, #1
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	e008      	b.n	800977a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <xTaskPriorityInherit+0xc4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009772:	429a      	cmp	r2, r3
 8009774:	d201      	bcs.n	800977a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009776:	2301      	movs	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800977a:	68fb      	ldr	r3, [r7, #12]
	}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20008424 	.word	0x20008424
 8009788:	20008428 	.word	0x20008428
 800978c:	20008900 	.word	0x20008900

08009790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800979c:	2300      	movs	r3, #0
 800979e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d056      	beq.n	8009854 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097a6:	4b2e      	ldr	r3, [pc, #184]	; (8009860 <xTaskPriorityDisinherit+0xd0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d00a      	beq.n	80097c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60fb      	str	r3, [r7, #12]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60bb      	str	r3, [r7, #8]
}
 80097e0:	bf00      	nop
 80097e2:	e7fe      	b.n	80097e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e8:	1e5a      	subs	r2, r3, #1
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d02c      	beq.n	8009854 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d128      	bne.n	8009854 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	3304      	adds	r3, #4
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe f8e6 	bl	80079d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009824:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <xTaskPriorityDisinherit+0xd4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d903      	bls.n	8009834 <xTaskPriorityDisinherit+0xa4>
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <xTaskPriorityDisinherit+0xd4>)
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4a09      	ldr	r2, [pc, #36]	; (8009868 <xTaskPriorityDisinherit+0xd8>)
 8009842:	441a      	add	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3304      	adds	r3, #4
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fe f867 	bl	800791e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009854:	697b      	ldr	r3, [r7, #20]
	}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20008424 	.word	0x20008424
 8009864:	20008900 	.word	0x20008900
 8009868:	20008428 	.word	0x20008428

0800986c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800987a:	2301      	movs	r3, #1
 800987c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d06a      	beq.n	800995a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	60fb      	str	r3, [r7, #12]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d902      	bls.n	80098b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	e002      	b.n	80098b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d04b      	beq.n	800995a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d146      	bne.n	800995a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098cc:	4b25      	ldr	r3, [pc, #148]	; (8009964 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d10a      	bne.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	60bb      	str	r3, [r7, #8]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	db04      	blt.n	800990a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	6959      	ldr	r1, [r3, #20]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4a13      	ldr	r2, [pc, #76]	; (8009968 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800991a:	4413      	add	r3, r2
 800991c:	4299      	cmp	r1, r3
 800991e:	d11c      	bne.n	800995a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	3304      	adds	r3, #4
 8009924:	4618      	mov	r0, r3
 8009926:	f7fe f857 	bl	80079d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	429a      	cmp	r2, r3
 8009934:	d903      	bls.n	800993e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	4a0c      	ldr	r2, [pc, #48]	; (800996c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4a07      	ldr	r2, [pc, #28]	; (8009968 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800994c:	441a      	add	r2, r3
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	3304      	adds	r3, #4
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f7fd ffe2 	bl	800791e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800995a:	bf00      	nop
 800995c:	3720      	adds	r7, #32
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20008424 	.word	0x20008424
 8009968:	20008428 	.word	0x20008428
 800996c:	20008900 	.word	0x20008900

08009970 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009974:	4b07      	ldr	r3, [pc, #28]	; (8009994 <pvTaskIncrementMutexHeldCount+0x24>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d004      	beq.n	8009986 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800997c:	4b05      	ldr	r3, [pc, #20]	; (8009994 <pvTaskIncrementMutexHeldCount+0x24>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009982:	3201      	adds	r2, #1
 8009984:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009986:	4b03      	ldr	r3, [pc, #12]	; (8009994 <pvTaskIncrementMutexHeldCount+0x24>)
 8009988:	681b      	ldr	r3, [r3, #0]
	}
 800998a:	4618      	mov	r0, r3
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20008424 	.word	0x20008424

08009998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099a2:	4b21      	ldr	r3, [pc, #132]	; (8009a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099a8:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3304      	adds	r3, #4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe f812 	bl	80079d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d10a      	bne.n	80099d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d007      	beq.n	80099d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099c2:	4b1a      	ldr	r3, [pc, #104]	; (8009a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3304      	adds	r3, #4
 80099c8:	4619      	mov	r1, r3
 80099ca:	4819      	ldr	r0, [pc, #100]	; (8009a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80099cc:	f7fd ffa7 	bl	800791e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099d0:	e026      	b.n	8009a20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4413      	add	r3, r2
 80099d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099da:	4b14      	ldr	r3, [pc, #80]	; (8009a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d209      	bcs.n	80099fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ea:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fd ffb5 	bl	8007966 <vListInsert>
}
 80099fc:	e010      	b.n	8009a20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099fe:	4b0e      	ldr	r3, [pc, #56]	; (8009a38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b0a      	ldr	r3, [pc, #40]	; (8009a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fd ffab 	bl	8007966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d202      	bcs.n	8009a20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a1a:	4a08      	ldr	r2, [pc, #32]	; (8009a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	6013      	str	r3, [r2, #0]
}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	200088fc 	.word	0x200088fc
 8009a2c:	20008424 	.word	0x20008424
 8009a30:	200088e4 	.word	0x200088e4
 8009a34:	200088b4 	.word	0x200088b4
 8009a38:	200088b0 	.word	0x200088b0
 8009a3c:	20008918 	.word	0x20008918

08009a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08a      	sub	sp, #40	; 0x28
 8009a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a4a:	f000 fb07 	bl	800a05c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <xTimerCreateTimerTask+0x80>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d021      	beq.n	8009a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a5e:	1d3a      	adds	r2, r7, #4
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	f107 030c 	add.w	r3, r7, #12
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fd ff11 	bl	8007890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	9202      	str	r2, [sp, #8]
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	2302      	movs	r3, #2
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	460a      	mov	r2, r1
 8009a80:	4910      	ldr	r1, [pc, #64]	; (8009ac4 <xTimerCreateTimerTask+0x84>)
 8009a82:	4811      	ldr	r0, [pc, #68]	; (8009ac8 <xTimerCreateTimerTask+0x88>)
 8009a84:	f7fe ffe0 	bl	8008a48 <xTaskCreateStatic>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	4a10      	ldr	r2, [pc, #64]	; (8009acc <xTimerCreateTimerTask+0x8c>)
 8009a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <xTimerCreateTimerTask+0x8c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a96:	2301      	movs	r3, #1
 8009a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	613b      	str	r3, [r7, #16]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ab6:	697b      	ldr	r3, [r7, #20]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	20008954 	.word	0x20008954
 8009ac4:	0800b4e0 	.word	0x0800b4e0
 8009ac8:	08009c05 	.word	0x08009c05
 8009acc:	20008958 	.word	0x20008958

08009ad0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	623b      	str	r3, [r7, #32]
}
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009afe:	4b1a      	ldr	r3, [pc, #104]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d02a      	beq.n	8009b5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b05      	cmp	r3, #5
 8009b16:	dc18      	bgt.n	8009b4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b18:	f7ff fdb4 	bl	8009684 <xTaskGetSchedulerState>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d109      	bne.n	8009b36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b22:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f107 0110 	add.w	r1, r7, #16
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2e:	f7fe f925 	bl	8007d7c <xQueueGenericSend>
 8009b32:	6278      	str	r0, [r7, #36]	; 0x24
 8009b34:	e012      	b.n	8009b5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f107 0110 	add.w	r1, r7, #16
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2200      	movs	r2, #0
 8009b42:	f7fe f91b 	bl	8007d7c <xQueueGenericSend>
 8009b46:	6278      	str	r0, [r7, #36]	; 0x24
 8009b48:	e008      	b.n	8009b5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b4a:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f107 0110 	add.w	r1, r7, #16
 8009b52:	2300      	movs	r3, #0
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	f7fe fa0f 	bl	8007f78 <xQueueGenericSendFromISR>
 8009b5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3728      	adds	r7, #40	; 0x28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20008954 	.word	0x20008954

08009b6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b76:	4b22      	ldr	r3, [pc, #136]	; (8009c00 <prvProcessExpiredTimer+0x94>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fd ff27 	bl	80079d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d022      	beq.n	8009bde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	699a      	ldr	r2, [r3, #24]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	18d1      	adds	r1, r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	6978      	ldr	r0, [r7, #20]
 8009ba6:	f000 f8d1 	bl	8009d4c <prvInsertTimerInActiveList>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01f      	beq.n	8009bf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6978      	ldr	r0, [r7, #20]
 8009bbc:	f7ff ff88 	bl	8009ad0 <xTimerGenericCommand>
 8009bc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d113      	bne.n	8009bf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	60fb      	str	r3, [r7, #12]
}
 8009bda:	bf00      	nop
 8009bdc:	e7fe      	b.n	8009bdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	6978      	ldr	r0, [r7, #20]
 8009bf6:	4798      	blx	r3
}
 8009bf8:	bf00      	nop
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	2000894c 	.word	0x2000894c

08009c04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f857 	bl	8009cc4 <prvGetNextExpireTime>
 8009c16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 f803 	bl	8009c28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c22:	f000 f8d5 	bl	8009dd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c26:	e7f1      	b.n	8009c0c <prvTimerTask+0x8>

08009c28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c32:	f7ff f945 	bl	8008ec0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c36:	f107 0308 	add.w	r3, r7, #8
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f866 	bl	8009d0c <prvSampleTimeNow>
 8009c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d130      	bne.n	8009caa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <prvProcessTimerOrBlockTask+0x3c>
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d806      	bhi.n	8009c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c56:	f7ff f941 	bl	8008edc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c5a:	68f9      	ldr	r1, [r7, #12]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff ff85 	bl	8009b6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c62:	e024      	b.n	8009cae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d008      	beq.n	8009c7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c6a:	4b13      	ldr	r3, [pc, #76]	; (8009cb8 <prvProcessTimerOrBlockTask+0x90>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <prvProcessTimerOrBlockTask+0x50>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <prvProcessTimerOrBlockTask+0x52>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <prvProcessTimerOrBlockTask+0x94>)
 8009c7e:	6818      	ldr	r0, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f7fe fea9 	bl	80089e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c8e:	f7ff f925 	bl	8008edc <xTaskResumeAll>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c98:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <prvProcessTimerOrBlockTask+0x98>)
 8009c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	f3bf 8f6f 	isb	sy
}
 8009ca8:	e001      	b.n	8009cae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009caa:	f7ff f917 	bl	8008edc <xTaskResumeAll>
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20008950 	.word	0x20008950
 8009cbc:	20008954 	.word	0x20008954
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <prvGetNextExpireTime+0x44>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <prvGetNextExpireTime+0x16>
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	e000      	b.n	8009cdc <prvGetNextExpireTime+0x18>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d105      	bne.n	8009cf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <prvGetNextExpireTime+0x44>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e001      	b.n	8009cf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	2000894c 	.word	0x2000894c

08009d0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d14:	f7ff f980 	bl	8009018 <xTaskGetTickCount>
 8009d18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <prvSampleTimeNow+0x3c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d205      	bcs.n	8009d30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d24:	f000 f936 	bl	8009f94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e002      	b.n	8009d36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d36:	4a04      	ldr	r2, [pc, #16]	; (8009d48 <prvSampleTimeNow+0x3c>)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	2000895c 	.word	0x2000895c

08009d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d812      	bhi.n	8009d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	1ad2      	subs	r2, r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d302      	bcc.n	8009d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e01b      	b.n	8009dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d86:	4b10      	ldr	r3, [pc, #64]	; (8009dc8 <prvInsertTimerInActiveList+0x7c>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	4619      	mov	r1, r3
 8009d90:	4610      	mov	r0, r2
 8009d92:	f7fd fde8 	bl	8007966 <vListInsert>
 8009d96:	e012      	b.n	8009dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d206      	bcs.n	8009dae <prvInsertTimerInActiveList+0x62>
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d302      	bcc.n	8009dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009da8:	2301      	movs	r3, #1
 8009daa:	617b      	str	r3, [r7, #20]
 8009dac:	e007      	b.n	8009dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <prvInsertTimerInActiveList+0x80>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3304      	adds	r3, #4
 8009db6:	4619      	mov	r1, r3
 8009db8:	4610      	mov	r0, r2
 8009dba:	f7fd fdd4 	bl	8007966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dbe:	697b      	ldr	r3, [r7, #20]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20008950 	.word	0x20008950
 8009dcc:	2000894c 	.word	0x2000894c

08009dd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08e      	sub	sp, #56	; 0x38
 8009dd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dd6:	e0ca      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da18      	bge.n	8009e10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dde:	1d3b      	adds	r3, r7, #4
 8009de0:	3304      	adds	r3, #4
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	61fb      	str	r3, [r7, #28]
}
 8009dfc:	bf00      	nop
 8009dfe:	e7fe      	b.n	8009dfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e06:	6850      	ldr	r0, [r2, #4]
 8009e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e0a:	6892      	ldr	r2, [r2, #8]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f2c0 80ab 	blt.w	8009f6e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d004      	beq.n	8009e2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	3304      	adds	r3, #4
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fd fdd5 	bl	80079d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e2e:	463b      	mov	r3, r7
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff ff6b 	bl	8009d0c <prvSampleTimeNow>
 8009e36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	f200 8096 	bhi.w	8009f6c <prvProcessReceivedCommands+0x19c>
 8009e40:	a201      	add	r2, pc, #4	; (adr r2, 8009e48 <prvProcessReceivedCommands+0x78>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009e71 	.word	0x08009e71
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e71 	.word	0x08009e71
 8009e54:	08009ee5 	.word	0x08009ee5
 8009e58:	08009ef9 	.word	0x08009ef9
 8009e5c:	08009f43 	.word	0x08009f43
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e71 	.word	0x08009e71
 8009e68:	08009ee5 	.word	0x08009ee5
 8009e6c:	08009ef9 	.word	0x08009ef9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e76:	f043 0301 	orr.w	r3, r3, #1
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	18d1      	adds	r1, r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e90:	f7ff ff5c 	bl	8009d4c <prvInsertTimerInActiveList>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d069      	beq.n	8009f6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d05e      	beq.n	8009f6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	441a      	add	r2, r3
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ec2:	f7ff fe05 	bl	8009ad0 <xTimerGenericCommand>
 8009ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d14f      	bne.n	8009f6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	61bb      	str	r3, [r7, #24]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eea:	f023 0301 	bic.w	r3, r3, #1
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ef6:	e03a      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	617b      	str	r3, [r7, #20]
}
 8009f2a:	bf00      	nop
 8009f2c:	e7fe      	b.n	8009f2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	699a      	ldr	r2, [r3, #24]
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	18d1      	adds	r1, r2, r3
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3c:	f7ff ff06 	bl	8009d4c <prvInsertTimerInActiveList>
					break;
 8009f40:	e015      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d103      	bne.n	8009f58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f52:	f000 fbdd 	bl	800a710 <vPortFree>
 8009f56:	e00a      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5e:	f023 0301 	bic.w	r3, r3, #1
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f6a:	e000      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009f6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f6e:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <prvProcessReceivedCommands+0x1c0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	1d39      	adds	r1, r7, #4
 8009f74:	2200      	movs	r2, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe f926 	bl	80081c8 <xQueueReceive>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f47f af2a 	bne.w	8009dd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	3730      	adds	r7, #48	; 0x30
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20008954 	.word	0x20008954

08009f94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f9a:	e048      	b.n	800a02e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f9c:	4b2d      	ldr	r3, [pc, #180]	; (800a054 <prvSwitchTimerLists+0xc0>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa6:	4b2b      	ldr	r3, [pc, #172]	; (800a054 <prvSwitchTimerLists+0xc0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fd fd0f 	bl	80079d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d02e      	beq.n	800a02e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d90e      	bls.n	800a000 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fee:	4b19      	ldr	r3, [pc, #100]	; (800a054 <prvSwitchTimerLists+0xc0>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f7fd fcb4 	bl	8007966 <vListInsert>
 8009ffe:	e016      	b.n	800a02e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a000:	2300      	movs	r3, #0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	2100      	movs	r1, #0
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7ff fd60 	bl	8009ad0 <xTimerGenericCommand>
 800a010:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	603b      	str	r3, [r7, #0]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvSwitchTimerLists+0xc0>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1b1      	bne.n	8009f9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a038:	4b06      	ldr	r3, [pc, #24]	; (800a054 <prvSwitchTimerLists+0xc0>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a03e:	4b06      	ldr	r3, [pc, #24]	; (800a058 <prvSwitchTimerLists+0xc4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a04      	ldr	r2, [pc, #16]	; (800a054 <prvSwitchTimerLists+0xc0>)
 800a044:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a046:	4a04      	ldr	r2, [pc, #16]	; (800a058 <prvSwitchTimerLists+0xc4>)
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	6013      	str	r3, [r2, #0]
}
 800a04c:	bf00      	nop
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	2000894c 	.word	0x2000894c
 800a058:	20008950 	.word	0x20008950

0800a05c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a062:	f000 f967 	bl	800a334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a066:	4b15      	ldr	r3, [pc, #84]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d120      	bne.n	800a0b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a06e:	4814      	ldr	r0, [pc, #80]	; (800a0c0 <prvCheckForValidListAndQueue+0x64>)
 800a070:	f7fd fc28 	bl	80078c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a074:	4813      	ldr	r0, [pc, #76]	; (800a0c4 <prvCheckForValidListAndQueue+0x68>)
 800a076:	f7fd fc25 	bl	80078c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <prvCheckForValidListAndQueue+0x6c>)
 800a07c:	4a10      	ldr	r2, [pc, #64]	; (800a0c0 <prvCheckForValidListAndQueue+0x64>)
 800a07e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a080:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <prvCheckForValidListAndQueue+0x70>)
 800a082:	4a10      	ldr	r2, [pc, #64]	; (800a0c4 <prvCheckForValidListAndQueue+0x68>)
 800a084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a086:	2300      	movs	r3, #0
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <prvCheckForValidListAndQueue+0x74>)
 800a08c:	4a11      	ldr	r2, [pc, #68]	; (800a0d4 <prvCheckForValidListAndQueue+0x78>)
 800a08e:	2110      	movs	r1, #16
 800a090:	200a      	movs	r0, #10
 800a092:	f7fd fd33 	bl	8007afc <xQueueGenericCreateStatic>
 800a096:	4603      	mov	r3, r0
 800a098:	4a08      	ldr	r2, [pc, #32]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a09a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a09c:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d005      	beq.n	800a0b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	490b      	ldr	r1, [pc, #44]	; (800a0d8 <prvCheckForValidListAndQueue+0x7c>)
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fc44 	bl	8008938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0b0:	f000 f970 	bl	800a394 <vPortExitCritical>
}
 800a0b4:	bf00      	nop
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20008954 	.word	0x20008954
 800a0c0:	20008924 	.word	0x20008924
 800a0c4:	20008938 	.word	0x20008938
 800a0c8:	2000894c 	.word	0x2000894c
 800a0cc:	20008950 	.word	0x20008950
 800a0d0:	20008a00 	.word	0x20008a00
 800a0d4:	20008960 	.word	0x20008960
 800a0d8:	0800b4e8 	.word	0x0800b4e8

0800a0dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3b04      	subs	r3, #4
 800a0ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3b04      	subs	r3, #4
 800a0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	f023 0201 	bic.w	r2, r3, #1
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3b04      	subs	r3, #4
 800a10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a10c:	4a0c      	ldr	r2, [pc, #48]	; (800a140 <pxPortInitialiseStack+0x64>)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3b14      	subs	r3, #20
 800a116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3b04      	subs	r3, #4
 800a122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f06f 0202 	mvn.w	r2, #2
 800a12a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3b20      	subs	r3, #32
 800a130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a132:	68fb      	ldr	r3, [r7, #12]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	0800a145 	.word	0x0800a145

0800a144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a14e:	4b12      	ldr	r3, [pc, #72]	; (800a198 <prvTaskExitError+0x54>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d00a      	beq.n	800a16e <prvTaskExitError+0x2a>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	60fb      	str	r3, [r7, #12]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <prvTaskExitError+0x28>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60bb      	str	r3, [r7, #8]
}
 800a180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a182:	bf00      	nop
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0fc      	beq.n	800a184 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a18a:	bf00      	nop
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	2000002c 	.word	0x2000002c
 800a19c:	00000000 	.word	0x00000000

0800a1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1a0:	4b07      	ldr	r3, [pc, #28]	; (800a1c0 <pxCurrentTCBConst2>)
 800a1a2:	6819      	ldr	r1, [r3, #0]
 800a1a4:	6808      	ldr	r0, [r1, #0]
 800a1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1aa:	f380 8809 	msr	PSP, r0
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8811 	msr	BASEPRI, r0
 800a1ba:	4770      	bx	lr
 800a1bc:	f3af 8000 	nop.w

0800a1c0 <pxCurrentTCBConst2>:
 800a1c0:	20008424 	.word	0x20008424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop

0800a1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1c8:	4808      	ldr	r0, [pc, #32]	; (800a1ec <prvPortStartFirstTask+0x24>)
 800a1ca:	6800      	ldr	r0, [r0, #0]
 800a1cc:	6800      	ldr	r0, [r0, #0]
 800a1ce:	f380 8808 	msr	MSP, r0
 800a1d2:	f04f 0000 	mov.w	r0, #0
 800a1d6:	f380 8814 	msr	CONTROL, r0
 800a1da:	b662      	cpsie	i
 800a1dc:	b661      	cpsie	f
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	df00      	svc	0
 800a1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ea:	bf00      	nop
 800a1ec:	e000ed08 	.word	0xe000ed08

0800a1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1f6:	4b46      	ldr	r3, [pc, #280]	; (800a310 <xPortStartScheduler+0x120>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a46      	ldr	r2, [pc, #280]	; (800a314 <xPortStartScheduler+0x124>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10a      	bne.n	800a216 <xPortStartScheduler+0x26>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	613b      	str	r3, [r7, #16]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a216:	4b3e      	ldr	r3, [pc, #248]	; (800a310 <xPortStartScheduler+0x120>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a3f      	ldr	r2, [pc, #252]	; (800a318 <xPortStartScheduler+0x128>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d10a      	bne.n	800a236 <xPortStartScheduler+0x46>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	60fb      	str	r3, [r7, #12]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a236:	4b39      	ldr	r3, [pc, #228]	; (800a31c <xPortStartScheduler+0x12c>)
 800a238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	22ff      	movs	r2, #255	; 0xff
 800a246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4b31      	ldr	r3, [pc, #196]	; (800a320 <xPortStartScheduler+0x130>)
 800a25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a25e:	4b31      	ldr	r3, [pc, #196]	; (800a324 <xPortStartScheduler+0x134>)
 800a260:	2207      	movs	r2, #7
 800a262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a264:	e009      	b.n	800a27a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a266:	4b2f      	ldr	r3, [pc, #188]	; (800a324 <xPortStartScheduler+0x134>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	4a2d      	ldr	r2, [pc, #180]	; (800a324 <xPortStartScheduler+0x134>)
 800a26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	b2db      	uxtb	r3, r3
 800a278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b80      	cmp	r3, #128	; 0x80
 800a284:	d0ef      	beq.n	800a266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a286:	4b27      	ldr	r3, [pc, #156]	; (800a324 <xPortStartScheduler+0x134>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f1c3 0307 	rsb	r3, r3, #7
 800a28e:	2b04      	cmp	r3, #4
 800a290:	d00a      	beq.n	800a2a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	60bb      	str	r3, [r7, #8]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2a8:	4b1e      	ldr	r3, [pc, #120]	; (800a324 <xPortStartScheduler+0x134>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	4a1d      	ldr	r2, [pc, #116]	; (800a324 <xPortStartScheduler+0x134>)
 800a2b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2b2:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <xPortStartScheduler+0x134>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2ba:	4a1a      	ldr	r2, [pc, #104]	; (800a324 <xPortStartScheduler+0x134>)
 800a2bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2c6:	4b18      	ldr	r3, [pc, #96]	; (800a328 <xPortStartScheduler+0x138>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a17      	ldr	r2, [pc, #92]	; (800a328 <xPortStartScheduler+0x138>)
 800a2cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <xPortStartScheduler+0x138>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a14      	ldr	r2, [pc, #80]	; (800a328 <xPortStartScheduler+0x138>)
 800a2d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2de:	f000 f8dd 	bl	800a49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2e2:	4b12      	ldr	r3, [pc, #72]	; (800a32c <xPortStartScheduler+0x13c>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2e8:	f000 f8fc 	bl	800a4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2ec:	4b10      	ldr	r3, [pc, #64]	; (800a330 <xPortStartScheduler+0x140>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a0f      	ldr	r2, [pc, #60]	; (800a330 <xPortStartScheduler+0x140>)
 800a2f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a2f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2f8:	f7ff ff66 	bl	800a1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2fc:	f7fe ff56 	bl	80091ac <vTaskSwitchContext>
	prvTaskExitError();
 800a300:	f7ff ff20 	bl	800a144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	e000ed00 	.word	0xe000ed00
 800a314:	410fc271 	.word	0x410fc271
 800a318:	410fc270 	.word	0x410fc270
 800a31c:	e000e400 	.word	0xe000e400
 800a320:	20008a50 	.word	0x20008a50
 800a324:	20008a54 	.word	0x20008a54
 800a328:	e000ed20 	.word	0xe000ed20
 800a32c:	2000002c 	.word	0x2000002c
 800a330:	e000ef34 	.word	0xe000ef34

0800a334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	607b      	str	r3, [r7, #4]
}
 800a34c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a34e:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <vPortEnterCritical+0x58>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3301      	adds	r3, #1
 800a354:	4a0d      	ldr	r2, [pc, #52]	; (800a38c <vPortEnterCritical+0x58>)
 800a356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <vPortEnterCritical+0x58>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d10f      	bne.n	800a380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <vPortEnterCritical+0x5c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <vPortEnterCritical+0x4c>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	603b      	str	r3, [r7, #0]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <vPortEnterCritical+0x4a>
	}
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	2000002c 	.word	0x2000002c
 800a390:	e000ed04 	.word	0xe000ed04

0800a394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a39a:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <vPortExitCritical+0x50>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10a      	bne.n	800a3b8 <vPortExitCritical+0x24>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	607b      	str	r3, [r7, #4]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3c2:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <vPortExitCritical+0x42>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f383 8811 	msr	BASEPRI, r3
}
 800a3d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	2000002c 	.word	0x2000002c
	...

0800a3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3f0:	f3ef 8009 	mrs	r0, PSP
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <pxCurrentTCBConst>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	f01e 0f10 	tst.w	lr, #16
 800a400:	bf08      	it	eq
 800a402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	6010      	str	r0, [r2, #0]
 800a40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a410:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a414:	f380 8811 	msr	BASEPRI, r0
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f7fe fec4 	bl	80091ac <vTaskSwitchContext>
 800a424:	f04f 0000 	mov.w	r0, #0
 800a428:	f380 8811 	msr	BASEPRI, r0
 800a42c:	bc09      	pop	{r0, r3}
 800a42e:	6819      	ldr	r1, [r3, #0]
 800a430:	6808      	ldr	r0, [r1, #0]
 800a432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a436:	f01e 0f10 	tst.w	lr, #16
 800a43a:	bf08      	it	eq
 800a43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a440:	f380 8809 	msr	PSP, r0
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	f3af 8000 	nop.w

0800a450 <pxCurrentTCBConst>:
 800a450:	20008424 	.word	0x20008424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop

0800a458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	607b      	str	r3, [r7, #4]
}
 800a470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a472:	f7fe fde1 	bl	8009038 <xTaskIncrementTick>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a47c:	4b06      	ldr	r3, [pc, #24]	; (800a498 <xPortSysTickHandler+0x40>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	2300      	movs	r3, #0
 800a486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	f383 8811 	msr	BASEPRI, r3
}
 800a48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <vPortSetupTimerInterrupt+0x34>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <vPortSetupTimerInterrupt+0x38>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <vPortSetupTimerInterrupt+0x3c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a0a      	ldr	r2, [pc, #40]	; (800a4dc <vPortSetupTimerInterrupt+0x40>)
 800a4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b6:	099b      	lsrs	r3, r3, #6
 800a4b8:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <vPortSetupTimerInterrupt+0x44>)
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <vPortSetupTimerInterrupt+0x34>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	e000e010 	.word	0xe000e010
 800a4d4:	e000e018 	.word	0xe000e018
 800a4d8:	2000000c 	.word	0x2000000c
 800a4dc:	10624dd3 	.word	0x10624dd3
 800a4e0:	e000e014 	.word	0xe000e014

0800a4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4f4 <vPortEnableVFP+0x10>
 800a4e8:	6801      	ldr	r1, [r0, #0]
 800a4ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4ee:	6001      	str	r1, [r0, #0]
 800a4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4f2:	bf00      	nop
 800a4f4:	e000ed88 	.word	0xe000ed88

0800a4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4fe:	f3ef 8305 	mrs	r3, IPSR
 800a502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b0f      	cmp	r3, #15
 800a508:	d914      	bls.n	800a534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a50a:	4a17      	ldr	r2, [pc, #92]	; (800a568 <vPortValidateInterruptPriority+0x70>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a514:	4b15      	ldr	r3, [pc, #84]	; (800a56c <vPortValidateInterruptPriority+0x74>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	7afa      	ldrb	r2, [r7, #11]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d20a      	bcs.n	800a534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	607b      	str	r3, [r7, #4]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a534:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <vPortValidateInterruptPriority+0x78>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a53c:	4b0d      	ldr	r3, [pc, #52]	; (800a574 <vPortValidateInterruptPriority+0x7c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d90a      	bls.n	800a55a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	603b      	str	r3, [r7, #0]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <vPortValidateInterruptPriority+0x60>
	}
 800a55a:	bf00      	nop
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	e000e3f0 	.word	0xe000e3f0
 800a56c:	20008a50 	.word	0x20008a50
 800a570:	e000ed0c 	.word	0xe000ed0c
 800a574:	20008a54 	.word	0x20008a54

0800a578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	; 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a584:	f7fe fc9c 	bl	8008ec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a588:	4b5b      	ldr	r3, [pc, #364]	; (800a6f8 <pvPortMalloc+0x180>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a590:	f000 f920 	bl	800a7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a594:	4b59      	ldr	r3, [pc, #356]	; (800a6fc <pvPortMalloc+0x184>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f040 8093 	bne.w	800a6c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01d      	beq.n	800a5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d014      	beq.n	800a5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f023 0307 	bic.w	r3, r3, #7
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d06e      	beq.n	800a6c8 <pvPortMalloc+0x150>
 800a5ea:	4b45      	ldr	r3, [pc, #276]	; (800a700 <pvPortMalloc+0x188>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d869      	bhi.n	800a6c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5f4:	4b43      	ldr	r3, [pc, #268]	; (800a704 <pvPortMalloc+0x18c>)
 800a5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5f8:	4b42      	ldr	r3, [pc, #264]	; (800a704 <pvPortMalloc+0x18c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5fe:	e004      	b.n	800a60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d903      	bls.n	800a61c <pvPortMalloc+0xa4>
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1f1      	bne.n	800a600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a61c:	4b36      	ldr	r3, [pc, #216]	; (800a6f8 <pvPortMalloc+0x180>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a622:	429a      	cmp	r2, r3
 800a624:	d050      	beq.n	800a6c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2208      	movs	r2, #8
 800a62c:	4413      	add	r3, r2
 800a62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	1ad2      	subs	r2, r2, r3
 800a640:	2308      	movs	r3, #8
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	429a      	cmp	r2, r3
 800a646:	d91f      	bls.n	800a688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4413      	add	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	f003 0307 	and.w	r3, r3, #7
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <pvPortMalloc+0xf8>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	613b      	str	r3, [r7, #16]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a682:	69b8      	ldr	r0, [r7, #24]
 800a684:	f000 f908 	bl	800a898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a688:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <pvPortMalloc+0x188>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	4a1b      	ldr	r2, [pc, #108]	; (800a700 <pvPortMalloc+0x188>)
 800a694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a696:	4b1a      	ldr	r3, [pc, #104]	; (800a700 <pvPortMalloc+0x188>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	4b1b      	ldr	r3, [pc, #108]	; (800a708 <pvPortMalloc+0x190>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d203      	bcs.n	800a6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6a2:	4b17      	ldr	r3, [pc, #92]	; (800a700 <pvPortMalloc+0x188>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a18      	ldr	r2, [pc, #96]	; (800a708 <pvPortMalloc+0x190>)
 800a6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <pvPortMalloc+0x184>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <pvPortMalloc+0x194>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	4a11      	ldr	r2, [pc, #68]	; (800a70c <pvPortMalloc+0x194>)
 800a6c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6c8:	f7fe fc08 	bl	8008edc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <pvPortMalloc+0x174>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	60fb      	str	r3, [r7, #12]
}
 800a6e8:	bf00      	nop
 800a6ea:	e7fe      	b.n	800a6ea <pvPortMalloc+0x172>
	return pvReturn;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3728      	adds	r7, #40	; 0x28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20009de8 	.word	0x20009de8
 800a6fc:	20009dfc 	.word	0x20009dfc
 800a700:	20009dec 	.word	0x20009dec
 800a704:	20009de0 	.word	0x20009de0
 800a708:	20009df0 	.word	0x20009df0
 800a70c:	20009df4 	.word	0x20009df4

0800a710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d04d      	beq.n	800a7be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a722:	2308      	movs	r3, #8
 800a724:	425b      	negs	r3, r3
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	4413      	add	r3, r2
 800a72a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <vPortFree+0xb8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4013      	ands	r3, r2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <vPortFree+0x44>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	60fb      	str	r3, [r7, #12]
}
 800a750:	bf00      	nop
 800a752:	e7fe      	b.n	800a752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00a      	beq.n	800a772 <vPortFree+0x62>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	60bb      	str	r3, [r7, #8]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <vPortFree+0xb8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01e      	beq.n	800a7be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d11a      	bne.n	800a7be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <vPortFree+0xb8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	43db      	mvns	r3, r3
 800a792:	401a      	ands	r2, r3
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a798:	f7fe fb92 	bl	8008ec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <vPortFree+0xbc>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	4a09      	ldr	r2, [pc, #36]	; (800a7cc <vPortFree+0xbc>)
 800a7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7aa:	6938      	ldr	r0, [r7, #16]
 800a7ac:	f000 f874 	bl	800a898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7b0:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <vPortFree+0xc0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	4a06      	ldr	r2, [pc, #24]	; (800a7d0 <vPortFree+0xc0>)
 800a7b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ba:	f7fe fb8f 	bl	8008edc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20009dfc 	.word	0x20009dfc
 800a7cc:	20009dec 	.word	0x20009dec
 800a7d0:	20009df8 	.word	0x20009df8

0800a7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7da:	f241 3388 	movw	r3, #5000	; 0x1388
 800a7de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7e0:	4b27      	ldr	r3, [pc, #156]	; (800a880 <prvHeapInit+0xac>)
 800a7e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00c      	beq.n	800a808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3307      	adds	r3, #7
 800a7f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0307 	bic.w	r3, r3, #7
 800a7fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	4a1f      	ldr	r2, [pc, #124]	; (800a880 <prvHeapInit+0xac>)
 800a804:	4413      	add	r3, r2
 800a806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a80c:	4a1d      	ldr	r2, [pc, #116]	; (800a884 <prvHeapInit+0xb0>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a812:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <prvHeapInit+0xb0>)
 800a814:	2200      	movs	r2, #0
 800a816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	4413      	add	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a820:	2208      	movs	r2, #8
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1a9b      	subs	r3, r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0307 	bic.w	r3, r3, #7
 800a82e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4a15      	ldr	r2, [pc, #84]	; (800a888 <prvHeapInit+0xb4>)
 800a834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <prvHeapInit+0xb4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2200      	movs	r2, #0
 800a83c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <prvHeapInit+0xb4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a854:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <prvHeapInit+0xb4>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <prvHeapInit+0xb8>)
 800a862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <prvHeapInit+0xbc>)
 800a86a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a86c:	4b09      	ldr	r3, [pc, #36]	; (800a894 <prvHeapInit+0xc0>)
 800a86e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20008a58 	.word	0x20008a58
 800a884:	20009de0 	.word	0x20009de0
 800a888:	20009de8 	.word	0x20009de8
 800a88c:	20009df0 	.word	0x20009df0
 800a890:	20009dec 	.word	0x20009dec
 800a894:	20009dfc 	.word	0x20009dfc

0800a898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8a0:	4b28      	ldr	r3, [pc, #160]	; (800a944 <prvInsertBlockIntoFreeList+0xac>)
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	e002      	b.n	800a8ac <prvInsertBlockIntoFreeList+0x14>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d8f7      	bhi.n	800a8a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d108      	bne.n	800a8da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d118      	bne.n	800a920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <prvInsertBlockIntoFreeList+0xb0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d00d      	beq.n	800a916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	441a      	add	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	e008      	b.n	800a928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a916:	4b0c      	ldr	r3, [pc, #48]	; (800a948 <prvInsertBlockIntoFreeList+0xb0>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	e003      	b.n	800a928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d002      	beq.n	800a936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a936:	bf00      	nop
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20009de0 	.word	0x20009de0
 800a948:	20009de8 	.word	0x20009de8

0800a94c <_vsniprintf_r>:
 800a94c:	b530      	push	{r4, r5, lr}
 800a94e:	4614      	mov	r4, r2
 800a950:	2c00      	cmp	r4, #0
 800a952:	b09b      	sub	sp, #108	; 0x6c
 800a954:	4605      	mov	r5, r0
 800a956:	461a      	mov	r2, r3
 800a958:	da05      	bge.n	800a966 <_vsniprintf_r+0x1a>
 800a95a:	238b      	movs	r3, #139	; 0x8b
 800a95c:	6003      	str	r3, [r0, #0]
 800a95e:	f04f 30ff 	mov.w	r0, #4294967295
 800a962:	b01b      	add	sp, #108	; 0x6c
 800a964:	bd30      	pop	{r4, r5, pc}
 800a966:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a96a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a96e:	bf14      	ite	ne
 800a970:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a974:	4623      	moveq	r3, r4
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	9305      	str	r3, [sp, #20]
 800a97a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a97e:	9100      	str	r1, [sp, #0]
 800a980:	9104      	str	r1, [sp, #16]
 800a982:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a986:	4669      	mov	r1, sp
 800a988:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a98a:	f000 f9c1 	bl	800ad10 <_svfiprintf_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	bfbc      	itt	lt
 800a992:	238b      	movlt	r3, #139	; 0x8b
 800a994:	602b      	strlt	r3, [r5, #0]
 800a996:	2c00      	cmp	r4, #0
 800a998:	d0e3      	beq.n	800a962 <_vsniprintf_r+0x16>
 800a99a:	9b00      	ldr	r3, [sp, #0]
 800a99c:	2200      	movs	r2, #0
 800a99e:	701a      	strb	r2, [r3, #0]
 800a9a0:	e7df      	b.n	800a962 <_vsniprintf_r+0x16>
	...

0800a9a4 <vsniprintf>:
 800a9a4:	b507      	push	{r0, r1, r2, lr}
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	460a      	mov	r2, r1
 800a9ac:	4601      	mov	r1, r0
 800a9ae:	4803      	ldr	r0, [pc, #12]	; (800a9bc <vsniprintf+0x18>)
 800a9b0:	6800      	ldr	r0, [r0, #0]
 800a9b2:	f7ff ffcb 	bl	800a94c <_vsniprintf_r>
 800a9b6:	b003      	add	sp, #12
 800a9b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9bc:	2000007c 	.word	0x2000007c

0800a9c0 <memset>:
 800a9c0:	4402      	add	r2, r0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d100      	bne.n	800a9ca <memset+0xa>
 800a9c8:	4770      	bx	lr
 800a9ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a9ce:	e7f9      	b.n	800a9c4 <memset+0x4>

0800a9d0 <strncpy>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	3901      	subs	r1, #1
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	b132      	cbz	r2, 800a9e6 <strncpy+0x16>
 800a9d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a9dc:	f803 4b01 	strb.w	r4, [r3], #1
 800a9e0:	3a01      	subs	r2, #1
 800a9e2:	2c00      	cmp	r4, #0
 800a9e4:	d1f7      	bne.n	800a9d6 <strncpy+0x6>
 800a9e6:	441a      	add	r2, r3
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d100      	bne.n	800a9f0 <strncpy+0x20>
 800a9ee:	bd10      	pop	{r4, pc}
 800a9f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a9f4:	e7f9      	b.n	800a9ea <strncpy+0x1a>
	...

0800a9f8 <__errno>:
 800a9f8:	4b01      	ldr	r3, [pc, #4]	; (800aa00 <__errno+0x8>)
 800a9fa:	6818      	ldr	r0, [r3, #0]
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	2000007c 	.word	0x2000007c

0800aa04 <__libc_init_array>:
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	4d0d      	ldr	r5, [pc, #52]	; (800aa3c <__libc_init_array+0x38>)
 800aa08:	4c0d      	ldr	r4, [pc, #52]	; (800aa40 <__libc_init_array+0x3c>)
 800aa0a:	1b64      	subs	r4, r4, r5
 800aa0c:	10a4      	asrs	r4, r4, #2
 800aa0e:	2600      	movs	r6, #0
 800aa10:	42a6      	cmp	r6, r4
 800aa12:	d109      	bne.n	800aa28 <__libc_init_array+0x24>
 800aa14:	4d0b      	ldr	r5, [pc, #44]	; (800aa44 <__libc_init_array+0x40>)
 800aa16:	4c0c      	ldr	r4, [pc, #48]	; (800aa48 <__libc_init_array+0x44>)
 800aa18:	f000 fc6a 	bl	800b2f0 <_init>
 800aa1c:	1b64      	subs	r4, r4, r5
 800aa1e:	10a4      	asrs	r4, r4, #2
 800aa20:	2600      	movs	r6, #0
 800aa22:	42a6      	cmp	r6, r4
 800aa24:	d105      	bne.n	800aa32 <__libc_init_array+0x2e>
 800aa26:	bd70      	pop	{r4, r5, r6, pc}
 800aa28:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa2c:	4798      	blx	r3
 800aa2e:	3601      	adds	r6, #1
 800aa30:	e7ee      	b.n	800aa10 <__libc_init_array+0xc>
 800aa32:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa36:	4798      	blx	r3
 800aa38:	3601      	adds	r6, #1
 800aa3a:	e7f2      	b.n	800aa22 <__libc_init_array+0x1e>
 800aa3c:	0800b6e4 	.word	0x0800b6e4
 800aa40:	0800b6e4 	.word	0x0800b6e4
 800aa44:	0800b6e4 	.word	0x0800b6e4
 800aa48:	0800b6e8 	.word	0x0800b6e8

0800aa4c <__retarget_lock_acquire_recursive>:
 800aa4c:	4770      	bx	lr

0800aa4e <__retarget_lock_release_recursive>:
 800aa4e:	4770      	bx	lr

0800aa50 <memcpy>:
 800aa50:	440a      	add	r2, r1
 800aa52:	4291      	cmp	r1, r2
 800aa54:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa58:	d100      	bne.n	800aa5c <memcpy+0xc>
 800aa5a:	4770      	bx	lr
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa66:	4291      	cmp	r1, r2
 800aa68:	d1f9      	bne.n	800aa5e <memcpy+0xe>
 800aa6a:	bd10      	pop	{r4, pc}

0800aa6c <_free_r>:
 800aa6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	d044      	beq.n	800aafc <_free_r+0x90>
 800aa72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa76:	9001      	str	r0, [sp, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa7e:	bfb8      	it	lt
 800aa80:	18e4      	addlt	r4, r4, r3
 800aa82:	f000 f8df 	bl	800ac44 <__malloc_lock>
 800aa86:	4a1e      	ldr	r2, [pc, #120]	; (800ab00 <_free_r+0x94>)
 800aa88:	9801      	ldr	r0, [sp, #4]
 800aa8a:	6813      	ldr	r3, [r2, #0]
 800aa8c:	b933      	cbnz	r3, 800aa9c <_free_r+0x30>
 800aa8e:	6063      	str	r3, [r4, #4]
 800aa90:	6014      	str	r4, [r2, #0]
 800aa92:	b003      	add	sp, #12
 800aa94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa98:	f000 b8da 	b.w	800ac50 <__malloc_unlock>
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d908      	bls.n	800aab2 <_free_r+0x46>
 800aaa0:	6825      	ldr	r5, [r4, #0]
 800aaa2:	1961      	adds	r1, r4, r5
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf01      	itttt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	1949      	addeq	r1, r1, r5
 800aaae:	6021      	streq	r1, [r4, #0]
 800aab0:	e7ed      	b.n	800aa8e <_free_r+0x22>
 800aab2:	461a      	mov	r2, r3
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	b10b      	cbz	r3, 800aabc <_free_r+0x50>
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	d9fa      	bls.n	800aab2 <_free_r+0x46>
 800aabc:	6811      	ldr	r1, [r2, #0]
 800aabe:	1855      	adds	r5, r2, r1
 800aac0:	42a5      	cmp	r5, r4
 800aac2:	d10b      	bne.n	800aadc <_free_r+0x70>
 800aac4:	6824      	ldr	r4, [r4, #0]
 800aac6:	4421      	add	r1, r4
 800aac8:	1854      	adds	r4, r2, r1
 800aaca:	42a3      	cmp	r3, r4
 800aacc:	6011      	str	r1, [r2, #0]
 800aace:	d1e0      	bne.n	800aa92 <_free_r+0x26>
 800aad0:	681c      	ldr	r4, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	6053      	str	r3, [r2, #4]
 800aad6:	440c      	add	r4, r1
 800aad8:	6014      	str	r4, [r2, #0]
 800aada:	e7da      	b.n	800aa92 <_free_r+0x26>
 800aadc:	d902      	bls.n	800aae4 <_free_r+0x78>
 800aade:	230c      	movs	r3, #12
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	e7d6      	b.n	800aa92 <_free_r+0x26>
 800aae4:	6825      	ldr	r5, [r4, #0]
 800aae6:	1961      	adds	r1, r4, r5
 800aae8:	428b      	cmp	r3, r1
 800aaea:	bf04      	itt	eq
 800aaec:	6819      	ldreq	r1, [r3, #0]
 800aaee:	685b      	ldreq	r3, [r3, #4]
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	bf04      	itt	eq
 800aaf4:	1949      	addeq	r1, r1, r5
 800aaf6:	6021      	streq	r1, [r4, #0]
 800aaf8:	6054      	str	r4, [r2, #4]
 800aafa:	e7ca      	b.n	800aa92 <_free_r+0x26>
 800aafc:	b003      	add	sp, #12
 800aafe:	bd30      	pop	{r4, r5, pc}
 800ab00:	20009f40 	.word	0x20009f40

0800ab04 <sbrk_aligned>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	4e0e      	ldr	r6, [pc, #56]	; (800ab40 <sbrk_aligned+0x3c>)
 800ab08:	460c      	mov	r4, r1
 800ab0a:	6831      	ldr	r1, [r6, #0]
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	b911      	cbnz	r1, 800ab16 <sbrk_aligned+0x12>
 800ab10:	f000 fba6 	bl	800b260 <_sbrk_r>
 800ab14:	6030      	str	r0, [r6, #0]
 800ab16:	4621      	mov	r1, r4
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f000 fba1 	bl	800b260 <_sbrk_r>
 800ab1e:	1c43      	adds	r3, r0, #1
 800ab20:	d00a      	beq.n	800ab38 <sbrk_aligned+0x34>
 800ab22:	1cc4      	adds	r4, r0, #3
 800ab24:	f024 0403 	bic.w	r4, r4, #3
 800ab28:	42a0      	cmp	r0, r4
 800ab2a:	d007      	beq.n	800ab3c <sbrk_aligned+0x38>
 800ab2c:	1a21      	subs	r1, r4, r0
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f000 fb96 	bl	800b260 <_sbrk_r>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d101      	bne.n	800ab3c <sbrk_aligned+0x38>
 800ab38:	f04f 34ff 	mov.w	r4, #4294967295
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	20009f44 	.word	0x20009f44

0800ab44 <_malloc_r>:
 800ab44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab48:	1ccd      	adds	r5, r1, #3
 800ab4a:	f025 0503 	bic.w	r5, r5, #3
 800ab4e:	3508      	adds	r5, #8
 800ab50:	2d0c      	cmp	r5, #12
 800ab52:	bf38      	it	cc
 800ab54:	250c      	movcc	r5, #12
 800ab56:	2d00      	cmp	r5, #0
 800ab58:	4607      	mov	r7, r0
 800ab5a:	db01      	blt.n	800ab60 <_malloc_r+0x1c>
 800ab5c:	42a9      	cmp	r1, r5
 800ab5e:	d905      	bls.n	800ab6c <_malloc_r+0x28>
 800ab60:	230c      	movs	r3, #12
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	2600      	movs	r6, #0
 800ab66:	4630      	mov	r0, r6
 800ab68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac40 <_malloc_r+0xfc>
 800ab70:	f000 f868 	bl	800ac44 <__malloc_lock>
 800ab74:	f8d8 3000 	ldr.w	r3, [r8]
 800ab78:	461c      	mov	r4, r3
 800ab7a:	bb5c      	cbnz	r4, 800abd4 <_malloc_r+0x90>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f7ff ffc0 	bl	800ab04 <sbrk_aligned>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	4604      	mov	r4, r0
 800ab88:	d155      	bne.n	800ac36 <_malloc_r+0xf2>
 800ab8a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab8e:	4626      	mov	r6, r4
 800ab90:	2e00      	cmp	r6, #0
 800ab92:	d145      	bne.n	800ac20 <_malloc_r+0xdc>
 800ab94:	2c00      	cmp	r4, #0
 800ab96:	d048      	beq.n	800ac2a <_malloc_r+0xe6>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	eb04 0903 	add.w	r9, r4, r3
 800aba2:	f000 fb5d 	bl	800b260 <_sbrk_r>
 800aba6:	4581      	cmp	r9, r0
 800aba8:	d13f      	bne.n	800ac2a <_malloc_r+0xe6>
 800abaa:	6821      	ldr	r1, [r4, #0]
 800abac:	1a6d      	subs	r5, r5, r1
 800abae:	4629      	mov	r1, r5
 800abb0:	4638      	mov	r0, r7
 800abb2:	f7ff ffa7 	bl	800ab04 <sbrk_aligned>
 800abb6:	3001      	adds	r0, #1
 800abb8:	d037      	beq.n	800ac2a <_malloc_r+0xe6>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	442b      	add	r3, r5
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	f8d8 3000 	ldr.w	r3, [r8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d038      	beq.n	800ac3a <_malloc_r+0xf6>
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	42a2      	cmp	r2, r4
 800abcc:	d12b      	bne.n	800ac26 <_malloc_r+0xe2>
 800abce:	2200      	movs	r2, #0
 800abd0:	605a      	str	r2, [r3, #4]
 800abd2:	e00f      	b.n	800abf4 <_malloc_r+0xb0>
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	1b52      	subs	r2, r2, r5
 800abd8:	d41f      	bmi.n	800ac1a <_malloc_r+0xd6>
 800abda:	2a0b      	cmp	r2, #11
 800abdc:	d917      	bls.n	800ac0e <_malloc_r+0xca>
 800abde:	1961      	adds	r1, r4, r5
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	6025      	str	r5, [r4, #0]
 800abe4:	bf18      	it	ne
 800abe6:	6059      	strne	r1, [r3, #4]
 800abe8:	6863      	ldr	r3, [r4, #4]
 800abea:	bf08      	it	eq
 800abec:	f8c8 1000 	streq.w	r1, [r8]
 800abf0:	5162      	str	r2, [r4, r5]
 800abf2:	604b      	str	r3, [r1, #4]
 800abf4:	4638      	mov	r0, r7
 800abf6:	f104 060b 	add.w	r6, r4, #11
 800abfa:	f000 f829 	bl	800ac50 <__malloc_unlock>
 800abfe:	f026 0607 	bic.w	r6, r6, #7
 800ac02:	1d23      	adds	r3, r4, #4
 800ac04:	1af2      	subs	r2, r6, r3
 800ac06:	d0ae      	beq.n	800ab66 <_malloc_r+0x22>
 800ac08:	1b9b      	subs	r3, r3, r6
 800ac0a:	50a3      	str	r3, [r4, r2]
 800ac0c:	e7ab      	b.n	800ab66 <_malloc_r+0x22>
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	6862      	ldr	r2, [r4, #4]
 800ac12:	d1dd      	bne.n	800abd0 <_malloc_r+0x8c>
 800ac14:	f8c8 2000 	str.w	r2, [r8]
 800ac18:	e7ec      	b.n	800abf4 <_malloc_r+0xb0>
 800ac1a:	4623      	mov	r3, r4
 800ac1c:	6864      	ldr	r4, [r4, #4]
 800ac1e:	e7ac      	b.n	800ab7a <_malloc_r+0x36>
 800ac20:	4634      	mov	r4, r6
 800ac22:	6876      	ldr	r6, [r6, #4]
 800ac24:	e7b4      	b.n	800ab90 <_malloc_r+0x4c>
 800ac26:	4613      	mov	r3, r2
 800ac28:	e7cc      	b.n	800abc4 <_malloc_r+0x80>
 800ac2a:	230c      	movs	r3, #12
 800ac2c:	603b      	str	r3, [r7, #0]
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f000 f80e 	bl	800ac50 <__malloc_unlock>
 800ac34:	e797      	b.n	800ab66 <_malloc_r+0x22>
 800ac36:	6025      	str	r5, [r4, #0]
 800ac38:	e7dc      	b.n	800abf4 <_malloc_r+0xb0>
 800ac3a:	605b      	str	r3, [r3, #4]
 800ac3c:	deff      	udf	#255	; 0xff
 800ac3e:	bf00      	nop
 800ac40:	20009f40 	.word	0x20009f40

0800ac44 <__malloc_lock>:
 800ac44:	4801      	ldr	r0, [pc, #4]	; (800ac4c <__malloc_lock+0x8>)
 800ac46:	f7ff bf01 	b.w	800aa4c <__retarget_lock_acquire_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	20009f3c 	.word	0x20009f3c

0800ac50 <__malloc_unlock>:
 800ac50:	4801      	ldr	r0, [pc, #4]	; (800ac58 <__malloc_unlock+0x8>)
 800ac52:	f7ff befc 	b.w	800aa4e <__retarget_lock_release_recursive>
 800ac56:	bf00      	nop
 800ac58:	20009f3c 	.word	0x20009f3c

0800ac5c <__ssputs_r>:
 800ac5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac60:	688e      	ldr	r6, [r1, #8]
 800ac62:	461f      	mov	r7, r3
 800ac64:	42be      	cmp	r6, r7
 800ac66:	680b      	ldr	r3, [r1, #0]
 800ac68:	4682      	mov	sl, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	4690      	mov	r8, r2
 800ac6e:	d82c      	bhi.n	800acca <__ssputs_r+0x6e>
 800ac70:	898a      	ldrh	r2, [r1, #12]
 800ac72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac76:	d026      	beq.n	800acc6 <__ssputs_r+0x6a>
 800ac78:	6965      	ldr	r5, [r4, #20]
 800ac7a:	6909      	ldr	r1, [r1, #16]
 800ac7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac80:	eba3 0901 	sub.w	r9, r3, r1
 800ac84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac88:	1c7b      	adds	r3, r7, #1
 800ac8a:	444b      	add	r3, r9
 800ac8c:	106d      	asrs	r5, r5, #1
 800ac8e:	429d      	cmp	r5, r3
 800ac90:	bf38      	it	cc
 800ac92:	461d      	movcc	r5, r3
 800ac94:	0553      	lsls	r3, r2, #21
 800ac96:	d527      	bpl.n	800ace8 <__ssputs_r+0x8c>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	f7ff ff53 	bl	800ab44 <_malloc_r>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	b360      	cbz	r0, 800acfc <__ssputs_r+0xa0>
 800aca2:	6921      	ldr	r1, [r4, #16]
 800aca4:	464a      	mov	r2, r9
 800aca6:	f7ff fed3 	bl	800aa50 <memcpy>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	6126      	str	r6, [r4, #16]
 800acb8:	6165      	str	r5, [r4, #20]
 800acba:	444e      	add	r6, r9
 800acbc:	eba5 0509 	sub.w	r5, r5, r9
 800acc0:	6026      	str	r6, [r4, #0]
 800acc2:	60a5      	str	r5, [r4, #8]
 800acc4:	463e      	mov	r6, r7
 800acc6:	42be      	cmp	r6, r7
 800acc8:	d900      	bls.n	800accc <__ssputs_r+0x70>
 800acca:	463e      	mov	r6, r7
 800accc:	6820      	ldr	r0, [r4, #0]
 800acce:	4632      	mov	r2, r6
 800acd0:	4641      	mov	r1, r8
 800acd2:	f000 faab 	bl	800b22c <memmove>
 800acd6:	68a3      	ldr	r3, [r4, #8]
 800acd8:	1b9b      	subs	r3, r3, r6
 800acda:	60a3      	str	r3, [r4, #8]
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	4433      	add	r3, r6
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	2000      	movs	r0, #0
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	462a      	mov	r2, r5
 800acea:	f000 fac9 	bl	800b280 <_realloc_r>
 800acee:	4606      	mov	r6, r0
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1e0      	bne.n	800acb6 <__ssputs_r+0x5a>
 800acf4:	6921      	ldr	r1, [r4, #16]
 800acf6:	4650      	mov	r0, sl
 800acf8:	f7ff feb8 	bl	800aa6c <_free_r>
 800acfc:	230c      	movs	r3, #12
 800acfe:	f8ca 3000 	str.w	r3, [sl]
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0e:	e7e9      	b.n	800ace4 <__ssputs_r+0x88>

0800ad10 <_svfiprintf_r>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	4698      	mov	r8, r3
 800ad16:	898b      	ldrh	r3, [r1, #12]
 800ad18:	061b      	lsls	r3, r3, #24
 800ad1a:	b09d      	sub	sp, #116	; 0x74
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	460d      	mov	r5, r1
 800ad20:	4614      	mov	r4, r2
 800ad22:	d50e      	bpl.n	800ad42 <_svfiprintf_r+0x32>
 800ad24:	690b      	ldr	r3, [r1, #16]
 800ad26:	b963      	cbnz	r3, 800ad42 <_svfiprintf_r+0x32>
 800ad28:	2140      	movs	r1, #64	; 0x40
 800ad2a:	f7ff ff0b 	bl	800ab44 <_malloc_r>
 800ad2e:	6028      	str	r0, [r5, #0]
 800ad30:	6128      	str	r0, [r5, #16]
 800ad32:	b920      	cbnz	r0, 800ad3e <_svfiprintf_r+0x2e>
 800ad34:	230c      	movs	r3, #12
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3c:	e0d0      	b.n	800aee0 <_svfiprintf_r+0x1d0>
 800ad3e:	2340      	movs	r3, #64	; 0x40
 800ad40:	616b      	str	r3, [r5, #20]
 800ad42:	2300      	movs	r3, #0
 800ad44:	9309      	str	r3, [sp, #36]	; 0x24
 800ad46:	2320      	movs	r3, #32
 800ad48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad50:	2330      	movs	r3, #48	; 0x30
 800ad52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aef8 <_svfiprintf_r+0x1e8>
 800ad56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad5a:	f04f 0901 	mov.w	r9, #1
 800ad5e:	4623      	mov	r3, r4
 800ad60:	469a      	mov	sl, r3
 800ad62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad66:	b10a      	cbz	r2, 800ad6c <_svfiprintf_r+0x5c>
 800ad68:	2a25      	cmp	r2, #37	; 0x25
 800ad6a:	d1f9      	bne.n	800ad60 <_svfiprintf_r+0x50>
 800ad6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad70:	d00b      	beq.n	800ad8a <_svfiprintf_r+0x7a>
 800ad72:	465b      	mov	r3, fp
 800ad74:	4622      	mov	r2, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f7ff ff6f 	bl	800ac5c <__ssputs_r>
 800ad7e:	3001      	adds	r0, #1
 800ad80:	f000 80a9 	beq.w	800aed6 <_svfiprintf_r+0x1c6>
 800ad84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad86:	445a      	add	r2, fp
 800ad88:	9209      	str	r2, [sp, #36]	; 0x24
 800ad8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f000 80a1 	beq.w	800aed6 <_svfiprintf_r+0x1c6>
 800ad94:	2300      	movs	r3, #0
 800ad96:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad9e:	f10a 0a01 	add.w	sl, sl, #1
 800ada2:	9304      	str	r3, [sp, #16]
 800ada4:	9307      	str	r3, [sp, #28]
 800ada6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adaa:	931a      	str	r3, [sp, #104]	; 0x68
 800adac:	4654      	mov	r4, sl
 800adae:	2205      	movs	r2, #5
 800adb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb4:	4850      	ldr	r0, [pc, #320]	; (800aef8 <_svfiprintf_r+0x1e8>)
 800adb6:	f7f5 fa13 	bl	80001e0 <memchr>
 800adba:	9a04      	ldr	r2, [sp, #16]
 800adbc:	b9d8      	cbnz	r0, 800adf6 <_svfiprintf_r+0xe6>
 800adbe:	06d0      	lsls	r0, r2, #27
 800adc0:	bf44      	itt	mi
 800adc2:	2320      	movmi	r3, #32
 800adc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc8:	0711      	lsls	r1, r2, #28
 800adca:	bf44      	itt	mi
 800adcc:	232b      	movmi	r3, #43	; 0x2b
 800adce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add2:	f89a 3000 	ldrb.w	r3, [sl]
 800add6:	2b2a      	cmp	r3, #42	; 0x2a
 800add8:	d015      	beq.n	800ae06 <_svfiprintf_r+0xf6>
 800adda:	9a07      	ldr	r2, [sp, #28]
 800addc:	4654      	mov	r4, sl
 800adde:	2000      	movs	r0, #0
 800ade0:	f04f 0c0a 	mov.w	ip, #10
 800ade4:	4621      	mov	r1, r4
 800ade6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adea:	3b30      	subs	r3, #48	; 0x30
 800adec:	2b09      	cmp	r3, #9
 800adee:	d94d      	bls.n	800ae8c <_svfiprintf_r+0x17c>
 800adf0:	b1b0      	cbz	r0, 800ae20 <_svfiprintf_r+0x110>
 800adf2:	9207      	str	r2, [sp, #28]
 800adf4:	e014      	b.n	800ae20 <_svfiprintf_r+0x110>
 800adf6:	eba0 0308 	sub.w	r3, r0, r8
 800adfa:	fa09 f303 	lsl.w	r3, r9, r3
 800adfe:	4313      	orrs	r3, r2
 800ae00:	9304      	str	r3, [sp, #16]
 800ae02:	46a2      	mov	sl, r4
 800ae04:	e7d2      	b.n	800adac <_svfiprintf_r+0x9c>
 800ae06:	9b03      	ldr	r3, [sp, #12]
 800ae08:	1d19      	adds	r1, r3, #4
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	9103      	str	r1, [sp, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bfbb      	ittet	lt
 800ae12:	425b      	neglt	r3, r3
 800ae14:	f042 0202 	orrlt.w	r2, r2, #2
 800ae18:	9307      	strge	r3, [sp, #28]
 800ae1a:	9307      	strlt	r3, [sp, #28]
 800ae1c:	bfb8      	it	lt
 800ae1e:	9204      	strlt	r2, [sp, #16]
 800ae20:	7823      	ldrb	r3, [r4, #0]
 800ae22:	2b2e      	cmp	r3, #46	; 0x2e
 800ae24:	d10c      	bne.n	800ae40 <_svfiprintf_r+0x130>
 800ae26:	7863      	ldrb	r3, [r4, #1]
 800ae28:	2b2a      	cmp	r3, #42	; 0x2a
 800ae2a:	d134      	bne.n	800ae96 <_svfiprintf_r+0x186>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	1d1a      	adds	r2, r3, #4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	9203      	str	r2, [sp, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bfb8      	it	lt
 800ae38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae3c:	3402      	adds	r4, #2
 800ae3e:	9305      	str	r3, [sp, #20]
 800ae40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af08 <_svfiprintf_r+0x1f8>
 800ae44:	7821      	ldrb	r1, [r4, #0]
 800ae46:	2203      	movs	r2, #3
 800ae48:	4650      	mov	r0, sl
 800ae4a:	f7f5 f9c9 	bl	80001e0 <memchr>
 800ae4e:	b138      	cbz	r0, 800ae60 <_svfiprintf_r+0x150>
 800ae50:	9b04      	ldr	r3, [sp, #16]
 800ae52:	eba0 000a 	sub.w	r0, r0, sl
 800ae56:	2240      	movs	r2, #64	; 0x40
 800ae58:	4082      	lsls	r2, r0
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	3401      	adds	r4, #1
 800ae5e:	9304      	str	r3, [sp, #16]
 800ae60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae64:	4825      	ldr	r0, [pc, #148]	; (800aefc <_svfiprintf_r+0x1ec>)
 800ae66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae6a:	2206      	movs	r2, #6
 800ae6c:	f7f5 f9b8 	bl	80001e0 <memchr>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d038      	beq.n	800aee6 <_svfiprintf_r+0x1d6>
 800ae74:	4b22      	ldr	r3, [pc, #136]	; (800af00 <_svfiprintf_r+0x1f0>)
 800ae76:	bb1b      	cbnz	r3, 800aec0 <_svfiprintf_r+0x1b0>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	3307      	adds	r3, #7
 800ae7c:	f023 0307 	bic.w	r3, r3, #7
 800ae80:	3308      	adds	r3, #8
 800ae82:	9303      	str	r3, [sp, #12]
 800ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae86:	4433      	add	r3, r6
 800ae88:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8a:	e768      	b.n	800ad5e <_svfiprintf_r+0x4e>
 800ae8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae90:	460c      	mov	r4, r1
 800ae92:	2001      	movs	r0, #1
 800ae94:	e7a6      	b.n	800ade4 <_svfiprintf_r+0xd4>
 800ae96:	2300      	movs	r3, #0
 800ae98:	3401      	adds	r4, #1
 800ae9a:	9305      	str	r3, [sp, #20]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	f04f 0c0a 	mov.w	ip, #10
 800aea2:	4620      	mov	r0, r4
 800aea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea8:	3a30      	subs	r2, #48	; 0x30
 800aeaa:	2a09      	cmp	r2, #9
 800aeac:	d903      	bls.n	800aeb6 <_svfiprintf_r+0x1a6>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0c6      	beq.n	800ae40 <_svfiprintf_r+0x130>
 800aeb2:	9105      	str	r1, [sp, #20]
 800aeb4:	e7c4      	b.n	800ae40 <_svfiprintf_r+0x130>
 800aeb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeba:	4604      	mov	r4, r0
 800aebc:	2301      	movs	r3, #1
 800aebe:	e7f0      	b.n	800aea2 <_svfiprintf_r+0x192>
 800aec0:	ab03      	add	r3, sp, #12
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	462a      	mov	r2, r5
 800aec6:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <_svfiprintf_r+0x1f4>)
 800aec8:	a904      	add	r1, sp, #16
 800aeca:	4638      	mov	r0, r7
 800aecc:	f3af 8000 	nop.w
 800aed0:	1c42      	adds	r2, r0, #1
 800aed2:	4606      	mov	r6, r0
 800aed4:	d1d6      	bne.n	800ae84 <_svfiprintf_r+0x174>
 800aed6:	89ab      	ldrh	r3, [r5, #12]
 800aed8:	065b      	lsls	r3, r3, #25
 800aeda:	f53f af2d 	bmi.w	800ad38 <_svfiprintf_r+0x28>
 800aede:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aee0:	b01d      	add	sp, #116	; 0x74
 800aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee6:	ab03      	add	r3, sp, #12
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	462a      	mov	r2, r5
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <_svfiprintf_r+0x1f4>)
 800aeee:	a904      	add	r1, sp, #16
 800aef0:	4638      	mov	r0, r7
 800aef2:	f000 f879 	bl	800afe8 <_printf_i>
 800aef6:	e7eb      	b.n	800aed0 <_svfiprintf_r+0x1c0>
 800aef8:	0800b6a8 	.word	0x0800b6a8
 800aefc:	0800b6b2 	.word	0x0800b6b2
 800af00:	00000000 	.word	0x00000000
 800af04:	0800ac5d 	.word	0x0800ac5d
 800af08:	0800b6ae 	.word	0x0800b6ae

0800af0c <_printf_common>:
 800af0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af10:	4616      	mov	r6, r2
 800af12:	4699      	mov	r9, r3
 800af14:	688a      	ldr	r2, [r1, #8]
 800af16:	690b      	ldr	r3, [r1, #16]
 800af18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af1c:	4293      	cmp	r3, r2
 800af1e:	bfb8      	it	lt
 800af20:	4613      	movlt	r3, r2
 800af22:	6033      	str	r3, [r6, #0]
 800af24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af28:	4607      	mov	r7, r0
 800af2a:	460c      	mov	r4, r1
 800af2c:	b10a      	cbz	r2, 800af32 <_printf_common+0x26>
 800af2e:	3301      	adds	r3, #1
 800af30:	6033      	str	r3, [r6, #0]
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	0699      	lsls	r1, r3, #26
 800af36:	bf42      	ittt	mi
 800af38:	6833      	ldrmi	r3, [r6, #0]
 800af3a:	3302      	addmi	r3, #2
 800af3c:	6033      	strmi	r3, [r6, #0]
 800af3e:	6825      	ldr	r5, [r4, #0]
 800af40:	f015 0506 	ands.w	r5, r5, #6
 800af44:	d106      	bne.n	800af54 <_printf_common+0x48>
 800af46:	f104 0a19 	add.w	sl, r4, #25
 800af4a:	68e3      	ldr	r3, [r4, #12]
 800af4c:	6832      	ldr	r2, [r6, #0]
 800af4e:	1a9b      	subs	r3, r3, r2
 800af50:	42ab      	cmp	r3, r5
 800af52:	dc26      	bgt.n	800afa2 <_printf_common+0x96>
 800af54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af58:	1e13      	subs	r3, r2, #0
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	bf18      	it	ne
 800af5e:	2301      	movne	r3, #1
 800af60:	0692      	lsls	r2, r2, #26
 800af62:	d42b      	bmi.n	800afbc <_printf_common+0xb0>
 800af64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af68:	4649      	mov	r1, r9
 800af6a:	4638      	mov	r0, r7
 800af6c:	47c0      	blx	r8
 800af6e:	3001      	adds	r0, #1
 800af70:	d01e      	beq.n	800afb0 <_printf_common+0xa4>
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	6922      	ldr	r2, [r4, #16]
 800af76:	f003 0306 	and.w	r3, r3, #6
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	bf02      	ittt	eq
 800af7e:	68e5      	ldreq	r5, [r4, #12]
 800af80:	6833      	ldreq	r3, [r6, #0]
 800af82:	1aed      	subeq	r5, r5, r3
 800af84:	68a3      	ldr	r3, [r4, #8]
 800af86:	bf0c      	ite	eq
 800af88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af8c:	2500      	movne	r5, #0
 800af8e:	4293      	cmp	r3, r2
 800af90:	bfc4      	itt	gt
 800af92:	1a9b      	subgt	r3, r3, r2
 800af94:	18ed      	addgt	r5, r5, r3
 800af96:	2600      	movs	r6, #0
 800af98:	341a      	adds	r4, #26
 800af9a:	42b5      	cmp	r5, r6
 800af9c:	d11a      	bne.n	800afd4 <_printf_common+0xc8>
 800af9e:	2000      	movs	r0, #0
 800afa0:	e008      	b.n	800afb4 <_printf_common+0xa8>
 800afa2:	2301      	movs	r3, #1
 800afa4:	4652      	mov	r2, sl
 800afa6:	4649      	mov	r1, r9
 800afa8:	4638      	mov	r0, r7
 800afaa:	47c0      	blx	r8
 800afac:	3001      	adds	r0, #1
 800afae:	d103      	bne.n	800afb8 <_printf_common+0xac>
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb8:	3501      	adds	r5, #1
 800afba:	e7c6      	b.n	800af4a <_printf_common+0x3e>
 800afbc:	18e1      	adds	r1, r4, r3
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	2030      	movs	r0, #48	; 0x30
 800afc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afc6:	4422      	add	r2, r4
 800afc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afd0:	3302      	adds	r3, #2
 800afd2:	e7c7      	b.n	800af64 <_printf_common+0x58>
 800afd4:	2301      	movs	r3, #1
 800afd6:	4622      	mov	r2, r4
 800afd8:	4649      	mov	r1, r9
 800afda:	4638      	mov	r0, r7
 800afdc:	47c0      	blx	r8
 800afde:	3001      	adds	r0, #1
 800afe0:	d0e6      	beq.n	800afb0 <_printf_common+0xa4>
 800afe2:	3601      	adds	r6, #1
 800afe4:	e7d9      	b.n	800af9a <_printf_common+0x8e>
	...

0800afe8 <_printf_i>:
 800afe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afec:	7e0f      	ldrb	r7, [r1, #24]
 800afee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aff0:	2f78      	cmp	r7, #120	; 0x78
 800aff2:	4691      	mov	r9, r2
 800aff4:	4680      	mov	r8, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	469a      	mov	sl, r3
 800affa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800affe:	d807      	bhi.n	800b010 <_printf_i+0x28>
 800b000:	2f62      	cmp	r7, #98	; 0x62
 800b002:	d80a      	bhi.n	800b01a <_printf_i+0x32>
 800b004:	2f00      	cmp	r7, #0
 800b006:	f000 80d4 	beq.w	800b1b2 <_printf_i+0x1ca>
 800b00a:	2f58      	cmp	r7, #88	; 0x58
 800b00c:	f000 80c0 	beq.w	800b190 <_printf_i+0x1a8>
 800b010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b018:	e03a      	b.n	800b090 <_printf_i+0xa8>
 800b01a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b01e:	2b15      	cmp	r3, #21
 800b020:	d8f6      	bhi.n	800b010 <_printf_i+0x28>
 800b022:	a101      	add	r1, pc, #4	; (adr r1, 800b028 <_printf_i+0x40>)
 800b024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b028:	0800b081 	.word	0x0800b081
 800b02c:	0800b095 	.word	0x0800b095
 800b030:	0800b011 	.word	0x0800b011
 800b034:	0800b011 	.word	0x0800b011
 800b038:	0800b011 	.word	0x0800b011
 800b03c:	0800b011 	.word	0x0800b011
 800b040:	0800b095 	.word	0x0800b095
 800b044:	0800b011 	.word	0x0800b011
 800b048:	0800b011 	.word	0x0800b011
 800b04c:	0800b011 	.word	0x0800b011
 800b050:	0800b011 	.word	0x0800b011
 800b054:	0800b199 	.word	0x0800b199
 800b058:	0800b0c1 	.word	0x0800b0c1
 800b05c:	0800b153 	.word	0x0800b153
 800b060:	0800b011 	.word	0x0800b011
 800b064:	0800b011 	.word	0x0800b011
 800b068:	0800b1bb 	.word	0x0800b1bb
 800b06c:	0800b011 	.word	0x0800b011
 800b070:	0800b0c1 	.word	0x0800b0c1
 800b074:	0800b011 	.word	0x0800b011
 800b078:	0800b011 	.word	0x0800b011
 800b07c:	0800b15b 	.word	0x0800b15b
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	1d1a      	adds	r2, r3, #4
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	602a      	str	r2, [r5, #0]
 800b088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b08c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b090:	2301      	movs	r3, #1
 800b092:	e09f      	b.n	800b1d4 <_printf_i+0x1ec>
 800b094:	6820      	ldr	r0, [r4, #0]
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	0607      	lsls	r7, r0, #24
 800b09a:	f103 0104 	add.w	r1, r3, #4
 800b09e:	6029      	str	r1, [r5, #0]
 800b0a0:	d501      	bpl.n	800b0a6 <_printf_i+0xbe>
 800b0a2:	681e      	ldr	r6, [r3, #0]
 800b0a4:	e003      	b.n	800b0ae <_printf_i+0xc6>
 800b0a6:	0646      	lsls	r6, r0, #25
 800b0a8:	d5fb      	bpl.n	800b0a2 <_printf_i+0xba>
 800b0aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0ae:	2e00      	cmp	r6, #0
 800b0b0:	da03      	bge.n	800b0ba <_printf_i+0xd2>
 800b0b2:	232d      	movs	r3, #45	; 0x2d
 800b0b4:	4276      	negs	r6, r6
 800b0b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0ba:	485a      	ldr	r0, [pc, #360]	; (800b224 <_printf_i+0x23c>)
 800b0bc:	230a      	movs	r3, #10
 800b0be:	e012      	b.n	800b0e6 <_printf_i+0xfe>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	6820      	ldr	r0, [r4, #0]
 800b0c4:	1d19      	adds	r1, r3, #4
 800b0c6:	6029      	str	r1, [r5, #0]
 800b0c8:	0605      	lsls	r5, r0, #24
 800b0ca:	d501      	bpl.n	800b0d0 <_printf_i+0xe8>
 800b0cc:	681e      	ldr	r6, [r3, #0]
 800b0ce:	e002      	b.n	800b0d6 <_printf_i+0xee>
 800b0d0:	0641      	lsls	r1, r0, #25
 800b0d2:	d5fb      	bpl.n	800b0cc <_printf_i+0xe4>
 800b0d4:	881e      	ldrh	r6, [r3, #0]
 800b0d6:	4853      	ldr	r0, [pc, #332]	; (800b224 <_printf_i+0x23c>)
 800b0d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b0da:	bf0c      	ite	eq
 800b0dc:	2308      	moveq	r3, #8
 800b0de:	230a      	movne	r3, #10
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0e6:	6865      	ldr	r5, [r4, #4]
 800b0e8:	60a5      	str	r5, [r4, #8]
 800b0ea:	2d00      	cmp	r5, #0
 800b0ec:	bfa2      	ittt	ge
 800b0ee:	6821      	ldrge	r1, [r4, #0]
 800b0f0:	f021 0104 	bicge.w	r1, r1, #4
 800b0f4:	6021      	strge	r1, [r4, #0]
 800b0f6:	b90e      	cbnz	r6, 800b0fc <_printf_i+0x114>
 800b0f8:	2d00      	cmp	r5, #0
 800b0fa:	d04b      	beq.n	800b194 <_printf_i+0x1ac>
 800b0fc:	4615      	mov	r5, r2
 800b0fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800b102:	fb03 6711 	mls	r7, r3, r1, r6
 800b106:	5dc7      	ldrb	r7, [r0, r7]
 800b108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b10c:	4637      	mov	r7, r6
 800b10e:	42bb      	cmp	r3, r7
 800b110:	460e      	mov	r6, r1
 800b112:	d9f4      	bls.n	800b0fe <_printf_i+0x116>
 800b114:	2b08      	cmp	r3, #8
 800b116:	d10b      	bne.n	800b130 <_printf_i+0x148>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	07de      	lsls	r6, r3, #31
 800b11c:	d508      	bpl.n	800b130 <_printf_i+0x148>
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	6861      	ldr	r1, [r4, #4]
 800b122:	4299      	cmp	r1, r3
 800b124:	bfde      	ittt	le
 800b126:	2330      	movle	r3, #48	; 0x30
 800b128:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b12c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b130:	1b52      	subs	r2, r2, r5
 800b132:	6122      	str	r2, [r4, #16]
 800b134:	f8cd a000 	str.w	sl, [sp]
 800b138:	464b      	mov	r3, r9
 800b13a:	aa03      	add	r2, sp, #12
 800b13c:	4621      	mov	r1, r4
 800b13e:	4640      	mov	r0, r8
 800b140:	f7ff fee4 	bl	800af0c <_printf_common>
 800b144:	3001      	adds	r0, #1
 800b146:	d14a      	bne.n	800b1de <_printf_i+0x1f6>
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
 800b14c:	b004      	add	sp, #16
 800b14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	f043 0320 	orr.w	r3, r3, #32
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	4833      	ldr	r0, [pc, #204]	; (800b228 <_printf_i+0x240>)
 800b15c:	2778      	movs	r7, #120	; 0x78
 800b15e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	6829      	ldr	r1, [r5, #0]
 800b166:	061f      	lsls	r7, r3, #24
 800b168:	f851 6b04 	ldr.w	r6, [r1], #4
 800b16c:	d402      	bmi.n	800b174 <_printf_i+0x18c>
 800b16e:	065f      	lsls	r7, r3, #25
 800b170:	bf48      	it	mi
 800b172:	b2b6      	uxthmi	r6, r6
 800b174:	07df      	lsls	r7, r3, #31
 800b176:	bf48      	it	mi
 800b178:	f043 0320 	orrmi.w	r3, r3, #32
 800b17c:	6029      	str	r1, [r5, #0]
 800b17e:	bf48      	it	mi
 800b180:	6023      	strmi	r3, [r4, #0]
 800b182:	b91e      	cbnz	r6, 800b18c <_printf_i+0x1a4>
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	f023 0320 	bic.w	r3, r3, #32
 800b18a:	6023      	str	r3, [r4, #0]
 800b18c:	2310      	movs	r3, #16
 800b18e:	e7a7      	b.n	800b0e0 <_printf_i+0xf8>
 800b190:	4824      	ldr	r0, [pc, #144]	; (800b224 <_printf_i+0x23c>)
 800b192:	e7e4      	b.n	800b15e <_printf_i+0x176>
 800b194:	4615      	mov	r5, r2
 800b196:	e7bd      	b.n	800b114 <_printf_i+0x12c>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	6826      	ldr	r6, [r4, #0]
 800b19c:	6961      	ldr	r1, [r4, #20]
 800b19e:	1d18      	adds	r0, r3, #4
 800b1a0:	6028      	str	r0, [r5, #0]
 800b1a2:	0635      	lsls	r5, r6, #24
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	d501      	bpl.n	800b1ac <_printf_i+0x1c4>
 800b1a8:	6019      	str	r1, [r3, #0]
 800b1aa:	e002      	b.n	800b1b2 <_printf_i+0x1ca>
 800b1ac:	0670      	lsls	r0, r6, #25
 800b1ae:	d5fb      	bpl.n	800b1a8 <_printf_i+0x1c0>
 800b1b0:	8019      	strh	r1, [r3, #0]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6123      	str	r3, [r4, #16]
 800b1b6:	4615      	mov	r5, r2
 800b1b8:	e7bc      	b.n	800b134 <_printf_i+0x14c>
 800b1ba:	682b      	ldr	r3, [r5, #0]
 800b1bc:	1d1a      	adds	r2, r3, #4
 800b1be:	602a      	str	r2, [r5, #0]
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	6862      	ldr	r2, [r4, #4]
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f7f5 f80a 	bl	80001e0 <memchr>
 800b1cc:	b108      	cbz	r0, 800b1d2 <_printf_i+0x1ea>
 800b1ce:	1b40      	subs	r0, r0, r5
 800b1d0:	6060      	str	r0, [r4, #4]
 800b1d2:	6863      	ldr	r3, [r4, #4]
 800b1d4:	6123      	str	r3, [r4, #16]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1dc:	e7aa      	b.n	800b134 <_printf_i+0x14c>
 800b1de:	6923      	ldr	r3, [r4, #16]
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	47d0      	blx	sl
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d0ad      	beq.n	800b148 <_printf_i+0x160>
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	079b      	lsls	r3, r3, #30
 800b1f0:	d413      	bmi.n	800b21a <_printf_i+0x232>
 800b1f2:	68e0      	ldr	r0, [r4, #12]
 800b1f4:	9b03      	ldr	r3, [sp, #12]
 800b1f6:	4298      	cmp	r0, r3
 800b1f8:	bfb8      	it	lt
 800b1fa:	4618      	movlt	r0, r3
 800b1fc:	e7a6      	b.n	800b14c <_printf_i+0x164>
 800b1fe:	2301      	movs	r3, #1
 800b200:	4632      	mov	r2, r6
 800b202:	4649      	mov	r1, r9
 800b204:	4640      	mov	r0, r8
 800b206:	47d0      	blx	sl
 800b208:	3001      	adds	r0, #1
 800b20a:	d09d      	beq.n	800b148 <_printf_i+0x160>
 800b20c:	3501      	adds	r5, #1
 800b20e:	68e3      	ldr	r3, [r4, #12]
 800b210:	9903      	ldr	r1, [sp, #12]
 800b212:	1a5b      	subs	r3, r3, r1
 800b214:	42ab      	cmp	r3, r5
 800b216:	dcf2      	bgt.n	800b1fe <_printf_i+0x216>
 800b218:	e7eb      	b.n	800b1f2 <_printf_i+0x20a>
 800b21a:	2500      	movs	r5, #0
 800b21c:	f104 0619 	add.w	r6, r4, #25
 800b220:	e7f5      	b.n	800b20e <_printf_i+0x226>
 800b222:	bf00      	nop
 800b224:	0800b6b9 	.word	0x0800b6b9
 800b228:	0800b6ca 	.word	0x0800b6ca

0800b22c <memmove>:
 800b22c:	4288      	cmp	r0, r1
 800b22e:	b510      	push	{r4, lr}
 800b230:	eb01 0402 	add.w	r4, r1, r2
 800b234:	d902      	bls.n	800b23c <memmove+0x10>
 800b236:	4284      	cmp	r4, r0
 800b238:	4623      	mov	r3, r4
 800b23a:	d807      	bhi.n	800b24c <memmove+0x20>
 800b23c:	1e43      	subs	r3, r0, #1
 800b23e:	42a1      	cmp	r1, r4
 800b240:	d008      	beq.n	800b254 <memmove+0x28>
 800b242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b24a:	e7f8      	b.n	800b23e <memmove+0x12>
 800b24c:	4402      	add	r2, r0
 800b24e:	4601      	mov	r1, r0
 800b250:	428a      	cmp	r2, r1
 800b252:	d100      	bne.n	800b256 <memmove+0x2a>
 800b254:	bd10      	pop	{r4, pc}
 800b256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b25a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b25e:	e7f7      	b.n	800b250 <memmove+0x24>

0800b260 <_sbrk_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d06      	ldr	r5, [pc, #24]	; (800b27c <_sbrk_r+0x1c>)
 800b264:	2300      	movs	r3, #0
 800b266:	4604      	mov	r4, r0
 800b268:	4608      	mov	r0, r1
 800b26a:	602b      	str	r3, [r5, #0]
 800b26c:	f7f6 f9ce 	bl	800160c <_sbrk>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_sbrk_r+0x1a>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_sbrk_r+0x1a>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	20009f38 	.word	0x20009f38

0800b280 <_realloc_r>:
 800b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	4680      	mov	r8, r0
 800b286:	4614      	mov	r4, r2
 800b288:	460e      	mov	r6, r1
 800b28a:	b921      	cbnz	r1, 800b296 <_realloc_r+0x16>
 800b28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4611      	mov	r1, r2
 800b292:	f7ff bc57 	b.w	800ab44 <_malloc_r>
 800b296:	b92a      	cbnz	r2, 800b2a4 <_realloc_r+0x24>
 800b298:	f7ff fbe8 	bl	800aa6c <_free_r>
 800b29c:	4625      	mov	r5, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a4:	f000 f81b 	bl	800b2de <_malloc_usable_size_r>
 800b2a8:	4284      	cmp	r4, r0
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	d802      	bhi.n	800b2b4 <_realloc_r+0x34>
 800b2ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2b2:	d812      	bhi.n	800b2da <_realloc_r+0x5a>
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	f7ff fc44 	bl	800ab44 <_malloc_r>
 800b2bc:	4605      	mov	r5, r0
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d0ed      	beq.n	800b29e <_realloc_r+0x1e>
 800b2c2:	42bc      	cmp	r4, r7
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	bf28      	it	cs
 800b2ca:	463a      	movcs	r2, r7
 800b2cc:	f7ff fbc0 	bl	800aa50 <memcpy>
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f7ff fbca 	bl	800aa6c <_free_r>
 800b2d8:	e7e1      	b.n	800b29e <_realloc_r+0x1e>
 800b2da:	4635      	mov	r5, r6
 800b2dc:	e7df      	b.n	800b29e <_realloc_r+0x1e>

0800b2de <_malloc_usable_size_r>:
 800b2de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e2:	1f18      	subs	r0, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bfbc      	itt	lt
 800b2e8:	580b      	ldrlt	r3, [r1, r0]
 800b2ea:	18c0      	addlt	r0, r0, r3
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <_init>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	bf00      	nop
 800b2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f6:	bc08      	pop	{r3}
 800b2f8:	469e      	mov	lr, r3
 800b2fa:	4770      	bx	lr

0800b2fc <_fini>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	bf00      	nop
 800b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b302:	bc08      	pop	{r3}
 800b304:	469e      	mov	lr, r3
 800b306:	4770      	bx	lr
