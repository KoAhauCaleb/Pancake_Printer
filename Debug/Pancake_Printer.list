
Pancake_Printer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010aac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  08010c40  08010c40  00020c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011468  08011468  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08011468  08011468  00021468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011470  08011470  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011470  08011470  00021470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011474  08011474  00021474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08011478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029f0  20000204  0801167c  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bf4  0801167c  00032bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002289a  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e4e  00000000  00000000  00052b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e10  00000000  00000000  00057960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001741  00000000  00000000  00059770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb1b  00000000  00000000  0005aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025da1  00000000  00000000  000879cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010327a  00000000  00000000  000ad76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000920c  00000000  00000000  001b09e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001b9bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010c24 	.word	0x08010c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	08010c24 	.word	0x08010c24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b9a6 	b.w	8000fc0 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f83c 	bl	8000cf8 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2lz>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	f7ff ff21 	bl	8000adc <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x1c>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc97 	bl	80005f8 <__aeabi_dmul>
 8000cca:	f7ff ff57 	bl	8000b7c <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc18 	bl	8000504 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc8e 	bl	80005f8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fad0 	bl	8000288 <__aeabi_dsub>
 8000ce8:	f7ff ff48 	bl	8000b7c <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <delayms>:
float speed = 20.0; //mm/s
float extrude_speed = 2.0; //mm/s

bool extrusion_on = false;

void delayms(uint16_t ms){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  osDelay(ms);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f009 f9a9 	bl	800a328 <osDelay>
  //delayus(ms * 1000);
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <delayus>:

void delayus(uint16_t us){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <delayus+0x40>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim1);
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <delayus+0x40>)
 8000ff4:	f004 f896 	bl	8005124 <HAL_TIM_Base_Start>
  int cnt = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  while (__HAL_TIM_GET_COUNTER(&htim1) < us){
 8000ffc:	e002      	b.n	8001004 <delayus+0x24>
    cnt += 1;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
  while (__HAL_TIM_GET_COUNTER(&htim1) < us){
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <delayus+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	429a      	cmp	r2, r3
 800100e:	d3f6      	bcc.n	8000ffe <delayus+0x1e>
  }
  HAL_TIM_Base_Stop(&htim1);// wait for the counter to reach the us input in the parameter
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <delayus+0x40>)
 8001012:	f004 f8ef 	bl	80051f4 <HAL_TIM_Base_Stop>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000294 	.word	0x20000294

08001024 <motor_init>:

void motor_init(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  //For some reason non-syncronus delay needed before synchronous delay will work.
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2110      	movs	r1, #16
 800102c:	4845      	ldr	r0, [pc, #276]	; (8001144 <motor_init+0x120>)
 800102e:	f001 ff19 	bl	8002e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001038:	4842      	ldr	r0, [pc, #264]	; (8001144 <motor_init+0x120>)
 800103a:	f001 ff13 	bl	8002e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 ff0c 	bl	8002e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f001 ff05 	bl	8002e64 <HAL_GPIO_WritePin>
  delayus(2);
 800105a:	2002      	movs	r0, #2
 800105c:	f7ff ffc0 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f001 fefb 	bl	8002e64 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed) - 2);
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <motor_init+0x124>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800114c <motor_init+0x128>
 8001078:	ee27 7a87 	vmul.f32	s14, s15, s14
 800107c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001150 <motor_init+0x12c>
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800108c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001090:	ee17 3a90 	vmov	r3, s15
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa2 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2108      	movs	r1, #8
 80010a0:	4828      	ldr	r0, [pc, #160]	; (8001144 <motor_init+0x120>)
 80010a2:	f001 fedf 	bl	8002e64 <HAL_GPIO_WritePin>
  delayus(2);
 80010a6:	2002      	movs	r0, #2
 80010a8:	f7ff ff9a 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2108      	movs	r1, #8
 80010b0:	4824      	ldr	r0, [pc, #144]	; (8001144 <motor_init+0x120>)
 80010b2:	f001 fed7 	bl	8002e64 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed) - 2);
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <motor_init+0x124>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800114c <motor_init+0x128>
 80010c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010c4:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001150 <motor_init+0x12c>
 80010c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d8:	ee17 3a90 	vmov	r3, s15
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff7e 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4816      	ldr	r0, [pc, #88]	; (8001144 <motor_init+0x120>)
 80010ea:	f001 febb 	bl	8002e64 <HAL_GPIO_WritePin>
  delayus(2);
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff ff76 	bl	8000fe0 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2120      	movs	r1, #32
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <motor_init+0x120>)
 80010fa:	f001 feb3 	bl	8002e64 <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed) - 2);
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <motor_init+0x124>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800114c <motor_init+0x128>
 8001108:	ee27 7a87 	vmul.f32	s14, s15, s14
 800110c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001150 <motor_init+0x12c>
 8001110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001114:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800111c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001120:	ee17 3a90 	vmov	r3, s15
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff5a 	bl	8000fe0 <delayus>

  servo_angle_set(servo_off_angle);
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <motor_init+0x130>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	f000 f9f0 	bl	8001520 <servo_angle_set>
  //uint16_t ccr1 = (uint16_t) ((crr1_2ms - crr1_1ms) * servo_off_angle / 100) + crr1_1ms;
  //TIM4->CCR1 = ccr1;
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	48000400 	.word	0x48000400
 8001148:	20000010 	.word	0x20000010
 800114c:	42480000 	.word	0x42480000
 8001150:	49742400 	.word	0x49742400
 8001154:	20000228 	.word	0x20000228

08001158 <set_speed>:

void set_speed(float new_speed){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0a01 	vstr	s0, [r7, #4]
  speed = new_speed;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <set_speed+0x1c>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	2000000c 	.word	0x2000000c

08001178 <move>:

void move(float x, float y){
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001182:	edc7 0a00 	vstr	s1, [r7]
  int x_steps = (x - current_x) * X_STEPS_PER_MM;
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <move+0x1dc>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001194:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a0:	ee17 3a90 	vmov	r3, s15
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  int y_steps = (y - current_y) * Y_STEPS_PER_MM;
 80011a6:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <move+0x1e0>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ed97 7a00 	vldr	s14, [r7]
 80011b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c0:	ee17 3a90 	vmov	r3, s15
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4864      	ldr	r0, [pc, #400]	; (800135c <move+0x1e4>)
 80011cc:	f001 fe4a 	bl	8002e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4861      	ldr	r0, [pc, #388]	; (800135c <move+0x1e4>)
 80011d8:	f001 fe44 	bl	8002e64 <HAL_GPIO_WritePin>
  if(x_steps < 0){
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da07      	bge.n	80011f2 <move+0x7a>
    HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	485d      	ldr	r0, [pc, #372]	; (800135c <move+0x1e4>)
 80011e8:	f001 fe3c 	bl	8002e64 <HAL_GPIO_WritePin>
    x_steps *= -1;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	425b      	negs	r3, r3
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if(y_steps < 0){
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da08      	bge.n	800120a <move+0x92>
    HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	4857      	ldr	r0, [pc, #348]	; (800135c <move+0x1e4>)
 8001200:	f001 fe30 	bl	8002e64 <HAL_GPIO_WritePin>
    y_steps *= -1;
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	425b      	negs	r3, r3
 8001208:	623b      	str	r3, [r7, #32]
  }

  int max_steps = x_steps;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	61fb      	str	r3, [r7, #28]
  if(y_steps > x_steps){
 800120e:	6a3a      	ldr	r2, [r7, #32]
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	429a      	cmp	r2, r3
 8001214:	dd01      	ble.n	800121a <move+0xa2>
    max_steps = y_steps;
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	61fb      	str	r3, [r7, #28]
  }

  int x_step_ratio = max_steps / x_steps;
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001222:	60fb      	str	r3, [r7, #12]
  int y_step_ratio = max_steps / y_steps;
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	fb92 f3f3 	sdiv	r3, r2, r3
 800122c:	60bb      	str	r3, [r7, #8]

  int x_taken = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  int y_taken = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < max_steps; i++){
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	e04e      	b.n	80012da <move+0x162>
    if(i % x_step_ratio == 0){
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	fb93 f2f2 	sdiv	r2, r3, r2
 8001244:	68f9      	ldr	r1, [r7, #12]
 8001246:	fb01 f202 	mul.w	r2, r1, r2
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d109      	bne.n	8001264 <move+0xec>
      HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f001 fe03 	bl	8002e64 <HAL_GPIO_WritePin>
      x_taken++;
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	3301      	adds	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
    }
    if(i % y_step_ratio == 0){
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	fb93 f2f2 	sdiv	r2, r3, r2
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	fb01 f202 	mul.w	r2, r1, r2
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <move+0x110>
      HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2108      	movs	r1, #8
 800127c:	4837      	ldr	r0, [pc, #220]	; (800135c <move+0x1e4>)
 800127e:	f001 fdf1 	bl	8002e64 <HAL_GPIO_WritePin>
      y_taken++;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
    }
    delayus(2);
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff fea9 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f001 fde4 	bl	8002e64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2108      	movs	r1, #8
 80012a0:	482e      	ldr	r0, [pc, #184]	; (800135c <move+0x1e4>)
 80012a2:	f001 fddf 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(1000000 / (X_STEPS_PER_MM * speed) - 2); // 1000000us/1s / (step/mm * mm/s)
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <move+0x1e8>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80012b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012b4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001364 <move+0x1ec>
 80012b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c8:	ee17 3a90 	vmov	r3, s15
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe86 	bl	8000fe0 <delayus>
  for(int i = 0; i < max_steps; i++){
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	3301      	adds	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dbac      	blt.n	800123c <move+0xc4>
  }

  while (x_steps > x_taken){
 80012e2:	e013      	b.n	800130c <move+0x194>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ee:	f001 fdb9 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(2);
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff fe74 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f001 fdaf 	bl	8002e64 <HAL_GPIO_WritePin>
    x_taken++;
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	3301      	adds	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  while (x_steps > x_taken){
 800130c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	429a      	cmp	r2, r3
 8001312:	dce7      	bgt.n	80012e4 <move+0x16c>
  }
  while (y_steps > y_taken){
 8001314:	e00f      	b.n	8001336 <move+0x1be>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2108      	movs	r1, #8
 800131a:	4810      	ldr	r0, [pc, #64]	; (800135c <move+0x1e4>)
 800131c:	f001 fda2 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(2);
 8001320:	2002      	movs	r0, #2
 8001322:	f7ff fe5d 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2108      	movs	r1, #8
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <move+0x1e4>)
 800132c:	f001 fd9a 	bl	8002e64 <HAL_GPIO_WritePin>
    y_taken++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  while (y_steps > y_taken){
 8001336:	6a3a      	ldr	r2, [r7, #32]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	429a      	cmp	r2, r3
 800133c:	dceb      	bgt.n	8001316 <move+0x19e>
  }
  current_x = x;
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <move+0x1dc>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
  current_y = y;
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <move+0x1e0>)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000220 	.word	0x20000220
 8001358:	20000224 	.word	0x20000224
 800135c:	48000400 	.word	0x48000400
 8001360:	2000000c 	.word	0x2000000c
 8001364:	49742400 	.word	0x49742400

08001368 <wait>:

void wait(int ms){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  delayms(ms);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe25 	bl	8000fc4 <delayms>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <home>:

void home() {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2110      	movs	r1, #16
 800138c:	485e      	ldr	r0, [pc, #376]	; (8001508 <home+0x184>)
 800138e:	f001 fd69 	bl	8002e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001398:	485b      	ldr	r0, [pc, #364]	; (8001508 <home+0x184>)
 800139a:	f001 fd63 	bl	8002e64 <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800139e:	e027      	b.n	80013f0 <home+0x6c>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f001 fd5b 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(2);
 80013ae:	2002      	movs	r0, #2
 80013b0:	f7ff fe16 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f001 fd51 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(1000000 / (X_STEPS_PER_MM * speed) - 2);
 80013c2:	4b52      	ldr	r3, [pc, #328]	; (800150c <home+0x188>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80013cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001510 <home+0x18c>
 80013d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fdf8 	bl	8000fe0 <delayus>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	4848      	ldr	r0, [pc, #288]	; (8001514 <home+0x190>)
 80013f4:	f001 fd1e 	bl	8002e34 <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0d0      	beq.n	80013a0 <home+0x1c>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80013fe:	e023      	b.n	8001448 <home+0xc4>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2108      	movs	r1, #8
 8001404:	4840      	ldr	r0, [pc, #256]	; (8001508 <home+0x184>)
 8001406:	f001 fd2d 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(2);
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff fde8 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2108      	movs	r1, #8
 8001414:	483c      	ldr	r0, [pc, #240]	; (8001508 <home+0x184>)
 8001416:	f001 fd25 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(1000000 / (X_STEPS_PER_MM * speed) - 2);
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <home+0x188>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001428:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001510 <home+0x18c>
 800142c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001430:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143c:	ee17 3a90 	vmov	r3, s15
 8001440:	b29b      	uxth	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fdcc 	bl	8000fe0 <delayus>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8001448:	2140      	movs	r1, #64	; 0x40
 800144a:	482f      	ldr	r0, [pc, #188]	; (8001508 <home+0x184>)
 800144c:	f001 fcf2 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0d4      	beq.n	8001400 <home+0x7c>
  }

  current_x = 0;
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <home+0x194>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
  current_y = 0;
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <home+0x198>)
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

  //move away from limit switch by small distance
  move(10,10);
 8001466:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800146a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800146e:	f7ff fe83 	bl	8001178 <move>

  //move slow towards limit switch
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2110      	movs	r1, #16
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <home+0x184>)
 8001478:	f001 fcf4 	bl	8002e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001482:	4821      	ldr	r0, [pc, #132]	; (8001508 <home+0x184>)
 8001484:	f001 fcee 	bl	8002e64 <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8001488:	e014      	b.n	80014b4 <home+0x130>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f001 fce6 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(2);
 8001498:	2002      	movs	r0, #2
 800149a:	f7ff fda1 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f001 fcdc 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(1000000 / (X_STEPS_PER_MM * 10) - 2);
 80014ac:	f241 3086 	movw	r0, #4998	; 0x1386
 80014b0:	f7ff fd96 	bl	8000fe0 <delayus>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <home+0x190>)
 80014b8:	f001 fcbc 	bl	8002e34 <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0e3      	beq.n	800148a <home+0x106>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80014c2:	e010      	b.n	80014e6 <home+0x162>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2108      	movs	r1, #8
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <home+0x184>)
 80014ca:	f001 fccb 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(2);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f7ff fd86 	bl	8000fe0 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2108      	movs	r1, #8
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <home+0x184>)
 80014da:	f001 fcc3 	bl	8002e64 <HAL_GPIO_WritePin>
    delayus(1000000 / (X_STEPS_PER_MM * 10) - 2);
 80014de:	f241 3086 	movw	r0, #4998	; 0x1386
 80014e2:	f7ff fd7d 	bl	8000fe0 <delayus>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <home+0x184>)
 80014ea:	f001 fca3 	bl	8002e34 <HAL_GPIO_ReadPin>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0e7      	beq.n	80014c4 <home+0x140>
  }

  current_x = 0;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <home+0x194>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
  current_y = 0;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <home+0x198>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	48000400 	.word	0x48000400
 800150c:	2000000c 	.word	0x2000000c
 8001510:	49742400 	.word	0x49742400
 8001514:	48000800 	.word	0x48000800
 8001518:	20000220 	.word	0x20000220
 800151c:	20000224 	.word	0x20000224

08001520 <servo_angle_set>:

void servo_angle_set(float angle){
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0a01 	vstr	s0, [r7, #4]

  uint16_t ccr1 = (uint16_t) (((float)(crr1_2ms - crr1_1ms) * (angle / 100.0)) + crr1_1ms);
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <servo_angle_set+0x80>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <servo_angle_set+0x84>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	ee17 0a90 	vmov	r0, s15
 8001540:	f7ff f802 	bl	8000548 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7fe fffd 	bl	8000548 <__aeabi_f2d>
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <servo_angle_set+0x88>)
 8001554:	f7ff f97a 	bl	800084c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7ff f84a 	bl	80005f8 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4614      	mov	r4, r2
 800156a:	461d      	mov	r5, r3
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <servo_angle_set+0x84>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffd7 	bl	8000524 <__aeabi_i2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4620      	mov	r0, r4
 800157c:	4629      	mov	r1, r5
 800157e:	f7fe fe85 	bl	800028c <__adddf3>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff faf7 	bl	8000b7c <__aeabi_d2uiz>
 800158e:	4603      	mov	r3, r0
 8001590:	81fb      	strh	r3, [r7, #14]
  TIM4->CCR3 = ccr1;
 8001592:	4a06      	ldr	r2, [pc, #24]	; (80015ac <servo_angle_set+0x8c>)
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bdb0      	pop	{r4, r5, r7, pc}
 80015a0:	20000004 	.word	0x20000004
 80015a4:	20000000 	.word	0x20000000
 80015a8:	40590000 	.word	0x40590000
 80015ac:	40000800 	.word	0x40000800

080015b0 <start_extrusion>:

void start_extrusion(){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  extrusion_on = true;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <start_extrusion+0x24>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]

  servo_angle_set(servo_on_angle);
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <start_extrusion+0x28>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	f7ff ffa9 	bl	8001520 <servo_angle_set>
  //uint16_t ccr1 = (uint16_t) (((crr1_2ms - crr1_1ms) * (servo_on_angle / 100.0)) + crr1_1ms);
  //TIM4->CCR3 = ccr1;
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000022c 	.word	0x2000022c
 80015d8:	20000008 	.word	0x20000008

080015dc <stop_extrusion>:

void stop_extrusion(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  extrusion_on = false;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <stop_extrusion+0x24>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]

  servo_angle_set(servo_off_angle);
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <stop_extrusion+0x28>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	f7ff ff93 	bl	8001520 <servo_angle_set>
  //uint16_t ccr1 = (uint16_t) ((crr1_2ms - crr1_1ms) * (servo_off_angle / 100.0)) + crr1_1ms;
  //TIM4->CCR3 = ccr1;
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000022c 	.word	0x2000022c
 8001604:	20000228 	.word	0x20000228

08001608 <InterpretLine>:
  va_end(args);
  int len = strlen(buffer);
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
}

void InterpretLine(const char* line) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b0a2      	sub	sp, #136	; 0x88
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

    // Copy the line to a mutable buffer for modification
    char buffer[100];
    strncpy(buffer, line, sizeof(buffer));
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	2264      	movs	r2, #100	; 0x64
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f00d f9ff 	bl	800ea1c <strncpy>

    // Tokenize the line using space as a delimiter
    char* token = strtok(buffer, " ");
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	49af      	ldr	r1, [pc, #700]	; (80018e0 <InterpretLine+0x2d8>)
 8001624:	4618      	mov	r0, r3
 8001626:	f00d fa0d 	bl	800ea44 <strtok>
 800162a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

    int gCode = -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	61fb      	str	r3, [r7, #28]
    int mCode = -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	61bb      	str	r3, [r7, #24]

    float xCoord = 0.0;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
    float yCoord = 0.0;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	613b      	str	r3, [r7, #16]

    int speedSet = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
    int pauseDur = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]

    // Iterate through tokens
    while (token != NULL) {
 800164e:	e094      	b.n	800177a <InterpretLine+0x172>
        // Check for G-code command
        if (strncmp(token, "G", 1) == 0) {
 8001650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	4ba3      	ldr	r3, [pc, #652]	; (80018e4 <InterpretLine+0x2dc>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d108      	bne.n	8001672 <InterpretLine+0x6a>
            // Extract the G-code command
            gCode = atoi(token + 1); // Skip the 'G' character
 8001660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001664:	3301      	adds	r3, #1
 8001666:	4618      	mov	r0, r3
 8001668:	f00c f9c3 	bl	800d9f2 <atoi>
 800166c:	4603      	mov	r3, r0
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	e07d      	b.n	800176e <InterpretLine+0x166>
        }
        // Check for X-coordinate
        else if (strncmp(token, "X", 1) == 0) {
 8001672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	4b9b      	ldr	r3, [pc, #620]	; (80018e8 <InterpretLine+0x2e0>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10e      	bne.n	80016a0 <InterpretLine+0x98>
            // Extract the X-coordinate
            xCoord = atof(token + 1); // Skip the 'X' character
 8001682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001686:	3301      	adds	r3, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f00c f9af 	bl	800d9ec <atof>
 800168e:	ec53 2b10 	vmov	r2, r3, d0
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa91 	bl	8000bbc <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e066      	b.n	800176e <InterpretLine+0x166>
        }
        // Check for Y-coordinate
        else if (strncmp(token, "Y", 1) == 0) {
 80016a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	4b91      	ldr	r3, [pc, #580]	; (80018ec <InterpretLine+0x2e4>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10e      	bne.n	80016ce <InterpretLine+0xc6>
            // Extract the Y-coordinate
            yCoord = atof(token + 1); // Skip the 'Y' character
 80016b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016b4:	3301      	adds	r3, #1
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00c f998 	bl	800d9ec <atof>
 80016bc:	ec53 2b10 	vmov	r2, r3, d0
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa7a 	bl	8000bbc <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	e04f      	b.n	800176e <InterpretLine+0x166>
        }
        else if (strncmp(token, "F", 1) == 0) {
 80016ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b86      	ldr	r3, [pc, #536]	; (80018f0 <InterpretLine+0x2e8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10e      	bne.n	80016fc <InterpretLine+0xf4>
			// Extract the speed
			speedSet = atof(token + 1); // Skip the 'F' character
 80016de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e2:	3301      	adds	r3, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00c f981 	bl	800d9ec <atof>
 80016ea:	ec53 2b10 	vmov	r2, r3, d0
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff fa1b 	bl	8000b2c <__aeabi_d2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e038      	b.n	800176e <InterpretLine+0x166>
		}
        else if (strncmp(token, "P", 1) == 0) {
 80016fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <InterpretLine+0x2ec>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10e      	bne.n	800172a <InterpretLine+0x122>
			// Extract the pause duration
			pauseDur = atof(token + 1); // Skip the 'P' character
 800170c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001710:	3301      	adds	r3, #1
 8001712:	4618      	mov	r0, r3
 8001714:	f00c f96a 	bl	800d9ec <atof>
 8001718:	ec53 2b10 	vmov	r2, r3, d0
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fa04 	bl	8000b2c <__aeabi_d2iz>
 8001724:	4603      	mov	r3, r0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	e021      	b.n	800176e <InterpretLine+0x166>
		}
        else if (strncmp(token, "M", 1) == 0) {
 800172a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	4b71      	ldr	r3, [pc, #452]	; (80018f8 <InterpretLine+0x2f0>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10e      	bne.n	8001758 <InterpretLine+0x150>
			// Extract the pause duration
			mCode = atof(token + 1); // Skip the 'M' character
 800173a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800173e:	3301      	adds	r3, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f00c f953 	bl	800d9ec <atof>
 8001746:	ec53 2b10 	vmov	r2, r3, d0
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff f9ed 	bl	8000b2c <__aeabi_d2iz>
 8001752:	4603      	mov	r3, r0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	e00a      	b.n	800176e <InterpretLine+0x166>
		}
        else if (strncmp(token, ";", 1) == 0) {
 8001758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	4b67      	ldr	r3, [pc, #412]	; (80018fc <InterpretLine+0x2f4>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <InterpretLine+0x166>
			// if we hit a ';', end parsing
			token = NULL;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		}

        // Get the next token
        token = strtok(NULL, " ");
 800176e:	495c      	ldr	r1, [pc, #368]	; (80018e0 <InterpretLine+0x2d8>)
 8001770:	2000      	movs	r0, #0
 8001772:	f00d f967 	bl	800ea44 <strtok>
 8001776:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    while (token != NULL) {
 800177a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f af66 	bne.w	8001650 <InterpretLine+0x48>
    }



    //TODO: will this wait like it is expected to when the queue is full
    switch (gCode) {
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b1c      	cmp	r3, #28
 8001788:	f200 8082 	bhi.w	8001890 <InterpretLine+0x288>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <InterpretLine+0x18c>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	0800184d 	.word	0x0800184d
 8001798:	08001809 	.word	0x08001809
 800179c:	08001891 	.word	0x08001891
 80017a0:	08001891 	.word	0x08001891
 80017a4:	0800182b 	.word	0x0800182b
 80017a8:	08001891 	.word	0x08001891
 80017ac:	08001891 	.word	0x08001891
 80017b0:	08001891 	.word	0x08001891
 80017b4:	08001891 	.word	0x08001891
 80017b8:	08001891 	.word	0x08001891
 80017bc:	08001891 	.word	0x08001891
 80017c0:	08001891 	.word	0x08001891
 80017c4:	08001891 	.word	0x08001891
 80017c8:	08001891 	.word	0x08001891
 80017cc:	08001891 	.word	0x08001891
 80017d0:	08001891 	.word	0x08001891
 80017d4:	08001891 	.word	0x08001891
 80017d8:	08001891 	.word	0x08001891
 80017dc:	08001891 	.word	0x08001891
 80017e0:	08001891 	.word	0x08001891
 80017e4:	08001891 	.word	0x08001891
 80017e8:	08001891 	.word	0x08001891
 80017ec:	08001891 	.word	0x08001891
 80017f0:	08001891 	.word	0x08001891
 80017f4:	08001891 	.word	0x08001891
 80017f8:	08001891 	.word	0x08001891
 80017fc:	08001891 	.word	0x08001891
 8001800:	08001891 	.word	0x08001891
 8001804:	0800187f 	.word	0x0800187f
      case 1:

        // Add code to handle G1 Set Speed
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 8001808:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <InterpretLine+0x2f8>)
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	f107 011c 	add.w	r1, r7, #28
 8001810:	2300      	movs	r3, #0
 8001812:	2264      	movs	r2, #100	; 0x64
 8001814:	f008 ff5a 	bl	800a6cc <osMessageQueuePut>
        osMessageQueuePut(commandQueueHandle, &speedSet, 100, 0U);
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <InterpretLine+0x2f8>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	f107 010c 	add.w	r1, r7, #12
 8001820:	2300      	movs	r3, #0
 8001822:	2264      	movs	r2, #100	; 0x64
 8001824:	f008 ff52 	bl	800a6cc <osMessageQueuePut>
        break;
 8001828:	e038      	b.n	800189c <InterpretLine+0x294>
      case 4:

        // Add code to handle G4 Pause
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <InterpretLine+0x2f8>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f107 011c 	add.w	r1, r7, #28
 8001832:	2300      	movs	r3, #0
 8001834:	2264      	movs	r2, #100	; 0x64
 8001836:	f008 ff49 	bl	800a6cc <osMessageQueuePut>
        osMessageQueuePut(commandQueueHandle, &pauseDur, 100, 0U);
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <InterpretLine+0x2f8>)
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f107 0108 	add.w	r1, r7, #8
 8001842:	2300      	movs	r3, #0
 8001844:	2264      	movs	r2, #100	; 0x64
 8001846:	f008 ff41 	bl	800a6cc <osMessageQueuePut>
        break;
 800184a:	e027      	b.n	800189c <InterpretLine+0x294>
      case 0:
        // Add command to queue or call move(xCoord, yCoord)
        // osMessageQueuePut(commandQueueHandle, &msg, 0U, 0U);
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <InterpretLine+0x2f8>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	f107 011c 	add.w	r1, r7, #28
 8001854:	2300      	movs	r3, #0
 8001856:	2264      	movs	r2, #100	; 0x64
 8001858:	f008 ff38 	bl	800a6cc <osMessageQueuePut>
        osMessageQueuePut(coordQueueHandle, &xCoord, 100, 0U);
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <InterpretLine+0x2fc>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	f107 0114 	add.w	r1, r7, #20
 8001864:	2300      	movs	r3, #0
 8001866:	2264      	movs	r2, #100	; 0x64
 8001868:	f008 ff30 	bl	800a6cc <osMessageQueuePut>
        osMessageQueuePut(coordQueueHandle, &yCoord, 100, 0U);
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <InterpretLine+0x2fc>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f107 0110 	add.w	r1, r7, #16
 8001874:	2300      	movs	r3, #0
 8001876:	2264      	movs	r2, #100	; 0x64
 8001878:	f008 ff28 	bl	800a6cc <osMessageQueuePut>
        break;
 800187c:	e00e      	b.n	800189c <InterpretLine+0x294>
      case 28:

        // Add code to handle G28 Home
        osMessageQueuePut(commandQueueHandle, &gCode, 100, 0U);
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <InterpretLine+0x2f8>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f107 011c 	add.w	r1, r7, #28
 8001886:	2300      	movs	r3, #0
 8001888:	2264      	movs	r2, #100	; 0x64
 800188a:	f008 ff1f 	bl	800a6cc <osMessageQueuePut>
        break;
 800188e:	e005      	b.n	800189c <InterpretLine+0x294>

      default:
        printf("Unknown G-code command: %d\n", gCode);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4619      	mov	r1, r3
 8001894:	481c      	ldr	r0, [pc, #112]	; (8001908 <InterpretLine+0x300>)
 8001896:	f00d f819 	bl	800e8cc <iprintf>
        break;
 800189a:	bf00      	nop
    }

    switch (mCode) {
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b6a      	cmp	r3, #106	; 0x6a
 80018a0:	d002      	beq.n	80018a8 <InterpretLine+0x2a0>
 80018a2:	2b6b      	cmp	r3, #107	; 0x6b
 80018a4:	d009      	beq.n	80018ba <InterpretLine+0x2b2>
 80018a6:	e011      	b.n	80018cc <InterpretLine+0x2c4>
		case 106:

			// Add code to handle M106 Start Extrusion
			// Add command to queue or start_extrusion()
		  osMessageQueuePut(commandQueueHandle, &mCode, 100, 0U);
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <InterpretLine+0x2f8>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	f107 0118 	add.w	r1, r7, #24
 80018b0:	2300      	movs	r3, #0
 80018b2:	2264      	movs	r2, #100	; 0x64
 80018b4:	f008 ff0a 	bl	800a6cc <osMessageQueuePut>
			break;
 80018b8:	e00e      	b.n	80018d8 <InterpretLine+0x2d0>
		case 107:

			// Add code to handle M107 Stop Extrusion
			// Add command to queue or call stop_extrusion()
		  osMessageQueuePut(commandQueueHandle, &mCode, 100, 0U);
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <InterpretLine+0x2f8>)
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f107 0118 	add.w	r1, r7, #24
 80018c2:	2300      	movs	r3, #0
 80018c4:	2264      	movs	r2, #100	; 0x64
 80018c6:	f008 ff01 	bl	800a6cc <osMessageQueuePut>
			break;
 80018ca:	e005      	b.n	80018d8 <InterpretLine+0x2d0>
		default:
			printf("Unknown M command: %d\n", mCode);
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4619      	mov	r1, r3
 80018d0:	480e      	ldr	r0, [pc, #56]	; (800190c <InterpretLine+0x304>)
 80018d2:	f00c fffb 	bl	800e8cc <iprintf>
			break;
 80018d6:	bf00      	nop
    }
}
 80018d8:	bf00      	nop
 80018da:	3788      	adds	r7, #136	; 0x88
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08010c40 	.word	0x08010c40
 80018e4:	08010c44 	.word	0x08010c44
 80018e8:	08010c48 	.word	0x08010c48
 80018ec:	08010c4c 	.word	0x08010c4c
 80018f0:	08010c50 	.word	0x08010c50
 80018f4:	08010c54 	.word	0x08010c54
 80018f8:	08010c58 	.word	0x08010c58
 80018fc:	08010c5c 	.word	0x08010c5c
 8001900:	200003c0 	.word	0x200003c0
 8001904:	200003c4 	.word	0x200003c4
 8001908:	08010c60 	.word	0x08010c60
 800190c:	08010c7c 	.word	0x08010c7c

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001914:	f000 ff9e 	bl	8002854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001918:	f000 f860 	bl	80019dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191c:	f000 f9ce 	bl	8001cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001920:	f000 f99c 	bl	8001c5c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001924:	f000 f8ea 	bl	8001afc <MX_TIM1_Init>
  MX_SPI1_Init();
 8001928:	f000 f8aa 	bl	8001a80 <MX_SPI1_Init>
  MX_FATFS_Init();
 800192c:	f005 fbdc 	bl	80070e8 <MX_FATFS_Init>
  MX_TIM4_Init();
 8001930:	f000 f938 	bl	8001ba4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001934:	2108      	movs	r1, #8
 8001936:	481a      	ldr	r0, [pc, #104]	; (80019a0 <main+0x90>)
 8001938:	f003 fd4c 	bl	80053d4 <HAL_TIM_PWM_Start>
  motor_init();
 800193c:	f7ff fb72 	bl	8001024 <motor_init>
  //reset_extruder();
  OpenFile("test.gcode");
 8001940:	4818      	ldr	r0, [pc, #96]	; (80019a4 <main+0x94>)
 8001942:	f000 fc51 	bl	80021e8 <OpenFile>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001946:	f008 fc13 	bl	800a170 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (15, sizeof(int), &commandQueue_attributes);
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <main+0x98>)
 800194c:	2104      	movs	r1, #4
 800194e:	200f      	movs	r0, #15
 8001950:	f008 fe48 	bl	800a5e4 <osMessageQueueNew>
 8001954:	4603      	mov	r3, r0
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <main+0x9c>)
 8001958:	6013      	str	r3, [r2, #0]

  /* creation of coordQueue */
  coordQueueHandle = osMessageQueueNew (15, sizeof(float), &coordQueue_attributes);
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <main+0xa0>)
 800195c:	2104      	movs	r1, #4
 800195e:	200f      	movs	r0, #15
 8001960:	f008 fe40 	bl	800a5e4 <osMessageQueueNew>
 8001964:	4603      	mov	r3, r0
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <main+0xa4>)
 8001968:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800196a:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <main+0xa8>)
 800196c:	2100      	movs	r1, #0
 800196e:	4813      	ldr	r0, [pc, #76]	; (80019bc <main+0xac>)
 8001970:	f008 fc48 	bl	800a204 <osThreadNew>
 8001974:	4603      	mov	r3, r0
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <main+0xb0>)
 8001978:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <main+0xb4>)
 800197c:	2100      	movs	r1, #0
 800197e:	4812      	ldr	r0, [pc, #72]	; (80019c8 <main+0xb8>)
 8001980:	f008 fc40 	bl	800a204 <osThreadNew>
 8001984:	4603      	mov	r3, r0
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <main+0xbc>)
 8001988:	6013      	str	r3, [r2, #0]

  /* creation of parserTask */
  parserTaskHandle = osThreadNew(StartParserTask, NULL, &parserTask_attributes);
 800198a:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <main+0xc0>)
 800198c:	2100      	movs	r1, #0
 800198e:	4811      	ldr	r0, [pc, #68]	; (80019d4 <main+0xc4>)
 8001990:	f008 fc38 	bl	800a204 <osThreadNew>
 8001994:	4603      	mov	r3, r0
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <main+0xc8>)
 8001998:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800199a:	f008 fc0d 	bl	800a1b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800199e:	e7fe      	b.n	800199e <main+0x8e>
 80019a0:	200002e0 	.word	0x200002e0
 80019a4:	08010cd4 	.word	0x08010cd4
 80019a8:	08010f5c 	.word	0x08010f5c
 80019ac:	200003c0 	.word	0x200003c0
 80019b0:	08010f74 	.word	0x08010f74
 80019b4:	200003c4 	.word	0x200003c4
 80019b8:	08010ef0 	.word	0x08010ef0
 80019bc:	08001ead 	.word	0x08001ead
 80019c0:	200003b4 	.word	0x200003b4
 80019c4:	08010f14 	.word	0x08010f14
 80019c8:	08001ebd 	.word	0x08001ebd
 80019cc:	200003b8 	.word	0x200003b8
 80019d0:	08010f38 	.word	0x08010f38
 80019d4:	08002071 	.word	0x08002071
 80019d8:	200003bc 	.word	0x200003bc

080019dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b096      	sub	sp, #88	; 0x58
 80019e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2244      	movs	r2, #68	; 0x44
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f00c fffc 	bl	800e9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a02:	f001 fa55 	bl	8002eb0 <HAL_PWREx_ControlVoltageScaling>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a0c:	f000 fb8f 	bl	800212e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a10:	2302      	movs	r3, #2
 8001a12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a1a:	2310      	movs	r3, #16
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a22:	2302      	movs	r3, #2
 8001a24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a32:	2302      	movs	r3, #2
 8001a34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 fa8c 	bl	8002f5c <HAL_RCC_OscConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a4a:	f000 fb70 	bl	800212e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4e:	230f      	movs	r3, #15
 8001a50:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a52:	2303      	movs	r3, #3
 8001a54:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a62:	463b      	mov	r3, r7
 8001a64:	2104      	movs	r1, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fe54 	bl	8003714 <HAL_RCC_ClockConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a72:	f000 fb5c 	bl	800212e <Error_Handler>
  }
}
 8001a76:	bf00      	nop
 8001a78:	3758      	adds	r7, #88	; 0x58
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <MX_SPI1_Init+0x78>)
 8001a88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ace:	2207      	movs	r2, #7
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ada:	2208      	movs	r2, #8
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ae0:	f002 fd2a 	bl	8004538 <HAL_SPI_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aea:	f000 fb20 	bl	800212e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000230 	.word	0x20000230
 8001af8:	40013000 	.word	0x40013000

08001afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <MX_TIM1_Init+0xa4>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b22:	224f      	movs	r2, #79	; 0x4f
 8001b24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b46:	4815      	ldr	r0, [pc, #84]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b48:	f003 fa94 	bl	8005074 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b52:	f000 faec 	bl	800212e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b64:	f003 ff52 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b6e:	f000 fade 	bl	800212e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_TIM1_Init+0xa0>)
 8001b84:	f004 fc64 	bl	8006450 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b8e:	f000 face 	bl	800212e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000294 	.word	0x20000294
 8001ba0:	40012c00 	.word	0x40012c00

08001ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
 8001bc4:	615a      	str	r2, [r3, #20]
 8001bc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001bca:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <MX_TIM4_Init+0xb4>)
 8001bcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001bd0:	2264      	movs	r2, #100	; 0x64
 8001bd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000;
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001bdc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001be0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bee:	4819      	ldr	r0, [pc, #100]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001bf0:	f003 fb98 	bl	8005324 <HAL_TIM_PWM_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001bfa:	f000 fa98 	bl	800212e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001c0e:	f004 fc1f 	bl	8006450 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001c18:	f000 fa89 	bl	800212e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	; 0x60
 8001c1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8001c20:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001c24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2208      	movs	r2, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001c36:	f003 fdd5 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001c40:	f000 fa75 	bl	800212e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <MX_TIM4_Init+0xb0>)
 8001c46:	f000 fbd7 	bl	80023f8 <HAL_TIM_MspPostInit>

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200002e0 	.word	0x200002e0
 8001c58:	40000800 	.word	0x40000800

08001c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <MX_USART2_UART_Init+0x5c>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART2_UART_Init+0x58>)
 8001ca0:	f004 fc7c 	bl	800659c <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001caa:	f000 fa40 	bl	800212e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000032c 	.word	0x2000032c
 8001cb8:	40004400 	.word	0x40004400

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a71      	ldr	r2, [pc, #452]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a6b      	ldr	r2, [pc, #428]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a5f      	ldr	r2, [pc, #380]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a59      	ldr	r2, [pc, #356]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|X_STEP_Pin
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f249 7101 	movw	r1, #38657	; 0x9701
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f001 f886 	bl	8002e64 <HAL_GPIO_WritePin>
                          |SD_CS_Pin|Screen_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Touch_CS_Pin|Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f240 41ba 	movw	r1, #1210	; 0x4ba
 8001d5e:	4850      	ldr	r0, [pc, #320]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d60:	f001 f880 	bl	8002e64 <HAL_GPIO_WritePin>
                          |Z_STEP_Pin|Screen_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_RST_GPIO_Port, Screen_RST_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2104      	movs	r1, #4
 8001d68:	484e      	ldr	r0, [pc, #312]	; (8001ea4 <MX_GPIO_Init+0x1e8>)
 8001d6a:	f001 f87b 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4848      	ldr	r0, [pc, #288]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001d86:	f000 feab 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_CS_Pin Z_DIR_Pin ENABLE_Pin SD_CS_Pin
                           Screen_DC_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|SD_CS_Pin
 8001d8a:	f249 3301 	movw	r3, #37633	; 0x9301
 8001d8e:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da6:	f000 fe9b 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_CS_Pin Y_DIR_Pin X_DIR_Pin Screen_LED_Pin */
  GPIO_InitStruct.Pin = Touch_CS_Pin|Y_DIR_Pin|X_DIR_Pin|Screen_LED_Pin;
 8001daa:	f240 4392 	movw	r3, #1170	; 0x492
 8001dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4837      	ldr	r0, [pc, #220]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001dc4:	f000 fe8c 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_IRQ_Pin Y_STOP_Pin */
  GPIO_InitStruct.Pin = Touch_IRQ_Pin|Y_STOP_Pin;
 8001dc8:	2344      	movs	r3, #68	; 0x44
 8001dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4831      	ldr	r0, [pc, #196]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001ddc:	f000 fe80 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_SCK_Pin Touch_MISO_Pin Touch_MOSI_Pin */
  GPIO_InitStruct.Pin = Touch_SCK_Pin|Touch_MISO_Pin|Touch_MOSI_Pin;
 8001de0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df2:	2305      	movs	r3, #5
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4828      	ldr	r0, [pc, #160]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001dfe:	f000 fe6f 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STOP_Pin */
  GPIO_InitStruct.Pin = X_STOP_Pin;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(X_STOP_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4824      	ldr	r0, [pc, #144]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001e16:	f000 fe63 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STEP_Pin */
  GPIO_InitStruct.Pin = X_STEP_Pin;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f000 fe53 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_SCK_Pin Screen_MISO_Pin Screen_MOSI_Pin */
  GPIO_InitStruct.Pin = Screen_SCK_Pin|Screen_MISO_Pin|Screen_MOSI_Pin;
 8001e3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e4c:	2306      	movs	r3, #6
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001e58:	f000 fe42 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_RST_Pin */
  GPIO_InitStruct.Pin = Screen_RST_Pin;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Screen_RST_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <MX_GPIO_Init+0x1e8>)
 8001e74:	f000 fe34 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_STEP_Pin Z_STEP_Pin */
  GPIO_InitStruct.Pin = Y_STEP_Pin|Z_STEP_Pin;
 8001e78:	2328      	movs	r3, #40	; 0x28
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001e90:	f000 fe26 	bl	8002ae0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e94:	bf00      	nop
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	48000c00 	.word	0x48000c00
 8001ea8:	48000800 	.word	0x48000800

08001eac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f008 fa37 	bl	800a328 <osDelay>
 8001eba:	e7fb      	b.n	8001eb4 <StartDefaultTask+0x8>

08001ebc <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

    for(;;){
      osDelay(1);
    }*/

    uint8_t  prio = 100;
 8001ec4:	2364      	movs	r3, #100	; 0x64
 8001ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    int cmd = -1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	61fb      	str	r3, [r7, #28]

    float xCoord = -1;
 8001ed0:	4b62      	ldr	r3, [pc, #392]	; (800205c <StartCommandTask+0x1a0>)
 8001ed2:	61bb      	str	r3, [r7, #24]
    float yCoord = -1;
 8001ed4:	4b61      	ldr	r3, [pc, #388]	; (800205c <StartCommandTask+0x1a0>)
 8001ed6:	617b      	str	r3, [r7, #20]

    int speedSet = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
    int pauseDur = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

    int rres;

    while(1){
      rres = osMessageQueueGet(commandQueueHandle, &cmd, &prio, (uint32_t) 1);
 8001ee0:	4b5f      	ldr	r3, [pc, #380]	; (8002060 <StartCommandTask+0x1a4>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001ee8:	f107 011c 	add.w	r1, r7, #28
 8001eec:	2301      	movs	r3, #1
 8001eee:	f008 fc4d 	bl	800a78c <osMessageQueueGet>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24
      if(rres == osOK){
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 80a9 	bne.w	800204e <StartCommandTask+0x192>
        switch (cmd) {
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b6b      	cmp	r3, #107	; 0x6b
 8001f00:	f000 80a2 	beq.w	8002048 <StartCommandTask+0x18c>
 8001f04:	2b6b      	cmp	r3, #107	; 0x6b
 8001f06:	f300 80a6 	bgt.w	8002056 <StartCommandTask+0x19a>
 8001f0a:	2b1c      	cmp	r3, #28
 8001f0c:	dc42      	bgt.n	8001f94 <StartCommandTask+0xd8>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f2c0 80a1 	blt.w	8002056 <StartCommandTask+0x19a>
 8001f14:	2b1c      	cmp	r3, #28
 8001f16:	f200 809e 	bhi.w	8002056 <StartCommandTask+0x19a>
 8001f1a:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <StartCommandTask+0x64>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08002003 	.word	0x08002003
 8001f24:	08001f9b 	.word	0x08001f9b
 8001f28:	08002057 	.word	0x08002057
 8001f2c:	08002057 	.word	0x08002057
 8001f30:	08001fe7 	.word	0x08001fe7
 8001f34:	08002057 	.word	0x08002057
 8001f38:	08002057 	.word	0x08002057
 8001f3c:	08002057 	.word	0x08002057
 8001f40:	08002057 	.word	0x08002057
 8001f44:	08002057 	.word	0x08002057
 8001f48:	08002057 	.word	0x08002057
 8001f4c:	08002057 	.word	0x08002057
 8001f50:	08002057 	.word	0x08002057
 8001f54:	08002057 	.word	0x08002057
 8001f58:	08002057 	.word	0x08002057
 8001f5c:	08002057 	.word	0x08002057
 8001f60:	08002057 	.word	0x08002057
 8001f64:	08002057 	.word	0x08002057
 8001f68:	08002057 	.word	0x08002057
 8001f6c:	08002057 	.word	0x08002057
 8001f70:	08002057 	.word	0x08002057
 8001f74:	08002057 	.word	0x08002057
 8001f78:	08002057 	.word	0x08002057
 8001f7c:	08002057 	.word	0x08002057
 8001f80:	08002057 	.word	0x08002057
 8001f84:	08002057 	.word	0x08002057
 8001f88:	08002057 	.word	0x08002057
 8001f8c:	08002057 	.word	0x08002057
 8001f90:	0800203d 	.word	0x0800203d
 8001f94:	2b6a      	cmp	r3, #106	; 0x6a
 8001f96:	d054      	beq.n	8002042 <StartCommandTask+0x186>
          case 107:
            // handle M107 Stop Extrusion
            stop_extrusion();
            break;
          default:
            break;
 8001f98:	e05d      	b.n	8002056 <StartCommandTask+0x19a>
            osMessageQueueGet(commandQueueHandle, &speedSet, &prio, 1);
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <StartCommandTask+0x1a4>)
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001fa2:	f107 0110 	add.w	r1, r7, #16
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f008 fbf0 	bl	800a78c <osMessageQueueGet>
            myprintf("speed: %d ", speedSet/240);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4a2d      	ldr	r2, [pc, #180]	; (8002064 <StartCommandTask+0x1a8>)
 8001fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb4:	441a      	add	r2, r3
 8001fb6:	11d2      	asrs	r2, r2, #7
 8001fb8:	17db      	asrs	r3, r3, #31
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482a      	ldr	r0, [pc, #168]	; (8002068 <StartCommandTask+0x1ac>)
 8001fc0:	f000 f8ba 	bl	8002138 <myprintf>
            set_speed(speedSet/240);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	; (8002064 <StartCommandTask+0x1a8>)
 8001fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001fcc:	441a      	add	r2, r3
 8001fce:	11d2      	asrs	r2, r2, #7
 8001fd0:	17db      	asrs	r3, r3, #31
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe0:	f7ff f8ba 	bl	8001158 <set_speed>
            break;
 8001fe4:	e038      	b.n	8002058 <StartCommandTask+0x19c>
            osMessageQueueGet(commandQueueHandle, &pauseDur, &prio, 1);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <StartCommandTask+0x1a4>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001fee:	f107 010c 	add.w	r1, r7, #12
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f008 fbca 	bl	800a78c <osMessageQueueGet>
            wait(pauseDur);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f9b4 	bl	8001368 <wait>
            break;
 8002000:	e02a      	b.n	8002058 <StartCommandTask+0x19c>
            osMessageQueueGet(coordQueueHandle, &xCoord, &prio, 1);
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <StartCommandTask+0x1b0>)
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800200a:	f107 0118 	add.w	r1, r7, #24
 800200e:	2301      	movs	r3, #1
 8002010:	f008 fbbc 	bl	800a78c <osMessageQueueGet>
            osMessageQueueGet(coordQueueHandle, &yCoord, &prio, 1);
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <StartCommandTask+0x1b0>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800201c:	f107 0114 	add.w	r1, r7, #20
 8002020:	2301      	movs	r3, #1
 8002022:	f008 fbb3 	bl	800a78c <osMessageQueueGet>
            move(xCoord, yCoord);
 8002026:	edd7 7a06 	vldr	s15, [r7, #24]
 800202a:	ed97 7a05 	vldr	s14, [r7, #20]
 800202e:	eef0 0a47 	vmov.f32	s1, s14
 8002032:	eeb0 0a67 	vmov.f32	s0, s15
 8002036:	f7ff f89f 	bl	8001178 <move>
            break;
 800203a:	e00d      	b.n	8002058 <StartCommandTask+0x19c>
            home();
 800203c:	f7ff f9a2 	bl	8001384 <home>
            break;
 8002040:	e00a      	b.n	8002058 <StartCommandTask+0x19c>
            start_extrusion();
 8002042:	f7ff fab5 	bl	80015b0 <start_extrusion>
            break;
 8002046:	e007      	b.n	8002058 <StartCommandTask+0x19c>
            stop_extrusion();
 8002048:	f7ff fac8 	bl	80015dc <stop_extrusion>
            break;
 800204c:	e004      	b.n	8002058 <StartCommandTask+0x19c>
        }
      }
      else{
        osDelay(20);
 800204e:	2014      	movs	r0, #20
 8002050:	f008 f96a 	bl	800a328 <osDelay>
 8002054:	e744      	b.n	8001ee0 <StartCommandTask+0x24>
            break;
 8002056:	bf00      	nop
      rres = osMessageQueueGet(commandQueueHandle, &cmd, &prio, (uint32_t) 1);
 8002058:	e742      	b.n	8001ee0 <StartCommandTask+0x24>
 800205a:	bf00      	nop
 800205c:	bf800000 	.word	0xbf800000
 8002060:	200003c0 	.word	0x200003c0
 8002064:	88888889 	.word	0x88888889
 8002068:	08010ce0 	.word	0x08010ce0
 800206c:	200003c4 	.word	0x200003c4

08002070 <StartParserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParserTask */
void StartParserTask(void *argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b092      	sub	sp, #72	; 0x48
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParserTask */
  /* Infinite loop */
  int cmdtotal = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	647b      	str	r3, [r7, #68]	; 0x44
  int cmd_cnt = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c

  BYTE line[50];

  bool complete = false;
 8002080:	2300      	movs	r3, #0
 8002082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  do {
    cmd_cnt = osMessageQueueGetCount(commandQueueHandle);
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <StartParserTask+0x94>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f008 fbdc 	bl	800a848 <osMessageQueueGetCount>
 8002090:	4603      	mov	r3, r0
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(cmd_cnt < 15){
 8002094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002096:	2b0e      	cmp	r3, #14
 8002098:	dc23      	bgt.n	80020e2 <StartParserTask+0x72>

      GetLine(line);
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f882 	bl	80021a8 <GetLine>
      cmdtotal += 1;
 80020a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a6:	3301      	adds	r3, #1
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
      complete = eof();
 80020aa:	f000 f86b 	bl	8002184 <eof>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

      myprintf((const char*)line);
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f839 	bl	8002138 <myprintf>
      InterpretLine((const char*)line);
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fa9c 	bl	8001608 <InterpretLine>
      myprintf("queue size: %d --- ", cmd_cnt);
 80020d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <StartParserTask+0x98>)
 80020d4:	f000 f830 	bl	8002138 <myprintf>
      myprintf("lines processed: %d ", cmdtotal);
 80020d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <StartParserTask+0x9c>)
 80020dc:	f000 f82c 	bl	8002138 <myprintf>
 80020e0:	e002      	b.n	80020e8 <StartParserTask+0x78>

    }
    else{
      osDelay(1);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f008 f920 	bl	800a328 <osDelay>
    }
  }
  while(!complete);
 80020e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1c7      	bne.n	8002086 <StartParserTask+0x16>

  CloseFile();
 80020f6:	f000 f8cb 	bl	8002290 <CloseFile>
  for(;;)
  {
    osDelay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f008 f914 	bl	800a328 <osDelay>
 8002100:	e7fb      	b.n	80020fa <StartParserTask+0x8a>
 8002102:	bf00      	nop
 8002104:	200003c0 	.word	0x200003c0
 8002108:	08010cec 	.word	0x08010cec
 800210c:	08010d00 	.word	0x08010d00

08002110 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d101      	bne.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002122:	f000 fbb7 	bl	8002894 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002132:	b672      	cpsid	i
}
 8002134:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002136:	e7fe      	b.n	8002136 <Error_Handler+0x8>

08002138 <myprintf>:
volatile uint8_t dequeueNumber = 1;
volatile uint8_t queueFlag = 1;
volatile uint8_t isPrinting = 1;

void myprintf(const char *fmt, ...)
{
 8002138:	b40f      	push	{r0, r1, r2, r3}
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <myprintf+0x44>)
 8002150:	f00c fc3c 	bl	800e9cc <vsniprintf>
  va_end(args);
  int len = strlen(buffer);
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <myprintf+0x44>)
 8002156:	f7fe f83b 	bl	80001d0 <strlen>
 800215a:	4603      	mov	r3, r0
 800215c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	b29a      	uxth	r2, r3
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	4905      	ldr	r1, [pc, #20]	; (800217c <myprintf+0x44>)
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <myprintf+0x48>)
 800216a:	f004 fa65 	bl	8006638 <HAL_UART_Transmit>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002178:	b004      	add	sp, #16
 800217a:	4770      	bx	lr
 800217c:	20000834 	.word	0x20000834
 8002180:	2000032c 	.word	0x2000032c

08002184 <eof>:
  	  //Be a tidy kiwi - don't forget to close your file!
  	  f_close(&fil);


  }
int eof(){
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
    return f_eof(&fil);
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <eof+0x20>)
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <eof+0x20>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	200005fc 	.word	0x200005fc

080021a8 <GetLine>:

TCHAR* rres;

void GetLine(BYTE readBuf[50]){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  rres = f_gets((TCHAR*)readBuf, 50, &fil);
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <GetLine+0x34>)
 80021b2:	2132      	movs	r1, #50	; 0x32
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f007 feb8 	bl	8009f2a <f_gets>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <GetLine+0x38>)
 80021be:	6013      	str	r3, [r2, #0]
  if(rres == 0){
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <GetLine+0x38>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <GetLine+0x2c>
    myprintf("f_gets error (%i)\r\n", rres);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <GetLine+0x38>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <GetLine+0x3c>)
 80021d0:	f7ff ffb2 	bl	8002138 <myprintf>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200005fc 	.word	0x200005fc
 80021e0:	20000830 	.word	0x20000830
 80021e4:	08010e34 	.word	0x08010e34

080021e8 <OpenFile>:

bool OpenFile(char* file_name){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(2000);
 80021f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021f4:	f000 fb6e 	bl	80028d4 <HAL_Delay>
  fres = f_mount(&FatFs, "", 1);
 80021f8:	2201      	movs	r2, #1
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <OpenFile+0x80>)
 80021fc:	481b      	ldr	r0, [pc, #108]	; (800226c <OpenFile+0x84>)
 80021fe:	f007 fa45 	bl	800968c <f_mount>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <OpenFile+0x88>)
 8002208:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <OpenFile+0x88>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <OpenFile+0x3a>
    myprintf("1 - f_mount error (%i)\r\n", fres);
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <OpenFile+0x88>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <OpenFile+0x8c>)
 800221a:	f7ff ff8d 	bl	8002138 <myprintf>
    return false;
 800221e:	2300      	movs	r3, #0
 8002220:	e01e      	b.n	8002260 <OpenFile+0x78>
  }
  myprintf("mounted\n");
 8002222:	4815      	ldr	r0, [pc, #84]	; (8002278 <OpenFile+0x90>)
 8002224:	f7ff ff88 	bl	8002138 <myprintf>

  myprintf("opening file\n");
 8002228:	4814      	ldr	r0, [pc, #80]	; (800227c <OpenFile+0x94>)
 800222a:	f7ff ff85 	bl	8002138 <myprintf>
  fres = f_open(&fil, "test.txt", FA_READ);
 800222e:	2201      	movs	r2, #1
 8002230:	4913      	ldr	r1, [pc, #76]	; (8002280 <OpenFile+0x98>)
 8002232:	4814      	ldr	r0, [pc, #80]	; (8002284 <OpenFile+0x9c>)
 8002234:	f007 fa8e 	bl	8009754 <f_open>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <OpenFile+0x88>)
 800223e:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <OpenFile+0x88>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <OpenFile+0x70>
      myprintf("f_open error (%i)\r\n", fres);
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <OpenFile+0x88>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <OpenFile+0xa0>)
 8002250:	f7ff ff72 	bl	8002138 <myprintf>
      return false;
 8002254:	2300      	movs	r3, #0
 8002256:	e003      	b.n	8002260 <OpenFile+0x78>
  }
  myprintf("File open success\r\n");
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <OpenFile+0xa4>)
 800225a:	f7ff ff6d 	bl	8002138 <myprintf>
  return true;
 800225e:	2301      	movs	r3, #1
 }
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	08010d18 	.word	0x08010d18
 800226c:	200003c8 	.word	0x200003c8
 8002270:	2000082c 	.word	0x2000082c
 8002274:	08010e48 	.word	0x08010e48
 8002278:	08010e64 	.word	0x08010e64
 800227c:	08010e70 	.word	0x08010e70
 8002280:	08010dc4 	.word	0x08010dc4
 8002284:	200005fc 	.word	0x200005fc
 8002288:	08010dd0 	.word	0x08010dd0
 800228c:	08010e80 	.word	0x08010e80

08002290 <CloseFile>:

void CloseFile(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
    f_close(&fil);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <CloseFile+0x10>)
 8002296:	f007 fe19 	bl	8009ecc <f_close>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200005fc 	.word	0x200005fc

080022a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_MspInit+0x4c>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <HAL_MspInit+0x4c>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6613      	str	r3, [r2, #96]	; 0x60
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_MspInit+0x4c>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_MspInit+0x4c>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_MspInit+0x4c>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_MspInit+0x4c>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	210f      	movs	r1, #15
 80022de:	f06f 0001 	mvn.w	r0, #1
 80022e2:	f000 fbd3 	bl	8002a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000

080022f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_SPI_MspInit+0x7c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d128      	bne.n	8002368 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_SPI_MspInit+0x80>)
 800231c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002320:	6613      	str	r3, [r2, #96]	; 0x60
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_SPI_MspInit+0x80>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_SPI_MspInit+0x80>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002346:	23e0      	movs	r3, #224	; 0xe0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002356:	2305      	movs	r3, #5
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f000 fbbc 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40013000 	.word	0x40013000
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_TIM_Base_MspInit+0x38>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10b      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_TIM_Base_MspInit+0x3c>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002394:	6613      	str	r3, [r2, #96]	; 0x60
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_TIM_PWM_MspInit+0x38>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10b      	bne.n	80023e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40000800 	.word	0x40000800
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <HAL_TIM_MspPostInit+0x64>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d11c      	bne.n	8002454 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_TIM_MspPostInit+0x68>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <HAL_TIM_MspPostInit+0x68>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_TIM_MspPostInit+0x68>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Valve_Servo_Pin;
 8002432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002436:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002444:	2302      	movs	r3, #2
 8002446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Valve_Servo_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	4619      	mov	r1, r3
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <HAL_TIM_MspPostInit+0x6c>)
 8002450:	f000 fb46 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002454:	bf00      	nop
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40000800 	.word	0x40000800
 8002460:	40021000 	.word	0x40021000
 8002464:	48000400 	.word	0x48000400

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0ac      	sub	sp, #176	; 0xb0
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2288      	movs	r2, #136	; 0x88
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00c faad 	bl	800e9e8 <memset>
  if(huart->Instance==USART2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <HAL_UART_MspInit+0xb0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d13b      	bne.n	8002510 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002498:	2302      	movs	r3, #2
 800249a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800249c:	2300      	movs	r3, #0
 800249e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fb8b 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024b0:	f7ff fe3d 	bl	800212e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_UART_MspInit+0xb4>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_UART_MspInit+0xb4>)
 80024ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024be:	6593      	str	r3, [r2, #88]	; 0x58
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_UART_MspInit+0xb4>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_UART_MspInit+0xb4>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_UART_MspInit+0xb4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_UART_MspInit+0xb4>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024e4:	230c      	movs	r3, #12
 80024e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024fc:	2307      	movs	r3, #7
 80024fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002506:	4619      	mov	r1, r3
 8002508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250c:	f000 fae8 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	37b0      	adds	r7, #176	; 0xb0
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40004400 	.word	0x40004400
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08e      	sub	sp, #56	; 0x38
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_InitTick+0xe0>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_InitTick+0xe0>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_InitTick+0xe0>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002546:	f107 0210 	add.w	r2, r7, #16
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f001 faa3 	bl	8003a9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002560:	f001 fa70 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8002564:	6378      	str	r0, [r7, #52]	; 0x34
 8002566:	e004      	b.n	8002572 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002568:	f001 fa6c 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 800256c:	4603      	mov	r3, r0
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_InitTick+0xe4>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	3b01      	subs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_InitTick+0xe8>)
 8002582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002586:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_InitTick+0xe8>)
 800258a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_InitTick+0xe8>)
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_InitTick+0xe8>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_InitTick+0xe8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_InitTick+0xe8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80025a8:	4817      	ldr	r0, [pc, #92]	; (8002608 <HAL_InitTick+0xe8>)
 80025aa:	f002 fd63 	bl	8005074 <HAL_TIM_Base_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80025b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11b      	bne.n	80025f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80025bc:	4812      	ldr	r0, [pc, #72]	; (8002608 <HAL_InitTick+0xe8>)
 80025be:	f002 fe41 	bl	8005244 <HAL_TIM_Base_Start_IT>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80025c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025d0:	201c      	movs	r0, #28
 80025d2:	f000 fa77 	bl	8002ac4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b0f      	cmp	r3, #15
 80025da:	d808      	bhi.n	80025ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80025dc:	2200      	movs	r2, #0
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	201c      	movs	r0, #28
 80025e2:	f000 fa53 	bl	8002a8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_InitTick+0xec>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e002      	b.n	80025f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80025f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3738      	adds	r7, #56	; 0x38
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	431bde83 	.word	0x431bde83
 8002608:	20000934 	.word	0x20000934
 800260c:	20000018 	.word	0x20000018

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <NMI_Handler+0x4>

08002616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <MemManage_Handler+0x4>

08002622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler+0x4>

0800262e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <TIM2_IRQHandler+0x10>)
 8002642:	f002 ffcd 	bl	80055e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000934 	.word	0x20000934

08002650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return 1;
 8002654:	2301      	movs	r3, #1
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <_kill>:

int _kill(int pid, int sig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800266a:	f00c fa8d 	bl	800eb88 <__errno>
 800266e:	4603      	mov	r3, r0
 8002670:	2216      	movs	r2, #22
 8002672:	601a      	str	r2, [r3, #0]
  return -1;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_exit>:

void _exit (int status)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ffe7 	bl	8002660 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002692:	e7fe      	b.n	8002692 <_exit+0x12>

08002694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e00a      	b.n	80026bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a6:	f3af 8000 	nop.w
 80026aa:	4601      	mov	r1, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	b2ca      	uxtb	r2, r1
 80026b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3301      	adds	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbf0      	blt.n	80026a6 <_read+0x12>
  }

  return len;
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e009      	b.n	80026f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf1      	blt.n	80026e0 <_write+0x12>
  }
  return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_close>:

int _close(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272e:	605a      	str	r2, [r3, #4]
  return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_isatty>:

int _isatty(int file)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f00c f9f2 	bl	800eb88 <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20018000 	.word	0x20018000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	20000980 	.word	0x20000980
 80027d8:	20002bf8 	.word	0x20002bf8

080027dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <SystemInit+0x20>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <SystemInit+0x20>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002838 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002804:	f7ff ffea 	bl	80027dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <LoopForever+0x6>)
  ldr r1, =_edata
 800280a:	490d      	ldr	r1, [pc, #52]	; (8002840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <LoopForever+0xe>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002820:	4c0a      	ldr	r4, [pc, #40]	; (800284c <LoopForever+0x16>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800282e:	f00c f9b1 	bl	800eb94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002832:	f7ff f86d 	bl	8001910 <main>

08002836 <LoopForever>:

LoopForever:
    b LoopForever
 8002836:	e7fe      	b.n	8002836 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002838:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800283c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002840:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002844:	08011478 	.word	0x08011478
  ldr r2, =_sbss
 8002848:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800284c:	20002bf4 	.word	0x20002bf4

08002850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002850:	e7fe      	b.n	8002850 <ADC1_2_IRQHandler>
	...

08002854 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_Init+0x3c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_Init+0x3c>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286a:	2003      	movs	r0, #3
 800286c:	f000 f903 	bl	8002a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002870:	200f      	movs	r0, #15
 8002872:	f7ff fe55 	bl	8002520 <HAL_InitTick>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	e001      	b.n	8002886 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002882:	f7ff fd0f 	bl	80022a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002886:	79fb      	ldrb	r3, [r7, #7]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40022000 	.word	0x40022000

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000001c 	.word	0x2000001c
 80028b8:	20000984 	.word	0x20000984

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000984 	.word	0x20000984

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000001c 	.word	0x2000001c

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff4c 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9e:	f7ff ff61 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002aa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	6978      	ldr	r0, [r7, #20]
 8002aaa:	f7ff ffb1 	bl	8002a10 <NVIC_EncodePriority>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff80 	bl	80029bc <__NVIC_SetPriority>
}
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff54 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	e17f      	b.n	8002df0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8171 	beq.w	8002dea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d005      	beq.n	8002b20 <HAL_GPIO_Init+0x40>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d130      	bne.n	8002b82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b56:	2201      	movs	r2, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 0201 	and.w	r2, r3, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d118      	bne.n	8002bc0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	6939      	ldr	r1, [r7, #16]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80ac 	beq.w	8002dea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	4b5f      	ldr	r3, [pc, #380]	; (8002e10 <HAL_GPIO_Init+0x330>)
 8002c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c96:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_GPIO_Init+0x330>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c9e:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_GPIO_Init+0x330>)
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002caa:	4a5a      	ldr	r2, [pc, #360]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cd4:	d025      	beq.n	8002d22 <HAL_GPIO_Init+0x242>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4f      	ldr	r2, [pc, #316]	; (8002e18 <HAL_GPIO_Init+0x338>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01f      	beq.n	8002d1e <HAL_GPIO_Init+0x23e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4e      	ldr	r2, [pc, #312]	; (8002e1c <HAL_GPIO_Init+0x33c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d019      	beq.n	8002d1a <HAL_GPIO_Init+0x23a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <HAL_GPIO_Init+0x340>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_GPIO_Init+0x236>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <HAL_GPIO_Init+0x344>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00d      	beq.n	8002d12 <HAL_GPIO_Init+0x232>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <HAL_GPIO_Init+0x348>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <HAL_GPIO_Init+0x22e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4a      	ldr	r2, [pc, #296]	; (8002e2c <HAL_GPIO_Init+0x34c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_GPIO_Init+0x22a>
 8002d06:	2306      	movs	r3, #6
 8002d08:	e00c      	b.n	8002d24 <HAL_GPIO_Init+0x244>
 8002d0a:	2307      	movs	r3, #7
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_Init+0x244>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x244>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x244>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x244>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x244>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x244>
 8002d22:	2300      	movs	r3, #0
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d34:	4937      	ldr	r1, [pc, #220]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d66:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002de4:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <HAL_GPIO_Init+0x350>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3301      	adds	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f ae78 	bne.w	8002af0 <HAL_GPIO_Init+0x10>
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40010000 	.word	0x40010000
 8002e18:	48000400 	.word	0x48000400
 8002e1c:	48000800 	.word	0x48000800
 8002e20:	48000c00 	.word	0x48000c00
 8002e24:	48001000 	.word	0x48001000
 8002e28:	48001400 	.word	0x48001400
 8002e2c:	48001800 	.word	0x48001800
 8002e30:	40010400 	.word	0x40010400

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_PWREx_GetVoltageRange+0x18>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40007000 	.word	0x40007000

08002eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebe:	d130      	bne.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d038      	beq.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002edc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2232      	movs	r2, #50	; 0x32
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	0c9b      	lsrs	r3, r3, #18
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef4:	e002      	b.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f08:	d102      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f2      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1c:	d110      	bne.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e00f      	b.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	d007      	beq.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f38:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40007000 	.word	0x40007000
 8002f54:	20000014 	.word	0x20000014
 8002f58:	431bde83 	.word	0x431bde83

08002f5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e3ca      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6e:	4b97      	ldr	r3, [pc, #604]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f78:	4b94      	ldr	r3, [pc, #592]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80e4 	beq.w	8003158 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x4a>
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	f040 808b 	bne.w	80030b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 8087 	bne.w	80030b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fa6:	4b89      	ldr	r3, [pc, #548]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e3a2      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	4b82      	ldr	r3, [pc, #520]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x7c>
 8002fce:	4b7f      	ldr	r3, [pc, #508]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd6:	e005      	b.n	8002fe4 <HAL_RCC_OscConfig+0x88>
 8002fd8:	4b7c      	ldr	r3, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8002fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d223      	bcs.n	8003030 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fd87 	bl	8003b00 <RCC_SetFlashLatencyFromMSIRange>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e383      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ffc:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a72      	ldr	r2, [pc, #456]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b70      	ldr	r3, [pc, #448]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	496d      	ldr	r1, [pc, #436]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800301a:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	4968      	ldr	r1, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
 800302e:	e025      	b.n	800307c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003030:	4b66      	ldr	r3, [pc, #408]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a65      	ldr	r2, [pc, #404]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4960      	ldr	r1, [pc, #384]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	495b      	ldr	r1, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fd47 	bl	8003b00 <RCC_SetFlashLatencyFromMSIRange>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e343      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800307c:	f000 fc4a 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b52      	ldr	r3, [pc, #328]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	4950      	ldr	r1, [pc, #320]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <HAL_RCC_OscConfig+0x278>)
 800309a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800309c:	4b4e      	ldr	r3, [pc, #312]	; (80031d8 <HAL_RCC_OscConfig+0x27c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fa3d 	bl	8002520 <HAL_InitTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d052      	beq.n	8003156 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	e327      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d032      	beq.n	8003122 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030bc:	4b43      	ldr	r3, [pc, #268]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a42      	ldr	r2, [pc, #264]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c8:	f7ff fbf8 	bl	80028bc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030d0:	f7ff fbf4 	bl	80028bc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e310      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e2:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ee:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a36      	ldr	r2, [pc, #216]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4931      	ldr	r1, [pc, #196]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310c:	4b2f      	ldr	r3, [pc, #188]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	492c      	ldr	r1, [pc, #176]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e01a      	b.n	8003158 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003122:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800312e:	f7ff fbc5 	bl	80028bc <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003136:	f7ff fbc1 	bl	80028bc <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e2dd      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x1da>
 8003154:	e000      	b.n	8003158 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003156:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d074      	beq.n	800324e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b08      	cmp	r3, #8
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x21a>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	d10e      	bne.n	800318e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d10b      	bne.n	800318e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d064      	beq.n	800324c <HAL_RCC_OscConfig+0x2f0>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d160      	bne.n	800324c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e2ba      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x24a>
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	e026      	b.n	80031f4 <HAL_RCC_OscConfig+0x298>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_OscConfig+0x280>
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a05      	ldr	r2, [pc, #20]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80031b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a02      	ldr	r2, [pc, #8]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e014      	b.n	80031f4 <HAL_RCC_OscConfig+0x298>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08010f8c 	.word	0x08010f8c
 80031d4:	20000014 	.word	0x20000014
 80031d8:	20000018 	.word	0x20000018
 80031dc:	4ba0      	ldr	r3, [pc, #640]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a9f      	ldr	r2, [pc, #636]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b9d      	ldr	r3, [pc, #628]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a9c      	ldr	r2, [pc, #624]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7ff fb5e 	bl	80028bc <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff fb5a 	bl	80028bc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e276      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x2a8>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7ff fb4a 	bl	80028bc <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7ff fb46 	bl	80028bc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e262      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x2d0>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d060      	beq.n	800331c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d005      	beq.n	800326c <HAL_RCC_OscConfig+0x310>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d119      	bne.n	800329a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d116      	bne.n	800329a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800326c:	4b7c      	ldr	r3, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_OscConfig+0x328>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e23f      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	4973      	ldr	r1, [pc, #460]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	e040      	b.n	800331c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d023      	beq.n	80032ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7ff fb05 	bl	80028bc <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b6:	f7ff fb01 	bl	80028bc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e21d      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c8:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b62      	ldr	r3, [pc, #392]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	495f      	ldr	r1, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
 80032e8:	e018      	b.n	800331c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5c      	ldr	r2, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80032f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7ff fae1 	bl	80028bc <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fe:	f7ff fadd 	bl	80028bc <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1f9      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01c      	beq.n	800336a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003336:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7ff fabc 	bl	80028bc <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003348:	f7ff fab8 	bl	80028bc <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e1d4      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ef      	beq.n	8003348 <HAL_RCC_OscConfig+0x3ec>
 8003368:	e01b      	b.n	80033a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 800336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003370:	4a3b      	ldr	r2, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7ff fa9f 	bl	80028bc <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003382:	f7ff fa9b 	bl	80028bc <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1b7      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ef      	bne.n	8003382 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80a6 	beq.w	80034fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10d      	bne.n	80033dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	4b27      	ldr	r3, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	4a26      	ldr	r2, [pc, #152]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ca:	6593      	str	r3, [r2, #88]	; 0x58
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d8:	2301      	movs	r3, #1
 80033da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCC_OscConfig+0x508>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d118      	bne.n	800341a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCC_OscConfig+0x508>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_RCC_OscConfig+0x508>)
 80033ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f4:	f7ff fa62 	bl	80028bc <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fc:	f7ff fa5e 	bl	80028bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e17a      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCC_OscConfig+0x508>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <HAL_RCC_OscConfig+0x4d8>
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003432:	e029      	b.n	8003488 <HAL_RCC_OscConfig+0x52c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d115      	bne.n	8003468 <HAL_RCC_OscConfig+0x50c>
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a03      	ldr	r2, [pc, #12]	; (8003460 <HAL_RCC_OscConfig+0x504>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345c:	e014      	b.n	8003488 <HAL_RCC_OscConfig+0x52c>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	4b9c      	ldr	r3, [pc, #624]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	4a9b      	ldr	r2, [pc, #620]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003478:	4b98      	ldr	r3, [pc, #608]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	4a97      	ldr	r2, [pc, #604]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d016      	beq.n	80034be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7ff fa14 	bl	80028bc <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7ff fa10 	bl	80028bc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e12a      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ae:	4b8b      	ldr	r3, [pc, #556]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ed      	beq.n	8003498 <HAL_RCC_OscConfig+0x53c>
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034be:	f7ff f9fd 	bl	80028bc <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7ff f9f9 	bl	80028bc <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e113      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034dc:	4b7f      	ldr	r3, [pc, #508]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ed      	bne.n	80034c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f0:	4b7a      	ldr	r3, [pc, #488]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	4a79      	ldr	r2, [pc, #484]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80fe 	beq.w	8003702 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	2b02      	cmp	r3, #2
 800350c:	f040 80d0 	bne.w	80036b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003510:	4b72      	ldr	r3, [pc, #456]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0203 	and.w	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	429a      	cmp	r2, r3
 8003522:	d130      	bne.n	8003586 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	3b01      	subs	r3, #1
 8003530:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d127      	bne.n	8003586 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d11f      	bne.n	8003586 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003550:	2a07      	cmp	r2, #7
 8003552:	bf14      	ite	ne
 8003554:	2201      	movne	r2, #1
 8003556:	2200      	moveq	r2, #0
 8003558:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355a:	4293      	cmp	r3, r2
 800355c:	d113      	bne.n	8003586 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d109      	bne.n	8003586 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d06e      	beq.n	8003664 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	d069      	beq.n	8003660 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003598:	4b50      	ldr	r3, [pc, #320]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0ad      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a4b      	ldr	r2, [pc, #300]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80035ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035b4:	f7ff f982 	bl	80028bc <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7ff f97e 	bl	80028bc <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e09a      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035da:	4b40      	ldr	r3, [pc, #256]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <HAL_RCC_OscConfig+0x784>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ea:	3a01      	subs	r2, #1
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035f4:	0212      	lsls	r2, r2, #8
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035fc:	0852      	lsrs	r2, r2, #1
 80035fe:	3a01      	subs	r2, #1
 8003600:	0552      	lsls	r2, r2, #21
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003608:	0852      	lsrs	r2, r2, #1
 800360a:	3a01      	subs	r2, #1
 800360c:	0652      	lsls	r2, r2, #25
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003614:	0912      	lsrs	r2, r2, #4
 8003616:	0452      	lsls	r2, r2, #17
 8003618:	430a      	orrs	r2, r1
 800361a:	4930      	ldr	r1, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 800361c:	4313      	orrs	r3, r2
 800361e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003620:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003638:	f7ff f940 	bl	80028bc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7ff f93c 	bl	80028bc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e058      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800365e:	e050      	b.n	8003702 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e04f      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003664:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d148      	bne.n	8003702 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003688:	f7ff f918 	bl	80028bc <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7ff f914 	bl	80028bc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e030      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x734>
 80036ae:	e028      	b.n	8003702 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d023      	beq.n	80036fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <HAL_RCC_OscConfig+0x780>)
 80036bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7ff f8fb 	bl	80028bc <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c8:	e00c      	b.n	80036e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ca:	f7ff f8f7 	bl	80028bc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d905      	bls.n	80036e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e013      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
 80036dc:	40021000 	.word	0x40021000
 80036e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_RCC_OscConfig+0x7b0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ec      	bne.n	80036ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_RCC_OscConfig+0x7b0>)
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	4905      	ldr	r1, [pc, #20]	; (800370c <HAL_RCC_OscConfig+0x7b0>)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x7b4>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	60cb      	str	r3, [r1, #12]
 80036fc:	e001      	b.n	8003702 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	feeefffc 	.word	0xfeeefffc

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0e7      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b75      	ldr	r3, [pc, #468]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4970      	ldr	r1, [pc, #448]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b6e      	ldr	r3, [pc, #440]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0cf      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003770:	429a      	cmp	r2, r3
 8003772:	d908      	bls.n	8003786 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4960      	ldr	r1, [pc, #384]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d04c      	beq.n	800382c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379a:	4b5a      	ldr	r3, [pc, #360]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d121      	bne.n	80037ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0a6      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d115      	bne.n	80037ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e09a      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ca:	4b4e      	ldr	r3, [pc, #312]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e08e      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037da:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e086      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f023 0203 	bic.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4943      	ldr	r1, [pc, #268]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fc:	f7ff f85e 	bl	80028bc <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7ff f85a 	bl	80028bc <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e06e      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	4b3a      	ldr	r3, [pc, #232]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 020c 	and.w	r2, r3, #12
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	d1eb      	bne.n	8003804 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d010      	beq.n	800385a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	4b31      	ldr	r3, [pc, #196]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003844:	429a      	cmp	r2, r3
 8003846:	d208      	bcs.n	800385a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	492b      	ldr	r1, [pc, #172]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d210      	bcs.n	800388a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 0207 	bic.w	r2, r3, #7
 8003870:	4923      	ldr	r1, [pc, #140]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003878:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCC_ClockConfig+0x1ec>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d001      	beq.n	800388a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e036      	b.n	80038f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4918      	ldr	r1, [pc, #96]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4910      	ldr	r1, [pc, #64]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038c8:	f000 f824 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	490b      	ldr	r1, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x1f4>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1f8>)
 80038e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1fc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe fe17 	bl	8002520 <HAL_InitTick>
 80038f2:	4603      	mov	r3, r0
 80038f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80038f6:	7afb      	ldrb	r3, [r7, #11]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40022000 	.word	0x40022000
 8003904:	40021000 	.word	0x40021000
 8003908:	08010f8c 	.word	0x08010f8c
 800390c:	20000014 	.word	0x20000014
 8003910:	20000018 	.word	0x20000018

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003922:	4b3e      	ldr	r3, [pc, #248]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392c:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x34>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d121      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d11e      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003948:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003954:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e005      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003964:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003970:	4a2b      	ldr	r2, [pc, #172]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003978:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10d      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003984:	e00a      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d102      	bne.n	8003992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x110>)
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	e004      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d101      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003998:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x114>)
 800399a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d134      	bne.n	8003a0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0xa6>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d003      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0xac>
 80039b8:	e005      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x110>)
 80039bc:	617b      	str	r3, [r7, #20]
      break;
 80039be:	e005      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x114>)
 80039c2:	617b      	str	r3, [r7, #20]
      break;
 80039c4:	e002      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	617b      	str	r3, [r7, #20]
      break;
 80039ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	3301      	adds	r3, #1
 80039d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	fb03 f202 	mul.w	r2, r3, r2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	0e5b      	lsrs	r3, r3, #25
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	3301      	adds	r3, #1
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a0c:	69bb      	ldr	r3, [r7, #24]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3724      	adds	r7, #36	; 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08010fa4 	.word	0x08010fa4
 8003a24:	00f42400 	.word	0x00f42400
 8003a28:	007a1200 	.word	0x007a1200

08003a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000014 	.word	0x20000014

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a48:	f7ff fff0 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08010f9c 	.word	0x08010f9c

08003a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a74:	f7ff ffda 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4904      	ldr	r1, [pc, #16]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	08010f9c 	.word	0x08010f9c

08003a9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_RCC_GetClockConfig+0x60>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0207 	and.w	r2, r3, #7
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40022000 	.word	0x40022000

08003b00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b18:	f7ff f9bc 	bl	8002e94 <HAL_PWREx_GetVoltageRange>
 8003b1c:	6178      	str	r0, [r7, #20]
 8003b1e:	e014      	b.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b38:	f7ff f9ac 	bl	8002e94 <HAL_PWREx_GetVoltageRange>
 8003b3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d10b      	bne.n	8003b6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b80      	cmp	r3, #128	; 0x80
 8003b56:	d919      	bls.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b5c:	d902      	bls.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b5e:	2302      	movs	r3, #2
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e013      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b64:	2301      	movs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e010      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d902      	bls.n	8003b76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b70:	2303      	movs	r3, #3
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e00a      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d102      	bne.n	8003b82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e004      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b70      	cmp	r3, #112	; 0x70
 8003b86:	d101      	bne.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b88:	2301      	movs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 0207 	bic.w	r2, r3, #7
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b9c:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40022000 	.word	0x40022000

08003bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc8:	2300      	movs	r3, #0
 8003bca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d041      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be4:	d02a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003be6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bea:	d824      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf6:	d81e      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c00:	d010      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c02:	e018      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c04:	4b86      	ldr	r3, [pc, #536]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a85      	ldr	r2, [pc, #532]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c10:	e015      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fabb 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c22:	e00c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3320      	adds	r3, #32
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fba6 	bl	800437c <RCCEx_PLLSAI2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	74fb      	strb	r3, [r7, #19]
      break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c44:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c52:	4973      	ldr	r1, [pc, #460]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d041      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c74:	d02a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c7a:	d824      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c86:	d81e      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a61      	ldr	r2, [pc, #388]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fa73 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fb5e 	bl	800437c <RCCEx_PLLSAI2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cd4:	4b52      	ldr	r3, [pc, #328]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce2:	494f      	ldr	r1, [pc, #316]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a0 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d18:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	4a40      	ldr	r2, [pc, #256]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	6593      	str	r3, [r2, #88]	; 0x58
 8003d24:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d30:	2301      	movs	r3, #1
 8003d32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d34:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3a      	ldr	r2, [pc, #232]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d40:	f7fe fdbc 	bl	80028bc <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d46:	e009      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d48:	f7fe fdb8 	bl	80028bc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d902      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	74fb      	strb	r3, [r7, #19]
        break;
 8003d5a:	e005      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d5c:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ef      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d15c      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d6e:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01f      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d019      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d98:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a20      	ldr	r2, [pc, #128]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003da8:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fe fd77 	bl	80028bc <HAL_GetTick>
 8003dce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd0:	e00b      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fd73 	bl	80028bc <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d902      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	74fb      	strb	r3, [r7, #19]
            break;
 8003de8:	e006      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ec      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	4904      	ldr	r1, [pc, #16]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e16:	e009      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e2c:	7c7b      	ldrb	r3, [r7, #17]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b9e      	ldr	r3, [pc, #632]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	4a9d      	ldr	r2, [pc, #628]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4a:	4b98      	ldr	r3, [pc, #608]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f023 0203 	bic.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	4994      	ldr	r1, [pc, #592]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e6c:	4b8f      	ldr	r3, [pc, #572]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 020c 	bic.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	498c      	ldr	r1, [pc, #560]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e8e:	4b87      	ldr	r3, [pc, #540]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	4983      	ldr	r1, [pc, #524]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb0:	4b7e      	ldr	r3, [pc, #504]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	497b      	ldr	r1, [pc, #492]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ed2:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee0:	4972      	ldr	r1, [pc, #456]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef4:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f02:	496a      	ldr	r1, [pc, #424]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f16:	4b65      	ldr	r3, [pc, #404]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	4961      	ldr	r1, [pc, #388]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f38:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f46:	4959      	ldr	r1, [pc, #356]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f5a:	4b54      	ldr	r3, [pc, #336]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f68:	4950      	ldr	r1, [pc, #320]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	4948      	ldr	r1, [pc, #288]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f9e:	4b43      	ldr	r3, [pc, #268]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	493f      	ldr	r1, [pc, #252]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d028      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc0:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fce:	4937      	ldr	r1, [pc, #220]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fde:	d106      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe0:	4b32      	ldr	r3, [pc, #200]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a31      	ldr	r2, [pc, #196]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fea:	60d3      	str	r3, [r2, #12]
 8003fec:	e011      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff6:	d10c      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f8c8 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d028      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	491f      	ldr	r1, [pc, #124]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403c:	d106      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004048:	60d3      	str	r3, [r2, #12]
 800404a:	e011      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004054:	d10c      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3304      	adds	r3, #4
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f000 f899 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004066:	7cfb      	ldrb	r3, [r7, #19]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d02b      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409a:	d109      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a02      	ldr	r2, [pc, #8]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a6:	60d3      	str	r3, [r2, #12]
 80040a8:	e014      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f867 	bl	8004194 <RCCEx_PLLSAI1_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02f      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ee:	4928      	ldr	r1, [pc, #160]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040fe:	d10d      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f844 	bl	8004194 <RCCEx_PLLSAI1_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d014      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	74bb      	strb	r3, [r7, #18]
 800411a:	e011      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004124:	d10c      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3320      	adds	r3, #32
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f925 	bl	800437c <RCCEx_PLLSAI2_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415a:	490d      	ldr	r1, [pc, #52]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417e:	4904      	ldr	r1, [pc, #16]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004186:	7cbb      	ldrb	r3, [r7, #18]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000

08004194 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a2:	4b75      	ldr	r3, [pc, #468]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041ae:	4b72      	ldr	r3, [pc, #456]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0203 	and.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d10d      	bne.n	80041da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
       ||
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041c6:	4b6c      	ldr	r3, [pc, #432]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
       ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d047      	beq.n	800426a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	e044      	b.n	800426a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d018      	beq.n	800421a <RCCEx_PLLSAI1_Config+0x86>
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d825      	bhi.n	8004238 <RCCEx_PLLSAI1_Config+0xa4>
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d002      	beq.n	80041f6 <RCCEx_PLLSAI1_Config+0x62>
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d009      	beq.n	8004208 <RCCEx_PLLSAI1_Config+0x74>
 80041f4:	e020      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041f6:	4b60      	ldr	r3, [pc, #384]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11d      	bne.n	800423e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004206:	e01a      	b.n	800423e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004208:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d116      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e013      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800421a:	4b57      	ldr	r3, [pc, #348]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10f      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004226:	4b54      	ldr	r3, [pc, #336]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004236:	e006      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e004      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004246:	bf00      	nop
    }

    if(status == HAL_OK)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10d      	bne.n	800426a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800424e:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	430b      	orrs	r3, r1
 8004264:	4944      	ldr	r1, [pc, #272]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d17d      	bne.n	800436c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004270:	4b41      	ldr	r3, [pc, #260]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a40      	ldr	r2, [pc, #256]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800427a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427c:	f7fe fb1e 	bl	80028bc <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004282:	e009      	b.n	8004298 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004284:	f7fe fb1a 	bl	80028bc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	73fb      	strb	r3, [r7, #15]
        break;
 8004296:	e005      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004298:	4b37      	ldr	r3, [pc, #220]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ef      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d160      	bne.n	800436c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d111      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b0:	4b31      	ldr	r3, [pc, #196]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6892      	ldr	r2, [r2, #8]
 80042c0:	0211      	lsls	r1, r2, #8
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68d2      	ldr	r2, [r2, #12]
 80042c6:	0912      	lsrs	r2, r2, #4
 80042c8:	0452      	lsls	r2, r2, #17
 80042ca:	430a      	orrs	r2, r1
 80042cc:	492a      	ldr	r1, [pc, #168]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]
 80042d2:	e027      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d112      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
 80042ea:	0211      	lsls	r1, r2, #8
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6912      	ldr	r2, [r2, #16]
 80042f0:	0852      	lsrs	r2, r2, #1
 80042f2:	3a01      	subs	r2, #1
 80042f4:	0552      	lsls	r2, r2, #21
 80042f6:	430a      	orrs	r2, r1
 80042f8:	491f      	ldr	r1, [pc, #124]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	610b      	str	r3, [r1, #16]
 80042fe:	e011      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004308:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6892      	ldr	r2, [r2, #8]
 8004310:	0211      	lsls	r1, r2, #8
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6952      	ldr	r2, [r2, #20]
 8004316:	0852      	lsrs	r2, r2, #1
 8004318:	3a01      	subs	r2, #1
 800431a:	0652      	lsls	r2, r2, #25
 800431c:	430a      	orrs	r2, r1
 800431e:	4916      	ldr	r1, [pc, #88]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004324:	4b14      	ldr	r3, [pc, #80]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a13      	ldr	r2, [pc, #76]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800432e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fe fac4 	bl	80028bc <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004336:	e009      	b.n	800434c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004338:	f7fe fac0 	bl	80028bc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	73fb      	strb	r3, [r7, #15]
          break;
 800434a:	e005      	b.n	8004358 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ef      	beq.n	8004338 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	4904      	ldr	r1, [pc, #16]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000

0800437c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438a:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004396:	4b67      	ldr	r3, [pc, #412]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0203 	and.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d10d      	bne.n	80043c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
       ||
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043ae:	4b61      	ldr	r3, [pc, #388]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	091b      	lsrs	r3, r3, #4
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
       ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d047      	beq.n	8004452 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	e044      	b.n	8004452 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d018      	beq.n	8004402 <RCCEx_PLLSAI2_Config+0x86>
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d825      	bhi.n	8004420 <RCCEx_PLLSAI2_Config+0xa4>
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d002      	beq.n	80043de <RCCEx_PLLSAI2_Config+0x62>
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d009      	beq.n	80043f0 <RCCEx_PLLSAI2_Config+0x74>
 80043dc:	e020      	b.n	8004420 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043de:	4b55      	ldr	r3, [pc, #340]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d11d      	bne.n	8004426 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ee:	e01a      	b.n	8004426 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f0:	4b50      	ldr	r3, [pc, #320]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d116      	bne.n	800442a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004400:	e013      	b.n	800442a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004402:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10f      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800440e:	4b49      	ldr	r3, [pc, #292]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800441e:	e006      	b.n	800442e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e004      	b.n	8004430 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004426:	bf00      	nop
 8004428:	e002      	b.n	8004430 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442a:	bf00      	nop
 800442c:	e000      	b.n	8004430 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004436:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6819      	ldr	r1, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	430b      	orrs	r3, r1
 800444c:	4939      	ldr	r1, [pc, #228]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	4313      	orrs	r3, r2
 8004450:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d167      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004458:	4b36      	ldr	r3, [pc, #216]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a35      	ldr	r2, [pc, #212]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004464:	f7fe fa2a 	bl	80028bc <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800446a:	e009      	b.n	8004480 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800446c:	f7fe fa26 	bl	80028bc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d902      	bls.n	8004480 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	73fb      	strb	r3, [r7, #15]
        break;
 800447e:	e005      	b.n	800448c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004480:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ef      	bne.n	800446c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d14a      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d111      	bne.n	80044bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004498:	4b26      	ldr	r3, [pc, #152]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	0211      	lsls	r1, r2, #8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68d2      	ldr	r2, [r2, #12]
 80044ae:	0912      	lsrs	r2, r2, #4
 80044b0:	0452      	lsls	r2, r2, #17
 80044b2:	430a      	orrs	r2, r1
 80044b4:	491f      	ldr	r1, [pc, #124]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	614b      	str	r3, [r1, #20]
 80044ba:	e011      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6892      	ldr	r2, [r2, #8]
 80044cc:	0211      	lsls	r1, r2, #8
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6912      	ldr	r2, [r2, #16]
 80044d2:	0852      	lsrs	r2, r2, #1
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0652      	lsls	r2, r2, #25
 80044d8:	430a      	orrs	r2, r1
 80044da:	4916      	ldr	r1, [pc, #88]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe f9e6 	bl	80028bc <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044f2:	e009      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f4:	f7fe f9e2 	bl	80028bc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	73fb      	strb	r3, [r7, #15]
          break;
 8004506:	e005      	b.n	8004514 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ef      	beq.n	80044f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	4904      	ldr	r1, [pc, #16]	; (8004534 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000

08004538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e095      	b.n	8004676 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d108      	bne.n	8004564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455a:	d009      	beq.n	8004570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	61da      	str	r2, [r3, #28]
 8004562:	e005      	b.n	8004570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd feb2 	bl	80022f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b0:	d902      	bls.n	80045b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e002      	b.n	80045be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045c6:	d007      	beq.n	80045d8 <HAL_SPI_Init+0xa0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	ea42 0103 	orr.w	r1, r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	f003 0204 	and.w	r2, r3, #4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004654:	ea42 0103 	orr.w	r1, r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b088      	sub	sp, #32
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_SPI_Transmit+0x22>
 800469c:	2302      	movs	r3, #2
 800469e:	e15f      	b.n	8004960 <HAL_SPI_Transmit+0x2e2>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a8:	f7fe f908 	bl	80028bc <HAL_GetTick>
 80046ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046c2:	e148      	b.n	8004956 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_Transmit+0x52>
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046d4:	e13f      	b.n	8004956 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2203      	movs	r2, #3
 80046da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	88fa      	ldrh	r2, [r7, #6]
 80046ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004720:	d10f      	bne.n	8004742 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004740:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d007      	beq.n	8004760 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004768:	d94f      	bls.n	800480a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SPI_Transmit+0xfa>
 8004772:	8afb      	ldrh	r3, [r7, #22]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d142      	bne.n	80047fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800479c:	e02f      	b.n	80047fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d112      	bne.n	80047d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047d0:	e015      	b.n	80047fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d2:	f7fe f873 	bl	80028bc <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d803      	bhi.n	80047ea <HAL_SPI_Transmit+0x16c>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d102      	bne.n	80047f0 <HAL_SPI_Transmit+0x172>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80047fc:	e0ab      	b.n	8004956 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ca      	bne.n	800479e <HAL_SPI_Transmit+0x120>
 8004808:	e080      	b.n	800490c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_Transmit+0x19a>
 8004812:	8afb      	ldrh	r3, [r7, #22]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d174      	bne.n	8004902 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d912      	bls.n	8004848 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b02      	subs	r3, #2
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004846:	e05c      	b.n	8004902 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	7812      	ldrb	r2, [r2, #0]
 8004854:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800486e:	e048      	b.n	8004902 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d12b      	bne.n	80048d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d912      	bls.n	80048ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	881a      	ldrh	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b02      	subs	r3, #2
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ac:	e029      	b.n	8004902 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048d4:	e015      	b.n	8004902 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d6:	f7fd fff1 	bl	80028bc <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d803      	bhi.n	80048ee <HAL_SPI_Transmit+0x270>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d102      	bne.n	80048f4 <HAL_SPI_Transmit+0x276>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004900:	e029      	b.n	8004956 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1b1      	bne.n	8004870 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fb69 	bl	8004fe8 <SPI_EndRxTxTransaction>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e003      	b.n	8004956 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800495e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004976:	2301      	movs	r3, #1
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_SPI_TransmitReceive+0x26>
 800498a:	2302      	movs	r3, #2
 800498c:	e20a      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x43c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004996:	f7fd ff91 	bl	80028bc <HAL_GetTick>
 800499a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049a2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049aa:	887b      	ldrh	r3, [r7, #2]
 80049ac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049b2:	7efb      	ldrb	r3, [r7, #27]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d00e      	beq.n	80049d6 <HAL_SPI_TransmitReceive+0x6e>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d106      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x66>
 80049c8:	7efb      	ldrb	r3, [r7, #27]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d003      	beq.n	80049d6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049d4:	e1e0      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x80>
 80049e2:	887b      	ldrh	r3, [r7, #2]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d103      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049ee:	e1d3      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d003      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2205      	movs	r2, #5
 8004a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a46:	d802      	bhi.n	8004a4e <HAL_SPI_TransmitReceive+0xe6>
 8004a48:	8a3b      	ldrh	r3, [r7, #16]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d908      	bls.n	8004a60 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	e007      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d007      	beq.n	8004a8e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a96:	f240 8081 	bls.w	8004b9c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x140>
 8004aa2:	8a7b      	ldrh	r3, [r7, #18]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d16d      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	881a      	ldrh	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	1c9a      	adds	r2, r3, #2
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004acc:	e05a      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d11b      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x1ac>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x1ac>
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d113      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	881a      	ldrh	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d11c      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x1f4>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b5c:	f7fd feae 	bl	80028bc <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d80b      	bhi.n	8004b84 <HAL_SPI_TransmitReceive+0x21c>
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004b82:	e109      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d19f      	bne.n	8004ace <HAL_SPI_TransmitReceive+0x166>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d199      	bne.n	8004ace <HAL_SPI_TransmitReceive+0x166>
 8004b9a:	e0e3      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x244>
 8004ba4:	8a7b      	ldrh	r3, [r7, #18]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	f040 80cf 	bne.w	8004d4a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d912      	bls.n	8004bdc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	1c9a      	adds	r2, r3, #2
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b02      	subs	r3, #2
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bda:	e0b6      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c02:	e0a2      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d134      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x314>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02f      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x314>
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d12c      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d912      	bls.n	8004c52 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	881a      	ldrh	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	1c9a      	adds	r2, r3, #2
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b02      	subs	r3, #2
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c50:	e012      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d148      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x3b4>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d042      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d923      	bls.n	8004cea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	b292      	uxth	r2, r2
 8004cae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	1c9a      	adds	r2, r3, #2
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b02      	subs	r3, #2
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d81f      	bhi.n	8004d18 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	e016      	b.n	8004d18 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f103 020c 	add.w	r2, r3, #12
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d1c:	f7fd fdce 	bl	80028bc <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d803      	bhi.n	8004d34 <HAL_SPI_TransmitReceive+0x3cc>
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x3d2>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004d48:	e026      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f af57 	bne.w	8004c04 <HAL_SPI_TransmitReceive+0x29c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f47f af50 	bne.w	8004c04 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f93d 	bl	8004fe8 <SPI_EndRxTxTransaction>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e003      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3728      	adds	r7, #40	; 0x28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dbc:	f7fd fd7e 	bl	80028bc <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	4413      	add	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dcc:	f7fd fd76 	bl	80028bc <HAL_GetTick>
 8004dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dd2:	4b39      	ldr	r3, [pc, #228]	; (8004eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	015b      	lsls	r3, r3, #5
 8004dd8:	0d1b      	lsrs	r3, r3, #20
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	fb02 f303 	mul.w	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004de2:	e054      	b.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d050      	beq.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dec:	f7fd fd66 	bl	80028bc <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d902      	bls.n	8004e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d13d      	bne.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d111      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e24:	d004      	beq.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d107      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e48:	d10f      	bne.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e017      	b.n	8004eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4013      	ands	r3, r2
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	bf0c      	ite	eq
 8004e9e:	2301      	moveq	r3, #1
 8004ea0:	2300      	movne	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d19b      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000014 	.word	0x20000014

08004ebc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ece:	f7fd fcf5 	bl	80028bc <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ede:	f7fd fced 	bl	80028bc <HAL_GetTick>
 8004ee2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004eec:	4b3d      	ldr	r3, [pc, #244]	; (8004fe4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00da      	lsls	r2, r3, #3
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	0d1b      	lsrs	r3, r3, #20
 8004efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f04:	e060      	b.n	8004fc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f0c:	d107      	bne.n	8004f1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d050      	beq.n	8004fc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f26:	f7fd fcc9 	bl	80028bc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d902      	bls.n	8004f3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d13d      	bne.n	8004fb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f54:	d111      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5e:	d004      	beq.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f68:	d107      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f82:	d10f      	bne.n	8004fa4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e010      	b.n	8004fda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d196      	bne.n	8004f06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3728      	adds	r7, #40	; 0x28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000014 	.word	0x20000014

08004fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff5b 	bl	8004ebc <SPI_WaitFifoStateUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e027      	b.n	800506c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	2180      	movs	r1, #128	; 0x80
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff fec0 	bl	8004dac <SPI_WaitFlagStateUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e014      	b.n	800506c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff ff34 	bl	8004ebc <SPI_WaitFifoStateUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505e:	f043 0220 	orr.w	r2, r3, #32
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e000      	b.n	800506c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e049      	b.n	800511a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd f96c 	bl	8002378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 fd9c 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d001      	beq.n	800513c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e047      	b.n	80051cc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <HAL_TIM_Base_Start+0xb4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01d      	beq.n	800518a <HAL_TIM_Base_Start+0x66>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d018      	beq.n	800518a <HAL_TIM_Base_Start+0x66>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <HAL_TIM_Base_Start+0xb8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_TIM_Base_Start+0x66>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <HAL_TIM_Base_Start+0xbc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_TIM_Base_Start+0x66>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <HAL_TIM_Base_Start+0xc0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIM_Base_Start+0x66>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <HAL_TIM_Base_Start+0xc4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIM_Base_Start+0x66>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_TIM_Base_Start+0xc8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d115      	bne.n	80051b6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <HAL_TIM_Base_Start+0xcc>)
 8005192:	4013      	ands	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b06      	cmp	r3, #6
 800519a:	d015      	beq.n	80051c8 <HAL_TIM_Base_Start+0xa4>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a2:	d011      	beq.n	80051c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b4:	e008      	b.n	80051c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0201 	orr.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e000      	b.n	80051ca <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	00010007 	.word	0x00010007

080051f4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6a1a      	ldr	r2, [r3, #32]
 8005202:	f241 1311 	movw	r3, #4369	; 0x1111
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10f      	bne.n	800522c <HAL_TIM_Base_Stop+0x38>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	f240 4344 	movw	r3, #1092	; 0x444
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d107      	bne.n	800522c <HAL_TIM_Base_Stop+0x38>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e04f      	b.n	80052fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	; (8005308 <HAL_TIM_Base_Start_IT+0xc4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01d      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x76>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d018      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x76>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <HAL_TIM_Base_Start_IT+0xc8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x76>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <HAL_TIM_Base_Start_IT+0xcc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x76>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <HAL_TIM_Base_Start_IT+0xd0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x76>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <HAL_TIM_Base_Start_IT+0xd4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x76>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_TIM_Base_Start_IT+0xd8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d115      	bne.n	80052e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	4b17      	ldr	r3, [pc, #92]	; (8005320 <HAL_TIM_Base_Start_IT+0xdc>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b06      	cmp	r3, #6
 80052ca:	d015      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0xb4>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d2:	d011      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	e008      	b.n	80052f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e000      	b.n	80052fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000
 8005320:	00010007 	.word	0x00010007

08005324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e049      	b.n	80053ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fd f834 	bl	80023b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 fc44 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_TIM_PWM_Start+0x24>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e03c      	b.n	8005472 <HAL_TIM_PWM_Start+0x9e>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d109      	bne.n	8005412 <HAL_TIM_PWM_Start+0x3e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	bf14      	ite	ne
 800540a:	2301      	movne	r3, #1
 800540c:	2300      	moveq	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	e02f      	b.n	8005472 <HAL_TIM_PWM_Start+0x9e>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d109      	bne.n	800542c <HAL_TIM_PWM_Start+0x58>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e022      	b.n	8005472 <HAL_TIM_PWM_Start+0x9e>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d109      	bne.n	8005446 <HAL_TIM_PWM_Start+0x72>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	bf14      	ite	ne
 800543e:	2301      	movne	r3, #1
 8005440:	2300      	moveq	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	e015      	b.n	8005472 <HAL_TIM_PWM_Start+0x9e>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b10      	cmp	r3, #16
 800544a:	d109      	bne.n	8005460 <HAL_TIM_PWM_Start+0x8c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	bf14      	ite	ne
 8005458:	2301      	movne	r3, #1
 800545a:	2300      	moveq	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e008      	b.n	8005472 <HAL_TIM_PWM_Start+0x9e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e09c      	b.n	80055b4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <HAL_TIM_PWM_Start+0xb6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005488:	e023      	b.n	80054d2 <HAL_TIM_PWM_Start+0xfe>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d104      	bne.n	800549a <HAL_TIM_PWM_Start+0xc6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005498:	e01b      	b.n	80054d2 <HAL_TIM_PWM_Start+0xfe>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Start+0xd6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a8:	e013      	b.n	80054d2 <HAL_TIM_PWM_Start+0xfe>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Start+0xe6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054b8:	e00b      	b.n	80054d2 <HAL_TIM_PWM_Start+0xfe>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d104      	bne.n	80054ca <HAL_TIM_PWM_Start+0xf6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c8:	e003      	b.n	80054d2 <HAL_TIM_PWM_Start+0xfe>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 ff92 	bl	8006404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a35      	ldr	r2, [pc, #212]	; (80055bc <HAL_TIM_PWM_Start+0x1e8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_TIM_PWM_Start+0x13e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_TIM_PWM_Start+0x1ec>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIM_PWM_Start+0x13e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a32      	ldr	r2, [pc, #200]	; (80055c4 <HAL_TIM_PWM_Start+0x1f0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIM_PWM_Start+0x13e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a31      	ldr	r2, [pc, #196]	; (80055c8 <HAL_TIM_PWM_Start+0x1f4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIM_PWM_Start+0x13e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2f      	ldr	r2, [pc, #188]	; (80055cc <HAL_TIM_PWM_Start+0x1f8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_TIM_PWM_Start+0x142>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_TIM_PWM_Start+0x144>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a22      	ldr	r2, [pc, #136]	; (80055bc <HAL_TIM_PWM_Start+0x1e8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d01d      	beq.n	8005572 <HAL_TIM_PWM_Start+0x19e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d018      	beq.n	8005572 <HAL_TIM_PWM_Start+0x19e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <HAL_TIM_PWM_Start+0x1fc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d013      	beq.n	8005572 <HAL_TIM_PWM_Start+0x19e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <HAL_TIM_PWM_Start+0x200>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00e      	beq.n	8005572 <HAL_TIM_PWM_Start+0x19e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <HAL_TIM_PWM_Start+0x204>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_TIM_PWM_Start+0x19e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <HAL_TIM_PWM_Start+0x1ec>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_TIM_PWM_Start+0x19e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <HAL_TIM_PWM_Start+0x1f0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d115      	bne.n	800559e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	4b18      	ldr	r3, [pc, #96]	; (80055dc <HAL_TIM_PWM_Start+0x208>)
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d015      	beq.n	80055b0 <HAL_TIM_PWM_Start+0x1dc>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d011      	beq.n	80055b0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	e008      	b.n	80055b0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e000      	b.n	80055b2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40013400 	.word	0x40013400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800
 80055d0:	40000400 	.word	0x40000400
 80055d4:	40000800 	.word	0x40000800
 80055d8:	40000c00 	.word	0x40000c00
 80055dc:	00010007 	.word	0x00010007

080055e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d020      	beq.n	8005644 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01b      	beq.n	8005644 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0202 	mvn.w	r2, #2
 8005614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fac1 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fab3 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fac4 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d020      	beq.n	8005690 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01b      	beq.n	8005690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0204 	mvn.w	r2, #4
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa9b 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa8d 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fa9e 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d020      	beq.n	80056dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01b      	beq.n	80056dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0208 	mvn.w	r2, #8
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2204      	movs	r2, #4
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fa75 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa67 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fa78 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d020      	beq.n	8005728 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01b      	beq.n	8005728 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0210 	mvn.w	r2, #16
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2208      	movs	r2, #8
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa4f 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa41 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fa52 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00c      	beq.n	800574c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0201 	mvn.w	r2, #1
 8005744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fce2 	bl	8002110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00c      	beq.n	8005770 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 ff02 	bl	8006574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fefa 	bl	8006588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa11 	bl	8005bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0220 	mvn.w	r2, #32
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fec2 	bl	8006560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ff      	b.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b14      	cmp	r3, #20
 800580e:	f200 80f0 	bhi.w	80059f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800586d 	.word	0x0800586d
 800581c:	080059f3 	.word	0x080059f3
 8005820:	080059f3 	.word	0x080059f3
 8005824:	080059f3 	.word	0x080059f3
 8005828:	080058ad 	.word	0x080058ad
 800582c:	080059f3 	.word	0x080059f3
 8005830:	080059f3 	.word	0x080059f3
 8005834:	080059f3 	.word	0x080059f3
 8005838:	080058ef 	.word	0x080058ef
 800583c:	080059f3 	.word	0x080059f3
 8005840:	080059f3 	.word	0x080059f3
 8005844:	080059f3 	.word	0x080059f3
 8005848:	0800592f 	.word	0x0800592f
 800584c:	080059f3 	.word	0x080059f3
 8005850:	080059f3 	.word	0x080059f3
 8005854:	080059f3 	.word	0x080059f3
 8005858:	08005971 	.word	0x08005971
 800585c:	080059f3 	.word	0x080059f3
 8005860:	080059f3 	.word	0x080059f3
 8005864:	080059f3 	.word	0x080059f3
 8005868:	080059b1 	.word	0x080059b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fa56 	bl	8005d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0208 	orr.w	r2, r2, #8
 8005886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6999      	ldr	r1, [r3, #24]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	619a      	str	r2, [r3, #24]
      break;
 80058aa:	e0a5      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fac6 	bl	8005e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	021a      	lsls	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]
      break;
 80058ec:	e084      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fb2f 	bl	8005f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0208 	orr.w	r2, r2, #8
 8005908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0204 	bic.w	r2, r2, #4
 8005918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69d9      	ldr	r1, [r3, #28]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	61da      	str	r2, [r3, #28]
      break;
 800592c:	e064      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fb97 	bl	8006068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69d9      	ldr	r1, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	021a      	lsls	r2, r3, #8
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	61da      	str	r2, [r3, #28]
      break;
 800596e:	e043      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fbe0 	bl	800613c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059ae:	e023      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fc24 	bl	8006204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059f0:	e002      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
      break;
 80059f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop

08005a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_TIM_ConfigClockSource+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0b6      	b.n	8005b96 <HAL_TIM_ConfigClockSource+0x18a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a64:	d03e      	beq.n	8005ae4 <HAL_TIM_ConfigClockSource+0xd8>
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6a:	f200 8087 	bhi.w	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a72:	f000 8086 	beq.w	8005b82 <HAL_TIM_ConfigClockSource+0x176>
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d87f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a7c:	2b70      	cmp	r3, #112	; 0x70
 8005a7e:	d01a      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0xaa>
 8005a80:	2b70      	cmp	r3, #112	; 0x70
 8005a82:	d87b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d050      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x11e>
 8005a88:	2b60      	cmp	r3, #96	; 0x60
 8005a8a:	d877      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a8c:	2b50      	cmp	r3, #80	; 0x50
 8005a8e:	d03c      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xfe>
 8005a90:	2b50      	cmp	r3, #80	; 0x50
 8005a92:	d873      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d058      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x13e>
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d86f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d064      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005aa0:	2b30      	cmp	r3, #48	; 0x30
 8005aa2:	d86b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d060      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d867      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d05c      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d05a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005ab4:	e062      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac6:	f000 fc7d 	bl	80063c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	609a      	str	r2, [r3, #8]
      break;
 8005ae2:	e04f      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005af4:	f000 fc66 	bl	80063c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b06:	609a      	str	r2, [r3, #8]
      break;
 8005b08:	e03c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 fbda 	bl	80062d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2150      	movs	r1, #80	; 0x50
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fc33 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 8005b28:	e02c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 fbf9 	bl	800632e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2160      	movs	r1, #96	; 0x60
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fc23 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 8005b48:	e01c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 fbba 	bl	80062d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2140      	movs	r1, #64	; 0x40
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fc13 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 8005b68:	e00c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 fc0a 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 8005b7a:	e003      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a40      	ldr	r2, [pc, #256]	; (8005d04 <TIM_Base_SetConfig+0x114>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0e:	d00f      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3d      	ldr	r2, [pc, #244]	; (8005d08 <TIM_Base_SetConfig+0x118>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3c      	ldr	r2, [pc, #240]	; (8005d0c <TIM_Base_SetConfig+0x11c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3b      	ldr	r2, [pc, #236]	; (8005d10 <TIM_Base_SetConfig+0x120>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3a      	ldr	r2, [pc, #232]	; (8005d14 <TIM_Base_SetConfig+0x124>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2f      	ldr	r2, [pc, #188]	; (8005d04 <TIM_Base_SetConfig+0x114>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01f      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c50:	d01b      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2c      	ldr	r2, [pc, #176]	; (8005d08 <TIM_Base_SetConfig+0x118>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d017      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2b      	ldr	r2, [pc, #172]	; (8005d0c <TIM_Base_SetConfig+0x11c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <TIM_Base_SetConfig+0x120>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00f      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <TIM_Base_SetConfig+0x124>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <TIM_Base_SetConfig+0x128>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <TIM_Base_SetConfig+0x12c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <TIM_Base_SetConfig+0x130>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d108      	bne.n	8005c9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <TIM_Base_SetConfig+0x114>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <TIM_Base_SetConfig+0x124>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <TIM_Base_SetConfig+0x128>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <TIM_Base_SetConfig+0x12c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <TIM_Base_SetConfig+0x130>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800

08005d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f023 0201 	bic.w	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 0302 	bic.w	r3, r3, #2
 8005d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a2c      	ldr	r2, [pc, #176]	; (8005e30 <TIM_OC1_SetConfig+0x10c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_OC1_SetConfig+0x80>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a2b      	ldr	r2, [pc, #172]	; (8005e34 <TIM_OC1_SetConfig+0x110>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_OC1_SetConfig+0x80>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a2a      	ldr	r2, [pc, #168]	; (8005e38 <TIM_OC1_SetConfig+0x114>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_OC1_SetConfig+0x80>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a29      	ldr	r2, [pc, #164]	; (8005e3c <TIM_OC1_SetConfig+0x118>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_OC1_SetConfig+0x80>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a28      	ldr	r2, [pc, #160]	; (8005e40 <TIM_OC1_SetConfig+0x11c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10c      	bne.n	8005dbe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0308 	bic.w	r3, r3, #8
 8005daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f023 0304 	bic.w	r3, r3, #4
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <TIM_OC1_SetConfig+0x10c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00f      	beq.n	8005de6 <TIM_OC1_SetConfig+0xc2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1a      	ldr	r2, [pc, #104]	; (8005e34 <TIM_OC1_SetConfig+0x110>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_OC1_SetConfig+0xc2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a19      	ldr	r2, [pc, #100]	; (8005e38 <TIM_OC1_SetConfig+0x114>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_OC1_SetConfig+0xc2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <TIM_OC1_SetConfig+0x118>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC1_SetConfig+0xc2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <TIM_OC1_SetConfig+0x11c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d111      	bne.n	8005e0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f023 0210 	bic.w	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0320 	bic.w	r3, r3, #32
 8005e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <TIM_OC2_SetConfig+0x100>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_OC2_SetConfig+0x6c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a27      	ldr	r2, [pc, #156]	; (8005f48 <TIM_OC2_SetConfig+0x104>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d10d      	bne.n	8005ecc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <TIM_OC2_SetConfig+0x100>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00f      	beq.n	8005ef4 <TIM_OC2_SetConfig+0xb0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <TIM_OC2_SetConfig+0x104>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00b      	beq.n	8005ef4 <TIM_OC2_SetConfig+0xb0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1b      	ldr	r2, [pc, #108]	; (8005f4c <TIM_OC2_SetConfig+0x108>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d007      	beq.n	8005ef4 <TIM_OC2_SetConfig+0xb0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a1a      	ldr	r2, [pc, #104]	; (8005f50 <TIM_OC2_SetConfig+0x10c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_OC2_SetConfig+0xb0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <TIM_OC2_SetConfig+0x110>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d113      	bne.n	8005f1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800

08005f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a27      	ldr	r2, [pc, #156]	; (8006054 <TIM_OC3_SetConfig+0xfc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC3_SetConfig+0x6a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a26      	ldr	r2, [pc, #152]	; (8006058 <TIM_OC3_SetConfig+0x100>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d10d      	bne.n	8005fde <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <TIM_OC3_SetConfig+0xfc>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00f      	beq.n	8006006 <TIM_OC3_SetConfig+0xae>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <TIM_OC3_SetConfig+0x100>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00b      	beq.n	8006006 <TIM_OC3_SetConfig+0xae>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a1a      	ldr	r2, [pc, #104]	; (800605c <TIM_OC3_SetConfig+0x104>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d007      	beq.n	8006006 <TIM_OC3_SetConfig+0xae>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <TIM_OC3_SetConfig+0x108>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_OC3_SetConfig+0xae>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a18      	ldr	r2, [pc, #96]	; (8006064 <TIM_OC3_SetConfig+0x10c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d113      	bne.n	800602e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	621a      	str	r2, [r3, #32]
}
 8006048:	bf00      	nop
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40013400 	.word	0x40013400
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400
 8006064:	40014800 	.word	0x40014800

08006068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a18      	ldr	r2, [pc, #96]	; (8006128 <TIM_OC4_SetConfig+0xc0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00f      	beq.n	80060ec <TIM_OC4_SetConfig+0x84>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a17      	ldr	r2, [pc, #92]	; (800612c <TIM_OC4_SetConfig+0xc4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00b      	beq.n	80060ec <TIM_OC4_SetConfig+0x84>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a16      	ldr	r2, [pc, #88]	; (8006130 <TIM_OC4_SetConfig+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d007      	beq.n	80060ec <TIM_OC4_SetConfig+0x84>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a15      	ldr	r2, [pc, #84]	; (8006134 <TIM_OC4_SetConfig+0xcc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_OC4_SetConfig+0x84>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a14      	ldr	r2, [pc, #80]	; (8006138 <TIM_OC4_SetConfig+0xd0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d109      	bne.n	8006100 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	019b      	lsls	r3, r3, #6
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800

0800613c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <TIM_OC5_SetConfig+0xb4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00f      	beq.n	80061b6 <TIM_OC5_SetConfig+0x7a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <TIM_OC5_SetConfig+0xb8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00b      	beq.n	80061b6 <TIM_OC5_SetConfig+0x7a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <TIM_OC5_SetConfig+0xbc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <TIM_OC5_SetConfig+0x7a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a14      	ldr	r2, [pc, #80]	; (80061fc <TIM_OC5_SetConfig+0xc0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_OC5_SetConfig+0x7a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a13      	ldr	r2, [pc, #76]	; (8006200 <TIM_OC5_SetConfig+0xc4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d109      	bne.n	80061ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40012c00 	.word	0x40012c00
 80061f4:	40013400 	.word	0x40013400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800

08006204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800624a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	051b      	lsls	r3, r3, #20
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a18      	ldr	r2, [pc, #96]	; (80062bc <TIM_OC6_SetConfig+0xb8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00f      	beq.n	8006280 <TIM_OC6_SetConfig+0x7c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <TIM_OC6_SetConfig+0xbc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00b      	beq.n	8006280 <TIM_OC6_SetConfig+0x7c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a16      	ldr	r2, [pc, #88]	; (80062c4 <TIM_OC6_SetConfig+0xc0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d007      	beq.n	8006280 <TIM_OC6_SetConfig+0x7c>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <TIM_OC6_SetConfig+0xc4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC6_SetConfig+0x7c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a14      	ldr	r2, [pc, #80]	; (80062cc <TIM_OC6_SetConfig+0xc8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d109      	bne.n	8006294 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006286:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	029b      	lsls	r3, r3, #10
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	40013400 	.word	0x40013400
 80062c4:	40014000 	.word	0x40014000
 80062c8:	40014400 	.word	0x40014400
 80062cc:	40014800 	.word	0x40014800

080062d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 030a 	bic.w	r3, r3, #10
 800630c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632e:	b480      	push	{r7}
 8006330:	b087      	sub	sp, #28
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f023 0210 	bic.w	r2, r3, #16
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	031b      	lsls	r3, r3, #12
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800636a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f043 0307 	orr.w	r3, r3, #7
 80063b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	021a      	lsls	r2, r3, #8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2201      	movs	r2, #1
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	43db      	mvns	r3, r3
 8006426:	401a      	ands	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	fa01 f303 	lsl.w	r3, r1, r3
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006464:	2302      	movs	r3, #2
 8006466:	e068      	b.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2e      	ldr	r2, [pc, #184]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2d      	ldr	r2, [pc, #180]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1e      	ldr	r2, [pc, #120]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01d      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064da:	d018      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a13      	ldr	r2, [pc, #76]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a14      	ldr	r2, [pc, #80]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10c      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4313      	orrs	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40014000 	.word	0x40014000

08006560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e040      	b.n	8006630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb ff52 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2224      	movs	r2, #36	; 0x24
 80065c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0201 	bic.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fb6a 	bl	8006cbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8af 	bl	800674c <UART_SetConfig>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e01b      	b.n	8006630 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fbe9 	bl	8006e00 <UART_CheckIdleState>
 800662e:	4603      	mov	r3, r0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800664c:	2b20      	cmp	r3, #32
 800664e:	d178      	bne.n	8006742 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <HAL_UART_Transmit+0x24>
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e071      	b.n	8006744 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2221      	movs	r2, #33	; 0x21
 800666c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800666e:	f7fc f925 	bl	80028bc <HAL_GetTick>
 8006672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	88fa      	ldrh	r2, [r7, #6]
 8006680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d108      	bne.n	80066a0 <HAL_UART_Transmit+0x68>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	e003      	b.n	80066a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066a8:	e030      	b.n	800670c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fc4b 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e03c      	b.n	8006744 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	881a      	ldrh	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066dc:	b292      	uxth	r2, r2
 80066de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	3302      	adds	r3, #2
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e008      	b.n	80066fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	b292      	uxth	r2, r2
 80066f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	3301      	adds	r3, #1
 80066f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1c8      	bne.n	80066aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2200      	movs	r2, #0
 8006720:	2140      	movs	r1, #64	; 0x40
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fc14 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e005      	b.n	8006744 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006742:	2302      	movs	r3, #2
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006750:	b08a      	sub	sp, #40	; 0x28
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	431a      	orrs	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	431a      	orrs	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	4313      	orrs	r3, r2
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4ba4      	ldr	r3, [pc, #656]	; (8006a0c <UART_SetConfig+0x2c0>)
 800677c:	4013      	ands	r3, r2
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006784:	430b      	orrs	r3, r1
 8006786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a99      	ldr	r2, [pc, #612]	; (8006a10 <UART_SetConfig+0x2c4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b4:	4313      	orrs	r3, r2
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c8:	430a      	orrs	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a90      	ldr	r2, [pc, #576]	; (8006a14 <UART_SetConfig+0x2c8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d126      	bne.n	8006824 <UART_SetConfig+0xd8>
 80067d6:	4b90      	ldr	r3, [pc, #576]	; (8006a18 <UART_SetConfig+0x2cc>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d81b      	bhi.n	800681c <UART_SetConfig+0xd0>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0xa0>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	0800680d 	.word	0x0800680d
 80067f4:	08006805 	.word	0x08006805
 80067f8:	08006815 	.word	0x08006815
 80067fc:	2301      	movs	r3, #1
 80067fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006802:	e116      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006804:	2302      	movs	r3, #2
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680a:	e112      	b.n	8006a32 <UART_SetConfig+0x2e6>
 800680c:	2304      	movs	r3, #4
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006812:	e10e      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006814:	2308      	movs	r3, #8
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681a:	e10a      	b.n	8006a32 <UART_SetConfig+0x2e6>
 800681c:	2310      	movs	r3, #16
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006822:	e106      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a7c      	ldr	r2, [pc, #496]	; (8006a1c <UART_SetConfig+0x2d0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d138      	bne.n	80068a0 <UART_SetConfig+0x154>
 800682e:	4b7a      	ldr	r3, [pc, #488]	; (8006a18 <UART_SetConfig+0x2cc>)
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006834:	f003 030c 	and.w	r3, r3, #12
 8006838:	2b0c      	cmp	r3, #12
 800683a:	d82d      	bhi.n	8006898 <UART_SetConfig+0x14c>
 800683c:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <UART_SetConfig+0xf8>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006879 	.word	0x08006879
 8006848:	08006899 	.word	0x08006899
 800684c:	08006899 	.word	0x08006899
 8006850:	08006899 	.word	0x08006899
 8006854:	08006889 	.word	0x08006889
 8006858:	08006899 	.word	0x08006899
 800685c:	08006899 	.word	0x08006899
 8006860:	08006899 	.word	0x08006899
 8006864:	08006881 	.word	0x08006881
 8006868:	08006899 	.word	0x08006899
 800686c:	08006899 	.word	0x08006899
 8006870:	08006899 	.word	0x08006899
 8006874:	08006891 	.word	0x08006891
 8006878:	2300      	movs	r3, #0
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e0d8      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006880:	2302      	movs	r3, #2
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006886:	e0d4      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006888:	2304      	movs	r3, #4
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688e:	e0d0      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006890:	2308      	movs	r3, #8
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006896:	e0cc      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006898:	2310      	movs	r3, #16
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689e:	e0c8      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a5e      	ldr	r2, [pc, #376]	; (8006a20 <UART_SetConfig+0x2d4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d125      	bne.n	80068f6 <UART_SetConfig+0x1aa>
 80068aa:	4b5b      	ldr	r3, [pc, #364]	; (8006a18 <UART_SetConfig+0x2cc>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068b4:	2b30      	cmp	r3, #48	; 0x30
 80068b6:	d016      	beq.n	80068e6 <UART_SetConfig+0x19a>
 80068b8:	2b30      	cmp	r3, #48	; 0x30
 80068ba:	d818      	bhi.n	80068ee <UART_SetConfig+0x1a2>
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d00a      	beq.n	80068d6 <UART_SetConfig+0x18a>
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d814      	bhi.n	80068ee <UART_SetConfig+0x1a2>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <UART_SetConfig+0x182>
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d008      	beq.n	80068de <UART_SetConfig+0x192>
 80068cc:	e00f      	b.n	80068ee <UART_SetConfig+0x1a2>
 80068ce:	2300      	movs	r3, #0
 80068d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d4:	e0ad      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80068d6:	2302      	movs	r3, #2
 80068d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068dc:	e0a9      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80068de:	2304      	movs	r3, #4
 80068e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e4:	e0a5      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80068e6:	2308      	movs	r3, #8
 80068e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ec:	e0a1      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80068ee:	2310      	movs	r3, #16
 80068f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f4:	e09d      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a4a      	ldr	r2, [pc, #296]	; (8006a24 <UART_SetConfig+0x2d8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d125      	bne.n	800694c <UART_SetConfig+0x200>
 8006900:	4b45      	ldr	r3, [pc, #276]	; (8006a18 <UART_SetConfig+0x2cc>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800690a:	2bc0      	cmp	r3, #192	; 0xc0
 800690c:	d016      	beq.n	800693c <UART_SetConfig+0x1f0>
 800690e:	2bc0      	cmp	r3, #192	; 0xc0
 8006910:	d818      	bhi.n	8006944 <UART_SetConfig+0x1f8>
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d00a      	beq.n	800692c <UART_SetConfig+0x1e0>
 8006916:	2b80      	cmp	r3, #128	; 0x80
 8006918:	d814      	bhi.n	8006944 <UART_SetConfig+0x1f8>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <UART_SetConfig+0x1d8>
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d008      	beq.n	8006934 <UART_SetConfig+0x1e8>
 8006922:	e00f      	b.n	8006944 <UART_SetConfig+0x1f8>
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e082      	b.n	8006a32 <UART_SetConfig+0x2e6>
 800692c:	2302      	movs	r3, #2
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006932:	e07e      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006934:	2304      	movs	r3, #4
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693a:	e07a      	b.n	8006a32 <UART_SetConfig+0x2e6>
 800693c:	2308      	movs	r3, #8
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006942:	e076      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006944:	2310      	movs	r3, #16
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694a:	e072      	b.n	8006a32 <UART_SetConfig+0x2e6>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a35      	ldr	r2, [pc, #212]	; (8006a28 <UART_SetConfig+0x2dc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d12a      	bne.n	80069ac <UART_SetConfig+0x260>
 8006956:	4b30      	ldr	r3, [pc, #192]	; (8006a18 <UART_SetConfig+0x2cc>)
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006964:	d01a      	beq.n	800699c <UART_SetConfig+0x250>
 8006966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696a:	d81b      	bhi.n	80069a4 <UART_SetConfig+0x258>
 800696c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006970:	d00c      	beq.n	800698c <UART_SetConfig+0x240>
 8006972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006976:	d815      	bhi.n	80069a4 <UART_SetConfig+0x258>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <UART_SetConfig+0x238>
 800697c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006980:	d008      	beq.n	8006994 <UART_SetConfig+0x248>
 8006982:	e00f      	b.n	80069a4 <UART_SetConfig+0x258>
 8006984:	2300      	movs	r3, #0
 8006986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698a:	e052      	b.n	8006a32 <UART_SetConfig+0x2e6>
 800698c:	2302      	movs	r3, #2
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006992:	e04e      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006994:	2304      	movs	r3, #4
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699a:	e04a      	b.n	8006a32 <UART_SetConfig+0x2e6>
 800699c:	2308      	movs	r3, #8
 800699e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a2:	e046      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80069a4:	2310      	movs	r3, #16
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069aa:	e042      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <UART_SetConfig+0x2c4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d13a      	bne.n	8006a2c <UART_SetConfig+0x2e0>
 80069b6:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <UART_SetConfig+0x2cc>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c4:	d01a      	beq.n	80069fc <UART_SetConfig+0x2b0>
 80069c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069ca:	d81b      	bhi.n	8006a04 <UART_SetConfig+0x2b8>
 80069cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d0:	d00c      	beq.n	80069ec <UART_SetConfig+0x2a0>
 80069d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d6:	d815      	bhi.n	8006a04 <UART_SetConfig+0x2b8>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <UART_SetConfig+0x298>
 80069dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e0:	d008      	beq.n	80069f4 <UART_SetConfig+0x2a8>
 80069e2:	e00f      	b.n	8006a04 <UART_SetConfig+0x2b8>
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e022      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80069ec:	2302      	movs	r3, #2
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e01e      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80069f4:	2304      	movs	r3, #4
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e01a      	b.n	8006a32 <UART_SetConfig+0x2e6>
 80069fc:	2308      	movs	r3, #8
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a02:	e016      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0a:	e012      	b.n	8006a32 <UART_SetConfig+0x2e6>
 8006a0c:	efff69f3 	.word	0xefff69f3
 8006a10:	40008000 	.word	0x40008000
 8006a14:	40013800 	.word	0x40013800
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	40004400 	.word	0x40004400
 8006a20:	40004800 	.word	0x40004800
 8006a24:	40004c00 	.word	0x40004c00
 8006a28:	40005000 	.word	0x40005000
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a9f      	ldr	r2, [pc, #636]	; (8006cb4 <UART_SetConfig+0x568>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d17a      	bne.n	8006b32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d824      	bhi.n	8006a8e <UART_SetConfig+0x342>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <UART_SetConfig+0x300>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a8f 	.word	0x08006a8f
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a8f 	.word	0x08006a8f
 8006a5c:	08006a7f 	.word	0x08006a7f
 8006a60:	08006a8f 	.word	0x08006a8f
 8006a64:	08006a8f 	.word	0x08006a8f
 8006a68:	08006a8f 	.word	0x08006a8f
 8006a6c:	08006a87 	.word	0x08006a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fc ffe8 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8006a74:	61f8      	str	r0, [r7, #28]
        break;
 8006a76:	e010      	b.n	8006a9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a78:	4b8f      	ldr	r3, [pc, #572]	; (8006cb8 <UART_SetConfig+0x56c>)
 8006a7a:	61fb      	str	r3, [r7, #28]
        break;
 8006a7c:	e00d      	b.n	8006a9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7e:	f7fc ff49 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 8006a82:	61f8      	str	r0, [r7, #28]
        break;
 8006a84:	e009      	b.n	8006a9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8a:	61fb      	str	r3, [r7, #28]
        break;
 8006a8c:	e005      	b.n	8006a9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80fb 	beq.w	8006c98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d305      	bcc.n	8006abe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d903      	bls.n	8006ac6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ac4:	e0e8      	b.n	8006c98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	461c      	mov	r4, r3
 8006acc:	4615      	mov	r5, r2
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	022b      	lsls	r3, r5, #8
 8006ad8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006adc:	0222      	lsls	r2, r4, #8
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	6849      	ldr	r1, [r1, #4]
 8006ae2:	0849      	lsrs	r1, r1, #1
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	4688      	mov	r8, r1
 8006ae8:	4681      	mov	r9, r0
 8006aea:	eb12 0a08 	adds.w	sl, r2, r8
 8006aee:	eb43 0b09 	adc.w	fp, r3, r9
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b00:	4650      	mov	r0, sl
 8006b02:	4659      	mov	r1, fp
 8006b04:	f7fa f8aa 	bl	8000c5c <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b16:	d308      	bcc.n	8006b2a <UART_SetConfig+0x3de>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b1e:	d204      	bcs.n	8006b2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	60da      	str	r2, [r3, #12]
 8006b28:	e0b6      	b.n	8006c98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b30:	e0b2      	b.n	8006c98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3a:	d15e      	bne.n	8006bfa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d828      	bhi.n	8006b96 <UART_SetConfig+0x44a>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0x400>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	08006b97 	.word	0x08006b97
 8006b5c:	08006b87 	.word	0x08006b87
 8006b60:	08006b97 	.word	0x08006b97
 8006b64:	08006b97 	.word	0x08006b97
 8006b68:	08006b97 	.word	0x08006b97
 8006b6c:	08006b8f 	.word	0x08006b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b70:	f7fc ff68 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8006b74:	61f8      	str	r0, [r7, #28]
        break;
 8006b76:	e014      	b.n	8006ba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b78:	f7fc ff7a 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 8006b7c:	61f8      	str	r0, [r7, #28]
        break;
 8006b7e:	e010      	b.n	8006ba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b80:	4b4d      	ldr	r3, [pc, #308]	; (8006cb8 <UART_SetConfig+0x56c>)
 8006b82:	61fb      	str	r3, [r7, #28]
        break;
 8006b84:	e00d      	b.n	8006ba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b86:	f7fc fec5 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 8006b8a:	61f8      	str	r0, [r7, #28]
        break;
 8006b8c:	e009      	b.n	8006ba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	61fb      	str	r3, [r7, #28]
        break;
 8006b94:	e005      	b.n	8006ba2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d077      	beq.n	8006c98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	005a      	lsls	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	441a      	add	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b0f      	cmp	r3, #15
 8006bc2:	d916      	bls.n	8006bf2 <UART_SetConfig+0x4a6>
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bca:	d212      	bcs.n	8006bf2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f023 030f 	bic.w	r3, r3, #15
 8006bd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	8afb      	ldrh	r3, [r7, #22]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	8afa      	ldrh	r2, [r7, #22]
 8006bee:	60da      	str	r2, [r3, #12]
 8006bf0:	e052      	b.n	8006c98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bf8:	e04e      	b.n	8006c98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d827      	bhi.n	8006c52 <UART_SetConfig+0x506>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <UART_SetConfig+0x4bc>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c2d 	.word	0x08006c2d
 8006c0c:	08006c35 	.word	0x08006c35
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	08006c53 	.word	0x08006c53
 8006c18:	08006c43 	.word	0x08006c43
 8006c1c:	08006c53 	.word	0x08006c53
 8006c20:	08006c53 	.word	0x08006c53
 8006c24:	08006c53 	.word	0x08006c53
 8006c28:	08006c4b 	.word	0x08006c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c2c:	f7fc ff0a 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8006c30:	61f8      	str	r0, [r7, #28]
        break;
 8006c32:	e014      	b.n	8006c5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c34:	f7fc ff1c 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 8006c38:	61f8      	str	r0, [r7, #28]
        break;
 8006c3a:	e010      	b.n	8006c5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <UART_SetConfig+0x56c>)
 8006c3e:	61fb      	str	r3, [r7, #28]
        break;
 8006c40:	e00d      	b.n	8006c5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c42:	f7fc fe67 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 8006c46:	61f8      	str	r0, [r7, #28]
        break;
 8006c48:	e009      	b.n	8006c5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4e:	61fb      	str	r3, [r7, #28]
        break;
 8006c50:	e005      	b.n	8006c5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d019      	beq.n	8006c98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	085a      	lsrs	r2, r3, #1
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d909      	bls.n	8006c92 <UART_SetConfig+0x546>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d205      	bcs.n	8006c92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60da      	str	r2, [r3, #12]
 8006c90:	e002      	b.n	8006c98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ca4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3728      	adds	r7, #40	; 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40008000 	.word	0x40008000
 8006cb8:	00f42400 	.word	0x00f42400

08006cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	f003 0310 	and.w	r3, r3, #16
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dba:	d10a      	bne.n	8006dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b098      	sub	sp, #96	; 0x60
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e10:	f7fb fd54 	bl	80028bc <HAL_GetTick>
 8006e14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d12e      	bne.n	8006e82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f88c 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d021      	beq.n	8006e82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e52:	653b      	str	r3, [r7, #80]	; 0x50
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e6      	bne.n	8006e3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e062      	b.n	8006f48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d149      	bne.n	8006f24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f856 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d03c      	beq.n	8006f24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e6      	bne.n	8006eaa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0301 	bic.w	r3, r3, #1
 8006ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006efc:	61fa      	str	r2, [r7, #28]
 8006efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	69b9      	ldr	r1, [r7, #24]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e5      	bne.n	8006edc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e011      	b.n	8006f48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3758      	adds	r7, #88	; 0x58
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f60:	e049      	b.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d045      	beq.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6a:	f7fb fca7 	bl	80028bc <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d302      	bcc.n	8006f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e048      	b.n	8007016 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d031      	beq.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d110      	bne.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f838 	bl	800701e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e029      	b.n	8007016 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd0:	d111      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f81e 	bl	800701e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e00f      	b.n	8007016 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4013      	ands	r3, r2
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	bf0c      	ite	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	2300      	movne	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	429a      	cmp	r2, r3
 8007012:	d0a6      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800701e:	b480      	push	{r7}
 8007020:	b095      	sub	sp, #84	; 0x54
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007044:	643b      	str	r3, [r7, #64]	; 0x40
 8007046:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800704a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	61fb      	str	r3, [r7, #28]
   return(result);
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007078:	62fa      	str	r2, [r7, #44]	; 0x2c
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007090:	2b01      	cmp	r3, #1
 8007092:	d118      	bne.n	80070c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f023 0310 	bic.w	r3, r3, #16
 80070a8:	647b      	str	r3, [r7, #68]	; 0x44
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6979      	ldr	r1, [r7, #20]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	613b      	str	r3, [r7, #16]
   return(result);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e6      	bne.n	8007094 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070da:	bf00      	nop
 80070dc:	3754      	adds	r7, #84	; 0x54
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070ec:	4904      	ldr	r1, [pc, #16]	; (8007100 <MX_FATFS_Init+0x18>)
 80070ee:	4805      	ldr	r0, [pc, #20]	; (8007104 <MX_FATFS_Init+0x1c>)
 80070f0:	f002 ffa4 	bl	800a03c <FATFS_LinkDriver>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <MX_FATFS_Init+0x20>)
 80070fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070fc:	bf00      	nop
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	2000098c 	.word	0x2000098c
 8007104:	20000020 	.word	0x20000020
 8007108:	20000988 	.word	0x20000988

0800710c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007110:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007112:	4618      	mov	r0, r3
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 f9d3 	bl	80074d4 <USER_SPI_initialize>
 800712e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv); //ADD THIS LINE
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fab1 	bl	80076ac <USER_SPI_status>
 800714a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8007164:	7bf8      	ldrb	r0, [r7, #15]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	f000 fab4 	bl	80076d8 <USER_SPI_read>
 8007170:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800718a:	7bf8      	ldrb	r0, [r7, #15]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	f000 fb07 	bl	80077a4 <USER_SPI_write>
 8007196:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	603a      	str	r2, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
 80071ac:	460b      	mov	r3, r1
 80071ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80071b0:	79b9      	ldrb	r1, [r7, #6]
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fb70 	bl	800789c <USER_SPI_ioctl>
 80071bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80071d0:	f7fb fb74 	bl	80028bc <HAL_GetTick>
 80071d4:	4603      	mov	r3, r0
 80071d6:	4a04      	ldr	r2, [pc, #16]	; (80071e8 <SPI_Timer_On+0x20>)
 80071d8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80071da:	4a04      	ldr	r2, [pc, #16]	; (80071ec <SPI_Timer_On+0x24>)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6013      	str	r3, [r2, #0]
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000994 	.word	0x20000994
 80071ec:	20000998 	.word	0x20000998

080071f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80071f4:	f7fb fb62 	bl	80028bc <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	4b06      	ldr	r3, [pc, #24]	; (8007214 <SPI_Timer_Status+0x24>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	1ad2      	subs	r2, r2, r3
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <SPI_Timer_Status+0x28>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	bf34      	ite	cc
 8007208:	2301      	movcc	r3, #1
 800720a:	2300      	movcs	r3, #0
 800720c:	b2db      	uxtb	r3, r3
}
 800720e:	4618      	mov	r0, r3
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000994 	.word	0x20000994
 8007218:	20000998 	.word	0x20000998

0800721c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af02      	add	r7, sp, #8
 8007222:	4603      	mov	r3, r0
 8007224:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007226:	f107 020f 	add.w	r2, r7, #15
 800722a:	1df9      	adds	r1, r7, #7
 800722c:	2332      	movs	r3, #50	; 0x32
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2301      	movs	r3, #1
 8007232:	4804      	ldr	r0, [pc, #16]	; (8007244 <xchg_spi+0x28>)
 8007234:	f7fd fb98 	bl	8004968 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000230 	.word	0x20000230

08007248 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	e00a      	b.n	800726e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	18d4      	adds	r4, r2, r3
 800725e:	20ff      	movs	r0, #255	; 0xff
 8007260:	f7ff ffdc 	bl	800721c <xchg_spi>
 8007264:	4603      	mov	r3, r0
 8007266:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d3f0      	bcc.n	8007258 <rcvr_spi_multi+0x10>
	}
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bd90      	pop	{r4, r7, pc}

08007280 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	b29a      	uxth	r2, r3
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	4803      	ldr	r0, [pc, #12]	; (80072a4 <xmit_spi_multi+0x24>)
 8007296:	f7fd f9f2 	bl	800467e <HAL_SPI_Transmit>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000230 	.word	0x20000230

080072a8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80072b0:	f7fb fb04 	bl	80028bc <HAL_GetTick>
 80072b4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80072ba:	20ff      	movs	r0, #255	; 0xff
 80072bc:	f7ff ffae 	bl	800721c <xchg_spi>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	d007      	beq.n	80072da <wait_ready+0x32>
 80072ca:	f7fb faf7 	bl	80028bc <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d8ef      	bhi.n	80072ba <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	2bff      	cmp	r3, #255	; 0xff
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80072f2:	2201      	movs	r2, #1
 80072f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072fc:	f7fb fdb2 	bl	8002e64 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007300:	20ff      	movs	r0, #255	; 0xff
 8007302:	f7ff ff8b 	bl	800721c <xchg_spi>

}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}

0800730a <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800730a:	b580      	push	{r7, lr}
 800730c:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800730e:	2200      	movs	r2, #0
 8007310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007318:	f7fb fda4 	bl	8002e64 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800731c:	20ff      	movs	r0, #255	; 0xff
 800731e:	f7ff ff7d 	bl	800721c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007326:	f7ff ffbf 	bl	80072a8 <wait_ready>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <spiselect+0x2a>
 8007330:	2301      	movs	r3, #1
 8007332:	e002      	b.n	800733a <spiselect+0x30>

	despiselect();
 8007334:	f7ff ffdb 	bl	80072ee <despiselect>
	return 0;	/* Timeout */
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	bd80      	pop	{r7, pc}

0800733e <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007348:	20c8      	movs	r0, #200	; 0xc8
 800734a:	f7ff ff3d 	bl	80071c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800734e:	20ff      	movs	r0, #255	; 0xff
 8007350:	f7ff ff64 	bl	800721c <xchg_spi>
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	2bff      	cmp	r3, #255	; 0xff
 800735c:	d104      	bne.n	8007368 <rcvr_datablock+0x2a>
 800735e:	f7ff ff47 	bl	80071f0 <SPI_Timer_Status>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f2      	bne.n	800734e <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2bfe      	cmp	r3, #254	; 0xfe
 800736c:	d001      	beq.n	8007372 <rcvr_datablock+0x34>
 800736e:	2300      	movs	r3, #0
 8007370:	e00a      	b.n	8007388 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff ff67 	bl	8007248 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800737a:	20ff      	movs	r0, #255	; 0xff
 800737c:	f7ff ff4e 	bl	800721c <xchg_spi>
 8007380:	20ff      	movs	r0, #255	; 0xff
 8007382:	f7ff ff4b 	bl	800721c <xchg_spi>

	return 1;						/* Function succeeded */
 8007386:	2301      	movs	r3, #1
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800739c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073a0:	f7ff ff82 	bl	80072a8 <wait_ready>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <xmit_datablock+0x1e>
 80073aa:	2300      	movs	r3, #0
 80073ac:	e01e      	b.n	80073ec <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff ff33 	bl	800721c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	2bfd      	cmp	r3, #253	; 0xfd
 80073ba:	d016      	beq.n	80073ea <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80073bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff ff5d 	bl	8007280 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80073c6:	20ff      	movs	r0, #255	; 0xff
 80073c8:	f7ff ff28 	bl	800721c <xchg_spi>
 80073cc:	20ff      	movs	r0, #255	; 0xff
 80073ce:	f7ff ff25 	bl	800721c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80073d2:	20ff      	movs	r0, #255	; 0xff
 80073d4:	f7ff ff22 	bl	800721c <xchg_spi>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	d001      	beq.n	80073ea <xmit_datablock+0x5a>
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <xmit_datablock+0x5c>
	}
	return 1;
 80073ea:	2301      	movs	r3, #1
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007404:	2b00      	cmp	r3, #0
 8007406:	da0e      	bge.n	8007426 <send_cmd+0x32>
		cmd &= 0x7F;
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740e:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007410:	2100      	movs	r1, #0
 8007412:	2037      	movs	r0, #55	; 0x37
 8007414:	f7ff ffee 	bl	80073f4 <send_cmd>
 8007418:	4603      	mov	r3, r0
 800741a:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d901      	bls.n	8007426 <send_cmd+0x32>
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	e051      	b.n	80074ca <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	2b0c      	cmp	r3, #12
 800742a:	d008      	beq.n	800743e <send_cmd+0x4a>
		despiselect();
 800742c:	f7ff ff5f 	bl	80072ee <despiselect>
		if (!spiselect()) return 0xFF;
 8007430:	f7ff ff6b 	bl	800730a <spiselect>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <send_cmd+0x4a>
 800743a:	23ff      	movs	r3, #255	; 0xff
 800743c:	e045      	b.n	80074ca <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fee8 	bl	800721c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	0e1b      	lsrs	r3, r3, #24
 8007450:	b2db      	uxtb	r3, r3
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fee2 	bl	800721c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fedc 	bl	800721c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	b2db      	uxtb	r3, r3
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fed6 	bl	800721c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fed1 	bl	800721c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <send_cmd+0x94>
 8007484:	2395      	movs	r3, #149	; 0x95
 8007486:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	2b08      	cmp	r3, #8
 800748c:	d101      	bne.n	8007492 <send_cmd+0x9e>
 800748e:	2387      	movs	r3, #135	; 0x87
 8007490:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fec1 	bl	800721c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	2b0c      	cmp	r3, #12
 800749e:	d102      	bne.n	80074a6 <send_cmd+0xb2>
 80074a0:	20ff      	movs	r0, #255	; 0xff
 80074a2:	f7ff febb 	bl	800721c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80074a6:	230a      	movs	r3, #10
 80074a8:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80074aa:	20ff      	movs	r0, #255	; 0xff
 80074ac:	f7ff feb6 	bl	800721c <xchg_spi>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80074b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da05      	bge.n	80074c8 <send_cmd+0xd4>
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	3b01      	subs	r3, #1
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1f0      	bne.n	80074aa <send_cmd+0xb6>

	return res;							/* Return received response */
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <USER_SPI_initialize+0x14>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0d6      	b.n	8007696 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80074e8:	4b6d      	ldr	r3, [pc, #436]	; (80076a0 <USER_SPI_initialize+0x1cc>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <USER_SPI_initialize+0x2a>
 80074f6:	4b6a      	ldr	r3, [pc, #424]	; (80076a0 <USER_SPI_initialize+0x1cc>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	e0cb      	b.n	8007696 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80074fe:	4b69      	ldr	r3, [pc, #420]	; (80076a4 <USER_SPI_initialize+0x1d0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007508:	4b66      	ldr	r3, [pc, #408]	; (80076a4 <USER_SPI_initialize+0x1d0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8007510:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007512:	230a      	movs	r3, #10
 8007514:	73fb      	strb	r3, [r7, #15]
 8007516:	e005      	b.n	8007524 <USER_SPI_initialize+0x50>
 8007518:	20ff      	movs	r0, #255	; 0xff
 800751a:	f7ff fe7f 	bl	800721c <xchg_spi>
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	3b01      	subs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f6      	bne.n	8007518 <USER_SPI_initialize+0x44>

	ty = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800752e:	2100      	movs	r1, #0
 8007530:	2000      	movs	r0, #0
 8007532:	f7ff ff5f 	bl	80073f4 <send_cmd>
 8007536:	4603      	mov	r3, r0
 8007538:	2b01      	cmp	r3, #1
 800753a:	f040 808b 	bne.w	8007654 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800753e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007542:	f7ff fe41 	bl	80071c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007546:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800754a:	2008      	movs	r0, #8
 800754c:	f7ff ff52 	bl	80073f4 <send_cmd>
 8007550:	4603      	mov	r3, r0
 8007552:	2b01      	cmp	r3, #1
 8007554:	d151      	bne.n	80075fa <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
 800755a:	e00d      	b.n	8007578 <USER_SPI_initialize+0xa4>
 800755c:	7bfc      	ldrb	r4, [r7, #15]
 800755e:	20ff      	movs	r0, #255	; 0xff
 8007560:	f7ff fe5c 	bl	800721c <xchg_spi>
 8007564:	4603      	mov	r3, r0
 8007566:	461a      	mov	r2, r3
 8007568:	f104 0310 	add.w	r3, r4, #16
 800756c:	443b      	add	r3, r7
 800756e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	3301      	adds	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d9ee      	bls.n	800755c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800757e:	7abb      	ldrb	r3, [r7, #10]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d167      	bne.n	8007654 <USER_SPI_initialize+0x180>
 8007584:	7afb      	ldrb	r3, [r7, #11]
 8007586:	2baa      	cmp	r3, #170	; 0xaa
 8007588:	d164      	bne.n	8007654 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800758a:	bf00      	nop
 800758c:	f7ff fe30 	bl	80071f0 <SPI_Timer_Status>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <USER_SPI_initialize+0xd2>
 8007596:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800759a:	20a9      	movs	r0, #169	; 0xa9
 800759c:	f7ff ff2a 	bl	80073f4 <send_cmd>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1f2      	bne.n	800758c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80075a6:	f7ff fe23 	bl	80071f0 <SPI_Timer_Status>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d051      	beq.n	8007654 <USER_SPI_initialize+0x180>
 80075b0:	2100      	movs	r1, #0
 80075b2:	203a      	movs	r0, #58	; 0x3a
 80075b4:	f7ff ff1e 	bl	80073f4 <send_cmd>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d14a      	bne.n	8007654 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
 80075c2:	e00d      	b.n	80075e0 <USER_SPI_initialize+0x10c>
 80075c4:	7bfc      	ldrb	r4, [r7, #15]
 80075c6:	20ff      	movs	r0, #255	; 0xff
 80075c8:	f7ff fe28 	bl	800721c <xchg_spi>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	f104 0310 	add.w	r3, r4, #16
 80075d4:	443b      	add	r3, r7
 80075d6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	3301      	adds	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d9ee      	bls.n	80075c4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80075e6:	7a3b      	ldrb	r3, [r7, #8]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <USER_SPI_initialize+0x120>
 80075f0:	230c      	movs	r3, #12
 80075f2:	e000      	b.n	80075f6 <USER_SPI_initialize+0x122>
 80075f4:	2304      	movs	r3, #4
 80075f6:	737b      	strb	r3, [r7, #13]
 80075f8:	e02c      	b.n	8007654 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80075fa:	2100      	movs	r1, #0
 80075fc:	20a9      	movs	r0, #169	; 0xa9
 80075fe:	f7ff fef9 	bl	80073f4 <send_cmd>
 8007602:	4603      	mov	r3, r0
 8007604:	2b01      	cmp	r3, #1
 8007606:	d804      	bhi.n	8007612 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007608:	2302      	movs	r3, #2
 800760a:	737b      	strb	r3, [r7, #13]
 800760c:	23a9      	movs	r3, #169	; 0xa9
 800760e:	73bb      	strb	r3, [r7, #14]
 8007610:	e003      	b.n	800761a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007612:	2301      	movs	r3, #1
 8007614:	737b      	strb	r3, [r7, #13]
 8007616:	2301      	movs	r3, #1
 8007618:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800761a:	bf00      	nop
 800761c:	f7ff fde8 	bl	80071f0 <SPI_Timer_Status>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <USER_SPI_initialize+0x162>
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2100      	movs	r1, #0
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fee2 	bl	80073f4 <send_cmd>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f2      	bne.n	800761c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007636:	f7ff fddb 	bl	80071f0 <SPI_Timer_Status>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <USER_SPI_initialize+0x17c>
 8007640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007644:	2010      	movs	r0, #16
 8007646:	f7ff fed5 	bl	80073f4 <send_cmd>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <USER_SPI_initialize+0x180>
				ty = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007654:	4a14      	ldr	r2, [pc, #80]	; (80076a8 <USER_SPI_initialize+0x1d4>)
 8007656:	7b7b      	ldrb	r3, [r7, #13]
 8007658:	7013      	strb	r3, [r2, #0]
	despiselect();
 800765a:	f7ff fe48 	bl	80072ee <despiselect>

	if (ty) {			/* OK */
 800765e:	7b7b      	ldrb	r3, [r7, #13]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d012      	beq.n	800768a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <USER_SPI_initialize+0x1d0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800766e:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <USER_SPI_initialize+0x1d0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0220 	orr.w	r2, r2, #32
 8007676:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <USER_SPI_initialize+0x1cc>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	b2da      	uxtb	r2, r3
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <USER_SPI_initialize+0x1cc>)
 8007686:	701a      	strb	r2, [r3, #0]
 8007688:	e002      	b.n	8007690 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <USER_SPI_initialize+0x1cc>)
 800768c:	2201      	movs	r2, #1
 800768e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007690:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <USER_SPI_initialize+0x1cc>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b2db      	uxtb	r3, r3
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000034 	.word	0x20000034
 80076a4:	20000230 	.word	0x20000230
 80076a8:	20000990 	.word	0x20000990

080076ac <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <USER_SPI_status+0x14>
 80076bc:	2301      	movs	r3, #1
 80076be:	e002      	b.n	80076c6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80076c0:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <USER_SPI_status+0x28>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	b2db      	uxtb	r3, r3
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	20000034 	.word	0x20000034

080076d8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <USER_SPI_read+0x1c>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USER_SPI_read+0x20>
 80076f4:	2304      	movs	r3, #4
 80076f6:	e04d      	b.n	8007794 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80076f8:	4b28      	ldr	r3, [pc, #160]	; (800779c <USER_SPI_read+0xc4>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <USER_SPI_read+0x32>
 8007706:	2303      	movs	r3, #3
 8007708:	e044      	b.n	8007794 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800770a:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <USER_SPI_read+0xc8>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <USER_SPI_read+0x44>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	025b      	lsls	r3, r3, #9
 800771a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d111      	bne.n	8007746 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	2011      	movs	r0, #17
 8007726:	f7ff fe65 	bl	80073f4 <send_cmd>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d129      	bne.n	8007784 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007734:	68b8      	ldr	r0, [r7, #8]
 8007736:	f7ff fe02 	bl	800733e <rcvr_datablock>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d021      	beq.n	8007784 <USER_SPI_read+0xac>
			count = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	e01e      	b.n	8007784 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	2012      	movs	r0, #18
 800774a:	f7ff fe53 	bl	80073f4 <send_cmd>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d117      	bne.n	8007784 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f7ff fdf0 	bl	800733e <rcvr_datablock>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <USER_SPI_read+0xa2>
				buff += 512;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800776a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	3b01      	subs	r3, #1
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1ed      	bne.n	8007754 <USER_SPI_read+0x7c>
 8007778:	e000      	b.n	800777c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800777a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800777c:	2100      	movs	r1, #0
 800777e:	200c      	movs	r0, #12
 8007780:	f7ff fe38 	bl	80073f4 <send_cmd>
		}
	}
	despiselect();
 8007784:	f7ff fdb3 	bl	80072ee <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	bf14      	ite	ne
 800778e:	2301      	movne	r3, #1
 8007790:	2300      	moveq	r3, #0
 8007792:	b2db      	uxtb	r3, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000034 	.word	0x20000034
 80077a0:	20000990 	.word	0x20000990

080077a4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USER_SPI_write+0x1c>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <USER_SPI_write+0x20>
 80077c0:	2304      	movs	r3, #4
 80077c2:	e063      	b.n	800788c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80077c4:	4b33      	ldr	r3, [pc, #204]	; (8007894 <USER_SPI_write+0xf0>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <USER_SPI_write+0x32>
 80077d2:	2303      	movs	r3, #3
 80077d4:	e05a      	b.n	800788c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80077d6:	4b2f      	ldr	r3, [pc, #188]	; (8007894 <USER_SPI_write+0xf0>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <USER_SPI_write+0x44>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e051      	b.n	800788c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80077e8:	4b2b      	ldr	r3, [pc, #172]	; (8007898 <USER_SPI_write+0xf4>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <USER_SPI_write+0x56>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	025b      	lsls	r3, r3, #9
 80077f8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d110      	bne.n	8007822 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	2018      	movs	r0, #24
 8007804:	f7ff fdf6 	bl	80073f4 <send_cmd>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d136      	bne.n	800787c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800780e:	21fe      	movs	r1, #254	; 0xfe
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f7ff fdbd 	bl	8007390 <xmit_datablock>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d02f      	beq.n	800787c <USER_SPI_write+0xd8>
			count = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	e02c      	b.n	800787c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007822:	4b1d      	ldr	r3, [pc, #116]	; (8007898 <USER_SPI_write+0xf4>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f003 0306 	and.w	r3, r3, #6
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <USER_SPI_write+0x92>
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	2097      	movs	r0, #151	; 0x97
 8007832:	f7ff fddf 	bl	80073f4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	2019      	movs	r0, #25
 800783a:	f7ff fddb 	bl	80073f4 <send_cmd>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11b      	bne.n	800787c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007844:	21fc      	movs	r1, #252	; 0xfc
 8007846:	68b8      	ldr	r0, [r7, #8]
 8007848:	f7ff fda2 	bl	8007390 <xmit_datablock>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <USER_SPI_write+0xc4>
				buff += 512;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007858:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	3b01      	subs	r3, #1
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1ee      	bne.n	8007844 <USER_SPI_write+0xa0>
 8007866:	e000      	b.n	800786a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007868:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800786a:	21fd      	movs	r1, #253	; 0xfd
 800786c:	2000      	movs	r0, #0
 800786e:	f7ff fd8f 	bl	8007390 <xmit_datablock>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <USER_SPI_write+0xd8>
 8007878:	2301      	movs	r3, #1
 800787a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800787c:	f7ff fd37 	bl	80072ee <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	20000034 	.word	0x20000034
 8007898:	20000990 	.word	0x20000990

0800789c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	; 0x30
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	603a      	str	r2, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
 80078a8:	460b      	mov	r3, r1
 80078aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <USER_SPI_ioctl+0x1a>
 80078b2:	2304      	movs	r3, #4
 80078b4:	e15a      	b.n	8007b6c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80078b6:	4baf      	ldr	r3, [pc, #700]	; (8007b74 <USER_SPI_ioctl+0x2d8>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <USER_SPI_ioctl+0x2c>
 80078c4:	2303      	movs	r3, #3
 80078c6:	e151      	b.n	8007b6c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80078ce:	79bb      	ldrb	r3, [r7, #6]
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	f200 8136 	bhi.w	8007b42 <USER_SPI_ioctl+0x2a6>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <USER_SPI_ioctl+0x40>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078f1 	.word	0x080078f1
 80078e0:	08007905 	.word	0x08007905
 80078e4:	08007b43 	.word	0x08007b43
 80078e8:	080079b1 	.word	0x080079b1
 80078ec:	08007aa7 	.word	0x08007aa7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80078f0:	f7ff fd0b 	bl	800730a <spiselect>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8127 	beq.w	8007b4a <USER_SPI_ioctl+0x2ae>
 80078fc:	2300      	movs	r3, #0
 80078fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007902:	e122      	b.n	8007b4a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007904:	2100      	movs	r1, #0
 8007906:	2009      	movs	r0, #9
 8007908:	f7ff fd74 	bl	80073f4 <send_cmd>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	f040 811d 	bne.w	8007b4e <USER_SPI_ioctl+0x2b2>
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	2110      	movs	r1, #16
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fd0f 	bl	800733e <rcvr_datablock>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8113 	beq.w	8007b4e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007928:	7b3b      	ldrb	r3, [r7, #12]
 800792a:	099b      	lsrs	r3, r3, #6
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	d111      	bne.n	8007956 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007932:	7d7b      	ldrb	r3, [r7, #21]
 8007934:	461a      	mov	r2, r3
 8007936:	7d3b      	ldrb	r3, [r7, #20]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	4413      	add	r3, r2
 800793c:	461a      	mov	r2, r3
 800793e:	7cfb      	ldrb	r3, [r7, #19]
 8007940:	041b      	lsls	r3, r3, #16
 8007942:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007946:	4413      	add	r3, r2
 8007948:	3301      	adds	r3, #1
 800794a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	029a      	lsls	r2, r3, #10
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e028      	b.n	80079a8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007956:	7c7b      	ldrb	r3, [r7, #17]
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	b2da      	uxtb	r2, r3
 800795e:	7dbb      	ldrb	r3, [r7, #22]
 8007960:	09db      	lsrs	r3, r3, #7
 8007962:	b2db      	uxtb	r3, r3
 8007964:	4413      	add	r3, r2
 8007966:	b2da      	uxtb	r2, r3
 8007968:	7d7b      	ldrb	r3, [r7, #21]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0306 	and.w	r3, r3, #6
 8007972:	b2db      	uxtb	r3, r3
 8007974:	4413      	add	r3, r2
 8007976:	b2db      	uxtb	r3, r3
 8007978:	3302      	adds	r3, #2
 800797a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800797e:	7d3b      	ldrb	r3, [r7, #20]
 8007980:	099b      	lsrs	r3, r3, #6
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	7cfb      	ldrb	r3, [r7, #19]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	441a      	add	r2, r3
 800798c:	7cbb      	ldrb	r3, [r7, #18]
 800798e:	029b      	lsls	r3, r3, #10
 8007990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007994:	4413      	add	r3, r2
 8007996:	3301      	adds	r3, #1
 8007998:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800799a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800799e:	3b09      	subs	r3, #9
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	409a      	lsls	r2, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80079ae:	e0ce      	b.n	8007b4e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80079b0:	4b71      	ldr	r3, [pc, #452]	; (8007b78 <USER_SPI_ioctl+0x2dc>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d031      	beq.n	8007a20 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80079bc:	2100      	movs	r1, #0
 80079be:	208d      	movs	r0, #141	; 0x8d
 80079c0:	f7ff fd18 	bl	80073f4 <send_cmd>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f040 80c3 	bne.w	8007b52 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80079cc:	20ff      	movs	r0, #255	; 0xff
 80079ce:	f7ff fc25 	bl	800721c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80079d2:	f107 030c 	add.w	r3, r7, #12
 80079d6:	2110      	movs	r1, #16
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fcb0 	bl	800733e <rcvr_datablock>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80b6 	beq.w	8007b52 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80079e6:	2330      	movs	r3, #48	; 0x30
 80079e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80079ec:	e007      	b.n	80079fe <USER_SPI_ioctl+0x162>
 80079ee:	20ff      	movs	r0, #255	; 0xff
 80079f0:	f7ff fc14 	bl	800721c <xchg_spi>
 80079f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079f8:	3b01      	subs	r3, #1
 80079fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80079fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f3      	bne.n	80079ee <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007a06:	7dbb      	ldrb	r3, [r7, #22]
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	2310      	movs	r3, #16
 8007a10:	fa03 f202 	lsl.w	r2, r3, r2
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007a1e:	e098      	b.n	8007b52 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007a20:	2100      	movs	r1, #0
 8007a22:	2009      	movs	r0, #9
 8007a24:	f7ff fce6 	bl	80073f4 <send_cmd>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f040 8091 	bne.w	8007b52 <USER_SPI_ioctl+0x2b6>
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	2110      	movs	r1, #16
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fc81 	bl	800733e <rcvr_datablock>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 8087 	beq.w	8007b52 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007a44:	4b4c      	ldr	r3, [pc, #304]	; (8007b78 <USER_SPI_ioctl+0x2dc>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d012      	beq.n	8007a76 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007a50:	7dbb      	ldrb	r3, [r7, #22]
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007a58:	7dfa      	ldrb	r2, [r7, #23]
 8007a5a:	09d2      	lsrs	r2, r2, #7
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	4413      	add	r3, r2
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	7e7b      	ldrb	r3, [r7, #25]
 8007a64:	099b      	lsrs	r3, r3, #6
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e013      	b.n	8007a9e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007a76:	7dbb      	ldrb	r3, [r7, #22]
 8007a78:	109b      	asrs	r3, r3, #2
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	3301      	adds	r3, #1
 8007a82:	7dfa      	ldrb	r2, [r7, #23]
 8007a84:	00d2      	lsls	r2, r2, #3
 8007a86:	f002 0218 	and.w	r2, r2, #24
 8007a8a:	7df9      	ldrb	r1, [r7, #23]
 8007a8c:	0949      	lsrs	r1, r1, #5
 8007a8e:	b2c9      	uxtb	r1, r1
 8007a90:	440a      	add	r2, r1
 8007a92:	3201      	adds	r2, #1
 8007a94:	fb02 f303 	mul.w	r3, r2, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007aa4:	e055      	b.n	8007b52 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007aa6:	4b34      	ldr	r3, [pc, #208]	; (8007b78 <USER_SPI_ioctl+0x2dc>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f003 0306 	and.w	r3, r3, #6
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d051      	beq.n	8007b56 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007ab2:	f107 020c 	add.w	r2, r7, #12
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	210b      	movs	r1, #11
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff feee 	bl	800789c <USER_SPI_ioctl>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d149      	bne.n	8007b5a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007ac6:	7b3b      	ldrb	r3, [r7, #12]
 8007ac8:	099b      	lsrs	r3, r3, #6
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <USER_SPI_ioctl+0x23e>
 8007ad0:	7dbb      	ldrb	r3, [r7, #22]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d041      	beq.n	8007b5e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007aea:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <USER_SPI_ioctl+0x2dc>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	025b      	lsls	r3, r3, #9
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	025b      	lsls	r3, r3, #9
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b04:	2020      	movs	r0, #32
 8007b06:	f7ff fc75 	bl	80073f4 <send_cmd>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d128      	bne.n	8007b62 <USER_SPI_ioctl+0x2c6>
 8007b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b12:	2021      	movs	r0, #33	; 0x21
 8007b14:	f7ff fc6e 	bl	80073f4 <send_cmd>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d121      	bne.n	8007b62 <USER_SPI_ioctl+0x2c6>
 8007b1e:	2100      	movs	r1, #0
 8007b20:	2026      	movs	r0, #38	; 0x26
 8007b22:	f7ff fc67 	bl	80073f4 <send_cmd>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11a      	bne.n	8007b62 <USER_SPI_ioctl+0x2c6>
 8007b2c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007b30:	f7ff fbba 	bl	80072a8 <wait_ready>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d013      	beq.n	8007b62 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007b40:	e00f      	b.n	8007b62 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007b42:	2304      	movs	r3, #4
 8007b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b48:	e00c      	b.n	8007b64 <USER_SPI_ioctl+0x2c8>
		break;
 8007b4a:	bf00      	nop
 8007b4c:	e00a      	b.n	8007b64 <USER_SPI_ioctl+0x2c8>
		break;
 8007b4e:	bf00      	nop
 8007b50:	e008      	b.n	8007b64 <USER_SPI_ioctl+0x2c8>
		break;
 8007b52:	bf00      	nop
 8007b54:	e006      	b.n	8007b64 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b56:	bf00      	nop
 8007b58:	e004      	b.n	8007b64 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b5a:	bf00      	nop
 8007b5c:	e002      	b.n	8007b64 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b5e:	bf00      	nop
 8007b60:	e000      	b.n	8007b64 <USER_SPI_ioctl+0x2c8>
		break;
 8007b62:	bf00      	nop
	}

	despiselect();
 8007b64:	f7ff fbc3 	bl	80072ee <despiselect>

	return res;
 8007b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3730      	adds	r7, #48	; 0x30
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000034 	.word	0x20000034
 8007b78:	20000990 	.word	0x20000990

08007b7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <disk_status+0x30>)
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	79fa      	ldrb	r2, [r7, #7]
 8007b94:	4905      	ldr	r1, [pc, #20]	; (8007bac <disk_status+0x30>)
 8007b96:	440a      	add	r2, r1
 8007b98:	7a12      	ldrb	r2, [r2, #8]
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4798      	blx	r3
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200009c4 	.word	0x200009c4

08007bb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	4a0d      	ldr	r2, [pc, #52]	; (8007bf8 <disk_initialize+0x48>)
 8007bc2:	5cd3      	ldrb	r3, [r2, r3]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d111      	bne.n	8007bec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	4a0b      	ldr	r2, [pc, #44]	; (8007bf8 <disk_initialize+0x48>)
 8007bcc:	2101      	movs	r1, #1
 8007bce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <disk_initialize+0x48>)
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	79fa      	ldrb	r2, [r7, #7]
 8007bde:	4906      	ldr	r1, [pc, #24]	; (8007bf8 <disk_initialize+0x48>)
 8007be0:	440a      	add	r2, r1
 8007be2:	7a12      	ldrb	r2, [r2, #8]
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	200009c4 	.word	0x200009c4

08007bfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	; (8007c38 <disk_read+0x3c>)
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	689c      	ldr	r4, [r3, #8]
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	4a07      	ldr	r2, [pc, #28]	; (8007c38 <disk_read+0x3c>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	7a18      	ldrb	r0, [r3, #8]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	47a0      	blx	r4
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd90      	pop	{r4, r7, pc}
 8007c36:	bf00      	nop
 8007c38:	200009c4 	.word	0x200009c4

08007c3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c3c:	b590      	push	{r4, r7, lr}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	4a0a      	ldr	r2, [pc, #40]	; (8007c78 <disk_write+0x3c>)
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68dc      	ldr	r4, [r3, #12]
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	4a07      	ldr	r2, [pc, #28]	; (8007c78 <disk_write+0x3c>)
 8007c5c:	4413      	add	r3, r2
 8007c5e:	7a18      	ldrb	r0, [r3, #8]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	47a0      	blx	r4
 8007c68:	4603      	mov	r3, r0
 8007c6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd90      	pop	{r4, r7, pc}
 8007c76:	bf00      	nop
 8007c78:	200009c4 	.word	0x200009c4

08007c7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	603a      	str	r2, [r7, #0]
 8007c86:	71fb      	strb	r3, [r7, #7]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	4a09      	ldr	r2, [pc, #36]	; (8007cb4 <disk_ioctl+0x38>)
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	79fa      	ldrb	r2, [r7, #7]
 8007c9a:	4906      	ldr	r1, [pc, #24]	; (8007cb4 <disk_ioctl+0x38>)
 8007c9c:	440a      	add	r2, r1
 8007c9e:	7a10      	ldrb	r0, [r2, #8]
 8007ca0:	79b9      	ldrb	r1, [r7, #6]
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	4798      	blx	r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  return res;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200009c4 	.word	0x200009c4

08007cb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007cc8:	89fb      	ldrh	r3, [r7, #14]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	b21a      	sxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	b21b      	sxth	r3, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007cda:	89fb      	ldrh	r3, [r7, #14]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3303      	adds	r3, #3
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	3202      	adds	r2, #2
 8007d00:	7812      	ldrb	r2, [r2, #0]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	7812      	ldrb	r2, [r2, #0]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d20:	68fb      	ldr	r3, [r7, #12]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	887a      	ldrh	r2, [r7, #2]
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	887b      	ldrh	r3, [r7, #2]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	887a      	ldrh	r2, [r7, #2]
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	701a      	strb	r2, [r3, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	b2d2      	uxtb	r2, r2
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	0a1b      	lsrs	r3, r3, #8
 8007da2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	607a      	str	r2, [r7, #4]
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	701a      	strb	r2, [r3, #0]
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00d      	beq.n	8007df2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	1c53      	adds	r3, r2, #1
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	1c59      	adds	r1, r3, #1
 8007de0:	6179      	str	r1, [r7, #20]
 8007de2:	7812      	ldrb	r2, [r2, #0]
 8007de4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f1      	bne.n	8007dd6 <mem_cpy+0x1a>
	}
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007dfe:	b480      	push	{r7}
 8007e00:	b087      	sub	sp, #28
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	617a      	str	r2, [r7, #20]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f3      	bne.n	8007e0e <mem_set+0x10>
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e34:	b480      	push	{r7}
 8007e36:	b089      	sub	sp, #36	; 0x24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	61fa      	str	r2, [r7, #28]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	4619      	mov	r1, r3
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	61ba      	str	r2, [r7, #24]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	1acb      	subs	r3, r1, r3
 8007e60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	607b      	str	r3, [r7, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <mem_cmp+0x40>
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0eb      	beq.n	8007e4c <mem_cmp+0x18>

	return r;
 8007e74:	697b      	ldr	r3, [r7, #20]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3724      	adds	r7, #36	; 0x24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007e8c:	e002      	b.n	8007e94 <chk_chr+0x12>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3301      	adds	r3, #1
 8007e92:	607b      	str	r3, [r7, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <chk_chr+0x26>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d1f2      	bne.n	8007e8e <chk_chr+0xc>
	return *str;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <lock_fs+0x22>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 f8ec 	bl	800a0a8 <ff_req_grant>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <lock_fs+0x22>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <lock_fs+0x24>
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00d      	beq.n	8007f12 <unlock_fs+0x2e>
 8007ef6:	78fb      	ldrb	r3, [r7, #3]
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	d00a      	beq.n	8007f12 <unlock_fs+0x2e>
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	2b0b      	cmp	r3, #11
 8007f00:	d007      	beq.n	8007f12 <unlock_fs+0x2e>
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	2b0f      	cmp	r3, #15
 8007f06:	d004      	beq.n	8007f12 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f002 f8e0 	bl	800a0d2 <ff_rel_grant>
	}
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e029      	b.n	8007f84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f30:	4a27      	ldr	r2, [pc, #156]	; (8007fd0 <chk_lock+0xb4>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	4413      	add	r3, r2
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01d      	beq.n	8007f7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f3e:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <chk_lock+0xb4>)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	011b      	lsls	r3, r3, #4
 8007f44:	4413      	add	r3, r2
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d116      	bne.n	8007f7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007f50:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <chk_lock+0xb4>)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	4413      	add	r3, r2
 8007f58:	3304      	adds	r3, #4
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d10c      	bne.n	8007f7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f64:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <chk_lock+0xb4>)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	4413      	add	r3, r2
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d102      	bne.n	8007f7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f78:	e007      	b.n	8007f8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d9d2      	bls.n	8007f30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d109      	bne.n	8007fa4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <chk_lock+0x80>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d101      	bne.n	8007fa0 <chk_lock+0x84>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e010      	b.n	8007fc2 <chk_lock+0xa6>
 8007fa0:	2312      	movs	r3, #18
 8007fa2:	e00e      	b.n	8007fc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d108      	bne.n	8007fbc <chk_lock+0xa0>
 8007faa:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <chk_lock+0xb4>)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	4413      	add	r3, r2
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fba:	d101      	bne.n	8007fc0 <chk_lock+0xa4>
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	e000      	b.n	8007fc2 <chk_lock+0xa6>
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	200009a4 	.word	0x200009a4

08007fd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	607b      	str	r3, [r7, #4]
 8007fde:	e002      	b.n	8007fe6 <enq_lock+0x12>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d806      	bhi.n	8007ffa <enq_lock+0x26>
 8007fec:	4a09      	ldr	r2, [pc, #36]	; (8008014 <enq_lock+0x40>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	4413      	add	r3, r2
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f2      	bne.n	8007fe0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	bf14      	ite	ne
 8008000:	2301      	movne	r3, #1
 8008002:	2300      	moveq	r3, #0
 8008004:	b2db      	uxtb	r3, r3
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	200009a4 	.word	0x200009a4

08008018 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	e01f      	b.n	8008068 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008028:	4a41      	ldr	r2, [pc, #260]	; (8008130 <inc_lock+0x118>)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	4413      	add	r3, r2
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d113      	bne.n	8008062 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800803a:	4a3d      	ldr	r2, [pc, #244]	; (8008130 <inc_lock+0x118>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	4413      	add	r3, r2
 8008042:	3304      	adds	r3, #4
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800804a:	429a      	cmp	r2, r3
 800804c:	d109      	bne.n	8008062 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800804e:	4a38      	ldr	r2, [pc, #224]	; (8008130 <inc_lock+0x118>)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	4413      	add	r3, r2
 8008056:	3308      	adds	r3, #8
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800805e:	429a      	cmp	r2, r3
 8008060:	d006      	beq.n	8008070 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d9dc      	bls.n	8008028 <inc_lock+0x10>
 800806e:	e000      	b.n	8008072 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008070:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d132      	bne.n	80080de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e002      	b.n	8008084 <inc_lock+0x6c>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d806      	bhi.n	8008098 <inc_lock+0x80>
 800808a:	4a29      	ldr	r2, [pc, #164]	; (8008130 <inc_lock+0x118>)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f2      	bne.n	800807e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d101      	bne.n	80080a2 <inc_lock+0x8a>
 800809e:	2300      	movs	r3, #0
 80080a0:	e040      	b.n	8008124 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4922      	ldr	r1, [pc, #136]	; (8008130 <inc_lock+0x118>)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	440b      	add	r3, r1
 80080ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	491e      	ldr	r1, [pc, #120]	; (8008130 <inc_lock+0x118>)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	440b      	add	r3, r1
 80080bc:	3304      	adds	r3, #4
 80080be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695a      	ldr	r2, [r3, #20]
 80080c4:	491a      	ldr	r1, [pc, #104]	; (8008130 <inc_lock+0x118>)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	440b      	add	r3, r1
 80080cc:	3308      	adds	r3, #8
 80080ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80080d0:	4a17      	ldr	r2, [pc, #92]	; (8008130 <inc_lock+0x118>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	4413      	add	r3, r2
 80080d8:	330c      	adds	r3, #12
 80080da:	2200      	movs	r2, #0
 80080dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d009      	beq.n	80080f8 <inc_lock+0xe0>
 80080e4:	4a12      	ldr	r2, [pc, #72]	; (8008130 <inc_lock+0x118>)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	4413      	add	r3, r2
 80080ec:	330c      	adds	r3, #12
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <inc_lock+0xe0>
 80080f4:	2300      	movs	r3, #0
 80080f6:	e015      	b.n	8008124 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <inc_lock+0xf8>
 80080fe:	4a0c      	ldr	r2, [pc, #48]	; (8008130 <inc_lock+0x118>)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	4413      	add	r3, r2
 8008106:	330c      	adds	r3, #12
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	3301      	adds	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	e001      	b.n	8008114 <inc_lock+0xfc>
 8008110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008114:	4906      	ldr	r1, [pc, #24]	; (8008130 <inc_lock+0x118>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	440b      	add	r3, r1
 800811c:	330c      	adds	r3, #12
 800811e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	200009a4 	.word	0x200009a4

08008134 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3b01      	subs	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d825      	bhi.n	8008194 <dec_lock+0x60>
		n = Files[i].ctr;
 8008148:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <dec_lock+0x74>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	4413      	add	r3, r2
 8008150:	330c      	adds	r3, #12
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008156:	89fb      	ldrh	r3, [r7, #14]
 8008158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800815c:	d101      	bne.n	8008162 <dec_lock+0x2e>
 800815e:	2300      	movs	r3, #0
 8008160:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008162:	89fb      	ldrh	r3, [r7, #14]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <dec_lock+0x3a>
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	3b01      	subs	r3, #1
 800816c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800816e:	4a0e      	ldr	r2, [pc, #56]	; (80081a8 <dec_lock+0x74>)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	4413      	add	r3, r2
 8008176:	330c      	adds	r3, #12
 8008178:	89fa      	ldrh	r2, [r7, #14]
 800817a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <dec_lock+0x5a>
 8008182:	4a09      	ldr	r2, [pc, #36]	; (80081a8 <dec_lock+0x74>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	4413      	add	r3, r2
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	737b      	strb	r3, [r7, #13]
 8008192:	e001      	b.n	8008198 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008194:	2302      	movs	r3, #2
 8008196:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008198:	7b7b      	ldrb	r3, [r7, #13]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	200009a4 	.word	0x200009a4

080081ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e010      	b.n	80081dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80081ba:	4a0d      	ldr	r2, [pc, #52]	; (80081f0 <clear_lock+0x44>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	4413      	add	r3, r2
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d105      	bne.n	80081d6 <clear_lock+0x2a>
 80081ca:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <clear_lock+0x44>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	4413      	add	r3, r2
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d9eb      	bls.n	80081ba <clear_lock+0xe>
	}
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	200009a4 	.word	0x200009a4

080081f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d034      	beq.n	8008272 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7858      	ldrb	r0, [r3, #1]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008218:	2301      	movs	r3, #1
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	f7ff fd0e 	bl	8007c3c <disk_write>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
 800822a:	e022      	b.n	8008272 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	1ad2      	subs	r2, r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	429a      	cmp	r2, r3
 8008240:	d217      	bcs.n	8008272 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	789b      	ldrb	r3, [r3, #2]
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	e010      	b.n	800826c <sync_window+0x78>
					wsect += fs->fsize;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	4413      	add	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7858      	ldrb	r0, [r3, #1]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800825e:	2301      	movs	r3, #1
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	f7ff fceb 	bl	8007c3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3b01      	subs	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d8eb      	bhi.n	800824a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d01b      	beq.n	80082cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff ffad 	bl	80081f4 <sync_window>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d113      	bne.n	80082cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7858      	ldrb	r0, [r3, #1]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082ae:	2301      	movs	r3, #1
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	f7ff fca3 	bl	8007bfc <disk_read>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082bc:	f04f 33ff 	mov.w	r3, #4294967295
 80082c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff ff87 	bl	80081f4 <sync_window>
 80082e6:	4603      	mov	r3, r0
 80082e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d158      	bne.n	80083a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d148      	bne.n	800838a <sync_fs+0xb2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d144      	bne.n	800838a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3334      	adds	r3, #52	; 0x34
 8008304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fd77 	bl	8007dfe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3334      	adds	r3, #52	; 0x34
 8008314:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008318:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fd06 	bl	8007d2e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3334      	adds	r3, #52	; 0x34
 8008326:	4921      	ldr	r1, [pc, #132]	; (80083ac <sync_fs+0xd4>)
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff fd1b 	bl	8007d64 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3334      	adds	r3, #52	; 0x34
 8008332:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008336:	491e      	ldr	r1, [pc, #120]	; (80083b0 <sync_fs+0xd8>)
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fd13 	bl	8007d64 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3334      	adds	r3, #52	; 0x34
 8008342:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f7ff fd09 	bl	8007d64 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3334      	adds	r3, #52	; 0x34
 8008356:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f7ff fcff 	bl	8007d64 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7858      	ldrb	r0, [r3, #1]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837e:	2301      	movs	r3, #1
 8008380:	f7ff fc5c 	bl	8007c3c <disk_write>
			fs->fsi_flag = 0;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2200      	movs	r2, #0
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fc72 	bl	8007c7c <disk_ioctl>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <sync_fs+0xca>
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	41615252 	.word	0x41615252
 80083b0:	61417272 	.word	0x61417272

080083b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	3b02      	subs	r3, #2
 80083c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	3b02      	subs	r3, #2
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d301      	bcc.n	80083d4 <clust2sect+0x20>
 80083d0:	2300      	movs	r3, #0
 80083d2:	e008      	b.n	80083e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	895b      	ldrh	r3, [r3, #10]
 80083d8:	461a      	mov	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	fb03 f202 	mul.w	r2, r3, r2
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4413      	add	r3, r2
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b086      	sub	sp, #24
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d904      	bls.n	8008412 <get_fat+0x20>
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d302      	bcc.n	8008418 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e08f      	b.n	8008538 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008418:	f04f 33ff 	mov.w	r3, #4294967295
 800841c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d062      	beq.n	80084ec <get_fat+0xfa>
 8008426:	2b03      	cmp	r3, #3
 8008428:	dc7c      	bgt.n	8008524 <get_fat+0x132>
 800842a:	2b01      	cmp	r3, #1
 800842c:	d002      	beq.n	8008434 <get_fat+0x42>
 800842e:	2b02      	cmp	r3, #2
 8008430:	d042      	beq.n	80084b8 <get_fat+0xc6>
 8008432:	e077      	b.n	8008524 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	0a5b      	lsrs	r3, r3, #9
 800844a:	4413      	add	r3, r2
 800844c:	4619      	mov	r1, r3
 800844e:	6938      	ldr	r0, [r7, #16]
 8008450:	f7ff ff14 	bl	800827c <move_window>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d167      	bne.n	800852a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	60fa      	str	r2, [r7, #12]
 8008460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4413      	add	r3, r2
 8008468:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800846c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	0a5b      	lsrs	r3, r3, #9
 8008476:	4413      	add	r3, r2
 8008478:	4619      	mov	r1, r3
 800847a:	6938      	ldr	r0, [r7, #16]
 800847c:	f7ff fefe 	bl	800827c <move_window>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d153      	bne.n	800852e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4413      	add	r3, r2
 8008490:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	461a      	mov	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4313      	orrs	r3, r2
 800849c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <get_fat+0xbc>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	091b      	lsrs	r3, r3, #4
 80084ac:	e002      	b.n	80084b4 <get_fat+0xc2>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b4:	617b      	str	r3, [r7, #20]
			break;
 80084b6:	e03f      	b.n	8008538 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	0a1b      	lsrs	r3, r3, #8
 80084c0:	4413      	add	r3, r2
 80084c2:	4619      	mov	r1, r3
 80084c4:	6938      	ldr	r0, [r7, #16]
 80084c6:	f7ff fed9 	bl	800827c <move_window>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d130      	bne.n	8008532 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80084de:	4413      	add	r3, r2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fbe9 	bl	8007cb8 <ld_word>
 80084e6:	4603      	mov	r3, r0
 80084e8:	617b      	str	r3, [r7, #20]
			break;
 80084ea:	e025      	b.n	8008538 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	09db      	lsrs	r3, r3, #7
 80084f4:	4413      	add	r3, r2
 80084f6:	4619      	mov	r1, r3
 80084f8:	6938      	ldr	r0, [r7, #16]
 80084fa:	f7ff febf 	bl	800827c <move_window>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d118      	bne.n	8008536 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008512:	4413      	add	r3, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fbe7 	bl	8007ce8 <ld_dword>
 800851a:	4603      	mov	r3, r0
 800851c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008520:	617b      	str	r3, [r7, #20]
			break;
 8008522:	e009      	b.n	8008538 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008524:	2301      	movs	r3, #1
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e006      	b.n	8008538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800852a:	bf00      	nop
 800852c:	e004      	b.n	8008538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008536:	bf00      	nop
		}
	}

	return val;
 8008538:	697b      	ldr	r3, [r7, #20]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008542:	b590      	push	{r4, r7, lr}
 8008544:	b089      	sub	sp, #36	; 0x24
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800854e:	2302      	movs	r3, #2
 8008550:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b01      	cmp	r3, #1
 8008556:	f240 80d9 	bls.w	800870c <put_fat+0x1ca>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	429a      	cmp	r2, r3
 8008562:	f080 80d3 	bcs.w	800870c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b03      	cmp	r3, #3
 800856c:	f000 8096 	beq.w	800869c <put_fat+0x15a>
 8008570:	2b03      	cmp	r3, #3
 8008572:	f300 80cb 	bgt.w	800870c <put_fat+0x1ca>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d002      	beq.n	8008580 <put_fat+0x3e>
 800857a:	2b02      	cmp	r3, #2
 800857c:	d06e      	beq.n	800865c <put_fat+0x11a>
 800857e:	e0c5      	b.n	800870c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	085b      	lsrs	r3, r3, #1
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4413      	add	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	0a5b      	lsrs	r3, r3, #9
 8008596:	4413      	add	r3, r2
 8008598:	4619      	mov	r1, r3
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff fe6e 	bl	800827c <move_window>
 80085a0:	4603      	mov	r3, r0
 80085a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085a4:	7ffb      	ldrb	r3, [r7, #31]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f040 80a9 	bne.w	80086fe <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	1c59      	adds	r1, r3, #1
 80085b6:	61b9      	str	r1, [r7, #24]
 80085b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085bc:	4413      	add	r3, r2
 80085be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <put_fat+0xa4>
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	b25b      	sxtb	r3, r3
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	b25a      	sxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	b25b      	sxtb	r3, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	b25b      	sxtb	r3, r3
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	e001      	b.n	80085ea <put_fat+0xa8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	0a5b      	lsrs	r3, r3, #9
 80085fc:	4413      	add	r3, r2
 80085fe:	4619      	mov	r1, r3
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff fe3b 	bl	800827c <move_window>
 8008606:	4603      	mov	r3, r0
 8008608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800860a:	7ffb      	ldrb	r3, [r7, #31]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d178      	bne.n	8008702 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861c:	4413      	add	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <put_fat+0xf0>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	091b      	lsrs	r3, r3, #4
 800862e:	b2db      	uxtb	r3, r3
 8008630:	e00e      	b.n	8008650 <put_fat+0x10e>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b25b      	sxtb	r3, r3
 8008638:	f023 030f 	bic.w	r3, r3, #15
 800863c:	b25a      	sxtb	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	0a1b      	lsrs	r3, r3, #8
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	b25b      	sxtb	r3, r3
 800864a:	4313      	orrs	r3, r2
 800864c:	b25b      	sxtb	r3, r3
 800864e:	b2db      	uxtb	r3, r3
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	70da      	strb	r2, [r3, #3]
			break;
 800865a:	e057      	b.n	800870c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	0a1b      	lsrs	r3, r3, #8
 8008664:	4413      	add	r3, r2
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fe07 	bl	800827c <move_window>
 800866e:	4603      	mov	r3, r0
 8008670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008672:	7ffb      	ldrb	r3, [r7, #31]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d146      	bne.n	8008706 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008686:	4413      	add	r3, r2
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	b292      	uxth	r2, r2
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fb4d 	bl	8007d2e <st_word>
			fs->wflag = 1;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	70da      	strb	r2, [r3, #3]
			break;
 800869a:	e037      	b.n	800870c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	09db      	lsrs	r3, r3, #7
 80086a4:	4413      	add	r3, r2
 80086a6:	4619      	mov	r1, r3
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7ff fde7 	bl	800827c <move_window>
 80086ae:	4603      	mov	r3, r0
 80086b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086b2:	7ffb      	ldrb	r3, [r7, #31]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d128      	bne.n	800870a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086cc:	4413      	add	r3, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fb0a 	bl	8007ce8 <ld_dword>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80086da:	4323      	orrs	r3, r4
 80086dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086ec:	4413      	add	r3, r2
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff fb37 	bl	8007d64 <st_dword>
			fs->wflag = 1;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	70da      	strb	r2, [r3, #3]
			break;
 80086fc:	e006      	b.n	800870c <put_fat+0x1ca>
			if (res != FR_OK) break;
 80086fe:	bf00      	nop
 8008700:	e004      	b.n	800870c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008702:	bf00      	nop
 8008704:	e002      	b.n	800870c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800870a:	bf00      	nop
		}
	}
	return res;
 800870c:	7ffb      	ldrb	r3, [r7, #31]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3724      	adds	r7, #36	; 0x24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd90      	pop	{r4, r7, pc}

08008716 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b088      	sub	sp, #32
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d904      	bls.n	800873c <remove_chain+0x26>
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	429a      	cmp	r2, r3
 800873a:	d301      	bcc.n	8008740 <remove_chain+0x2a>
 800873c:	2302      	movs	r3, #2
 800873e:	e04b      	b.n	80087d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00c      	beq.n	8008760 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008746:	f04f 32ff 	mov.w	r2, #4294967295
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	69b8      	ldr	r0, [r7, #24]
 800874e:	f7ff fef8 	bl	8008542 <put_fat>
 8008752:	4603      	mov	r3, r0
 8008754:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008756:	7ffb      	ldrb	r3, [r7, #31]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <remove_chain+0x4a>
 800875c:	7ffb      	ldrb	r3, [r7, #31]
 800875e:	e03b      	b.n	80087d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fe45 	bl	80083f2 <get_fat>
 8008768:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d031      	beq.n	80087d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d101      	bne.n	800877a <remove_chain+0x64>
 8008776:	2302      	movs	r3, #2
 8008778:	e02e      	b.n	80087d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d101      	bne.n	8008786 <remove_chain+0x70>
 8008782:	2301      	movs	r3, #1
 8008784:	e028      	b.n	80087d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008786:	2200      	movs	r2, #0
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	69b8      	ldr	r0, [r7, #24]
 800878c:	f7ff fed9 	bl	8008542 <put_fat>
 8008790:	4603      	mov	r3, r0
 8008792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008794:	7ffb      	ldrb	r3, [r7, #31]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <remove_chain+0x88>
 800879a:	7ffb      	ldrb	r3, [r7, #31]
 800879c:	e01c      	b.n	80087d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	695a      	ldr	r2, [r3, #20]
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	3b02      	subs	r3, #2
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d20b      	bcs.n	80087c4 <remove_chain+0xae>
			fs->free_clst++;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	791b      	ldrb	r3, [r3, #4]
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d3c6      	bcc.n	8008760 <remove_chain+0x4a>
 80087d2:	e000      	b.n	80087d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80087d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10d      	bne.n	8008812 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d004      	beq.n	800880c <create_chain+0x2c>
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	429a      	cmp	r2, r3
 800880a:	d31b      	bcc.n	8008844 <create_chain+0x64>
 800880c:	2301      	movs	r3, #1
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	e018      	b.n	8008844 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff fdec 	bl	80083f2 <get_fat>
 800881a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d801      	bhi.n	8008826 <create_chain+0x46>
 8008822:	2301      	movs	r3, #1
 8008824:	e070      	b.n	8008908 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d101      	bne.n	8008832 <create_chain+0x52>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	e06a      	b.n	8008908 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	429a      	cmp	r2, r3
 800883a:	d201      	bcs.n	8008840 <create_chain+0x60>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	e063      	b.n	8008908 <create_chain+0x128>
		scl = clst;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	3301      	adds	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	429a      	cmp	r2, r3
 8008856:	d307      	bcc.n	8008868 <create_chain+0x88>
				ncl = 2;
 8008858:	2302      	movs	r3, #2
 800885a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	429a      	cmp	r2, r3
 8008862:	d901      	bls.n	8008868 <create_chain+0x88>
 8008864:	2300      	movs	r3, #0
 8008866:	e04f      	b.n	8008908 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008868:	69f9      	ldr	r1, [r7, #28]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7ff fdc1 	bl	80083f2 <get_fat>
 8008870:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00e      	beq.n	8008896 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d003      	beq.n	8008886 <create_chain+0xa6>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008884:	d101      	bne.n	800888a <create_chain+0xaa>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	e03e      	b.n	8008908 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	429a      	cmp	r2, r3
 8008890:	d1da      	bne.n	8008848 <create_chain+0x68>
 8008892:	2300      	movs	r3, #0
 8008894:	e038      	b.n	8008908 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008896:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008898:	f04f 32ff 	mov.w	r2, #4294967295
 800889c:	69f9      	ldr	r1, [r7, #28]
 800889e:	6938      	ldr	r0, [r7, #16]
 80088a0:	f7ff fe4f 	bl	8008542 <put_fat>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <create_chain+0xe2>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d006      	beq.n	80088c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6938      	ldr	r0, [r7, #16]
 80088ba:	f7ff fe42 	bl	8008542 <put_fat>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d116      	bne.n	80088f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	3b02      	subs	r3, #2
 80088d8:	429a      	cmp	r2, r3
 80088da:	d804      	bhi.n	80088e6 <create_chain+0x106>
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	1e5a      	subs	r2, r3, #1
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	791b      	ldrb	r3, [r3, #4]
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	711a      	strb	r2, [r3, #4]
 80088f4:	e007      	b.n	8008906 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d102      	bne.n	8008902 <create_chain+0x122>
 80088fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008900:	e000      	b.n	8008904 <create_chain+0x124>
 8008902:	2301      	movs	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008906:	69fb      	ldr	r3, [r7, #28]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	3304      	adds	r3, #4
 8008926:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	0a5b      	lsrs	r3, r3, #9
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	8952      	ldrh	r2, [r2, #10]
 8008930:	fbb3 f3f2 	udiv	r3, r3, r2
 8008934:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1d1a      	adds	r2, r3, #4
 800893a:	613a      	str	r2, [r7, #16]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <clmt_clust+0x3a>
 8008946:	2300      	movs	r3, #0
 8008948:	e010      	b.n	800896c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	429a      	cmp	r2, r3
 8008950:	d307      	bcc.n	8008962 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	3304      	adds	r3, #4
 800895e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008960:	e7e9      	b.n	8008936 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008962:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	4413      	add	r3, r2
}
 800896c:	4618      	mov	r0, r3
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800898e:	d204      	bcs.n	800899a <dir_sdi+0x22>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f003 031f 	and.w	r3, r3, #31
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <dir_sdi+0x26>
		return FR_INT_ERR;
 800899a:	2302      	movs	r3, #2
 800899c:	e063      	b.n	8008a66 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <dir_sdi+0x46>
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d902      	bls.n	80089be <dir_sdi+0x46>
		clst = fs->dirbase;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10c      	bne.n	80089de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	095b      	lsrs	r3, r3, #5
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	8912      	ldrh	r2, [r2, #8]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d301      	bcc.n	80089d4 <dir_sdi+0x5c>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e048      	b.n	8008a66 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	61da      	str	r2, [r3, #28]
 80089dc:	e029      	b.n	8008a32 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	895b      	ldrh	r3, [r3, #10]
 80089e2:	025b      	lsls	r3, r3, #9
 80089e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80089e6:	e019      	b.n	8008a1c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6979      	ldr	r1, [r7, #20]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff fd00 	bl	80083f2 <get_fat>
 80089f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fa:	d101      	bne.n	8008a00 <dir_sdi+0x88>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e032      	b.n	8008a66 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d904      	bls.n	8008a10 <dir_sdi+0x98>
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d301      	bcc.n	8008a14 <dir_sdi+0x9c>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e028      	b.n	8008a66 <dir_sdi+0xee>
			ofs -= csz;
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d2e1      	bcs.n	80089e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a24:	6979      	ldr	r1, [r7, #20]
 8008a26:	6938      	ldr	r0, [r7, #16]
 8008a28:	f7ff fcc4 	bl	80083b4 <clust2sect>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <dir_sdi+0xcc>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e010      	b.n	8008a66 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	0a5b      	lsrs	r3, r3, #9
 8008a4c:	441a      	add	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5e:	441a      	add	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	3320      	adds	r3, #32
 8008a84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <dir_next+0x28>
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a94:	d301      	bcc.n	8008a9a <dir_next+0x2c>
 8008a96:	2304      	movs	r3, #4
 8008a98:	e0aa      	b.n	8008bf0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f040 8098 	bne.w	8008bd6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10b      	bne.n	8008ad0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	095b      	lsrs	r3, r3, #5
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	8912      	ldrh	r2, [r2, #8]
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	f0c0 8088 	bcc.w	8008bd6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	61da      	str	r2, [r3, #28]
 8008acc:	2304      	movs	r3, #4
 8008ace:	e08f      	b.n	8008bf0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	0a5b      	lsrs	r3, r3, #9
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	8952      	ldrh	r2, [r2, #10]
 8008ad8:	3a01      	subs	r2, #1
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d17a      	bne.n	8008bd6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f7ff fc82 	bl	80083f2 <get_fat>
 8008aee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d801      	bhi.n	8008afa <dir_next+0x8c>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e07a      	b.n	8008bf0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d101      	bne.n	8008b06 <dir_next+0x98>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e074      	b.n	8008bf0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d358      	bcc.n	8008bc2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d104      	bne.n	8008b20 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	61da      	str	r2, [r3, #28]
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	e067      	b.n	8008bf0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f7ff fe59 	bl	80087e0 <create_chain>
 8008b2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <dir_next+0xcc>
 8008b36:	2307      	movs	r3, #7
 8008b38:	e05a      	b.n	8008bf0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <dir_next+0xd6>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e055      	b.n	8008bf0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d101      	bne.n	8008b50 <dir_next+0xe2>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e04f      	b.n	8008bf0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff fb4f 	bl	80081f4 <sync_window>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <dir_next+0xf2>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e047      	b.n	8008bf0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3334      	adds	r3, #52	; 0x34
 8008b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff f947 	bl	8007dfe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b70:	2300      	movs	r3, #0
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	6979      	ldr	r1, [r7, #20]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fc1c 	bl	80083b4 <clust2sect>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30
 8008b82:	e012      	b.n	8008baa <dir_next+0x13c>
						fs->wflag = 1;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7ff fb32 	bl	80081f4 <sync_window>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <dir_next+0x12c>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e02a      	b.n	8008bf0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	613b      	str	r3, [r7, #16]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	895b      	ldrh	r3, [r3, #10]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d3e6      	bcc.n	8008b84 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	1ad2      	subs	r2, r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008bc8:	6979      	ldr	r1, [r7, #20]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7ff fbf2 	bl	80083b4 <clust2sect>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be8:	441a      	add	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff feb4 	bl	8008978 <dir_sdi>
 8008c10:	4603      	mov	r3, r0
 8008c12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d12b      	bne.n	8008c72 <dir_alloc+0x7a>
		n = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	4619      	mov	r1, r3
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff fb29 	bl	800827c <move_window>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d11d      	bne.n	8008c70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2be5      	cmp	r3, #229	; 0xe5
 8008c3c:	d004      	beq.n	8008c48 <dir_alloc+0x50>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d102      	bne.n	8008c5c <dir_alloc+0x64>
 8008c56:	e00c      	b.n	8008c72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008c58:	2300      	movs	r3, #0
 8008c5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff ff05 	bl	8008a6e <dir_next>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0d7      	beq.n	8008c1e <dir_alloc+0x26>
 8008c6e:	e000      	b.n	8008c72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008c70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d101      	bne.n	8008c7c <dir_alloc+0x84>
 8008c78:	2307      	movs	r3, #7
 8008c7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	331a      	adds	r3, #26
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff f80f 	bl	8007cb8 <ld_word>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d109      	bne.n	8008cba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	3314      	adds	r3, #20
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff f804 	bl	8007cb8 <ld_word>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	041b      	lsls	r3, r3, #16
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008cba:	68fb      	ldr	r3, [r7, #12]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	331a      	adds	r3, #26
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	b292      	uxth	r2, r2
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff f827 	bl	8007d2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d109      	bne.n	8008cfc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f103 0214 	add.w	r2, r3, #20
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	0c1b      	lsrs	r3, r3, #16
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7ff f819 	bl	8007d2e <st_word>
	}
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008d12:	2100      	movs	r1, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff fe2f 	bl	8008978 <dir_sdi>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <dir_find+0x24>
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	e03e      	b.n	8008da6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6938      	ldr	r0, [r7, #16]
 8008d30:	f7ff faa4 	bl	800827c <move_window>
 8008d34:	4603      	mov	r3, r0
 8008d36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d12f      	bne.n	8008d9e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <dir_find+0x4e>
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	75fb      	strb	r3, [r7, #23]
 8008d50:	e028      	b.n	8008da4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	330b      	adds	r3, #11
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	330b      	adds	r3, #11
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <dir_find+0x86>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a18      	ldr	r0, [r3, #32]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3324      	adds	r3, #36	; 0x24
 8008d7c:	220b      	movs	r2, #11
 8008d7e:	4619      	mov	r1, r3
 8008d80:	f7ff f858 	bl	8007e34 <mem_cmp>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00b      	beq.n	8008da2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff fe6e 	bl	8008a6e <dir_next>
 8008d92:	4603      	mov	r3, r0
 8008d94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0c5      	beq.n	8008d28 <dir_find+0x24>
 8008d9c:	e002      	b.n	8008da4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008d9e:	bf00      	nop
 8008da0:	e000      	b.n	8008da4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008da2:	bf00      	nop

	return res;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff ff1a 	bl	8008bf8 <dir_alloc>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d11c      	bne.n	8008e08 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	68b8      	ldr	r0, [r7, #8]
 8008dd6:	f7ff fa51 	bl	800827c <move_window>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d111      	bne.n	8008e08 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	2220      	movs	r2, #32
 8008dea:	2100      	movs	r1, #0
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff f806 	bl	8007dfe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a18      	ldr	r0, [r3, #32]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3324      	adds	r3, #36	; 0x24
 8008dfa:	220b      	movs	r2, #11
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7fe ffdd 	bl	8007dbc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2201      	movs	r2, #1
 8008e06:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3324      	adds	r3, #36	; 0x24
 8008e28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008e2a:	220b      	movs	r2, #11
 8008e2c:	2120      	movs	r1, #32
 8008e2e:	68b8      	ldr	r0, [r7, #8]
 8008e30:	f7fe ffe5 	bl	8007dfe <mem_set>
	si = i = 0; ni = 8;
 8008e34:	2300      	movs	r3, #0
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	2308      	movs	r3, #8
 8008e3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	61fa      	str	r2, [r7, #28]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e4e:	7efb      	ldrb	r3, [r7, #27]
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d94e      	bls.n	8008ef2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008e54:	7efb      	ldrb	r3, [r7, #27]
 8008e56:	2b2f      	cmp	r3, #47	; 0x2f
 8008e58:	d006      	beq.n	8008e68 <create_name+0x54>
 8008e5a:	7efb      	ldrb	r3, [r7, #27]
 8008e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8008e5e:	d110      	bne.n	8008e82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008e60:	e002      	b.n	8008e68 <create_name+0x54>
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	3301      	adds	r3, #1
 8008e66:	61fb      	str	r3, [r7, #28]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b2f      	cmp	r3, #47	; 0x2f
 8008e72:	d0f6      	beq.n	8008e62 <create_name+0x4e>
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b5c      	cmp	r3, #92	; 0x5c
 8008e7e:	d0f0      	beq.n	8008e62 <create_name+0x4e>
			break;
 8008e80:	e038      	b.n	8008ef4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008e82:	7efb      	ldrb	r3, [r7, #27]
 8008e84:	2b2e      	cmp	r3, #46	; 0x2e
 8008e86:	d003      	beq.n	8008e90 <create_name+0x7c>
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d30c      	bcc.n	8008eaa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2b0b      	cmp	r3, #11
 8008e94:	d002      	beq.n	8008e9c <create_name+0x88>
 8008e96:	7efb      	ldrb	r3, [r7, #27]
 8008e98:	2b2e      	cmp	r3, #46	; 0x2e
 8008e9a:	d001      	beq.n	8008ea0 <create_name+0x8c>
 8008e9c:	2306      	movs	r3, #6
 8008e9e:	e044      	b.n	8008f2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	230b      	movs	r3, #11
 8008ea6:	617b      	str	r3, [r7, #20]
			continue;
 8008ea8:	e022      	b.n	8008ef0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008eaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	da04      	bge.n	8008ebc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008eb2:	7efb      	ldrb	r3, [r7, #27]
 8008eb4:	3b80      	subs	r3, #128	; 0x80
 8008eb6:	4a1f      	ldr	r2, [pc, #124]	; (8008f34 <create_name+0x120>)
 8008eb8:	5cd3      	ldrb	r3, [r2, r3]
 8008eba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008ebc:	7efb      	ldrb	r3, [r7, #27]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	481d      	ldr	r0, [pc, #116]	; (8008f38 <create_name+0x124>)
 8008ec2:	f7fe ffde 	bl	8007e82 <chk_chr>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <create_name+0xbc>
 8008ecc:	2306      	movs	r3, #6
 8008ece:	e02c      	b.n	8008f2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ed0:	7efb      	ldrb	r3, [r7, #27]
 8008ed2:	2b60      	cmp	r3, #96	; 0x60
 8008ed4:	d905      	bls.n	8008ee2 <create_name+0xce>
 8008ed6:	7efb      	ldrb	r3, [r7, #27]
 8008ed8:	2b7a      	cmp	r3, #122	; 0x7a
 8008eda:	d802      	bhi.n	8008ee2 <create_name+0xce>
 8008edc:	7efb      	ldrb	r3, [r7, #27]
 8008ede:	3b20      	subs	r3, #32
 8008ee0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	613a      	str	r2, [r7, #16]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4413      	add	r3, r2
 8008eec:	7efa      	ldrb	r2, [r7, #27]
 8008eee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008ef0:	e7a6      	b.n	8008e40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ef2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	441a      	add	r2, r3
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <create_name+0xf4>
 8008f04:	2306      	movs	r3, #6
 8008f06:	e010      	b.n	8008f2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2be5      	cmp	r3, #229	; 0xe5
 8008f0e:	d102      	bne.n	8008f16 <create_name+0x102>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2205      	movs	r2, #5
 8008f14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f16:	7efb      	ldrb	r3, [r7, #27]
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d801      	bhi.n	8008f20 <create_name+0x10c>
 8008f1c:	2204      	movs	r2, #4
 8008f1e:	e000      	b.n	8008f22 <create_name+0x10e>
 8008f20:	2200      	movs	r2, #0
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	330b      	adds	r3, #11
 8008f26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008f28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08010fd4 	.word	0x08010fd4
 8008f38:	08010e94 	.word	0x08010e94

08008f3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008f50:	e002      	b.n	8008f58 <follow_path+0x1c>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8008f5e:	d0f8      	beq.n	8008f52 <follow_path+0x16>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b5c      	cmp	r3, #92	; 0x5c
 8008f66:	d0f4      	beq.n	8008f52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b1f      	cmp	r3, #31
 8008f74:	d80a      	bhi.n	8008f8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2280      	movs	r2, #128	; 0x80
 8008f7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008f7e:	2100      	movs	r1, #0
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fcf9 	bl	8008978 <dir_sdi>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]
 8008f8a:	e043      	b.n	8009014 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ff3f 	bl	8008e14 <create_name>
 8008f96:	4603      	mov	r3, r0
 8008f98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d134      	bne.n	800900a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff feaf 	bl	8008d04 <dir_find>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008fb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	2b04      	cmp	r3, #4
 8008fbc:	d127      	bne.n	800900e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d122      	bne.n	800900e <follow_path+0xd2>
 8008fc8:	2305      	movs	r3, #5
 8008fca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008fcc:	e01f      	b.n	800900e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d11c      	bne.n	8009012 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	799b      	ldrb	r3, [r3, #6]
 8008fdc:	f003 0310 	and.w	r3, r3, #16
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008fe4:	2305      	movs	r3, #5
 8008fe6:	75fb      	strb	r3, [r7, #23]
 8008fe8:	e014      	b.n	8009014 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fe42 	bl	8008c86 <ld_clust>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009008:	e7c0      	b.n	8008f8c <follow_path+0x50>
			if (res != FR_OK) break;
 800900a:	bf00      	nop
 800900c:	e002      	b.n	8009014 <follow_path+0xd8>
				break;
 800900e:	bf00      	nop
 8009010:	e000      	b.n	8009014 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009012:	bf00      	nop
			}
		}
	}

	return res;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800901e:	b480      	push	{r7}
 8009020:	b087      	sub	sp, #28
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009026:	f04f 33ff 	mov.w	r3, #4294967295
 800902a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d031      	beq.n	8009098 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	617b      	str	r3, [r7, #20]
 800903a:	e002      	b.n	8009042 <get_ldnumber+0x24>
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	3301      	adds	r3, #1
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b20      	cmp	r3, #32
 8009048:	d903      	bls.n	8009052 <get_ldnumber+0x34>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b3a      	cmp	r3, #58	; 0x3a
 8009050:	d1f4      	bne.n	800903c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b3a      	cmp	r3, #58	; 0x3a
 8009058:	d11c      	bne.n	8009094 <get_ldnumber+0x76>
			tp = *path;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	60fa      	str	r2, [r7, #12]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	3b30      	subs	r3, #48	; 0x30
 800906a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b09      	cmp	r3, #9
 8009070:	d80e      	bhi.n	8009090 <get_ldnumber+0x72>
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	429a      	cmp	r2, r3
 8009078:	d10a      	bne.n	8009090 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d107      	bne.n	8009090 <get_ldnumber+0x72>
					vol = (int)i;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	3301      	adds	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	e002      	b.n	800909a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009098:	693b      	ldr	r3, [r7, #16]
}
 800909a:	4618      	mov	r0, r3
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	70da      	strb	r2, [r3, #3]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295
 80090be:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff f8da 	bl	800827c <move_window>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <check_fs+0x2a>
 80090ce:	2304      	movs	r3, #4
 80090d0:	e038      	b.n	8009144 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3334      	adds	r3, #52	; 0x34
 80090d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fdec 	bl	8007cb8 <ld_word>
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <check_fs+0x48>
 80090ec:	2303      	movs	r3, #3
 80090ee:	e029      	b.n	8009144 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090f6:	2be9      	cmp	r3, #233	; 0xe9
 80090f8:	d009      	beq.n	800910e <check_fs+0x66>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009100:	2beb      	cmp	r3, #235	; 0xeb
 8009102:	d11e      	bne.n	8009142 <check_fs+0x9a>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800910a:	2b90      	cmp	r3, #144	; 0x90
 800910c:	d119      	bne.n	8009142 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3334      	adds	r3, #52	; 0x34
 8009112:	3336      	adds	r3, #54	; 0x36
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fde7 	bl	8007ce8 <ld_dword>
 800911a:	4603      	mov	r3, r0
 800911c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009120:	4a0a      	ldr	r2, [pc, #40]	; (800914c <check_fs+0xa4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d101      	bne.n	800912a <check_fs+0x82>
 8009126:	2300      	movs	r3, #0
 8009128:	e00c      	b.n	8009144 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3334      	adds	r3, #52	; 0x34
 800912e:	3352      	adds	r3, #82	; 0x52
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe fdd9 	bl	8007ce8 <ld_dword>
 8009136:	4603      	mov	r3, r0
 8009138:	4a05      	ldr	r2, [pc, #20]	; (8009150 <check_fs+0xa8>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d101      	bne.n	8009142 <check_fs+0x9a>
 800913e:	2300      	movs	r3, #0
 8009140:	e000      	b.n	8009144 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009142:	2302      	movs	r3, #2
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	00544146 	.word	0x00544146
 8009150:	33544146 	.word	0x33544146

08009154 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b096      	sub	sp, #88	; 0x58
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	4613      	mov	r3, r2
 8009160:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7ff ff58 	bl	800901e <get_ldnumber>
 800916e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009172:	2b00      	cmp	r3, #0
 8009174:	da01      	bge.n	800917a <find_volume+0x26>
 8009176:	230b      	movs	r3, #11
 8009178:	e235      	b.n	80095e6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800917a:	4aa5      	ldr	r2, [pc, #660]	; (8009410 <find_volume+0x2bc>)
 800917c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009182:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <find_volume+0x3a>
 800918a:	230c      	movs	r3, #12
 800918c:	e22b      	b.n	80095e6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800918e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009190:	f7fe fe92 	bl	8007eb8 <lock_fs>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <find_volume+0x4a>
 800919a:	230f      	movs	r3, #15
 800919c:	e223      	b.n	80095e6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	f023 0301 	bic.w	r3, r3, #1
 80091aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01a      	beq.n	80091ea <find_volume+0x96>
		stat = disk_status(fs->drv);
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe fcdf 	bl	8007b7c <disk_status>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10c      	bne.n	80091ea <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <find_volume+0x92>
 80091d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80091e2:	230a      	movs	r3, #10
 80091e4:	e1ff      	b.n	80095e6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80091e6:	2300      	movs	r3, #0
 80091e8:	e1fd      	b.n	80095e6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80091f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe fcd7 	bl	8007bb0 <disk_initialize>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009208:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009214:	2303      	movs	r3, #3
 8009216:	e1e6      	b.n	80095e6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d007      	beq.n	800922e <find_volume+0xda>
 800921e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800922a:	230a      	movs	r3, #10
 800922c:	e1db      	b.n	80095e6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800922e:	2300      	movs	r3, #0
 8009230:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009234:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009236:	f7ff ff37 	bl	80090a8 <check_fs>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009240:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009244:	2b02      	cmp	r3, #2
 8009246:	d149      	bne.n	80092dc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009248:	2300      	movs	r3, #0
 800924a:	643b      	str	r3, [r7, #64]	; 0x40
 800924c:	e01e      	b.n	800928c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800925c:	4413      	add	r3, r2
 800925e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	3304      	adds	r3, #4
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d006      	beq.n	8009278 <find_volume+0x124>
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	3308      	adds	r3, #8
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe fd3a 	bl	8007ce8 <ld_dword>
 8009274:	4602      	mov	r2, r0
 8009276:	e000      	b.n	800927a <find_volume+0x126>
 8009278:	2200      	movs	r2, #0
 800927a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	3358      	adds	r3, #88	; 0x58
 8009280:	443b      	add	r3, r7
 8009282:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009288:	3301      	adds	r3, #1
 800928a:	643b      	str	r3, [r7, #64]	; 0x40
 800928c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800928e:	2b03      	cmp	r3, #3
 8009290:	d9dd      	bls.n	800924e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009292:	2300      	movs	r3, #0
 8009294:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <find_volume+0x14e>
 800929c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929e:	3b01      	subs	r3, #1
 80092a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80092a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	3358      	adds	r3, #88	; 0x58
 80092a8:	443b      	add	r3, r7
 80092aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80092ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80092b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <find_volume+0x16e>
 80092b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092ba:	f7ff fef5 	bl	80090a8 <check_fs>
 80092be:	4603      	mov	r3, r0
 80092c0:	e000      	b.n	80092c4 <find_volume+0x170>
 80092c2:	2303      	movs	r3, #3
 80092c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80092c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d905      	bls.n	80092dc <find_volume+0x188>
 80092d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d2:	3301      	adds	r3, #1
 80092d4:	643b      	str	r3, [r7, #64]	; 0x40
 80092d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d9e2      	bls.n	80092a2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80092dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d101      	bne.n	80092e8 <find_volume+0x194>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e17e      	b.n	80095e6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d901      	bls.n	80092f4 <find_volume+0x1a0>
 80092f0:	230d      	movs	r3, #13
 80092f2:	e178      	b.n	80095e6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	3334      	adds	r3, #52	; 0x34
 80092f8:	330b      	adds	r3, #11
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fcdc 	bl	8007cb8 <ld_word>
 8009300:	4603      	mov	r3, r0
 8009302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009306:	d001      	beq.n	800930c <find_volume+0x1b8>
 8009308:	230d      	movs	r3, #13
 800930a:	e16c      	b.n	80095e6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	3334      	adds	r3, #52	; 0x34
 8009310:	3316      	adds	r3, #22
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fcd0 	bl	8007cb8 <ld_word>
 8009318:	4603      	mov	r3, r0
 800931a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800931c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <find_volume+0x1dc>
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	3334      	adds	r3, #52	; 0x34
 8009326:	3324      	adds	r3, #36	; 0x24
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe fcdd 	bl	8007ce8 <ld_dword>
 800932e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009334:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	789b      	ldrb	r3, [r3, #2]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d005      	beq.n	8009354 <find_volume+0x200>
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	789b      	ldrb	r3, [r3, #2]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d001      	beq.n	8009354 <find_volume+0x200>
 8009350:	230d      	movs	r3, #13
 8009352:	e148      	b.n	80095e6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	789b      	ldrb	r3, [r3, #2]
 8009358:	461a      	mov	r2, r3
 800935a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935c:	fb02 f303 	mul.w	r3, r2, r3
 8009360:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009368:	b29a      	uxth	r2, r3
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	895b      	ldrh	r3, [r3, #10]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d008      	beq.n	8009388 <find_volume+0x234>
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	895b      	ldrh	r3, [r3, #10]
 800937a:	461a      	mov	r2, r3
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	895b      	ldrh	r3, [r3, #10]
 8009380:	3b01      	subs	r3, #1
 8009382:	4013      	ands	r3, r2
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <find_volume+0x238>
 8009388:	230d      	movs	r3, #13
 800938a:	e12c      	b.n	80095e6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	3334      	adds	r3, #52	; 0x34
 8009390:	3311      	adds	r3, #17
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fc90 	bl	8007cb8 <ld_word>
 8009398:	4603      	mov	r3, r0
 800939a:	461a      	mov	r2, r3
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	891b      	ldrh	r3, [r3, #8]
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <find_volume+0x25e>
 80093ae:	230d      	movs	r3, #13
 80093b0:	e119      	b.n	80095e6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	3334      	adds	r3, #52	; 0x34
 80093b6:	3313      	adds	r3, #19
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fc7d 	bl	8007cb8 <ld_word>
 80093be:	4603      	mov	r3, r0
 80093c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80093c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d106      	bne.n	80093d6 <find_volume+0x282>
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	3334      	adds	r3, #52	; 0x34
 80093cc:	3320      	adds	r3, #32
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fc8a 	bl	8007ce8 <ld_dword>
 80093d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	3334      	adds	r3, #52	; 0x34
 80093da:	330e      	adds	r3, #14
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fc6b 	bl	8007cb8 <ld_word>
 80093e2:	4603      	mov	r3, r0
 80093e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <find_volume+0x29c>
 80093ec:	230d      	movs	r3, #13
 80093ee:	e0fa      	b.n	80095e6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f4:	4413      	add	r3, r2
 80093f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093f8:	8912      	ldrh	r2, [r2, #8]
 80093fa:	0912      	lsrs	r2, r2, #4
 80093fc:	b292      	uxth	r2, r2
 80093fe:	4413      	add	r3, r2
 8009400:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	429a      	cmp	r2, r3
 8009408:	d204      	bcs.n	8009414 <find_volume+0x2c0>
 800940a:	230d      	movs	r3, #13
 800940c:	e0eb      	b.n	80095e6 <find_volume+0x492>
 800940e:	bf00      	nop
 8009410:	2000099c 	.word	0x2000099c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800941c:	8952      	ldrh	r2, [r2, #10]
 800941e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <find_volume+0x2da>
 800942a:	230d      	movs	r3, #13
 800942c:	e0db      	b.n	80095e6 <find_volume+0x492>
		fmt = FS_FAT32;
 800942e:	2303      	movs	r3, #3
 8009430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800943a:	4293      	cmp	r3, r2
 800943c:	d802      	bhi.n	8009444 <find_volume+0x2f0>
 800943e:	2302      	movs	r3, #2
 8009440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	f640 72f5 	movw	r2, #4085	; 0xff5
 800944a:	4293      	cmp	r3, r2
 800944c:	d802      	bhi.n	8009454 <find_volume+0x300>
 800944e:	2301      	movs	r3, #1
 8009450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	1c9a      	adds	r2, r3, #2
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009460:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009462:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009466:	441a      	add	r2, r3
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800946c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	441a      	add	r2, r3
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800947a:	2b03      	cmp	r3, #3
 800947c:	d11e      	bne.n	80094bc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	3334      	adds	r3, #52	; 0x34
 8009482:	332a      	adds	r3, #42	; 0x2a
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fc17 	bl	8007cb8 <ld_word>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <find_volume+0x340>
 8009490:	230d      	movs	r3, #13
 8009492:	e0a8      	b.n	80095e6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	891b      	ldrh	r3, [r3, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <find_volume+0x34c>
 800949c:	230d      	movs	r3, #13
 800949e:	e0a2      	b.n	80095e6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	3334      	adds	r3, #52	; 0x34
 80094a4:	332c      	adds	r3, #44	; 0x2c
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fc1e 	bl	8007ce8 <ld_dword>
 80094ac:	4602      	mov	r2, r0
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	647b      	str	r3, [r7, #68]	; 0x44
 80094ba:	e01f      	b.n	80094fc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	891b      	ldrh	r3, [r3, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <find_volume+0x374>
 80094c4:	230d      	movs	r3, #13
 80094c6:	e08e      	b.n	80095e6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ce:	441a      	add	r2, r3
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d103      	bne.n	80094e4 <find_volume+0x390>
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	e00a      	b.n	80094fa <find_volume+0x3a6>
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	4613      	mov	r3, r2
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	4413      	add	r3, r2
 80094ee:	085a      	lsrs	r2, r3, #1
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80094fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009502:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009506:	0a5b      	lsrs	r3, r3, #9
 8009508:	429a      	cmp	r2, r3
 800950a:	d201      	bcs.n	8009510 <find_volume+0x3bc>
 800950c:	230d      	movs	r3, #13
 800950e:	e06a      	b.n	80095e6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	f04f 32ff 	mov.w	r2, #4294967295
 8009516:	615a      	str	r2, [r3, #20]
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	695a      	ldr	r2, [r3, #20]
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	2280      	movs	r2, #128	; 0x80
 8009524:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800952a:	2b03      	cmp	r3, #3
 800952c:	d149      	bne.n	80095c2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	3334      	adds	r3, #52	; 0x34
 8009532:	3330      	adds	r3, #48	; 0x30
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fbbf 	bl	8007cb8 <ld_word>
 800953a:	4603      	mov	r3, r0
 800953c:	2b01      	cmp	r3, #1
 800953e:	d140      	bne.n	80095c2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009542:	3301      	adds	r3, #1
 8009544:	4619      	mov	r1, r3
 8009546:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009548:	f7fe fe98 	bl	800827c <move_window>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d137      	bne.n	80095c2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	2200      	movs	r2, #0
 8009556:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	3334      	adds	r3, #52	; 0x34
 800955c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fba9 	bl	8007cb8 <ld_word>
 8009566:	4603      	mov	r3, r0
 8009568:	461a      	mov	r2, r3
 800956a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800956e:	429a      	cmp	r2, r3
 8009570:	d127      	bne.n	80095c2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	3334      	adds	r3, #52	; 0x34
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fbb6 	bl	8007ce8 <ld_dword>
 800957c:	4603      	mov	r3, r0
 800957e:	4a1c      	ldr	r2, [pc, #112]	; (80095f0 <find_volume+0x49c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d11e      	bne.n	80095c2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	3334      	adds	r3, #52	; 0x34
 8009588:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe fbab 	bl	8007ce8 <ld_dword>
 8009592:	4603      	mov	r3, r0
 8009594:	4a17      	ldr	r2, [pc, #92]	; (80095f4 <find_volume+0x4a0>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d113      	bne.n	80095c2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959c:	3334      	adds	r3, #52	; 0x34
 800959e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fba0 	bl	8007ce8 <ld_dword>
 80095a8:	4602      	mov	r2, r0
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	3334      	adds	r3, #52	; 0x34
 80095b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fb96 	bl	8007ce8 <ld_dword>
 80095bc:	4602      	mov	r2, r0
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80095c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80095ca:	4b0b      	ldr	r3, [pc, #44]	; (80095f8 <find_volume+0x4a4>)
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	3301      	adds	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <find_volume+0x4a4>)
 80095d4:	801a      	strh	r2, [r3, #0]
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <find_volume+0x4a4>)
 80095d8:	881a      	ldrh	r2, [r3, #0]
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80095de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095e0:	f7fe fde4 	bl	80081ac <clear_lock>
#endif
	return FR_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3758      	adds	r7, #88	; 0x58
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	41615252 	.word	0x41615252
 80095f4:	61417272 	.word	0x61417272
 80095f8:	200009a0 	.word	0x200009a0

080095fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009606:	2309      	movs	r3, #9
 8009608:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d02e      	beq.n	800966e <validate+0x72>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d02a      	beq.n	800966e <validate+0x72>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d025      	beq.n	800966e <validate+0x72>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	889a      	ldrh	r2, [r3, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	88db      	ldrh	r3, [r3, #6]
 800962c:	429a      	cmp	r2, r3
 800962e:	d11e      	bne.n	800966e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe fc3f 	bl	8007eb8 <lock_fs>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d014      	beq.n	800966a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	785b      	ldrb	r3, [r3, #1]
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fa98 	bl	8007b7c <disk_status>
 800964c:	4603      	mov	r3, r0
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d102      	bne.n	800965c <validate+0x60>
				res = FR_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
 800965a:	e008      	b.n	800966e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2100      	movs	r1, #0
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fc3e 	bl	8007ee4 <unlock_fs>
 8009668:	e001      	b.n	800966e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800966a:	230f      	movs	r3, #15
 800966c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <validate+0x7e>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	e000      	b.n	800967c <validate+0x80>
 800967a:	2300      	movs	r3, #0
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	6013      	str	r3, [r2, #0]
	return res;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800969e:	f107 0310 	add.w	r3, r7, #16
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fcbb 	bl	800901e <get_ldnumber>
 80096a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	da01      	bge.n	80096b4 <f_mount+0x28>
 80096b0:	230b      	movs	r3, #11
 80096b2:	e048      	b.n	8009746 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80096b4:	4a26      	ldr	r2, [pc, #152]	; (8009750 <f_mount+0xc4>)
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00f      	beq.n	80096e4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80096c4:	69b8      	ldr	r0, [r7, #24]
 80096c6:	f7fe fd71 	bl	80081ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fcde 	bl	800a090 <ff_del_syncobj>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <f_mount+0x52>
 80096da:	2302      	movs	r3, #2
 80096dc:	e033      	b.n	8009746 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2200      	movs	r2, #0
 80096e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00f      	beq.n	800970a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	330c      	adds	r3, #12
 80096f8:	4619      	mov	r1, r3
 80096fa:	4610      	mov	r0, r2
 80096fc:	f000 fcad 	bl	800a05a <ff_cre_syncobj>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <f_mount+0x7e>
 8009706:	2302      	movs	r3, #2
 8009708:	e01d      	b.n	8009746 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4910      	ldr	r1, [pc, #64]	; (8009750 <f_mount+0xc4>)
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <f_mount+0x94>
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d001      	beq.n	8009724 <f_mount+0x98>
 8009720:	2300      	movs	r3, #0
 8009722:	e010      	b.n	8009746 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009724:	f107 010c 	add.w	r1, r7, #12
 8009728:	f107 0308 	add.w	r3, r7, #8
 800972c:	2200      	movs	r2, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fd10 	bl	8009154 <find_volume>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	7dfa      	ldrb	r2, [r7, #23]
 800973c:	4611      	mov	r1, r2
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fbd0 	bl	8007ee4 <unlock_fs>
 8009744:	7dfb      	ldrb	r3, [r7, #23]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3720      	adds	r7, #32
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	2000099c 	.word	0x2000099c

08009754 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b098      	sub	sp, #96	; 0x60
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <f_open+0x18>
 8009768:	2309      	movs	r3, #9
 800976a:	e1b4      	b.n	8009ad6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009772:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009774:	79fa      	ldrb	r2, [r7, #7]
 8009776:	f107 0110 	add.w	r1, r7, #16
 800977a:	f107 0308 	add.w	r3, r7, #8
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff fce8 	bl	8009154 <find_volume>
 8009784:	4603      	mov	r3, r0
 8009786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800978a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800978e:	2b00      	cmp	r3, #0
 8009790:	f040 8191 	bne.w	8009ab6 <f_open+0x362>
		dj.obj.fs = fs;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	f107 0314 	add.w	r3, r7, #20
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fbcb 	bl	8008f3c <follow_path>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80097ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11a      	bne.n	80097ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80097b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80097b8:	b25b      	sxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da03      	bge.n	80097c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80097be:	2306      	movs	r3, #6
 80097c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80097c4:	e011      	b.n	80097ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bf14      	ite	ne
 80097d0:	2301      	movne	r3, #1
 80097d2:	2300      	moveq	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	461a      	mov	r2, r3
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fb9c 	bl	8007f1c <chk_lock>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	f003 031c 	and.w	r3, r3, #28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d07f      	beq.n	80098f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80097f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80097fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009800:	2b04      	cmp	r3, #4
 8009802:	d10e      	bne.n	8009822 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009804:	f7fe fbe6 	bl	8007fd4 <enq_lock>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d006      	beq.n	800981c <f_open+0xc8>
 800980e:	f107 0314 	add.w	r3, r7, #20
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff facb 	bl	8008dae <dir_register>
 8009818:	4603      	mov	r3, r0
 800981a:	e000      	b.n	800981e <f_open+0xca>
 800981c:	2312      	movs	r3, #18
 800981e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	f043 0308 	orr.w	r3, r3, #8
 8009828:	71fb      	strb	r3, [r7, #7]
 800982a:	e010      	b.n	800984e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800982c:	7ebb      	ldrb	r3, [r7, #26]
 800982e:	f003 0311 	and.w	r3, r3, #17
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <f_open+0xea>
					res = FR_DENIED;
 8009836:	2307      	movs	r3, #7
 8009838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800983c:	e007      	b.n	800984e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <f_open+0xfa>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800984e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009852:	2b00      	cmp	r3, #0
 8009854:	d168      	bne.n	8009928 <f_open+0x1d4>
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	f003 0308 	and.w	r3, r3, #8
 800985c:	2b00      	cmp	r3, #0
 800985e:	d063      	beq.n	8009928 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009860:	f7fd fc54 	bl	800710c <get_fattime>
 8009864:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	330e      	adds	r3, #14
 800986a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fa79 	bl	8007d64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009874:	3316      	adds	r3, #22
 8009876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fa73 	bl	8007d64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800987e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009880:	330b      	adds	r3, #11
 8009882:	2220      	movs	r2, #32
 8009884:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff f9fa 	bl	8008c86 <ld_clust>
 8009892:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009898:	2200      	movs	r2, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff fa12 	bl	8008cc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80098a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a2:	331c      	adds	r3, #28
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fa5c 	bl	8007d64 <st_dword>
					fs->wflag = 1;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2201      	movs	r2, #1
 80098b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80098b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d037      	beq.n	8009928 <f_open+0x1d4>
						dw = fs->winsect;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098bc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80098be:	f107 0314 	add.w	r3, r7, #20
 80098c2:	2200      	movs	r2, #0
 80098c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe ff25 	bl	8008716 <remove_chain>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80098d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d126      	bne.n	8009928 <f_open+0x1d4>
							res = move_window(fs, dw);
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fccc 	bl	800827c <move_window>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098ee:	3a01      	subs	r2, #1
 80098f0:	611a      	str	r2, [r3, #16]
 80098f2:	e019      	b.n	8009928 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80098f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d115      	bne.n	8009928 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80098fc:	7ebb      	ldrb	r3, [r7, #26]
 80098fe:	f003 0310 	and.w	r3, r3, #16
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009906:	2304      	movs	r3, #4
 8009908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800990c:	e00c      	b.n	8009928 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <f_open+0x1d4>
 8009918:	7ebb      	ldrb	r3, [r7, #26]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <f_open+0x1d4>
						res = FR_DENIED;
 8009922:	2307      	movs	r3, #7
 8009924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800992c:	2b00      	cmp	r3, #0
 800992e:	d128      	bne.n	8009982 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	f003 0308 	and.w	r3, r3, #8
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009940:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800994a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	bf14      	ite	ne
 800995a:	2301      	movne	r3, #1
 800995c:	2300      	moveq	r3, #0
 800995e:	b2db      	uxtb	r3, r3
 8009960:	461a      	mov	r2, r3
 8009962:	f107 0314 	add.w	r3, r7, #20
 8009966:	4611      	mov	r1, r2
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fb55 	bl	8008018 <inc_lock>
 800996e:	4602      	mov	r2, r0
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <f_open+0x22e>
 800997c:	2302      	movs	r3, #2
 800997e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009986:	2b00      	cmp	r3, #0
 8009988:	f040 8095 	bne.w	8009ab6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff f977 	bl	8008c86 <ld_clust>
 8009998:	4602      	mov	r2, r0
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800999e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a0:	331c      	adds	r3, #28
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe f9a0 	bl	8007ce8 <ld_dword>
 80099a8:	4602      	mov	r2, r0
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	88da      	ldrh	r2, [r3, #6]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	79fa      	ldrb	r2, [r7, #7]
 80099c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3330      	adds	r3, #48	; 0x30
 80099de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fa0a 	bl	8007dfe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d060      	beq.n	8009ab6 <f_open+0x362>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d05c      	beq.n	8009ab6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	895b      	ldrh	r3, [r3, #10]
 8009a08:	025b      	lsls	r3, r3, #9
 8009a0a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	657b      	str	r3, [r7, #84]	; 0x54
 8009a18:	e016      	b.n	8009a48 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fce7 	bl	80083f2 <get_fat>
 8009a24:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d802      	bhi.n	8009a32 <f_open+0x2de>
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d102      	bne.n	8009a40 <f_open+0x2ec>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	657b      	str	r3, [r7, #84]	; 0x54
 8009a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d103      	bne.n	8009a58 <f_open+0x304>
 8009a50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d8e0      	bhi.n	8009a1a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d127      	bne.n	8009ab6 <f_open+0x362>
 8009a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d022      	beq.n	8009ab6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fc9d 	bl	80083b4 <clust2sect>
 8009a7a:	6478      	str	r0, [r7, #68]	; 0x44
 8009a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d103      	bne.n	8009a8a <f_open+0x336>
						res = FR_INT_ERR;
 8009a82:	2302      	movs	r3, #2
 8009a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a88:	e015      	b.n	8009ab6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a8c:	0a5a      	lsrs	r2, r3, #9
 8009a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a90:	441a      	add	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	7858      	ldrb	r0, [r3, #1]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f7fe f8a9 	bl	8007bfc <disk_read>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <f_open+0x362>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <f_open+0x370>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe fa09 	bl	8007ee4 <unlock_fs>
 8009ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3760      	adds	r7, #96	; 0x60
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b08e      	sub	sp, #56	; 0x38
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]
 8009aea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f107 0214 	add.w	r2, r7, #20
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fd7c 	bl	80095fc <validate>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d107      	bne.n	8009b22 <f_read+0x44>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	7d5b      	ldrb	r3, [r3, #21]
 8009b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d009      	beq.n	8009b36 <f_read+0x58>
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe f9da 	bl	8007ee4 <unlock_fs>
 8009b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b34:	e13d      	b.n	8009db2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	7d1b      	ldrb	r3, [r3, #20]
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <f_read+0x72>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2107      	movs	r1, #7
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe f9cc 	bl	8007ee4 <unlock_fs>
 8009b4c:	2307      	movs	r3, #7
 8009b4e:	e130      	b.n	8009db2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	f240 811c 	bls.w	8009d9e <f_read+0x2c0>
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009b6a:	e118      	b.n	8009d9e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f040 80e4 	bne.w	8009d42 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	0a5b      	lsrs	r3, r3, #9
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	8952      	ldrh	r2, [r2, #10]
 8009b84:	3a01      	subs	r2, #1
 8009b86:	4013      	ands	r3, r2
 8009b88:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d139      	bne.n	8009c04 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b9e:	e013      	b.n	8009bc8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d007      	beq.n	8009bb8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	4619      	mov	r1, r3
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7fe feae 	bl	8008910 <clmt_clust>
 8009bb4:	6338      	str	r0, [r7, #48]	; 0x30
 8009bb6:	e007      	b.n	8009bc8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f7fe fc16 	bl	80083f2 <get_fat>
 8009bc6:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d809      	bhi.n	8009be2 <f_read+0x104>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	755a      	strb	r2, [r3, #21]
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2102      	movs	r1, #2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe f983 	bl	8007ee4 <unlock_fs>
 8009bde:	2302      	movs	r3, #2
 8009be0:	e0e7      	b.n	8009db2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be8:	d109      	bne.n	8009bfe <f_read+0x120>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	755a      	strb	r2, [r3, #21]
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe f975 	bl	8007ee4 <unlock_fs>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e0d9      	b.n	8009db2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c02:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	f7fe fbd1 	bl	80083b4 <clust2sect>
 8009c12:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d109      	bne.n	8009c2e <f_read+0x150>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	755a      	strb	r2, [r3, #21]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2102      	movs	r1, #2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fe f95d 	bl	8007ee4 <unlock_fs>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e0c1      	b.n	8009db2 <f_read+0x2d4>
			sect += csect;
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	4413      	add	r3, r2
 8009c34:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	0a5b      	lsrs	r3, r3, #9
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d03e      	beq.n	8009cc0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	4413      	add	r3, r2
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	8952      	ldrh	r2, [r2, #10]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d905      	bls.n	8009c5c <f_read+0x17e>
					cc = fs->csize - csect;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	895b      	ldrh	r3, [r3, #10]
 8009c54:	461a      	mov	r2, r3
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	7858      	ldrb	r0, [r3, #1]
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c66:	f7fd ffc9 	bl	8007bfc <disk_read>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <f_read+0x1a6>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	755a      	strb	r2, [r3, #21]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2101      	movs	r1, #1
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe f932 	bl	8007ee4 <unlock_fs>
 8009c80:	2301      	movs	r3, #1
 8009c82:	e096      	b.n	8009db2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	7d1b      	ldrb	r3, [r3, #20]
 8009c88:	b25b      	sxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	da14      	bge.n	8009cb8 <f_read+0x1da>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1a      	ldr	r2, [r3, #32]
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d90d      	bls.n	8009cb8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a1a      	ldr	r2, [r3, #32]
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	025b      	lsls	r3, r3, #9
 8009ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca8:	18d0      	adds	r0, r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3330      	adds	r3, #48	; 0x30
 8009cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	f7fe f882 	bl	8007dbc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	025b      	lsls	r3, r3, #9
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009cbe:	e05a      	b.n	8009d76 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d038      	beq.n	8009d3c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	7d1b      	ldrb	r3, [r3, #20]
 8009cce:	b25b      	sxtb	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	da1d      	bge.n	8009d10 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	7858      	ldrb	r0, [r3, #1]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a1a      	ldr	r2, [r3, #32]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f7fd ffaa 	bl	8007c3c <disk_write>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <f_read+0x224>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	755a      	strb	r2, [r3, #21]
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe f8f3 	bl	8007ee4 <unlock_fs>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e057      	b.n	8009db2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	7d1b      	ldrb	r3, [r3, #20]
 8009d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	7858      	ldrb	r0, [r3, #1]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	f7fd ff6d 	bl	8007bfc <disk_read>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d009      	beq.n	8009d3c <f_read+0x25e>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	755a      	strb	r2, [r3, #21]
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2101      	movs	r1, #1
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe f8d6 	bl	8007ee4 <unlock_fs>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e03a      	b.n	8009db2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d901      	bls.n	8009d5c <f_read+0x27e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6a:	4413      	add	r3, r2
 8009d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d72:	f7fe f823 	bl	8007dbc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	4413      	add	r3, r2
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d84:	441a      	add	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	619a      	str	r2, [r3, #24]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d90:	441a      	add	r2, r3
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f47f aee3 	bne.w	8009b6c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe f89a 	bl	8007ee4 <unlock_fs>
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3738      	adds	r7, #56	; 0x38
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f107 0208 	add.w	r2, r7, #8
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff fc16 	bl	80095fc <validate>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d16d      	bne.n	8009eb6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7d1b      	ldrb	r3, [r3, #20]
 8009dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d067      	beq.n	8009eb6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7d1b      	ldrb	r3, [r3, #20]
 8009dea:	b25b      	sxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da1a      	bge.n	8009e26 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	7858      	ldrb	r0, [r3, #1]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1a      	ldr	r2, [r3, #32]
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f7fd ff1c 	bl	8007c3c <disk_write>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d006      	beq.n	8009e18 <f_sync+0x5e>
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe f868 	bl	8007ee4 <unlock_fs>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e055      	b.n	8009ec4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	7d1b      	ldrb	r3, [r3, #20]
 8009e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009e26:	f7fd f971 	bl	800710c <get_fattime>
 8009e2a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f7fe fa21 	bl	800827c <move_window>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d138      	bne.n	8009eb6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	330b      	adds	r3, #11
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	330b      	adds	r3, #11
 8009e54:	f042 0220 	orr.w	r2, r2, #32
 8009e58:	b2d2      	uxtb	r2, r2
 8009e5a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6818      	ldr	r0, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	461a      	mov	r2, r3
 8009e66:	68f9      	ldr	r1, [r7, #12]
 8009e68:	f7fe ff2c 	bl	8008cc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f103 021c 	add.w	r2, r3, #28
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	4619      	mov	r1, r3
 8009e78:	4610      	mov	r0, r2
 8009e7a:	f7fd ff73 	bl	8007d64 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3316      	adds	r3, #22
 8009e82:	6939      	ldr	r1, [r7, #16]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fd ff6d 	bl	8007d64 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3312      	adds	r3, #18
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fd ff4c 	bl	8007d2e <st_word>
					fs->wflag = 1;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fa1a 	bl	80082d8 <sync_fs>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	7d1b      	ldrb	r3, [r3, #20]
 8009eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	7dfa      	ldrb	r2, [r7, #23]
 8009eba:	4611      	mov	r1, r2
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fe f811 	bl	8007ee4 <unlock_fs>
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7ff ff70 	bl	8009dba <f_sync>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d11d      	bne.n	8009f20 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f107 0208 	add.w	r2, r7, #8
 8009eea:	4611      	mov	r1, r2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff fb85 	bl	80095fc <validate>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d111      	bne.n	8009f20 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe f917 	bl	8008134 <dec_lock>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fd ffe2 	bl	8007ee4 <unlock_fs>
#endif
		}
	}
	return res;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b088      	sub	sp, #32
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009f3e:	e01b      	b.n	8009f78 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009f40:	f107 0310 	add.w	r3, r7, #16
 8009f44:	f107 0114 	add.w	r1, r7, #20
 8009f48:	2201      	movs	r2, #1
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fdc7 	bl	8009ade <f_read>
		if (rc != 1) break;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d116      	bne.n	8009f84 <f_gets+0x5a>
		c = s[0];
 8009f56:	7d3b      	ldrb	r3, [r7, #20]
 8009f58:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	2b0d      	cmp	r3, #13
 8009f5e:	d100      	bne.n	8009f62 <f_gets+0x38>
 8009f60:	e00a      	b.n	8009f78 <f_gets+0x4e>
		*p++ = c;
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	61ba      	str	r2, [r7, #24]
 8009f68:	7dfa      	ldrb	r2, [r7, #23]
 8009f6a:	701a      	strb	r2, [r3, #0]
		n++;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	2b0a      	cmp	r3, #10
 8009f76:	d007      	beq.n	8009f88 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	dbde      	blt.n	8009f40 <f_gets+0x16>
 8009f82:	e002      	b.n	8009f8a <f_gets+0x60>
		if (rc != 1) break;
 8009f84:	bf00      	nop
 8009f86:	e000      	b.n	8009f8a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009f88:	bf00      	nop
	}
	*p = 0;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <f_gets+0x70>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	e000      	b.n	8009f9c <f_gets+0x72>
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3720      	adds	r7, #32
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009fba:	4b1f      	ldr	r3, [pc, #124]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009fbc:	7a5b      	ldrb	r3, [r3, #9]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d131      	bne.n	800a028 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009fc4:	4b1c      	ldr	r3, [pc, #112]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009fc6:	7a5b      	ldrb	r3, [r3, #9]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009fce:	2100      	movs	r1, #0
 8009fd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009fd2:	4b19      	ldr	r3, [pc, #100]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009fd4:	7a5b      	ldrb	r3, [r3, #9]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	4a17      	ldr	r2, [pc, #92]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009fe4:	7a5b      	ldrb	r3, [r3, #9]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4b13      	ldr	r3, [pc, #76]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009fec:	4413      	add	r3, r2
 8009fee:	79fa      	ldrb	r2, [r7, #7]
 8009ff0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ff2:	4b11      	ldr	r3, [pc, #68]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009ff4:	7a5b      	ldrb	r3, [r3, #9]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	b2d1      	uxtb	r1, r2
 8009ffc:	4a0e      	ldr	r2, [pc, #56]	; (800a038 <FATFS_LinkDriverEx+0x94>)
 8009ffe:	7251      	strb	r1, [r2, #9]
 800a000:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a002:	7dbb      	ldrb	r3, [r7, #22]
 800a004:	3330      	adds	r3, #48	; 0x30
 800a006:	b2da      	uxtb	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	3301      	adds	r3, #1
 800a010:	223a      	movs	r2, #58	; 0x3a
 800a012:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	3302      	adds	r3, #2
 800a018:	222f      	movs	r2, #47	; 0x2f
 800a01a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	3303      	adds	r3, #3
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	200009c4 	.word	0x200009c4

0800a03c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a046:	2200      	movs	r2, #0
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff ffaa 	bl	8009fa4 <FATFS_LinkDriverEx>
 800a050:	4603      	mov	r3, r0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	4603      	mov	r3, r0
 800a062:	6039      	str	r1, [r7, #0]
 800a064:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a066:	2200      	movs	r2, #0
 800a068:	2101      	movs	r1, #1
 800a06a:	2001      	movs	r0, #1
 800a06c:	f000 f977 	bl	800a35e <osSemaphoreNew>
 800a070:	4602      	mov	r2, r0
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bf14      	ite	ne
 800a07e:	2301      	movne	r3, #1
 800a080:	2300      	moveq	r3, #0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	60fb      	str	r3, [r7, #12]

    return ret;
 800a086:	68fb      	ldr	r3, [r7, #12]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fa7f 	bl	800a59c <osSemaphoreDelete>
#endif
    return 1;
 800a09e:	2301      	movs	r3, #1
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a0b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f9d9 	bl	800a470 <osSemaphoreAcquire>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa1a 	bl	800a514 <osSemaphoreRelease>
#endif
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <__NVIC_SetPriority>:
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	6039      	str	r1, [r7, #0]
 800a0f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	db0a      	blt.n	800a112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	490c      	ldr	r1, [pc, #48]	; (800a134 <__NVIC_SetPriority+0x4c>)
 800a102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a106:	0112      	lsls	r2, r2, #4
 800a108:	b2d2      	uxtb	r2, r2
 800a10a:	440b      	add	r3, r1
 800a10c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a110:	e00a      	b.n	800a128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	b2da      	uxtb	r2, r3
 800a116:	4908      	ldr	r1, [pc, #32]	; (800a138 <__NVIC_SetPriority+0x50>)
 800a118:	79fb      	ldrb	r3, [r7, #7]
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	3b04      	subs	r3, #4
 800a120:	0112      	lsls	r2, r2, #4
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	440b      	add	r3, r1
 800a126:	761a      	strb	r2, [r3, #24]
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	e000e100 	.word	0xe000e100
 800a138:	e000ed00 	.word	0xe000ed00

0800a13c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a140:	4b05      	ldr	r3, [pc, #20]	; (800a158 <SysTick_Handler+0x1c>)
 800a142:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a144:	f002 faf0 	bl	800c728 <xTaskGetSchedulerState>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d001      	beq.n	800a152 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a14e:	f003 f9d3 	bl	800d4f8 <xPortSysTickHandler>
  }
}
 800a152:	bf00      	nop
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	e000e010 	.word	0xe000e010

0800a15c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a160:	2100      	movs	r1, #0
 800a162:	f06f 0004 	mvn.w	r0, #4
 800a166:	f7ff ffbf 	bl	800a0e8 <__NVIC_SetPriority>
#endif
}
 800a16a:	bf00      	nop
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a176:	f3ef 8305 	mrs	r3, IPSR
 800a17a:	603b      	str	r3, [r7, #0]
  return(result);
 800a17c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a182:	f06f 0305 	mvn.w	r3, #5
 800a186:	607b      	str	r3, [r7, #4]
 800a188:	e00c      	b.n	800a1a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a18a:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <osKernelInitialize+0x44>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d105      	bne.n	800a19e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a192:	4b08      	ldr	r3, [pc, #32]	; (800a1b4 <osKernelInitialize+0x44>)
 800a194:	2201      	movs	r2, #1
 800a196:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a198:	2300      	movs	r3, #0
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	e002      	b.n	800a1a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a19e:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1a4:	687b      	ldr	r3, [r7, #4]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	200009d0 	.word	0x200009d0

0800a1b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1be:	f3ef 8305 	mrs	r3, IPSR
 800a1c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a1c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1ca:	f06f 0305 	mvn.w	r3, #5
 800a1ce:	607b      	str	r3, [r7, #4]
 800a1d0:	e010      	b.n	800a1f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1d2:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <osKernelStart+0x48>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d109      	bne.n	800a1ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1da:	f7ff ffbf 	bl	800a15c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1de:	4b08      	ldr	r3, [pc, #32]	; (800a200 <osKernelStart+0x48>)
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1e4:	f001 fe58 	bl	800be98 <vTaskStartScheduler>
      stat = osOK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	e002      	b.n	800a1f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1f4:	687b      	ldr	r3, [r7, #4]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200009d0 	.word	0x200009d0

0800a204 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a204:	b580      	push	{r7, lr}
 800a206:	b08e      	sub	sp, #56	; 0x38
 800a208:	af04      	add	r7, sp, #16
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a210:	2300      	movs	r3, #0
 800a212:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a214:	f3ef 8305 	mrs	r3, IPSR
 800a218:	617b      	str	r3, [r7, #20]
  return(result);
 800a21a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d17e      	bne.n	800a31e <osThreadNew+0x11a>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d07b      	beq.n	800a31e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a226:	2380      	movs	r3, #128	; 0x80
 800a228:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a22a:	2318      	movs	r3, #24
 800a22c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a232:	f04f 33ff 	mov.w	r3, #4294967295
 800a236:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d045      	beq.n	800a2ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d002      	beq.n	800a24c <osThreadNew+0x48>
        name = attr->name;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d008      	beq.n	800a272 <osThreadNew+0x6e>
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	2b38      	cmp	r3, #56	; 0x38
 800a264:	d805      	bhi.n	800a272 <osThreadNew+0x6e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <osThreadNew+0x72>
        return (NULL);
 800a272:	2300      	movs	r3, #0
 800a274:	e054      	b.n	800a320 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	089b      	lsrs	r3, r3, #2
 800a284:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00e      	beq.n	800a2ac <osThreadNew+0xa8>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	2b5b      	cmp	r3, #91	; 0x5b
 800a294:	d90a      	bls.n	800a2ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d006      	beq.n	800a2ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <osThreadNew+0xa8>
        mem = 1;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	e010      	b.n	800a2ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10c      	bne.n	800a2ce <osThreadNew+0xca>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d108      	bne.n	800a2ce <osThreadNew+0xca>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <osThreadNew+0xca>
          mem = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61bb      	str	r3, [r7, #24]
 800a2c8:	e001      	b.n	800a2ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d110      	bne.n	800a2f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2dc:	9202      	str	r2, [sp, #8]
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6a3a      	ldr	r2, [r7, #32]
 800a2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f001 fbfe 	bl	800baec <xTaskCreateStatic>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	613b      	str	r3, [r7, #16]
 800a2f4:	e013      	b.n	800a31e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d110      	bne.n	800a31e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	f107 0310 	add.w	r3, r7, #16
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f001 fc49 	bl	800bba6 <xTaskCreate>
 800a314:	4603      	mov	r3, r0
 800a316:	2b01      	cmp	r3, #1
 800a318:	d001      	beq.n	800a31e <osThreadNew+0x11a>
            hTask = NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a31e:	693b      	ldr	r3, [r7, #16]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3728      	adds	r7, #40	; 0x28
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a330:	f3ef 8305 	mrs	r3, IPSR
 800a334:	60bb      	str	r3, [r7, #8]
  return(result);
 800a336:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d003      	beq.n	800a344 <osDelay+0x1c>
    stat = osErrorISR;
 800a33c:	f06f 0305 	mvn.w	r3, #5
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	e007      	b.n	800a354 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a344:	2300      	movs	r3, #0
 800a346:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f001 fd6e 	bl	800be30 <vTaskDelay>
    }
  }

  return (stat);
 800a354:	68fb      	ldr	r3, [r7, #12]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08a      	sub	sp, #40	; 0x28
 800a362:	af02      	add	r7, sp, #8
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a36e:	f3ef 8305 	mrs	r3, IPSR
 800a372:	613b      	str	r3, [r7, #16]
  return(result);
 800a374:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a376:	2b00      	cmp	r3, #0
 800a378:	d175      	bne.n	800a466 <osSemaphoreNew+0x108>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d072      	beq.n	800a466 <osSemaphoreNew+0x108>
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	429a      	cmp	r2, r3
 800a386:	d86e      	bhi.n	800a466 <osSemaphoreNew+0x108>
    mem = -1;
 800a388:	f04f 33ff 	mov.w	r3, #4294967295
 800a38c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d015      	beq.n	800a3c0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <osSemaphoreNew+0x4c>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	2b4f      	cmp	r3, #79	; 0x4f
 800a3a2:	d902      	bls.n	800a3aa <osSemaphoreNew+0x4c>
        mem = 1;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	61bb      	str	r3, [r7, #24]
 800a3a8:	e00c      	b.n	800a3c4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d108      	bne.n	800a3c4 <osSemaphoreNew+0x66>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d104      	bne.n	800a3c4 <osSemaphoreNew+0x66>
          mem = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	e001      	b.n	800a3c4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ca:	d04c      	beq.n	800a466 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d128      	bne.n	800a424 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d10a      	bne.n	800a3ee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	2203      	movs	r2, #3
 800a3de:	9200      	str	r2, [sp, #0]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	f000 fb9f 	bl	800ab28 <xQueueGenericCreateStatic>
 800a3ea:	61f8      	str	r0, [r7, #28]
 800a3ec:	e005      	b.n	800a3fa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	f000 fc10 	bl	800ac18 <xQueueGenericCreate>
 800a3f8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d022      	beq.n	800a446 <osSemaphoreNew+0xe8>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01f      	beq.n	800a446 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a406:	2300      	movs	r3, #0
 800a408:	2200      	movs	r2, #0
 800a40a:	2100      	movs	r1, #0
 800a40c:	69f8      	ldr	r0, [r7, #28]
 800a40e:	f000 fccb 	bl	800ada8 <xQueueGenericSend>
 800a412:	4603      	mov	r3, r0
 800a414:	2b01      	cmp	r3, #1
 800a416:	d016      	beq.n	800a446 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a418:	69f8      	ldr	r0, [r7, #28]
 800a41a:	f001 f993 	bl	800b744 <vQueueDelete>
            hSemaphore = NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	61fb      	str	r3, [r7, #28]
 800a422:	e010      	b.n	800a446 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d108      	bne.n	800a43c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	461a      	mov	r2, r3
 800a430:	68b9      	ldr	r1, [r7, #8]
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f000 fc4d 	bl	800acd2 <xQueueCreateCountingSemaphoreStatic>
 800a438:	61f8      	str	r0, [r7, #28]
 800a43a:	e004      	b.n	800a446 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 fc7e 	bl	800ad40 <xQueueCreateCountingSemaphore>
 800a444:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00c      	beq.n	800a466 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <osSemaphoreNew+0xfc>
          name = attr->name;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	e001      	b.n	800a45e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a45e:	6979      	ldr	r1, [r7, #20]
 800a460:	69f8      	ldr	r0, [r7, #28]
 800a462:	f001 fabb 	bl	800b9dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a466:	69fb      	ldr	r3, [r7, #28]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3720      	adds	r7, #32
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d103      	bne.n	800a490 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a488:	f06f 0303 	mvn.w	r3, #3
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	e039      	b.n	800a504 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a490:	f3ef 8305 	mrs	r3, IPSR
 800a494:	60fb      	str	r3, [r7, #12]
  return(result);
 800a496:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d022      	beq.n	800a4e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a4a2:	f06f 0303 	mvn.w	r3, #3
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e02c      	b.n	800a504 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	6938      	ldr	r0, [r7, #16]
 800a4b8:	f001 f888 	bl	800b5cc <xQueueReceiveFromISR>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d003      	beq.n	800a4ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a4c2:	f06f 0302 	mvn.w	r3, #2
 800a4c6:	617b      	str	r3, [r7, #20]
 800a4c8:	e01c      	b.n	800a504 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d019      	beq.n	800a504 <osSemaphoreAcquire+0x94>
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <osSemaphoreAcquire+0xa0>)
 800a4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	e010      	b.n	800a504 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6938      	ldr	r0, [r7, #16]
 800a4e6:	f000 ff65 	bl	800b3b4 <xQueueSemaphoreTake>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d009      	beq.n	800a504 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a4f6:	f06f 0301 	mvn.w	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e002      	b.n	800a504 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a4fe:	f06f 0302 	mvn.w	r3, #2
 800a502:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a504:	697b      	ldr	r3, [r7, #20]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a52a:	f06f 0303 	mvn.w	r3, #3
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	e02c      	b.n	800a58c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a532:	f3ef 8305 	mrs	r3, IPSR
 800a536:	60fb      	str	r3, [r7, #12]
  return(result);
 800a538:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01a      	beq.n	800a574 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a53e:	2300      	movs	r3, #0
 800a540:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a542:	f107 0308 	add.w	r3, r7, #8
 800a546:	4619      	mov	r1, r3
 800a548:	6938      	ldr	r0, [r7, #16]
 800a54a:	f000 fdc6 	bl	800b0da <xQueueGiveFromISR>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b01      	cmp	r3, #1
 800a552:	d003      	beq.n	800a55c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a554:	f06f 0302 	mvn.w	r3, #2
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	e017      	b.n	800a58c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d014      	beq.n	800a58c <osSemaphoreRelease+0x78>
 800a562:	4b0d      	ldr	r3, [pc, #52]	; (800a598 <osSemaphoreRelease+0x84>)
 800a564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	e00b      	b.n	800a58c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a574:	2300      	movs	r3, #0
 800a576:	2200      	movs	r2, #0
 800a578:	2100      	movs	r1, #0
 800a57a:	6938      	ldr	r0, [r7, #16]
 800a57c:	f000 fc14 	bl	800ada8 <xQueueGenericSend>
 800a580:	4603      	mov	r3, r0
 800a582:	2b01      	cmp	r3, #1
 800a584:	d002      	beq.n	800a58c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a586:	f06f 0302 	mvn.w	r3, #2
 800a58a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a58c:	697b      	ldr	r3, [r7, #20]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5a8:	f3ef 8305 	mrs	r3, IPSR
 800a5ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a5b4:	f06f 0305 	mvn.w	r3, #5
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	e00e      	b.n	800a5da <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d103      	bne.n	800a5ca <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a5c2:	f06f 0303 	mvn.w	r3, #3
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	e007      	b.n	800a5da <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f001 fa30 	bl	800ba30 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a5d4:	6938      	ldr	r0, [r7, #16]
 800a5d6:	f001 f8b5 	bl	800b744 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a5da:	697b      	ldr	r3, [r7, #20]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08a      	sub	sp, #40	; 0x28
 800a5e8:	af02      	add	r7, sp, #8
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5f4:	f3ef 8305 	mrs	r3, IPSR
 800a5f8:	613b      	str	r3, [r7, #16]
  return(result);
 800a5fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d15f      	bne.n	800a6c0 <osMessageQueueNew+0xdc>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d05c      	beq.n	800a6c0 <osMessageQueueNew+0xdc>
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d059      	beq.n	800a6c0 <osMessageQueueNew+0xdc>
    mem = -1;
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295
 800a610:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d029      	beq.n	800a66c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d012      	beq.n	800a646 <osMessageQueueNew+0x62>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	2b4f      	cmp	r3, #79	; 0x4f
 800a626:	d90e      	bls.n	800a646 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00a      	beq.n	800a646 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	695a      	ldr	r2, [r3, #20]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	fb01 f303 	mul.w	r3, r1, r3
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d302      	bcc.n	800a646 <osMessageQueueNew+0x62>
        mem = 1;
 800a640:	2301      	movs	r3, #1
 800a642:	61bb      	str	r3, [r7, #24]
 800a644:	e014      	b.n	800a670 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d110      	bne.n	800a670 <osMessageQueueNew+0x8c>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10c      	bne.n	800a670 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d108      	bne.n	800a670 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d104      	bne.n	800a670 <osMessageQueueNew+0x8c>
          mem = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	e001      	b.n	800a670 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d10b      	bne.n	800a68e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691a      	ldr	r2, [r3, #16]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	2100      	movs	r1, #0
 800a680:	9100      	str	r1, [sp, #0]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 fa4f 	bl	800ab28 <xQueueGenericCreateStatic>
 800a68a:	61f8      	str	r0, [r7, #28]
 800a68c:	e008      	b.n	800a6a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d105      	bne.n	800a6a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a694:	2200      	movs	r2, #0
 800a696:	68b9      	ldr	r1, [r7, #8]
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 fabd 	bl	800ac18 <xQueueGenericCreate>
 800a69e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00c      	beq.n	800a6c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d003      	beq.n	800a6b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	617b      	str	r3, [r7, #20]
 800a6b2:	e001      	b.n	800a6b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a6b8:	6979      	ldr	r1, [r7, #20]
 800a6ba:	69f8      	ldr	r0, [r7, #28]
 800a6bc:	f001 f98e 	bl	800b9dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a6c0:	69fb      	ldr	r3, [r7, #28]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	603b      	str	r3, [r7, #0]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6e4:	f3ef 8305 	mrs	r3, IPSR
 800a6e8:	617b      	str	r3, [r7, #20]
  return(result);
 800a6ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d028      	beq.n	800a742 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d005      	beq.n	800a702 <osMessageQueuePut+0x36>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <osMessageQueuePut+0x36>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a702:	f06f 0303 	mvn.w	r3, #3
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	e038      	b.n	800a77c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a70e:	f107 0210 	add.w	r2, r7, #16
 800a712:	2300      	movs	r3, #0
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	69b8      	ldr	r0, [r7, #24]
 800a718:	f000 fc44 	bl	800afa4 <xQueueGenericSendFromISR>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d003      	beq.n	800a72a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a722:	f06f 0302 	mvn.w	r3, #2
 800a726:	61fb      	str	r3, [r7, #28]
 800a728:	e028      	b.n	800a77c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d025      	beq.n	800a77c <osMessageQueuePut+0xb0>
 800a730:	4b15      	ldr	r3, [pc, #84]	; (800a788 <osMessageQueuePut+0xbc>)
 800a732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	e01c      	b.n	800a77c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <osMessageQueuePut+0x82>
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d103      	bne.n	800a756 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a74e:	f06f 0303 	mvn.w	r3, #3
 800a752:	61fb      	str	r3, [r7, #28]
 800a754:	e012      	b.n	800a77c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a756:	2300      	movs	r3, #0
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	69b8      	ldr	r0, [r7, #24]
 800a75e:	f000 fb23 	bl	800ada8 <xQueueGenericSend>
 800a762:	4603      	mov	r3, r0
 800a764:	2b01      	cmp	r3, #1
 800a766:	d009      	beq.n	800a77c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a76e:	f06f 0301 	mvn.w	r3, #1
 800a772:	61fb      	str	r3, [r7, #28]
 800a774:	e002      	b.n	800a77c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a776:	f06f 0302 	mvn.w	r3, #2
 800a77a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a77c:	69fb      	ldr	r3, [r7, #28]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3720      	adds	r7, #32
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	e000ed04 	.word	0xe000ed04

0800a78c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a2:	f3ef 8305 	mrs	r3, IPSR
 800a7a6:	617b      	str	r3, [r7, #20]
  return(result);
 800a7a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d028      	beq.n	800a800 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <osMessageQueueGet+0x34>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <osMessageQueueGet+0x34>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a7c0:	f06f 0303 	mvn.w	r3, #3
 800a7c4:	61fb      	str	r3, [r7, #28]
 800a7c6:	e037      	b.n	800a838 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a7cc:	f107 0310 	add.w	r3, r7, #16
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	68b9      	ldr	r1, [r7, #8]
 800a7d4:	69b8      	ldr	r0, [r7, #24]
 800a7d6:	f000 fef9 	bl	800b5cc <xQueueReceiveFromISR>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d003      	beq.n	800a7e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a7e0:	f06f 0302 	mvn.w	r3, #2
 800a7e4:	61fb      	str	r3, [r7, #28]
 800a7e6:	e027      	b.n	800a838 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d024      	beq.n	800a838 <osMessageQueueGet+0xac>
 800a7ee:	4b15      	ldr	r3, [pc, #84]	; (800a844 <osMessageQueueGet+0xb8>)
 800a7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	e01b      	b.n	800a838 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <osMessageQueueGet+0x80>
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a80c:	f06f 0303 	mvn.w	r3, #3
 800a810:	61fb      	str	r3, [r7, #28]
 800a812:	e011      	b.n	800a838 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	69b8      	ldr	r0, [r7, #24]
 800a81a:	f000 fceb 	bl	800b1f4 <xQueueReceive>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b01      	cmp	r3, #1
 800a822:	d009      	beq.n	800a838 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a82a:	f06f 0301 	mvn.w	r3, #1
 800a82e:	61fb      	str	r3, [r7, #28]
 800a830:	e002      	b.n	800a838 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a832:	f06f 0302 	mvn.w	r3, #2
 800a836:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a838:	69fb      	ldr	r3, [r7, #28]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <osMessageQueueGetCount+0x18>
    count = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	e00e      	b.n	800a87e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a860:	f3ef 8305 	mrs	r3, IPSR
 800a864:	60fb      	str	r3, [r7, #12]
  return(result);
 800a866:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d004      	beq.n	800a876 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800a86c:	6938      	ldr	r0, [r7, #16]
 800a86e:	f000 ff4b 	bl	800b708 <uxQueueMessagesWaitingFromISR>
 800a872:	6178      	str	r0, [r7, #20]
 800a874:	e003      	b.n	800a87e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800a876:	6938      	ldr	r0, [r7, #16]
 800a878:	f000 ff28 	bl	800b6cc <uxQueueMessagesWaiting>
 800a87c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800a87e:	697b      	ldr	r3, [r7, #20]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	4a07      	ldr	r2, [pc, #28]	; (800a8b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	4a06      	ldr	r2, [pc, #24]	; (800a8b8 <vApplicationGetIdleTaskMemory+0x30>)
 800a89e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2280      	movs	r2, #128	; 0x80
 800a8a4:	601a      	str	r2, [r3, #0]
}
 800a8a6:	bf00      	nop
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	200009d4 	.word	0x200009d4
 800a8b8:	20000a30 	.word	0x20000a30

0800a8bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4a07      	ldr	r2, [pc, #28]	; (800a8e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a8cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4a06      	ldr	r2, [pc, #24]	; (800a8ec <vApplicationGetTimerTaskMemory+0x30>)
 800a8d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8da:	601a      	str	r2, [r3, #0]
}
 800a8dc:	bf00      	nop
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	20000c30 	.word	0x20000c30
 800a8ec:	20000c8c 	.word	0x20000c8c

0800a8f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f103 0208 	add.w	r2, r3, #8
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f04f 32ff 	mov.w	r2, #4294967295
 800a908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f103 0208 	add.w	r2, r3, #8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f103 0208 	add.w	r2, r3, #8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a93e:	bf00      	nop
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
}
 800a986:	bf00      	nop
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a8:	d103      	bne.n	800a9b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	e00c      	b.n	800a9cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e002      	b.n	800a9c0 <vListInsert+0x2e>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d2f6      	bcs.n	800a9ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	601a      	str	r2, [r3, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6892      	ldr	r2, [r2, #8]
 800aa1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6852      	ldr	r2, [r2, #4]
 800aa24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d103      	bne.n	800aa38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	1e5a      	subs	r2, r3, #1
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa82:	f002 fca7 	bl	800d3d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8e:	68f9      	ldr	r1, [r7, #12]
 800aa90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa92:	fb01 f303 	mul.w	r3, r1, r3
 800aa96:	441a      	add	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab2:	3b01      	subs	r3, #1
 800aab4:	68f9      	ldr	r1, [r7, #12]
 800aab6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aab8:	fb01 f303 	mul.w	r3, r1, r3
 800aabc:	441a      	add	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	22ff      	movs	r2, #255	; 0xff
 800aac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	22ff      	movs	r2, #255	; 0xff
 800aace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d114      	bne.n	800ab02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d01a      	beq.n	800ab16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3310      	adds	r3, #16
 800aae4:	4618      	mov	r0, r3
 800aae6:	f001 fc61 	bl	800c3ac <xTaskRemoveFromEventList>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d012      	beq.n	800ab16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aaf0:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <xQueueGenericReset+0xcc>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	e009      	b.n	800ab16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3310      	adds	r3, #16
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff fef2 	bl	800a8f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	3324      	adds	r3, #36	; 0x24
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff feed 	bl	800a8f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab16:	f002 fc8d 	bl	800d434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab1a:	2301      	movs	r3, #1
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	e000ed04 	.word	0xe000ed04

0800ab28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08e      	sub	sp, #56	; 0x38
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10a      	bne.n	800ab6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <xQueueGenericCreateStatic+0x52>
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <xQueueGenericCreateStatic+0x56>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e000      	b.n	800ab80 <xQueueGenericCreateStatic+0x58>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10a      	bne.n	800ab9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	623b      	str	r3, [r7, #32]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d102      	bne.n	800aba6 <xQueueGenericCreateStatic+0x7e>
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <xQueueGenericCreateStatic+0x82>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e000      	b.n	800abac <xQueueGenericCreateStatic+0x84>
 800abaa:	2300      	movs	r3, #0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	61fb      	str	r3, [r7, #28]
}
 800abc2:	bf00      	nop
 800abc4:	e7fe      	b.n	800abc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abc6:	2350      	movs	r3, #80	; 0x50
 800abc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b50      	cmp	r3, #80	; 0x50
 800abce:	d00a      	beq.n	800abe6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	61bb      	str	r3, [r7, #24]
}
 800abe2:	bf00      	nop
 800abe4:	e7fe      	b.n	800abe4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abe6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00d      	beq.n	800ac0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	4613      	mov	r3, r2
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	68b9      	ldr	r1, [r7, #8]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 f83f 	bl	800ac8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3730      	adds	r7, #48	; 0x30
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08a      	sub	sp, #40	; 0x28
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	4613      	mov	r3, r2
 800ac24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10a      	bne.n	800ac42 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	613b      	str	r3, [r7, #16]
}
 800ac3e:	bf00      	nop
 800ac40:	e7fe      	b.n	800ac40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	fb02 f303 	mul.w	r3, r2, r3
 800ac4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	3350      	adds	r3, #80	; 0x50
 800ac50:	4618      	mov	r0, r3
 800ac52:	f002 fce1 	bl	800d618 <pvPortMalloc>
 800ac56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d011      	beq.n	800ac82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	3350      	adds	r3, #80	; 0x50
 800ac66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac70:	79fa      	ldrb	r2, [r7, #7]
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	4613      	mov	r3, r2
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f805 	bl	800ac8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac82:	69bb      	ldr	r3, [r7, #24]
	}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3720      	adds	r7, #32
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	e002      	b.n	800acae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acba:	2101      	movs	r1, #1
 800acbc:	69b8      	ldr	r0, [r7, #24]
 800acbe:	f7ff fecb 	bl	800aa58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b08a      	sub	sp, #40	; 0x28
 800acd6:	af02      	add	r7, sp, #8
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10a      	bne.n	800acfa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	61bb      	str	r3, [r7, #24]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d90a      	bls.n	800ad18 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	617b      	str	r3, [r7, #20]
}
 800ad14:	bf00      	nop
 800ad16:	e7fe      	b.n	800ad16 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ad18:	2302      	movs	r3, #2
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2100      	movs	r1, #0
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff ff00 	bl	800ab28 <xQueueGenericCreateStatic>
 800ad28:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ad36:	69fb      	ldr	r3, [r7, #28]
	}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3720      	adds	r7, #32
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	613b      	str	r3, [r7, #16]
}
 800ad62:	bf00      	nop
 800ad64:	e7fe      	b.n	800ad64 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d90a      	bls.n	800ad84 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60fb      	str	r3, [r7, #12]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ad84:	2202      	movs	r2, #2
 800ad86:	2100      	movs	r1, #0
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7ff ff45 	bl	800ac18 <xQueueGenericCreate>
 800ad8e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ad9c:	697b      	ldr	r3, [r7, #20]
	}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08e      	sub	sp, #56	; 0x38
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adb6:	2300      	movs	r3, #0
 800adb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <xQueueGenericSend+0x32>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d103      	bne.n	800ade8 <xQueueGenericSend+0x40>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <xQueueGenericSend+0x44>
 800ade8:	2301      	movs	r3, #1
 800adea:	e000      	b.n	800adee <xQueueGenericSend+0x46>
 800adec:	2300      	movs	r3, #0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10a      	bne.n	800ae08 <xQueueGenericSend+0x60>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae04:	bf00      	nop
 800ae06:	e7fe      	b.n	800ae06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d103      	bne.n	800ae16 <xQueueGenericSend+0x6e>
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d101      	bne.n	800ae1a <xQueueGenericSend+0x72>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <xQueueGenericSend+0x74>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10a      	bne.n	800ae36 <xQueueGenericSend+0x8e>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	623b      	str	r3, [r7, #32]
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae36:	f001 fc77 	bl	800c728 <xTaskGetSchedulerState>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <xQueueGenericSend+0x9e>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <xQueueGenericSend+0xa2>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <xQueueGenericSend+0xa4>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	61fb      	str	r3, [r7, #28]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae66:	f002 fab5 	bl	800d3d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d302      	bcc.n	800ae7c <xQueueGenericSend+0xd4>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d129      	bne.n	800aed0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae82:	f000 fc9a 	bl	800b7ba <prvCopyDataToQueue>
 800ae86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d010      	beq.n	800aeb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae92:	3324      	adds	r3, #36	; 0x24
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 fa89 	bl	800c3ac <xTaskRemoveFromEventList>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d013      	beq.n	800aec8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aea0:	4b3f      	ldr	r3, [pc, #252]	; (800afa0 <xQueueGenericSend+0x1f8>)
 800aea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	e00a      	b.n	800aec8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d007      	beq.n	800aec8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aeb8:	4b39      	ldr	r3, [pc, #228]	; (800afa0 <xQueueGenericSend+0x1f8>)
 800aeba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aec8:	f002 fab4 	bl	800d434 <vPortExitCritical>
				return pdPASS;
 800aecc:	2301      	movs	r3, #1
 800aece:	e063      	b.n	800af98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d103      	bne.n	800aede <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aed6:	f002 faad 	bl	800d434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e05c      	b.n	800af98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d106      	bne.n	800aef2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aee4:	f107 0314 	add.w	r3, r7, #20
 800aee8:	4618      	mov	r0, r3
 800aeea:	f001 fac3 	bl	800c474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aeee:	2301      	movs	r3, #1
 800aef0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aef2:	f002 fa9f 	bl	800d434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aef6:	f001 f835 	bl	800bf64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aefa:	f002 fa6b 	bl	800d3d4 <vPortEnterCritical>
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af04:	b25b      	sxtb	r3, r3
 800af06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0a:	d103      	bne.n	800af14 <xQueueGenericSend+0x16c>
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af1a:	b25b      	sxtb	r3, r3
 800af1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af20:	d103      	bne.n	800af2a <xQueueGenericSend+0x182>
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af2a:	f002 fa83 	bl	800d434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af2e:	1d3a      	adds	r2, r7, #4
 800af30:	f107 0314 	add.w	r3, r7, #20
 800af34:	4611      	mov	r1, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f001 fab2 	bl	800c4a0 <xTaskCheckForTimeOut>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d124      	bne.n	800af8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af44:	f000 fd31 	bl	800b9aa <prvIsQueueFull>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d018      	beq.n	800af80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	3310      	adds	r3, #16
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f001 f9d8 	bl	800c30c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af5e:	f000 fcbc 	bl	800b8da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af62:	f001 f80d 	bl	800bf80 <xTaskResumeAll>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f47f af7c 	bne.w	800ae66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <xQueueGenericSend+0x1f8>)
 800af70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	e772      	b.n	800ae66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af82:	f000 fcaa 	bl	800b8da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af86:	f000 fffb 	bl	800bf80 <xTaskResumeAll>
 800af8a:	e76c      	b.n	800ae66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af8e:	f000 fca4 	bl	800b8da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af92:	f000 fff5 	bl	800bf80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3738      	adds	r7, #56	; 0x38
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b090      	sub	sp, #64	; 0x40
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d103      	bne.n	800afe0 <xQueueGenericSendFromISR+0x3c>
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <xQueueGenericSendFromISR+0x40>
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <xQueueGenericSendFromISR+0x42>
 800afe4:	2300      	movs	r3, #0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10a      	bne.n	800b000 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800affc:	bf00      	nop
 800affe:	e7fe      	b.n	800affe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2b02      	cmp	r3, #2
 800b004:	d103      	bne.n	800b00e <xQueueGenericSendFromISR+0x6a>
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d101      	bne.n	800b012 <xQueueGenericSendFromISR+0x6e>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <xQueueGenericSendFromISR+0x70>
 800b012:	2300      	movs	r3, #0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10a      	bne.n	800b02e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	623b      	str	r3, [r7, #32]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b02e:	f002 fab3 	bl	800d598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b032:	f3ef 8211 	mrs	r2, BASEPRI
 800b036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	61fa      	str	r2, [r7, #28]
 800b048:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b04a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b056:	429a      	cmp	r2, r3
 800b058:	d302      	bcc.n	800b060 <xQueueGenericSendFromISR+0xbc>
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d12f      	bne.n	800b0c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b076:	f000 fba0 	bl	800b7ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b07a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d112      	bne.n	800b0aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d016      	beq.n	800b0ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	3324      	adds	r3, #36	; 0x24
 800b090:	4618      	mov	r0, r3
 800b092:	f001 f98b 	bl	800c3ac <xTaskRemoveFromEventList>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00e      	beq.n	800b0ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00b      	beq.n	800b0ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	e007      	b.n	800b0ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	b25a      	sxtb	r2, r3
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b0be:	e001      	b.n	800b0c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3740      	adds	r7, #64	; 0x40
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b08e      	sub	sp, #56	; 0x38
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	623b      	str	r3, [r7, #32]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	61fb      	str	r3, [r7, #28]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d103      	bne.n	800b132 <xQueueGiveFromISR+0x58>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <xQueueGiveFromISR+0x5c>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueGiveFromISR+0x5e>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	61bb      	str	r3, [r7, #24]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b152:	f002 fa21 	bl	800d598 <vPortValidateInterruptPriority>
	__asm volatile
 800b156:	f3ef 8211 	mrs	r2, BASEPRI
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	617a      	str	r2, [r7, #20]
 800b16c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b16e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b170:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b176:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b17e:	429a      	cmp	r2, r3
 800b180:	d22b      	bcs.n	800b1da <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19c:	d112      	bne.n	800b1c4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d016      	beq.n	800b1d4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	3324      	adds	r3, #36	; 0x24
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f8fe 	bl	800c3ac <xTaskRemoveFromEventList>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00e      	beq.n	800b1d4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	e007      	b.n	800b1d4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	b25a      	sxtb	r2, r3
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b1d8:	e001      	b.n	800b1de <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f383 8811 	msr	BASEPRI, r3
}
 800b1e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3738      	adds	r7, #56	; 0x38
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08c      	sub	sp, #48	; 0x30
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b200:	2300      	movs	r3, #0
 800b202:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10a      	bne.n	800b224 <xQueueReceive+0x30>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	623b      	str	r3, [r7, #32]
}
 800b220:	bf00      	nop
 800b222:	e7fe      	b.n	800b222 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d103      	bne.n	800b232 <xQueueReceive+0x3e>
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <xQueueReceive+0x42>
 800b232:	2301      	movs	r3, #1
 800b234:	e000      	b.n	800b238 <xQueueReceive+0x44>
 800b236:	2300      	movs	r3, #0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10a      	bne.n	800b252 <xQueueReceive+0x5e>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	61fb      	str	r3, [r7, #28]
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b252:	f001 fa69 	bl	800c728 <xTaskGetSchedulerState>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <xQueueReceive+0x6e>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <xQueueReceive+0x72>
 800b262:	2301      	movs	r3, #1
 800b264:	e000      	b.n	800b268 <xQueueReceive+0x74>
 800b266:	2300      	movs	r3, #0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <xQueueReceive+0x8e>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	61bb      	str	r3, [r7, #24]
}
 800b27e:	bf00      	nop
 800b280:	e7fe      	b.n	800b280 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b282:	f002 f8a7 	bl	800d3d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d01f      	beq.n	800b2d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b296:	f000 fafa 	bl	800b88e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	1e5a      	subs	r2, r3, #1
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00f      	beq.n	800b2ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f001 f87c 	bl	800c3ac <xTaskRemoveFromEventList>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d007      	beq.n	800b2ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2ba:	4b3d      	ldr	r3, [pc, #244]	; (800b3b0 <xQueueReceive+0x1bc>)
 800b2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2ca:	f002 f8b3 	bl	800d434 <vPortExitCritical>
				return pdPASS;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e069      	b.n	800b3a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d103      	bne.n	800b2e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2d8:	f002 f8ac 	bl	800d434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e062      	b.n	800b3a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d106      	bne.n	800b2f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2e6:	f107 0310 	add.w	r3, r7, #16
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f001 f8c2 	bl	800c474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2f4:	f002 f89e 	bl	800d434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2f8:	f000 fe34 	bl	800bf64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2fc:	f002 f86a 	bl	800d3d4 <vPortEnterCritical>
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b306:	b25b      	sxtb	r3, r3
 800b308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30c:	d103      	bne.n	800b316 <xQueueReceive+0x122>
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b31c:	b25b      	sxtb	r3, r3
 800b31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b322:	d103      	bne.n	800b32c <xQueueReceive+0x138>
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b32c:	f002 f882 	bl	800d434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b330:	1d3a      	adds	r2, r7, #4
 800b332:	f107 0310 	add.w	r3, r7, #16
 800b336:	4611      	mov	r1, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f001 f8b1 	bl	800c4a0 <xTaskCheckForTimeOut>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d123      	bne.n	800b38c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b346:	f000 fb1a 	bl	800b97e <prvIsQueueEmpty>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d017      	beq.n	800b380 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	3324      	adds	r3, #36	; 0x24
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	4611      	mov	r1, r2
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 ffd7 	bl	800c30c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b35e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b360:	f000 fabb 	bl	800b8da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b364:	f000 fe0c 	bl	800bf80 <xTaskResumeAll>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d189      	bne.n	800b282 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b36e:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <xQueueReceive+0x1bc>)
 800b370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	e780      	b.n	800b282 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b382:	f000 faaa 	bl	800b8da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b386:	f000 fdfb 	bl	800bf80 <xTaskResumeAll>
 800b38a:	e77a      	b.n	800b282 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b38c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b38e:	f000 faa4 	bl	800b8da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b392:	f000 fdf5 	bl	800bf80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b398:	f000 faf1 	bl	800b97e <prvIsQueueEmpty>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f43f af6f 	beq.w	800b282 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3730      	adds	r7, #48	; 0x30
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08e      	sub	sp, #56	; 0x38
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10a      	bne.n	800b3e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	623b      	str	r3, [r7, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	61fb      	str	r3, [r7, #28]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b404:	f001 f990 	bl	800c728 <xTaskGetSchedulerState>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d102      	bne.n	800b414 <xQueueSemaphoreTake+0x60>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <xQueueSemaphoreTake+0x64>
 800b414:	2301      	movs	r3, #1
 800b416:	e000      	b.n	800b41a <xQueueSemaphoreTake+0x66>
 800b418:	2300      	movs	r3, #0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10a      	bne.n	800b434 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	61bb      	str	r3, [r7, #24]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b434:	f001 ffce 	bl	800d3d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b440:	2b00      	cmp	r3, #0
 800b442:	d024      	beq.n	800b48e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	1e5a      	subs	r2, r3, #1
 800b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b454:	f001 fade 	bl	800ca14 <pvTaskIncrementMutexHeldCount>
 800b458:	4602      	mov	r2, r0
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00f      	beq.n	800b486 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b468:	3310      	adds	r3, #16
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 ff9e 	bl	800c3ac <xTaskRemoveFromEventList>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d007      	beq.n	800b486 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b476:	4b54      	ldr	r3, [pc, #336]	; (800b5c8 <xQueueSemaphoreTake+0x214>)
 800b478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b486:	f001 ffd5 	bl	800d434 <vPortExitCritical>
				return pdPASS;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e097      	b.n	800b5be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d111      	bne.n	800b4b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	617b      	str	r3, [r7, #20]
}
 800b4ac:	bf00      	nop
 800b4ae:	e7fe      	b.n	800b4ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b4b0:	f001 ffc0 	bl	800d434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	e082      	b.n	800b5be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4be:	f107 030c 	add.w	r3, r7, #12
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 ffd6 	bl	800c474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4cc:	f001 ffb2 	bl	800d434 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4d0:	f000 fd48 	bl	800bf64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4d4:	f001 ff7e 	bl	800d3d4 <vPortEnterCritical>
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4de:	b25b      	sxtb	r3, r3
 800b4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e4:	d103      	bne.n	800b4ee <xQueueSemaphoreTake+0x13a>
 800b4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4f4:	b25b      	sxtb	r3, r3
 800b4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fa:	d103      	bne.n	800b504 <xQueueSemaphoreTake+0x150>
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b504:	f001 ff96 	bl	800d434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b508:	463a      	mov	r2, r7
 800b50a:	f107 030c 	add.w	r3, r7, #12
 800b50e:	4611      	mov	r1, r2
 800b510:	4618      	mov	r0, r3
 800b512:	f000 ffc5 	bl	800c4a0 <xTaskCheckForTimeOut>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d132      	bne.n	800b582 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b51c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b51e:	f000 fa2e 	bl	800b97e <prvIsQueueEmpty>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d026      	beq.n	800b576 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d109      	bne.n	800b544 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b530:	f001 ff50 	bl	800d3d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	4618      	mov	r0, r3
 800b53a:	f001 f913 	bl	800c764 <xTaskPriorityInherit>
 800b53e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b540:	f001 ff78 	bl	800d434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	3324      	adds	r3, #36	; 0x24
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	4611      	mov	r1, r2
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 fedd 	bl	800c30c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b554:	f000 f9c1 	bl	800b8da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b558:	f000 fd12 	bl	800bf80 <xTaskResumeAll>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f47f af68 	bne.w	800b434 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b564:	4b18      	ldr	r3, [pc, #96]	; (800b5c8 <xQueueSemaphoreTake+0x214>)
 800b566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	e75e      	b.n	800b434 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b578:	f000 f9af 	bl	800b8da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b57c:	f000 fd00 	bl	800bf80 <xTaskResumeAll>
 800b580:	e758      	b.n	800b434 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b584:	f000 f9a9 	bl	800b8da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b588:	f000 fcfa 	bl	800bf80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b58c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b58e:	f000 f9f6 	bl	800b97e <prvIsQueueEmpty>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	f43f af4d 	beq.w	800b434 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00d      	beq.n	800b5bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b5a0:	f001 ff18 	bl	800d3d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b5a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5a6:	f000 f8f0 	bl	800b78a <prvGetDisinheritPriorityAfterTimeout>
 800b5aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 f9ac 	bl	800c910 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b5b8:	f001 ff3c 	bl	800d434 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3738      	adds	r7, #56	; 0x38
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	e000ed04 	.word	0xe000ed04

0800b5cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b08e      	sub	sp, #56	; 0x38
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	623b      	str	r3, [r7, #32]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d103      	bne.n	800b606 <xQueueReceiveFromISR+0x3a>
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <xQueueReceiveFromISR+0x3e>
 800b606:	2301      	movs	r3, #1
 800b608:	e000      	b.n	800b60c <xQueueReceiveFromISR+0x40>
 800b60a:	2300      	movs	r3, #0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	61fb      	str	r3, [r7, #28]
}
 800b622:	bf00      	nop
 800b624:	e7fe      	b.n	800b624 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b626:	f001 ffb7 	bl	800d598 <vPortValidateInterruptPriority>
	__asm volatile
 800b62a:	f3ef 8211 	mrs	r2, BASEPRI
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	61ba      	str	r2, [r7, #24]
 800b640:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b642:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b644:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d02f      	beq.n	800b6b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b65c:	68b9      	ldr	r1, [r7, #8]
 800b65e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b660:	f000 f915 	bl	800b88e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	1e5a      	subs	r2, r3, #1
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b66c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b674:	d112      	bne.n	800b69c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d016      	beq.n	800b6ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	3310      	adds	r3, #16
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fe92 	bl	800c3ac <xTaskRemoveFromEventList>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00e      	beq.n	800b6ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00b      	beq.n	800b6ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	e007      	b.n	800b6ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	b25a      	sxtb	r2, r3
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b0:	e001      	b.n	800b6b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f383 8811 	msr	BASEPRI, r3
}
 800b6c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3738      	adds	r7, #56	; 0x38
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10a      	bne.n	800b6f0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	60bb      	str	r3, [r7, #8]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b6f0:	f001 fe70 	bl	800d3d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b6fa:	f001 fe9b 	bl	800d434 <vPortExitCritical>

	return uxReturn;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	60fb      	str	r3, [r7, #12]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b736:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b738:	4618      	mov	r0, r3
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <vQueueDelete+0x28>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	60bb      	str	r3, [r7, #8]
}
 800b768:	bf00      	nop
 800b76a:	e7fe      	b.n	800b76a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 f95f 	bl	800ba30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d102      	bne.n	800b782 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f002 f817 	bl	800d7b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b782:	bf00      	nop
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b78a:	b480      	push	{r7}
 800b78c:	b085      	sub	sp, #20
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d006      	beq.n	800b7a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	e001      	b.n	800b7ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b086      	sub	sp, #24
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10d      	bne.n	800b7f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d14d      	bne.n	800b87c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 f825 	bl	800c834 <xTaskPriorityDisinherit>
 800b7ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	609a      	str	r2, [r3, #8]
 800b7f2:	e043      	b.n	800b87c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d119      	bne.n	800b82e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6858      	ldr	r0, [r3, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b802:	461a      	mov	r2, r3
 800b804:	68b9      	ldr	r1, [r7, #8]
 800b806:	f003 f9ec 	bl	800ebe2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	441a      	add	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	429a      	cmp	r2, r3
 800b822:	d32b      	bcc.n	800b87c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	605a      	str	r2, [r3, #4]
 800b82c:	e026      	b.n	800b87c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	68d8      	ldr	r0, [r3, #12]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	461a      	mov	r2, r3
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	f003 f9d2 	bl	800ebe2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	68da      	ldr	r2, [r3, #12]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b846:	425b      	negs	r3, r3
 800b848:	441a      	add	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d207      	bcs.n	800b86a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	689a      	ldr	r2, [r3, #8]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	425b      	negs	r3, r3
 800b864:	441a      	add	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d105      	bne.n	800b87c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	3b01      	subs	r3, #1
 800b87a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b884:	697b      	ldr	r3, [r7, #20]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b082      	sub	sp, #8
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
 800b896:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d018      	beq.n	800b8d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	68da      	ldr	r2, [r3, #12]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a8:	441a      	add	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d303      	bcc.n	800b8c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68d9      	ldr	r1, [r3, #12]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	6838      	ldr	r0, [r7, #0]
 800b8ce:	f003 f988 	bl	800ebe2 <memcpy>
	}
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b8e2:	f001 fd77 	bl	800d3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8ee:	e011      	b.n	800b914 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d012      	beq.n	800b91e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3324      	adds	r3, #36	; 0x24
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fd55 	bl	800c3ac <xTaskRemoveFromEventList>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b908:	f000 fe2c 	bl	800c564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	3b01      	subs	r3, #1
 800b910:	b2db      	uxtb	r3, r3
 800b912:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	dce9      	bgt.n	800b8f0 <prvUnlockQueue+0x16>
 800b91c:	e000      	b.n	800b920 <prvUnlockQueue+0x46>
					break;
 800b91e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	22ff      	movs	r2, #255	; 0xff
 800b924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b928:	f001 fd84 	bl	800d434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b92c:	f001 fd52 	bl	800d3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b936:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b938:	e011      	b.n	800b95e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d012      	beq.n	800b968 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3310      	adds	r3, #16
 800b946:	4618      	mov	r0, r3
 800b948:	f000 fd30 	bl	800c3ac <xTaskRemoveFromEventList>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b952:	f000 fe07 	bl	800c564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	3b01      	subs	r3, #1
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b95e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b962:	2b00      	cmp	r3, #0
 800b964:	dce9      	bgt.n	800b93a <prvUnlockQueue+0x60>
 800b966:	e000      	b.n	800b96a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b968:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	22ff      	movs	r2, #255	; 0xff
 800b96e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b972:	f001 fd5f 	bl	800d434 <vPortExitCritical>
}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b986:	f001 fd25 	bl	800d3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b992:	2301      	movs	r3, #1
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e001      	b.n	800b99c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b998:	2300      	movs	r3, #0
 800b99a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b99c:	f001 fd4a 	bl	800d434 <vPortExitCritical>

	return xReturn;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9b2:	f001 fd0f 	bl	800d3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d102      	bne.n	800b9c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	e001      	b.n	800b9cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9cc:	f001 fd32 	bl	800d434 <vPortExitCritical>

	return xReturn;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	e014      	b.n	800ba16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9ec:	4a0f      	ldr	r2, [pc, #60]	; (800ba2c <vQueueAddToRegistry+0x50>)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10b      	bne.n	800ba10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b9f8:	490c      	ldr	r1, [pc, #48]	; (800ba2c <vQueueAddToRegistry+0x50>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba02:	4a0a      	ldr	r2, [pc, #40]	; (800ba2c <vQueueAddToRegistry+0x50>)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	4413      	add	r3, r2
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba0e:	e006      	b.n	800ba1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3301      	adds	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b07      	cmp	r3, #7
 800ba1a:	d9e7      	bls.n	800b9ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba1c:	bf00      	nop
 800ba1e:	bf00      	nop
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	2000108c 	.word	0x2000108c

0800ba30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	e016      	b.n	800ba6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ba3e:	4a10      	ldr	r2, [pc, #64]	; (800ba80 <vQueueUnregisterQueue+0x50>)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	4413      	add	r3, r2
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d10b      	bne.n	800ba66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ba4e:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <vQueueUnregisterQueue+0x50>)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2100      	movs	r1, #0
 800ba54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ba58:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <vQueueUnregisterQueue+0x50>)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	4413      	add	r3, r2
 800ba60:	2200      	movs	r2, #0
 800ba62:	605a      	str	r2, [r3, #4]
				break;
 800ba64:	e006      	b.n	800ba74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b07      	cmp	r3, #7
 800ba70:	d9e5      	bls.n	800ba3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	2000108c 	.word	0x2000108c

0800ba84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ba94:	f001 fc9e 	bl	800d3d4 <vPortEnterCritical>
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba9e:	b25b      	sxtb	r3, r3
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d103      	bne.n	800baae <vQueueWaitForMessageRestricted+0x2a>
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	d103      	bne.n	800bac4 <vQueueWaitForMessageRestricted+0x40>
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bac4:	f001 fcb6 	bl	800d434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d106      	bne.n	800bade <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	3324      	adds	r3, #36	; 0x24
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 fc3b 	bl	800c354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bade:	6978      	ldr	r0, [r7, #20]
 800bae0:	f7ff fefb 	bl	800b8da <prvUnlockQueue>
	}
 800bae4:	bf00      	nop
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08e      	sub	sp, #56	; 0x38
 800baf0:	af04      	add	r7, sp, #16
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	623b      	str	r3, [r7, #32]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <xTaskCreateStatic+0x46>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	61fb      	str	r3, [r7, #28]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb32:	235c      	movs	r3, #92	; 0x5c
 800bb34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	2b5c      	cmp	r3, #92	; 0x5c
 800bb3a:	d00a      	beq.n	800bb52 <xTaskCreateStatic+0x66>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	61bb      	str	r3, [r7, #24]
}
 800bb4e:	bf00      	nop
 800bb50:	e7fe      	b.n	800bb50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d01e      	beq.n	800bb98 <xTaskCreateStatic+0xac>
 800bb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d01b      	beq.n	800bb98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb72:	2300      	movs	r3, #0
 800bb74:	9303      	str	r3, [sp, #12]
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	9302      	str	r3, [sp, #8]
 800bb7a:	f107 0314 	add.w	r3, r7, #20
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f000 f850 	bl	800bc30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb92:	f000 f8dd 	bl	800bd50 <prvAddNewTaskToReadyList>
 800bb96:	e001      	b.n	800bb9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bb9c:	697b      	ldr	r3, [r7, #20]
	}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3728      	adds	r7, #40	; 0x28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b08c      	sub	sp, #48	; 0x30
 800bbaa:	af04      	add	r7, sp, #16
 800bbac:	60f8      	str	r0, [r7, #12]
 800bbae:	60b9      	str	r1, [r7, #8]
 800bbb0:	603b      	str	r3, [r7, #0]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbb6:	88fb      	ldrh	r3, [r7, #6]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f001 fd2c 	bl	800d618 <pvPortMalloc>
 800bbc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00e      	beq.n	800bbe6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbc8:	205c      	movs	r0, #92	; 0x5c
 800bbca:	f001 fd25 	bl	800d618 <pvPortMalloc>
 800bbce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	631a      	str	r2, [r3, #48]	; 0x30
 800bbdc:	e005      	b.n	800bbea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bbde:	6978      	ldr	r0, [r7, #20]
 800bbe0:	f001 fde6 	bl	800d7b0 <vPortFree>
 800bbe4:	e001      	b.n	800bbea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d017      	beq.n	800bc20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bbf8:	88fa      	ldrh	r2, [r7, #6]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	9302      	str	r3, [sp, #8]
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 f80e 	bl	800bc30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc14:	69f8      	ldr	r0, [r7, #28]
 800bc16:	f000 f89b 	bl	800bd50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	61bb      	str	r3, [r7, #24]
 800bc1e:	e002      	b.n	800bc26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295
 800bc24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc26:	69bb      	ldr	r3, [r7, #24]
	}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3720      	adds	r7, #32
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	461a      	mov	r2, r3
 800bc48:	21a5      	movs	r1, #165	; 0xa5
 800bc4a:	f002 fecd 	bl	800e9e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	f023 0307 	bic.w	r3, r3, #7
 800bc66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	f003 0307 	and.w	r3, r3, #7
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	617b      	str	r3, [r7, #20]
}
 800bc84:	bf00      	nop
 800bc86:	e7fe      	b.n	800bc86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d01f      	beq.n	800bcce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc8e:	2300      	movs	r3, #0
 800bc90:	61fb      	str	r3, [r7, #28]
 800bc92:	e012      	b.n	800bcba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	4413      	add	r3, r2
 800bc9a:	7819      	ldrb	r1, [r3, #0]
 800bc9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	4413      	add	r3, r2
 800bca2:	3334      	adds	r3, #52	; 0x34
 800bca4:	460a      	mov	r2, r1
 800bca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	4413      	add	r3, r2
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d006      	beq.n	800bcc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	61fb      	str	r3, [r7, #28]
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	2b0f      	cmp	r3, #15
 800bcbe:	d9e9      	bls.n	800bc94 <prvInitialiseNewTask+0x64>
 800bcc0:	e000      	b.n	800bcc4 <prvInitialiseNewTask+0x94>
			{
				break;
 800bcc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bccc:	e003      	b.n	800bcd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	2b37      	cmp	r3, #55	; 0x37
 800bcda:	d901      	bls.n	800bce0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bcdc:	2337      	movs	r3, #55	; 0x37
 800bcde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	2200      	movs	r2, #0
 800bcf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fe1a 	bl	800a930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	3318      	adds	r3, #24
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fe fe15 	bl	800a930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	2200      	movs	r2, #0
 800bd20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	68f9      	ldr	r1, [r7, #12]
 800bd2e:	69b8      	ldr	r0, [r7, #24]
 800bd30:	f001 fa26 	bl	800d180 <pxPortInitialiseStack>
 800bd34:	4602      	mov	r2, r0
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd46:	bf00      	nop
 800bd48:	3720      	adds	r7, #32
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd58:	f001 fb3c 	bl	800d3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd5c:	4b2d      	ldr	r3, [pc, #180]	; (800be14 <prvAddNewTaskToReadyList+0xc4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3301      	adds	r3, #1
 800bd62:	4a2c      	ldr	r2, [pc, #176]	; (800be14 <prvAddNewTaskToReadyList+0xc4>)
 800bd64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bd66:	4b2c      	ldr	r3, [pc, #176]	; (800be18 <prvAddNewTaskToReadyList+0xc8>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bd6e:	4a2a      	ldr	r2, [pc, #168]	; (800be18 <prvAddNewTaskToReadyList+0xc8>)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bd74:	4b27      	ldr	r3, [pc, #156]	; (800be14 <prvAddNewTaskToReadyList+0xc4>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d110      	bne.n	800bd9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bd7c:	f000 fc16 	bl	800c5ac <prvInitialiseTaskLists>
 800bd80:	e00d      	b.n	800bd9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bd82:	4b26      	ldr	r3, [pc, #152]	; (800be1c <prvAddNewTaskToReadyList+0xcc>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d109      	bne.n	800bd9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bd8a:	4b23      	ldr	r3, [pc, #140]	; (800be18 <prvAddNewTaskToReadyList+0xc8>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d802      	bhi.n	800bd9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bd98:	4a1f      	ldr	r2, [pc, #124]	; (800be18 <prvAddNewTaskToReadyList+0xc8>)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bd9e:	4b20      	ldr	r3, [pc, #128]	; (800be20 <prvAddNewTaskToReadyList+0xd0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	4a1e      	ldr	r2, [pc, #120]	; (800be20 <prvAddNewTaskToReadyList+0xd0>)
 800bda6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bda8:	4b1d      	ldr	r3, [pc, #116]	; (800be20 <prvAddNewTaskToReadyList+0xd0>)
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb4:	4b1b      	ldr	r3, [pc, #108]	; (800be24 <prvAddNewTaskToReadyList+0xd4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d903      	bls.n	800bdc4 <prvAddNewTaskToReadyList+0x74>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	4a18      	ldr	r2, [pc, #96]	; (800be24 <prvAddNewTaskToReadyList+0xd4>)
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc8:	4613      	mov	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	4413      	add	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4a15      	ldr	r2, [pc, #84]	; (800be28 <prvAddNewTaskToReadyList+0xd8>)
 800bdd2:	441a      	add	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4610      	mov	r0, r2
 800bddc:	f7fe fdb5 	bl	800a94a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bde0:	f001 fb28 	bl	800d434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bde4:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <prvAddNewTaskToReadyList+0xcc>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00e      	beq.n	800be0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bdec:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <prvAddNewTaskToReadyList+0xc8>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d207      	bcs.n	800be0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bdfa:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <prvAddNewTaskToReadyList+0xdc>)
 800bdfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	200015a0 	.word	0x200015a0
 800be18:	200010cc 	.word	0x200010cc
 800be1c:	200015ac 	.word	0x200015ac
 800be20:	200015bc 	.word	0x200015bc
 800be24:	200015a8 	.word	0x200015a8
 800be28:	200010d0 	.word	0x200010d0
 800be2c:	e000ed04 	.word	0xe000ed04

0800be30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be38:	2300      	movs	r3, #0
 800be3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d017      	beq.n	800be72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be42:	4b13      	ldr	r3, [pc, #76]	; (800be90 <vTaskDelay+0x60>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <vTaskDelay+0x30>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	60bb      	str	r3, [r7, #8]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800be60:	f000 f880 	bl	800bf64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be64:	2100      	movs	r1, #0
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fde8 	bl	800ca3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be6c:	f000 f888 	bl	800bf80 <xTaskResumeAll>
 800be70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d107      	bne.n	800be88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800be78:	4b06      	ldr	r3, [pc, #24]	; (800be94 <vTaskDelay+0x64>)
 800be7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be88:	bf00      	nop
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	200015c8 	.word	0x200015c8
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	; 0x28
 800be9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bea6:	463a      	mov	r2, r7
 800bea8:	1d39      	adds	r1, r7, #4
 800beaa:	f107 0308 	add.w	r3, r7, #8
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fcea 	bl	800a888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	9202      	str	r2, [sp, #8]
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	2300      	movs	r3, #0
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	2300      	movs	r3, #0
 800bec4:	460a      	mov	r2, r1
 800bec6:	4921      	ldr	r1, [pc, #132]	; (800bf4c <vTaskStartScheduler+0xb4>)
 800bec8:	4821      	ldr	r0, [pc, #132]	; (800bf50 <vTaskStartScheduler+0xb8>)
 800beca:	f7ff fe0f 	bl	800baec <xTaskCreateStatic>
 800bece:	4603      	mov	r3, r0
 800bed0:	4a20      	ldr	r2, [pc, #128]	; (800bf54 <vTaskStartScheduler+0xbc>)
 800bed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bed4:	4b1f      	ldr	r3, [pc, #124]	; (800bf54 <vTaskStartScheduler+0xbc>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bedc:	2301      	movs	r3, #1
 800bede:	617b      	str	r3, [r7, #20]
 800bee0:	e001      	b.n	800bee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d102      	bne.n	800bef2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800beec:	f000 fdfa 	bl	800cae4 <xTimerCreateTimerTask>
 800bef0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d116      	bne.n	800bf26 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	613b      	str	r3, [r7, #16]
}
 800bf0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf0c:	4b12      	ldr	r3, [pc, #72]	; (800bf58 <vTaskStartScheduler+0xc0>)
 800bf0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf14:	4b11      	ldr	r3, [pc, #68]	; (800bf5c <vTaskStartScheduler+0xc4>)
 800bf16:	2201      	movs	r2, #1
 800bf18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf1a:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <vTaskStartScheduler+0xc8>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf20:	f001 f9b6 	bl	800d290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf24:	e00e      	b.n	800bf44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d10a      	bne.n	800bf44 <vTaskStartScheduler+0xac>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	60fb      	str	r3, [r7, #12]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <vTaskStartScheduler+0xaa>
}
 800bf44:	bf00      	nop
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	08010ed8 	.word	0x08010ed8
 800bf50:	0800c57d 	.word	0x0800c57d
 800bf54:	200015c4 	.word	0x200015c4
 800bf58:	200015c0 	.word	0x200015c0
 800bf5c:	200015ac 	.word	0x200015ac
 800bf60:	200015a4 	.word	0x200015a4

0800bf64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf64:	b480      	push	{r7}
 800bf66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bf68:	4b04      	ldr	r3, [pc, #16]	; (800bf7c <vTaskSuspendAll+0x18>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	4a03      	ldr	r2, [pc, #12]	; (800bf7c <vTaskSuspendAll+0x18>)
 800bf70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bf72:	bf00      	nop
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	200015c8 	.word	0x200015c8

0800bf80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf8e:	4b42      	ldr	r3, [pc, #264]	; (800c098 <xTaskResumeAll+0x118>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10a      	bne.n	800bfac <xTaskResumeAll+0x2c>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	603b      	str	r3, [r7, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bfac:	f001 fa12 	bl	800d3d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bfb0:	4b39      	ldr	r3, [pc, #228]	; (800c098 <xTaskResumeAll+0x118>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	4a38      	ldr	r2, [pc, #224]	; (800c098 <xTaskResumeAll+0x118>)
 800bfb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfba:	4b37      	ldr	r3, [pc, #220]	; (800c098 <xTaskResumeAll+0x118>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d162      	bne.n	800c088 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfc2:	4b36      	ldr	r3, [pc, #216]	; (800c09c <xTaskResumeAll+0x11c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d05e      	beq.n	800c088 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfca:	e02f      	b.n	800c02c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfcc:	4b34      	ldr	r3, [pc, #208]	; (800c0a0 <xTaskResumeAll+0x120>)
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3318      	adds	r3, #24
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fd13 	bl	800aa04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fe fd0e 	bl	800aa04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfec:	4b2d      	ldr	r3, [pc, #180]	; (800c0a4 <xTaskResumeAll+0x124>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d903      	bls.n	800bffc <xTaskResumeAll+0x7c>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	4a2a      	ldr	r2, [pc, #168]	; (800c0a4 <xTaskResumeAll+0x124>)
 800bffa:	6013      	str	r3, [r2, #0]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c000:	4613      	mov	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4a27      	ldr	r2, [pc, #156]	; (800c0a8 <xTaskResumeAll+0x128>)
 800c00a:	441a      	add	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3304      	adds	r3, #4
 800c010:	4619      	mov	r1, r3
 800c012:	4610      	mov	r0, r2
 800c014:	f7fe fc99 	bl	800a94a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01c:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <xTaskResumeAll+0x12c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	429a      	cmp	r2, r3
 800c024:	d302      	bcc.n	800c02c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c026:	4b22      	ldr	r3, [pc, #136]	; (800c0b0 <xTaskResumeAll+0x130>)
 800c028:	2201      	movs	r2, #1
 800c02a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <xTaskResumeAll+0x120>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1cb      	bne.n	800bfcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c03a:	f000 fb55 	bl	800c6e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c03e:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <xTaskResumeAll+0x134>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d010      	beq.n	800c06c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c04a:	f000 f847 	bl	800c0dc <xTaskIncrementTick>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c054:	4b16      	ldr	r3, [pc, #88]	; (800c0b0 <xTaskResumeAll+0x130>)
 800c056:	2201      	movs	r2, #1
 800c058:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1f1      	bne.n	800c04a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c066:	4b13      	ldr	r3, [pc, #76]	; (800c0b4 <xTaskResumeAll+0x134>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c06c:	4b10      	ldr	r3, [pc, #64]	; (800c0b0 <xTaskResumeAll+0x130>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d009      	beq.n	800c088 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c074:	2301      	movs	r3, #1
 800c076:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c078:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <xTaskResumeAll+0x138>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c088:	f001 f9d4 	bl	800d434 <vPortExitCritical>

	return xAlreadyYielded;
 800c08c:	68bb      	ldr	r3, [r7, #8]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	200015c8 	.word	0x200015c8
 800c09c:	200015a0 	.word	0x200015a0
 800c0a0:	20001560 	.word	0x20001560
 800c0a4:	200015a8 	.word	0x200015a8
 800c0a8:	200010d0 	.word	0x200010d0
 800c0ac:	200010cc 	.word	0x200010cc
 800c0b0:	200015b4 	.word	0x200015b4
 800c0b4:	200015b0 	.word	0x200015b0
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0c2:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <xTaskGetTickCount+0x1c>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0c8:	687b      	ldr	r3, [r7, #4]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	200015a4 	.word	0x200015a4

0800c0dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e6:	4b4f      	ldr	r3, [pc, #316]	; (800c224 <xTaskIncrementTick+0x148>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f040 808f 	bne.w	800c20e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0f0:	4b4d      	ldr	r3, [pc, #308]	; (800c228 <xTaskIncrementTick+0x14c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0f8:	4a4b      	ldr	r2, [pc, #300]	; (800c228 <xTaskIncrementTick+0x14c>)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d120      	bne.n	800c146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c104:	4b49      	ldr	r3, [pc, #292]	; (800c22c <xTaskIncrementTick+0x150>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00a      	beq.n	800c124 <xTaskIncrementTick+0x48>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	603b      	str	r3, [r7, #0]
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <xTaskIncrementTick+0x46>
 800c124:	4b41      	ldr	r3, [pc, #260]	; (800c22c <xTaskIncrementTick+0x150>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	4b41      	ldr	r3, [pc, #260]	; (800c230 <xTaskIncrementTick+0x154>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a3f      	ldr	r2, [pc, #252]	; (800c22c <xTaskIncrementTick+0x150>)
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	4a3f      	ldr	r2, [pc, #252]	; (800c230 <xTaskIncrementTick+0x154>)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	4b3e      	ldr	r3, [pc, #248]	; (800c234 <xTaskIncrementTick+0x158>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3301      	adds	r3, #1
 800c13e:	4a3d      	ldr	r2, [pc, #244]	; (800c234 <xTaskIncrementTick+0x158>)
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	f000 fad1 	bl	800c6e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c146:	4b3c      	ldr	r3, [pc, #240]	; (800c238 <xTaskIncrementTick+0x15c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d349      	bcc.n	800c1e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c150:	4b36      	ldr	r3, [pc, #216]	; (800c22c <xTaskIncrementTick+0x150>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d104      	bne.n	800c164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c15a:	4b37      	ldr	r3, [pc, #220]	; (800c238 <xTaskIncrementTick+0x15c>)
 800c15c:	f04f 32ff 	mov.w	r2, #4294967295
 800c160:	601a      	str	r2, [r3, #0]
					break;
 800c162:	e03f      	b.n	800c1e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c164:	4b31      	ldr	r3, [pc, #196]	; (800c22c <xTaskIncrementTick+0x150>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d203      	bcs.n	800c184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c17c:	4a2e      	ldr	r2, [pc, #184]	; (800c238 <xTaskIncrementTick+0x15c>)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c182:	e02f      	b.n	800c1e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	3304      	adds	r3, #4
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe fc3b 	bl	800aa04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c192:	2b00      	cmp	r3, #0
 800c194:	d004      	beq.n	800c1a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	3318      	adds	r3, #24
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fe fc32 	bl	800aa04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a4:	4b25      	ldr	r3, [pc, #148]	; (800c23c <xTaskIncrementTick+0x160>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d903      	bls.n	800c1b4 <xTaskIncrementTick+0xd8>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	4a22      	ldr	r2, [pc, #136]	; (800c23c <xTaskIncrementTick+0x160>)
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4a1f      	ldr	r2, [pc, #124]	; (800c240 <xTaskIncrementTick+0x164>)
 800c1c2:	441a      	add	r2, r3
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	f7fe fbbd 	bl	800a94a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d4:	4b1b      	ldr	r3, [pc, #108]	; (800c244 <xTaskIncrementTick+0x168>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d3b8      	bcc.n	800c150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1e2:	e7b5      	b.n	800c150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1e4:	4b17      	ldr	r3, [pc, #92]	; (800c244 <xTaskIncrementTick+0x168>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ea:	4915      	ldr	r1, [pc, #84]	; (800c240 <xTaskIncrementTick+0x164>)
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	440b      	add	r3, r1
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d901      	bls.n	800c200 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c200:	4b11      	ldr	r3, [pc, #68]	; (800c248 <xTaskIncrementTick+0x16c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d007      	beq.n	800c218 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c208:	2301      	movs	r3, #1
 800c20a:	617b      	str	r3, [r7, #20]
 800c20c:	e004      	b.n	800c218 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c20e:	4b0f      	ldr	r3, [pc, #60]	; (800c24c <xTaskIncrementTick+0x170>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	4a0d      	ldr	r2, [pc, #52]	; (800c24c <xTaskIncrementTick+0x170>)
 800c216:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c218:	697b      	ldr	r3, [r7, #20]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	200015c8 	.word	0x200015c8
 800c228:	200015a4 	.word	0x200015a4
 800c22c:	20001558 	.word	0x20001558
 800c230:	2000155c 	.word	0x2000155c
 800c234:	200015b8 	.word	0x200015b8
 800c238:	200015c0 	.word	0x200015c0
 800c23c:	200015a8 	.word	0x200015a8
 800c240:	200010d0 	.word	0x200010d0
 800c244:	200010cc 	.word	0x200010cc
 800c248:	200015b4 	.word	0x200015b4
 800c24c:	200015b0 	.word	0x200015b0

0800c250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c256:	4b28      	ldr	r3, [pc, #160]	; (800c2f8 <vTaskSwitchContext+0xa8>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c25e:	4b27      	ldr	r3, [pc, #156]	; (800c2fc <vTaskSwitchContext+0xac>)
 800c260:	2201      	movs	r2, #1
 800c262:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c264:	e041      	b.n	800c2ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c266:	4b25      	ldr	r3, [pc, #148]	; (800c2fc <vTaskSwitchContext+0xac>)
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c26c:	4b24      	ldr	r3, [pc, #144]	; (800c300 <vTaskSwitchContext+0xb0>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e010      	b.n	800c296 <vTaskSwitchContext+0x46>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10a      	bne.n	800c290 <vTaskSwitchContext+0x40>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	607b      	str	r3, [r7, #4]
}
 800c28c:	bf00      	nop
 800c28e:	e7fe      	b.n	800c28e <vTaskSwitchContext+0x3e>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	3b01      	subs	r3, #1
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	491b      	ldr	r1, [pc, #108]	; (800c304 <vTaskSwitchContext+0xb4>)
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4613      	mov	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	440b      	add	r3, r1
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0e4      	beq.n	800c274 <vTaskSwitchContext+0x24>
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4a13      	ldr	r2, [pc, #76]	; (800c304 <vTaskSwitchContext+0xb4>)
 800c2b6:	4413      	add	r3, r2
 800c2b8:	60bb      	str	r3, [r7, #8]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	605a      	str	r2, [r3, #4]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d104      	bne.n	800c2da <vTaskSwitchContext+0x8a>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	605a      	str	r2, [r3, #4]
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	4a09      	ldr	r2, [pc, #36]	; (800c308 <vTaskSwitchContext+0xb8>)
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	4a06      	ldr	r2, [pc, #24]	; (800c300 <vTaskSwitchContext+0xb0>)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6013      	str	r3, [r2, #0]
}
 800c2ea:	bf00      	nop
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	200015c8 	.word	0x200015c8
 800c2fc:	200015b4 	.word	0x200015b4
 800c300:	200015a8 	.word	0x200015a8
 800c304:	200010d0 	.word	0x200010d0
 800c308:	200010cc 	.word	0x200010cc

0800c30c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10a      	bne.n	800c332 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	60fb      	str	r3, [r7, #12]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c332:	4b07      	ldr	r3, [pc, #28]	; (800c350 <vTaskPlaceOnEventList+0x44>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3318      	adds	r3, #24
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7fe fb29 	bl	800a992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c340:	2101      	movs	r1, #1
 800c342:	6838      	ldr	r0, [r7, #0]
 800c344:	f000 fb7a 	bl	800ca3c <prvAddCurrentTaskToDelayedList>
}
 800c348:	bf00      	nop
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	200010cc 	.word	0x200010cc

0800c354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10a      	bne.n	800c37c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	617b      	str	r3, [r7, #20]
}
 800c378:	bf00      	nop
 800c37a:	e7fe      	b.n	800c37a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c37c:	4b0a      	ldr	r3, [pc, #40]	; (800c3a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3318      	adds	r3, #24
 800c382:	4619      	mov	r1, r3
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f7fe fae0 	bl	800a94a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c390:	f04f 33ff 	mov.w	r3, #4294967295
 800c394:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c396:	6879      	ldr	r1, [r7, #4]
 800c398:	68b8      	ldr	r0, [r7, #8]
 800c39a:	f000 fb4f 	bl	800ca3c <prvAddCurrentTaskToDelayedList>
	}
 800c39e:	bf00      	nop
 800c3a0:	3718      	adds	r7, #24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	200010cc 	.word	0x200010cc

0800c3ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	60fb      	str	r3, [r7, #12]
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	3318      	adds	r3, #24
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fe fb11 	bl	800aa04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3e2:	4b1e      	ldr	r3, [pc, #120]	; (800c45c <xTaskRemoveFromEventList+0xb0>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d11d      	bne.n	800c426 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe fb08 	bl	800aa04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f8:	4b19      	ldr	r3, [pc, #100]	; (800c460 <xTaskRemoveFromEventList+0xb4>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d903      	bls.n	800c408 <xTaskRemoveFromEventList+0x5c>
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	4a16      	ldr	r2, [pc, #88]	; (800c460 <xTaskRemoveFromEventList+0xb4>)
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4a13      	ldr	r2, [pc, #76]	; (800c464 <xTaskRemoveFromEventList+0xb8>)
 800c416:	441a      	add	r2, r3
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f7fe fa93 	bl	800a94a <vListInsertEnd>
 800c424:	e005      	b.n	800c432 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	3318      	adds	r3, #24
 800c42a:	4619      	mov	r1, r3
 800c42c:	480e      	ldr	r0, [pc, #56]	; (800c468 <xTaskRemoveFromEventList+0xbc>)
 800c42e:	f7fe fa8c 	bl	800a94a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c436:	4b0d      	ldr	r3, [pc, #52]	; (800c46c <xTaskRemoveFromEventList+0xc0>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d905      	bls.n	800c44c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c440:	2301      	movs	r3, #1
 800c442:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c444:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <xTaskRemoveFromEventList+0xc4>)
 800c446:	2201      	movs	r2, #1
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	e001      	b.n	800c450 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c44c:	2300      	movs	r3, #0
 800c44e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c450:	697b      	ldr	r3, [r7, #20]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	200015c8 	.word	0x200015c8
 800c460:	200015a8 	.word	0x200015a8
 800c464:	200010d0 	.word	0x200010d0
 800c468:	20001560 	.word	0x20001560
 800c46c:	200010cc 	.word	0x200010cc
 800c470:	200015b4 	.word	0x200015b4

0800c474 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c47c:	4b06      	ldr	r3, [pc, #24]	; (800c498 <vTaskInternalSetTimeOutState+0x24>)
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c484:	4b05      	ldr	r3, [pc, #20]	; (800c49c <vTaskInternalSetTimeOutState+0x28>)
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	605a      	str	r2, [r3, #4]
}
 800c48c:	bf00      	nop
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	200015b8 	.word	0x200015b8
 800c49c:	200015a4 	.word	0x200015a4

0800c4a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b088      	sub	sp, #32
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	613b      	str	r3, [r7, #16]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	60fb      	str	r3, [r7, #12]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c4e2:	f000 ff77 	bl	800d3d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4e6:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <xTaskCheckForTimeOut+0xbc>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	69ba      	ldr	r2, [r7, #24]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4fe:	d102      	bne.n	800c506 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c500:	2300      	movs	r3, #0
 800c502:	61fb      	str	r3, [r7, #28]
 800c504:	e023      	b.n	800c54e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	4b15      	ldr	r3, [pc, #84]	; (800c560 <xTaskCheckForTimeOut+0xc0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d007      	beq.n	800c522 <xTaskCheckForTimeOut+0x82>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	69ba      	ldr	r2, [r7, #24]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d302      	bcc.n	800c522 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c51c:	2301      	movs	r3, #1
 800c51e:	61fb      	str	r3, [r7, #28]
 800c520:	e015      	b.n	800c54e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d20b      	bcs.n	800c544 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	1ad2      	subs	r2, r2, r3
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff ff9b 	bl	800c474 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c53e:	2300      	movs	r3, #0
 800c540:	61fb      	str	r3, [r7, #28]
 800c542:	e004      	b.n	800c54e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c54a:	2301      	movs	r3, #1
 800c54c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c54e:	f000 ff71 	bl	800d434 <vPortExitCritical>

	return xReturn;
 800c552:	69fb      	ldr	r3, [r7, #28]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3720      	adds	r7, #32
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	200015a4 	.word	0x200015a4
 800c560:	200015b8 	.word	0x200015b8

0800c564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c564:	b480      	push	{r7}
 800c566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c568:	4b03      	ldr	r3, [pc, #12]	; (800c578 <vTaskMissedYield+0x14>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	601a      	str	r2, [r3, #0]
}
 800c56e:	bf00      	nop
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	200015b4 	.word	0x200015b4

0800c57c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c584:	f000 f852 	bl	800c62c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c588:	4b06      	ldr	r3, [pc, #24]	; (800c5a4 <prvIdleTask+0x28>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d9f9      	bls.n	800c584 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c590:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <prvIdleTask+0x2c>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c5a0:	e7f0      	b.n	800c584 <prvIdleTask+0x8>
 800c5a2:	bf00      	nop
 800c5a4:	200010d0 	.word	0x200010d0
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	607b      	str	r3, [r7, #4]
 800c5b6:	e00c      	b.n	800c5d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4413      	add	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4a12      	ldr	r2, [pc, #72]	; (800c60c <prvInitialiseTaskLists+0x60>)
 800c5c4:	4413      	add	r3, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fe f992 	bl	800a8f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	607b      	str	r3, [r7, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b37      	cmp	r3, #55	; 0x37
 800c5d6:	d9ef      	bls.n	800c5b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5d8:	480d      	ldr	r0, [pc, #52]	; (800c610 <prvInitialiseTaskLists+0x64>)
 800c5da:	f7fe f989 	bl	800a8f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5de:	480d      	ldr	r0, [pc, #52]	; (800c614 <prvInitialiseTaskLists+0x68>)
 800c5e0:	f7fe f986 	bl	800a8f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5e4:	480c      	ldr	r0, [pc, #48]	; (800c618 <prvInitialiseTaskLists+0x6c>)
 800c5e6:	f7fe f983 	bl	800a8f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5ea:	480c      	ldr	r0, [pc, #48]	; (800c61c <prvInitialiseTaskLists+0x70>)
 800c5ec:	f7fe f980 	bl	800a8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5f0:	480b      	ldr	r0, [pc, #44]	; (800c620 <prvInitialiseTaskLists+0x74>)
 800c5f2:	f7fe f97d 	bl	800a8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5f6:	4b0b      	ldr	r3, [pc, #44]	; (800c624 <prvInitialiseTaskLists+0x78>)
 800c5f8:	4a05      	ldr	r2, [pc, #20]	; (800c610 <prvInitialiseTaskLists+0x64>)
 800c5fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	; (800c628 <prvInitialiseTaskLists+0x7c>)
 800c5fe:	4a05      	ldr	r2, [pc, #20]	; (800c614 <prvInitialiseTaskLists+0x68>)
 800c600:	601a      	str	r2, [r3, #0]
}
 800c602:	bf00      	nop
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	200010d0 	.word	0x200010d0
 800c610:	20001530 	.word	0x20001530
 800c614:	20001544 	.word	0x20001544
 800c618:	20001560 	.word	0x20001560
 800c61c:	20001574 	.word	0x20001574
 800c620:	2000158c 	.word	0x2000158c
 800c624:	20001558 	.word	0x20001558
 800c628:	2000155c 	.word	0x2000155c

0800c62c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c632:	e019      	b.n	800c668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c634:	f000 fece 	bl	800d3d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c638:	4b10      	ldr	r3, [pc, #64]	; (800c67c <prvCheckTasksWaitingTermination+0x50>)
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	3304      	adds	r3, #4
 800c644:	4618      	mov	r0, r3
 800c646:	f7fe f9dd 	bl	800aa04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c64a:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <prvCheckTasksWaitingTermination+0x54>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3b01      	subs	r3, #1
 800c650:	4a0b      	ldr	r2, [pc, #44]	; (800c680 <prvCheckTasksWaitingTermination+0x54>)
 800c652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c654:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <prvCheckTasksWaitingTermination+0x58>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3b01      	subs	r3, #1
 800c65a:	4a0a      	ldr	r2, [pc, #40]	; (800c684 <prvCheckTasksWaitingTermination+0x58>)
 800c65c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c65e:	f000 fee9 	bl	800d434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f810 	bl	800c688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c668:	4b06      	ldr	r3, [pc, #24]	; (800c684 <prvCheckTasksWaitingTermination+0x58>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e1      	bne.n	800c634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20001574 	.word	0x20001574
 800c680:	200015a0 	.word	0x200015a0
 800c684:	20001588 	.word	0x20001588

0800c688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c696:	2b00      	cmp	r3, #0
 800c698:	d108      	bne.n	800c6ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f001 f886 	bl	800d7b0 <vPortFree>
				vPortFree( pxTCB );
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f001 f883 	bl	800d7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6aa:	e018      	b.n	800c6de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d103      	bne.n	800c6be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 f87a 	bl	800d7b0 <vPortFree>
	}
 800c6bc:	e00f      	b.n	800c6de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d00a      	beq.n	800c6de <prvDeleteTCB+0x56>
	__asm volatile
 800c6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	60fb      	str	r3, [r7, #12]
}
 800c6da:	bf00      	nop
 800c6dc:	e7fe      	b.n	800c6dc <prvDeleteTCB+0x54>
	}
 800c6de:	bf00      	nop
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
	...

0800c6e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6ee:	4b0c      	ldr	r3, [pc, #48]	; (800c720 <prvResetNextTaskUnblockTime+0x38>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d104      	bne.n	800c702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c6f8:	4b0a      	ldr	r3, [pc, #40]	; (800c724 <prvResetNextTaskUnblockTime+0x3c>)
 800c6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c700:	e008      	b.n	800c714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c702:	4b07      	ldr	r3, [pc, #28]	; (800c720 <prvResetNextTaskUnblockTime+0x38>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	4a04      	ldr	r2, [pc, #16]	; (800c724 <prvResetNextTaskUnblockTime+0x3c>)
 800c712:	6013      	str	r3, [r2, #0]
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	20001558 	.word	0x20001558
 800c724:	200015c0 	.word	0x200015c0

0800c728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c72e:	4b0b      	ldr	r3, [pc, #44]	; (800c75c <xTaskGetSchedulerState+0x34>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d102      	bne.n	800c73c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c736:	2301      	movs	r3, #1
 800c738:	607b      	str	r3, [r7, #4]
 800c73a:	e008      	b.n	800c74e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c73c:	4b08      	ldr	r3, [pc, #32]	; (800c760 <xTaskGetSchedulerState+0x38>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d102      	bne.n	800c74a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c744:	2302      	movs	r3, #2
 800c746:	607b      	str	r3, [r7, #4]
 800c748:	e001      	b.n	800c74e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c74a:	2300      	movs	r3, #0
 800c74c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c74e:	687b      	ldr	r3, [r7, #4]
	}
 800c750:	4618      	mov	r0, r3
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	200015ac 	.word	0x200015ac
 800c760:	200015c8 	.word	0x200015c8

0800c764 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c770:	2300      	movs	r3, #0
 800c772:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d051      	beq.n	800c81e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77e:	4b2a      	ldr	r3, [pc, #168]	; (800c828 <xTaskPriorityInherit+0xc4>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c784:	429a      	cmp	r2, r3
 800c786:	d241      	bcs.n	800c80c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	db06      	blt.n	800c79e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c790:	4b25      	ldr	r3, [pc, #148]	; (800c828 <xTaskPriorityInherit+0xc4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c796:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	6959      	ldr	r1, [r3, #20]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4a1f      	ldr	r2, [pc, #124]	; (800c82c <xTaskPriorityInherit+0xc8>)
 800c7b0:	4413      	add	r3, r2
 800c7b2:	4299      	cmp	r1, r3
 800c7b4:	d122      	bne.n	800c7fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe f922 	bl	800aa04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c7c0:	4b19      	ldr	r3, [pc, #100]	; (800c828 <xTaskPriorityInherit+0xc4>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ce:	4b18      	ldr	r3, [pc, #96]	; (800c830 <xTaskPriorityInherit+0xcc>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d903      	bls.n	800c7de <xTaskPriorityInherit+0x7a>
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7da:	4a15      	ldr	r2, [pc, #84]	; (800c830 <xTaskPriorityInherit+0xcc>)
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4a10      	ldr	r2, [pc, #64]	; (800c82c <xTaskPriorityInherit+0xc8>)
 800c7ec:	441a      	add	r2, r3
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	f7fe f8a8 	bl	800a94a <vListInsertEnd>
 800c7fa:	e004      	b.n	800c806 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <xTaskPriorityInherit+0xc4>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c806:	2301      	movs	r3, #1
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	e008      	b.n	800c81e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <xTaskPriorityInherit+0xc4>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c816:	429a      	cmp	r2, r3
 800c818:	d201      	bcs.n	800c81e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c81a:	2301      	movs	r3, #1
 800c81c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c81e:	68fb      	ldr	r3, [r7, #12]
	}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	200010cc 	.word	0x200010cc
 800c82c:	200010d0 	.word	0x200010d0
 800c830:	200015a8 	.word	0x200015a8

0800c834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c840:	2300      	movs	r3, #0
 800c842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d056      	beq.n	800c8f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c84a:	4b2e      	ldr	r3, [pc, #184]	; (800c904 <xTaskPriorityDisinherit+0xd0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	429a      	cmp	r2, r3
 800c852:	d00a      	beq.n	800c86a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	60fb      	str	r3, [r7, #12]
}
 800c866:	bf00      	nop
 800c868:	e7fe      	b.n	800c868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10a      	bne.n	800c888 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	60bb      	str	r3, [r7, #8]
}
 800c884:	bf00      	nop
 800c886:	e7fe      	b.n	800c886 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c88c:	1e5a      	subs	r2, r3, #1
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d02c      	beq.n	800c8f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d128      	bne.n	800c8f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fe f8aa 	bl	800aa04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c8:	4b0f      	ldr	r3, [pc, #60]	; (800c908 <xTaskPriorityDisinherit+0xd4>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d903      	bls.n	800c8d8 <xTaskPriorityDisinherit+0xa4>
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d4:	4a0c      	ldr	r2, [pc, #48]	; (800c908 <xTaskPriorityDisinherit+0xd4>)
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8dc:	4613      	mov	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4413      	add	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4a09      	ldr	r2, [pc, #36]	; (800c90c <xTaskPriorityDisinherit+0xd8>)
 800c8e6:	441a      	add	r2, r3
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	f7fe f82b 	bl	800a94a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8f8:	697b      	ldr	r3, [r7, #20]
	}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	200010cc 	.word	0x200010cc
 800c908:	200015a8 	.word	0x200015a8
 800c90c:	200010d0 	.word	0x200010d0

0800c910 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c91e:	2301      	movs	r3, #1
 800c920:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d06a      	beq.n	800c9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10a      	bne.n	800c946 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	60fb      	str	r3, [r7, #12]
}
 800c942:	bf00      	nop
 800c944:	e7fe      	b.n	800c944 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c94a:	683a      	ldr	r2, [r7, #0]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d902      	bls.n	800c956 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	61fb      	str	r3, [r7, #28]
 800c954:	e002      	b.n	800c95c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c95a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c960:	69fa      	ldr	r2, [r7, #28]
 800c962:	429a      	cmp	r2, r3
 800c964:	d04b      	beq.n	800c9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d146      	bne.n	800c9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c970:	4b25      	ldr	r3, [pc, #148]	; (800ca08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	69ba      	ldr	r2, [r7, #24]
 800c976:	429a      	cmp	r2, r3
 800c978:	d10a      	bne.n	800c990 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	60bb      	str	r3, [r7, #8]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c994:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	69fa      	ldr	r2, [r7, #28]
 800c99a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	db04      	blt.n	800c9ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	6959      	ldr	r1, [r3, #20]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4a13      	ldr	r2, [pc, #76]	; (800ca0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c9be:	4413      	add	r3, r2
 800c9c0:	4299      	cmp	r1, r3
 800c9c2:	d11c      	bne.n	800c9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe f81b 	bl	800aa04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d903      	bls.n	800c9e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9de:	4a0c      	ldr	r2, [pc, #48]	; (800ca10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c9e0:	6013      	str	r3, [r2, #0]
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4a07      	ldr	r2, [pc, #28]	; (800ca0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c9f0:	441a      	add	r2, r3
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	f7fd ffa6 	bl	800a94a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9fe:	bf00      	nop
 800ca00:	3720      	adds	r7, #32
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	200010cc 	.word	0x200010cc
 800ca0c:	200010d0 	.word	0x200010d0
 800ca10:	200015a8 	.word	0x200015a8

0800ca14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca14:	b480      	push	{r7}
 800ca16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ca18:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d004      	beq.n	800ca2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ca20:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca26:	3201      	adds	r2, #1
 800ca28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ca2a:	4b03      	ldr	r3, [pc, #12]	; (800ca38 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
	}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr
 800ca38:	200010cc 	.word	0x200010cc

0800ca3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca46:	4b21      	ldr	r3, [pc, #132]	; (800cacc <prvAddCurrentTaskToDelayedList+0x90>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca4c:	4b20      	ldr	r3, [pc, #128]	; (800cad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3304      	adds	r3, #4
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fd ffd6 	bl	800aa04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5e:	d10a      	bne.n	800ca76 <prvAddCurrentTaskToDelayedList+0x3a>
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d007      	beq.n	800ca76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca66:	4b1a      	ldr	r3, [pc, #104]	; (800cad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	4819      	ldr	r0, [pc, #100]	; (800cad4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ca70:	f7fd ff6b 	bl	800a94a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca74:	e026      	b.n	800cac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca7e:	4b14      	ldr	r3, [pc, #80]	; (800cad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d209      	bcs.n	800caa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca8e:	4b12      	ldr	r3, [pc, #72]	; (800cad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3304      	adds	r3, #4
 800ca98:	4619      	mov	r1, r3
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	f7fd ff79 	bl	800a992 <vListInsert>
}
 800caa0:	e010      	b.n	800cac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caa2:	4b0e      	ldr	r3, [pc, #56]	; (800cadc <prvAddCurrentTaskToDelayedList+0xa0>)
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	4b0a      	ldr	r3, [pc, #40]	; (800cad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	3304      	adds	r3, #4
 800caac:	4619      	mov	r1, r3
 800caae:	4610      	mov	r0, r2
 800cab0:	f7fd ff6f 	bl	800a992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cab4:	4b0a      	ldr	r3, [pc, #40]	; (800cae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d202      	bcs.n	800cac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cabe:	4a08      	ldr	r2, [pc, #32]	; (800cae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	6013      	str	r3, [r2, #0]
}
 800cac4:	bf00      	nop
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	200015a4 	.word	0x200015a4
 800cad0:	200010cc 	.word	0x200010cc
 800cad4:	2000158c 	.word	0x2000158c
 800cad8:	2000155c 	.word	0x2000155c
 800cadc:	20001558 	.word	0x20001558
 800cae0:	200015c0 	.word	0x200015c0

0800cae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b08a      	sub	sp, #40	; 0x28
 800cae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800caea:	2300      	movs	r3, #0
 800caec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800caee:	f000 fb07 	bl	800d100 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <xTimerCreateTimerTask+0x80>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d021      	beq.n	800cb3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cafe:	2300      	movs	r3, #0
 800cb00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb02:	1d3a      	adds	r2, r7, #4
 800cb04:	f107 0108 	add.w	r1, r7, #8
 800cb08:	f107 030c 	add.w	r3, r7, #12
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fd fed5 	bl	800a8bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	9202      	str	r2, [sp, #8]
 800cb1a:	9301      	str	r3, [sp, #4]
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	2300      	movs	r3, #0
 800cb22:	460a      	mov	r2, r1
 800cb24:	4910      	ldr	r1, [pc, #64]	; (800cb68 <xTimerCreateTimerTask+0x84>)
 800cb26:	4811      	ldr	r0, [pc, #68]	; (800cb6c <xTimerCreateTimerTask+0x88>)
 800cb28:	f7fe ffe0 	bl	800baec <xTaskCreateStatic>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	4a10      	ldr	r2, [pc, #64]	; (800cb70 <xTimerCreateTimerTask+0x8c>)
 800cb30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb32:	4b0f      	ldr	r3, [pc, #60]	; (800cb70 <xTimerCreateTimerTask+0x8c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10a      	bne.n	800cb5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	613b      	str	r3, [r7, #16]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb5a:	697b      	ldr	r3, [r7, #20]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	200015fc 	.word	0x200015fc
 800cb68:	08010ee0 	.word	0x08010ee0
 800cb6c:	0800cca9 	.word	0x0800cca9
 800cb70:	20001600 	.word	0x20001600

0800cb74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	; 0x28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10a      	bne.n	800cba2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	623b      	str	r3, [r7, #32]
}
 800cb9e:	bf00      	nop
 800cba0:	e7fe      	b.n	800cba0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cba2:	4b1a      	ldr	r3, [pc, #104]	; (800cc0c <xTimerGenericCommand+0x98>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d02a      	beq.n	800cc00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b05      	cmp	r3, #5
 800cbba:	dc18      	bgt.n	800cbee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cbbc:	f7ff fdb4 	bl	800c728 <xTaskGetSchedulerState>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d109      	bne.n	800cbda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cbc6:	4b11      	ldr	r3, [pc, #68]	; (800cc0c <xTimerGenericCommand+0x98>)
 800cbc8:	6818      	ldr	r0, [r3, #0]
 800cbca:	f107 0110 	add.w	r1, r7, #16
 800cbce:	2300      	movs	r3, #0
 800cbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbd2:	f7fe f8e9 	bl	800ada8 <xQueueGenericSend>
 800cbd6:	6278      	str	r0, [r7, #36]	; 0x24
 800cbd8:	e012      	b.n	800cc00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cbda:	4b0c      	ldr	r3, [pc, #48]	; (800cc0c <xTimerGenericCommand+0x98>)
 800cbdc:	6818      	ldr	r0, [r3, #0]
 800cbde:	f107 0110 	add.w	r1, r7, #16
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f7fe f8df 	bl	800ada8 <xQueueGenericSend>
 800cbea:	6278      	str	r0, [r7, #36]	; 0x24
 800cbec:	e008      	b.n	800cc00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cbee:	4b07      	ldr	r3, [pc, #28]	; (800cc0c <xTimerGenericCommand+0x98>)
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	f107 0110 	add.w	r1, r7, #16
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	f7fe f9d3 	bl	800afa4 <xQueueGenericSendFromISR>
 800cbfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3728      	adds	r7, #40	; 0x28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	200015fc 	.word	0x200015fc

0800cc10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc1a:	4b22      	ldr	r3, [pc, #136]	; (800cca4 <prvProcessExpiredTimer+0x94>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	3304      	adds	r3, #4
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fd feeb 	bl	800aa04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d022      	beq.n	800cc82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	699a      	ldr	r2, [r3, #24]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	18d1      	adds	r1, r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	6978      	ldr	r0, [r7, #20]
 800cc4a:	f000 f8d1 	bl	800cdf0 <prvInsertTimerInActiveList>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d01f      	beq.n	800cc94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc54:	2300      	movs	r3, #0
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	6978      	ldr	r0, [r7, #20]
 800cc60:	f7ff ff88 	bl	800cb74 <xTimerGenericCommand>
 800cc64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d113      	bne.n	800cc94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	60fb      	str	r3, [r7, #12]
}
 800cc7e:	bf00      	nop
 800cc80:	e7fe      	b.n	800cc80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc88:	f023 0301 	bic.w	r3, r3, #1
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	6978      	ldr	r0, [r7, #20]
 800cc9a:	4798      	blx	r3
}
 800cc9c:	bf00      	nop
 800cc9e:	3718      	adds	r7, #24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	200015f4 	.word	0x200015f4

0800cca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccb0:	f107 0308 	add.w	r3, r7, #8
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f857 	bl	800cd68 <prvGetNextExpireTime>
 800ccba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 f803 	bl	800cccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ccc6:	f000 f8d5 	bl	800ce74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccca:	e7f1      	b.n	800ccb0 <prvTimerTask+0x8>

0800cccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ccd6:	f7ff f945 	bl	800bf64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccda:	f107 0308 	add.w	r3, r7, #8
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 f866 	bl	800cdb0 <prvSampleTimeNow>
 800cce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d130      	bne.n	800cd4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <prvProcessTimerOrBlockTask+0x3c>
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d806      	bhi.n	800cd08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ccfa:	f7ff f941 	bl	800bf80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ccfe:	68f9      	ldr	r1, [r7, #12]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7ff ff85 	bl	800cc10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd06:	e024      	b.n	800cd52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d008      	beq.n	800cd20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd0e:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <prvProcessTimerOrBlockTask+0x90>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <prvProcessTimerOrBlockTask+0x50>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e000      	b.n	800cd1e <prvProcessTimerOrBlockTask+0x52>
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd20:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <prvProcessTimerOrBlockTask+0x94>)
 800cd22:	6818      	ldr	r0, [r3, #0]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	f7fe fea9 	bl	800ba84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cd32:	f7ff f925 	bl	800bf80 <xTaskResumeAll>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cd3c:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <prvProcessTimerOrBlockTask+0x98>)
 800cd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	f3bf 8f6f 	isb	sy
}
 800cd4c:	e001      	b.n	800cd52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cd4e:	f7ff f917 	bl	800bf80 <xTaskResumeAll>
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	200015f8 	.word	0x200015f8
 800cd60:	200015fc 	.word	0x200015fc
 800cd64:	e000ed04 	.word	0xe000ed04

0800cd68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd70:	4b0e      	ldr	r3, [pc, #56]	; (800cdac <prvGetNextExpireTime+0x44>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <prvGetNextExpireTime+0x16>
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	e000      	b.n	800cd80 <prvGetNextExpireTime+0x18>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d105      	bne.n	800cd98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd8c:	4b07      	ldr	r3, [pc, #28]	; (800cdac <prvGetNextExpireTime+0x44>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	60fb      	str	r3, [r7, #12]
 800cd96:	e001      	b.n	800cd9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	200015f4 	.word	0x200015f4

0800cdb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cdb8:	f7ff f980 	bl	800c0bc <xTaskGetTickCount>
 800cdbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cdbe:	4b0b      	ldr	r3, [pc, #44]	; (800cdec <prvSampleTimeNow+0x3c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d205      	bcs.n	800cdd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cdc8:	f000 f936 	bl	800d038 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]
 800cdd2:	e002      	b.n	800cdda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cdda:	4a04      	ldr	r2, [pc, #16]	; (800cdec <prvSampleTimeNow+0x3c>)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cde0:	68fb      	ldr	r3, [r7, #12]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20001604 	.word	0x20001604

0800cdf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d812      	bhi.n	800ce3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	1ad2      	subs	r2, r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d302      	bcc.n	800ce2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce24:	2301      	movs	r3, #1
 800ce26:	617b      	str	r3, [r7, #20]
 800ce28:	e01b      	b.n	800ce62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce2a:	4b10      	ldr	r3, [pc, #64]	; (800ce6c <prvInsertTimerInActiveList+0x7c>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3304      	adds	r3, #4
 800ce32:	4619      	mov	r1, r3
 800ce34:	4610      	mov	r0, r2
 800ce36:	f7fd fdac 	bl	800a992 <vListInsert>
 800ce3a:	e012      	b.n	800ce62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d206      	bcs.n	800ce52 <prvInsertTimerInActiveList+0x62>
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d302      	bcc.n	800ce52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	617b      	str	r3, [r7, #20]
 800ce50:	e007      	b.n	800ce62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce52:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <prvInsertTimerInActiveList+0x80>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3304      	adds	r3, #4
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7fd fd98 	bl	800a992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce62:	697b      	ldr	r3, [r7, #20]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	200015f8 	.word	0x200015f8
 800ce70:	200015f4 	.word	0x200015f4

0800ce74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08e      	sub	sp, #56	; 0x38
 800ce78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce7a:	e0ca      	b.n	800d012 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	da18      	bge.n	800ceb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce82:	1d3b      	adds	r3, r7, #4
 800ce84:	3304      	adds	r3, #4
 800ce86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10a      	bne.n	800cea4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	61fb      	str	r3, [r7, #28]
}
 800cea0:	bf00      	nop
 800cea2:	e7fe      	b.n	800cea2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceaa:	6850      	ldr	r0, [r2, #4]
 800ceac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceae:	6892      	ldr	r2, [r2, #8]
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f2c0 80ab 	blt.w	800d012 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d004      	beq.n	800ced2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	3304      	adds	r3, #4
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fd fd99 	bl	800aa04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ced2:	463b      	mov	r3, r7
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7ff ff6b 	bl	800cdb0 <prvSampleTimeNow>
 800ceda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b09      	cmp	r3, #9
 800cee0:	f200 8096 	bhi.w	800d010 <prvProcessReceivedCommands+0x19c>
 800cee4:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <prvProcessReceivedCommands+0x78>)
 800cee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceea:	bf00      	nop
 800ceec:	0800cf15 	.word	0x0800cf15
 800cef0:	0800cf15 	.word	0x0800cf15
 800cef4:	0800cf15 	.word	0x0800cf15
 800cef8:	0800cf89 	.word	0x0800cf89
 800cefc:	0800cf9d 	.word	0x0800cf9d
 800cf00:	0800cfe7 	.word	0x0800cfe7
 800cf04:	0800cf15 	.word	0x0800cf15
 800cf08:	0800cf15 	.word	0x0800cf15
 800cf0c:	0800cf89 	.word	0x0800cf89
 800cf10:	0800cf9d 	.word	0x0800cf9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf1a:	f043 0301 	orr.w	r3, r3, #1
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	18d1      	adds	r1, r2, r3
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf34:	f7ff ff5c 	bl	800cdf0 <prvInsertTimerInActiveList>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d069      	beq.n	800d012 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf4c:	f003 0304 	and.w	r3, r3, #4
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d05e      	beq.n	800d012 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	441a      	add	r2, r3
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	2300      	movs	r3, #0
 800cf62:	2100      	movs	r1, #0
 800cf64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf66:	f7ff fe05 	bl	800cb74 <xTimerGenericCommand>
 800cf6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d14f      	bne.n	800d012 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	61bb      	str	r3, [r7, #24]
}
 800cf84:	bf00      	nop
 800cf86:	e7fe      	b.n	800cf86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf8e:	f023 0301 	bic.w	r3, r3, #1
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cf9a:	e03a      	b.n	800d012 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa2:	f043 0301 	orr.w	r3, r3, #1
 800cfa6:	b2da      	uxtb	r2, r3
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	617b      	str	r3, [r7, #20]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	18d1      	adds	r1, r2, r3
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfe0:	f7ff ff06 	bl	800cdf0 <prvInsertTimerInActiveList>
					break;
 800cfe4:	e015      	b.n	800d012 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfec:	f003 0302 	and.w	r3, r3, #2
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d103      	bne.n	800cffc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff6:	f000 fbdb 	bl	800d7b0 <vPortFree>
 800cffa:	e00a      	b.n	800d012 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d002:	f023 0301 	bic.w	r3, r3, #1
 800d006:	b2da      	uxtb	r2, r3
 800d008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d00e:	e000      	b.n	800d012 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d012:	4b08      	ldr	r3, [pc, #32]	; (800d034 <prvProcessReceivedCommands+0x1c0>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	1d39      	adds	r1, r7, #4
 800d018:	2200      	movs	r2, #0
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe f8ea 	bl	800b1f4 <xQueueReceive>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	f47f af2a 	bne.w	800ce7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	3730      	adds	r7, #48	; 0x30
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	200015fc 	.word	0x200015fc

0800d038 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d03e:	e048      	b.n	800d0d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d040:	4b2d      	ldr	r3, [pc, #180]	; (800d0f8 <prvSwitchTimerLists+0xc0>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d04a:	4b2b      	ldr	r3, [pc, #172]	; (800d0f8 <prvSwitchTimerLists+0xc0>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3304      	adds	r3, #4
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fd fcd3 	bl	800aa04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d06c:	f003 0304 	and.w	r3, r3, #4
 800d070:	2b00      	cmp	r3, #0
 800d072:	d02e      	beq.n	800d0d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	693a      	ldr	r2, [r7, #16]
 800d07a:	4413      	add	r3, r2
 800d07c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	429a      	cmp	r2, r3
 800d084:	d90e      	bls.n	800d0a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d092:	4b19      	ldr	r3, [pc, #100]	; (800d0f8 <prvSwitchTimerLists+0xc0>)
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3304      	adds	r3, #4
 800d09a:	4619      	mov	r1, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	f7fd fc78 	bl	800a992 <vListInsert>
 800d0a2:	e016      	b.n	800d0d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f7ff fd60 	bl	800cb74 <xTimerGenericCommand>
 800d0b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	603b      	str	r3, [r7, #0]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0d2:	4b09      	ldr	r3, [pc, #36]	; (800d0f8 <prvSwitchTimerLists+0xc0>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1b1      	bne.n	800d040 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d0dc:	4b06      	ldr	r3, [pc, #24]	; (800d0f8 <prvSwitchTimerLists+0xc0>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d0e2:	4b06      	ldr	r3, [pc, #24]	; (800d0fc <prvSwitchTimerLists+0xc4>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a04      	ldr	r2, [pc, #16]	; (800d0f8 <prvSwitchTimerLists+0xc0>)
 800d0e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d0ea:	4a04      	ldr	r2, [pc, #16]	; (800d0fc <prvSwitchTimerLists+0xc4>)
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	6013      	str	r3, [r2, #0]
}
 800d0f0:	bf00      	nop
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	200015f4 	.word	0x200015f4
 800d0fc:	200015f8 	.word	0x200015f8

0800d100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d106:	f000 f965 	bl	800d3d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d10a:	4b15      	ldr	r3, [pc, #84]	; (800d160 <prvCheckForValidListAndQueue+0x60>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d120      	bne.n	800d154 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d112:	4814      	ldr	r0, [pc, #80]	; (800d164 <prvCheckForValidListAndQueue+0x64>)
 800d114:	f7fd fbec 	bl	800a8f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d118:	4813      	ldr	r0, [pc, #76]	; (800d168 <prvCheckForValidListAndQueue+0x68>)
 800d11a:	f7fd fbe9 	bl	800a8f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d11e:	4b13      	ldr	r3, [pc, #76]	; (800d16c <prvCheckForValidListAndQueue+0x6c>)
 800d120:	4a10      	ldr	r2, [pc, #64]	; (800d164 <prvCheckForValidListAndQueue+0x64>)
 800d122:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d124:	4b12      	ldr	r3, [pc, #72]	; (800d170 <prvCheckForValidListAndQueue+0x70>)
 800d126:	4a10      	ldr	r2, [pc, #64]	; (800d168 <prvCheckForValidListAndQueue+0x68>)
 800d128:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d12a:	2300      	movs	r3, #0
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	4b11      	ldr	r3, [pc, #68]	; (800d174 <prvCheckForValidListAndQueue+0x74>)
 800d130:	4a11      	ldr	r2, [pc, #68]	; (800d178 <prvCheckForValidListAndQueue+0x78>)
 800d132:	2110      	movs	r1, #16
 800d134:	200a      	movs	r0, #10
 800d136:	f7fd fcf7 	bl	800ab28 <xQueueGenericCreateStatic>
 800d13a:	4603      	mov	r3, r0
 800d13c:	4a08      	ldr	r2, [pc, #32]	; (800d160 <prvCheckForValidListAndQueue+0x60>)
 800d13e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d140:	4b07      	ldr	r3, [pc, #28]	; (800d160 <prvCheckForValidListAndQueue+0x60>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d005      	beq.n	800d154 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d148:	4b05      	ldr	r3, [pc, #20]	; (800d160 <prvCheckForValidListAndQueue+0x60>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	490b      	ldr	r1, [pc, #44]	; (800d17c <prvCheckForValidListAndQueue+0x7c>)
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fc44 	bl	800b9dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d154:	f000 f96e 	bl	800d434 <vPortExitCritical>
}
 800d158:	bf00      	nop
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	200015fc 	.word	0x200015fc
 800d164:	200015cc 	.word	0x200015cc
 800d168:	200015e0 	.word	0x200015e0
 800d16c:	200015f4 	.word	0x200015f4
 800d170:	200015f8 	.word	0x200015f8
 800d174:	200016a8 	.word	0x200016a8
 800d178:	20001608 	.word	0x20001608
 800d17c:	08010ee8 	.word	0x08010ee8

0800d180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3b04      	subs	r3, #4
 800d190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	3b04      	subs	r3, #4
 800d19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	f023 0201 	bic.w	r2, r3, #1
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3b04      	subs	r3, #4
 800d1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1b0:	4a0c      	ldr	r2, [pc, #48]	; (800d1e4 <pxPortInitialiseStack+0x64>)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	3b14      	subs	r3, #20
 800d1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3b04      	subs	r3, #4
 800d1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f06f 0202 	mvn.w	r2, #2
 800d1ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	3b20      	subs	r3, #32
 800d1d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr
 800d1e4:	0800d1e9 	.word	0x0800d1e9

0800d1e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d1f2:	4b12      	ldr	r3, [pc, #72]	; (800d23c <prvTaskExitError+0x54>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1fa:	d00a      	beq.n	800d212 <prvTaskExitError+0x2a>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	60fb      	str	r3, [r7, #12]
}
 800d20e:	bf00      	nop
 800d210:	e7fe      	b.n	800d210 <prvTaskExitError+0x28>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	60bb      	str	r3, [r7, #8]
}
 800d224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d226:	bf00      	nop
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0fc      	beq.n	800d228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d22e:	bf00      	nop
 800d230:	bf00      	nop
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	20000038 	.word	0x20000038

0800d240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d240:	4b07      	ldr	r3, [pc, #28]	; (800d260 <pxCurrentTCBConst2>)
 800d242:	6819      	ldr	r1, [r3, #0]
 800d244:	6808      	ldr	r0, [r1, #0]
 800d246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24a:	f380 8809 	msr	PSP, r0
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f04f 0000 	mov.w	r0, #0
 800d256:	f380 8811 	msr	BASEPRI, r0
 800d25a:	4770      	bx	lr
 800d25c:	f3af 8000 	nop.w

0800d260 <pxCurrentTCBConst2>:
 800d260:	200010cc 	.word	0x200010cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop

0800d268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d268:	4808      	ldr	r0, [pc, #32]	; (800d28c <prvPortStartFirstTask+0x24>)
 800d26a:	6800      	ldr	r0, [r0, #0]
 800d26c:	6800      	ldr	r0, [r0, #0]
 800d26e:	f380 8808 	msr	MSP, r0
 800d272:	f04f 0000 	mov.w	r0, #0
 800d276:	f380 8814 	msr	CONTROL, r0
 800d27a:	b662      	cpsie	i
 800d27c:	b661      	cpsie	f
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	df00      	svc	0
 800d288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d28a:	bf00      	nop
 800d28c:	e000ed08 	.word	0xe000ed08

0800d290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d296:	4b46      	ldr	r3, [pc, #280]	; (800d3b0 <xPortStartScheduler+0x120>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a46      	ldr	r2, [pc, #280]	; (800d3b4 <xPortStartScheduler+0x124>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d10a      	bne.n	800d2b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	613b      	str	r3, [r7, #16]
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d2b6:	4b3e      	ldr	r3, [pc, #248]	; (800d3b0 <xPortStartScheduler+0x120>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a3f      	ldr	r2, [pc, #252]	; (800d3b8 <xPortStartScheduler+0x128>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d10a      	bne.n	800d2d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	60fb      	str	r3, [r7, #12]
}
 800d2d2:	bf00      	nop
 800d2d4:	e7fe      	b.n	800d2d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2d6:	4b39      	ldr	r3, [pc, #228]	; (800d3bc <xPortStartScheduler+0x12c>)
 800d2d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	22ff      	movs	r2, #255	; 0xff
 800d2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	4b31      	ldr	r3, [pc, #196]	; (800d3c0 <xPortStartScheduler+0x130>)
 800d2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d2fe:	4b31      	ldr	r3, [pc, #196]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d300:	2207      	movs	r2, #7
 800d302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d304:	e009      	b.n	800d31a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d306:	4b2f      	ldr	r3, [pc, #188]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3b01      	subs	r3, #1
 800d30c:	4a2d      	ldr	r2, [pc, #180]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d310:	78fb      	ldrb	r3, [r7, #3]
 800d312:	b2db      	uxtb	r3, r3
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	b2db      	uxtb	r3, r3
 800d318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d31a:	78fb      	ldrb	r3, [r7, #3]
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d322:	2b80      	cmp	r3, #128	; 0x80
 800d324:	d0ef      	beq.n	800d306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d326:	4b27      	ldr	r3, [pc, #156]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f1c3 0307 	rsb	r3, r3, #7
 800d32e:	2b04      	cmp	r3, #4
 800d330:	d00a      	beq.n	800d348 <xPortStartScheduler+0xb8>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	60bb      	str	r3, [r7, #8]
}
 800d344:	bf00      	nop
 800d346:	e7fe      	b.n	800d346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d348:	4b1e      	ldr	r3, [pc, #120]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	021b      	lsls	r3, r3, #8
 800d34e:	4a1d      	ldr	r2, [pc, #116]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d352:	4b1c      	ldr	r3, [pc, #112]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d35a:	4a1a      	ldr	r2, [pc, #104]	; (800d3c4 <xPortStartScheduler+0x134>)
 800d35c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	b2da      	uxtb	r2, r3
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d366:	4b18      	ldr	r3, [pc, #96]	; (800d3c8 <xPortStartScheduler+0x138>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a17      	ldr	r2, [pc, #92]	; (800d3c8 <xPortStartScheduler+0x138>)
 800d36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d372:	4b15      	ldr	r3, [pc, #84]	; (800d3c8 <xPortStartScheduler+0x138>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a14      	ldr	r2, [pc, #80]	; (800d3c8 <xPortStartScheduler+0x138>)
 800d378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d37c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d37e:	f000 f8dd 	bl	800d53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d382:	4b12      	ldr	r3, [pc, #72]	; (800d3cc <xPortStartScheduler+0x13c>)
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d388:	f000 f8fc 	bl	800d584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d38c:	4b10      	ldr	r3, [pc, #64]	; (800d3d0 <xPortStartScheduler+0x140>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a0f      	ldr	r2, [pc, #60]	; (800d3d0 <xPortStartScheduler+0x140>)
 800d392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d398:	f7ff ff66 	bl	800d268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d39c:	f7fe ff58 	bl	800c250 <vTaskSwitchContext>
	prvTaskExitError();
 800d3a0:	f7ff ff22 	bl	800d1e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3718      	adds	r7, #24
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	e000ed00 	.word	0xe000ed00
 800d3b4:	410fc271 	.word	0x410fc271
 800d3b8:	410fc270 	.word	0x410fc270
 800d3bc:	e000e400 	.word	0xe000e400
 800d3c0:	200016f8 	.word	0x200016f8
 800d3c4:	200016fc 	.word	0x200016fc
 800d3c8:	e000ed20 	.word	0xe000ed20
 800d3cc:	20000038 	.word	0x20000038
 800d3d0:	e000ef34 	.word	0xe000ef34

0800d3d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	607b      	str	r3, [r7, #4]
}
 800d3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3ee:	4b0f      	ldr	r3, [pc, #60]	; (800d42c <vPortEnterCritical+0x58>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	4a0d      	ldr	r2, [pc, #52]	; (800d42c <vPortEnterCritical+0x58>)
 800d3f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d3f8:	4b0c      	ldr	r3, [pc, #48]	; (800d42c <vPortEnterCritical+0x58>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d10f      	bne.n	800d420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d400:	4b0b      	ldr	r3, [pc, #44]	; (800d430 <vPortEnterCritical+0x5c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00a      	beq.n	800d420 <vPortEnterCritical+0x4c>
	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	603b      	str	r3, [r7, #0]
}
 800d41c:	bf00      	nop
 800d41e:	e7fe      	b.n	800d41e <vPortEnterCritical+0x4a>
	}
}
 800d420:	bf00      	nop
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	20000038 	.word	0x20000038
 800d430:	e000ed04 	.word	0xe000ed04

0800d434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d43a:	4b12      	ldr	r3, [pc, #72]	; (800d484 <vPortExitCritical+0x50>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10a      	bne.n	800d458 <vPortExitCritical+0x24>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	607b      	str	r3, [r7, #4]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d458:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <vPortExitCritical+0x50>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3b01      	subs	r3, #1
 800d45e:	4a09      	ldr	r2, [pc, #36]	; (800d484 <vPortExitCritical+0x50>)
 800d460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d462:	4b08      	ldr	r3, [pc, #32]	; (800d484 <vPortExitCritical+0x50>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d105      	bne.n	800d476 <vPortExitCritical+0x42>
 800d46a:	2300      	movs	r3, #0
 800d46c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	f383 8811 	msr	BASEPRI, r3
}
 800d474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	20000038 	.word	0x20000038
	...

0800d490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d490:	f3ef 8009 	mrs	r0, PSP
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	4b15      	ldr	r3, [pc, #84]	; (800d4f0 <pxCurrentTCBConst>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	f01e 0f10 	tst.w	lr, #16
 800d4a0:	bf08      	it	eq
 800d4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4aa:	6010      	str	r0, [r2, #0]
 800d4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d4b4:	f380 8811 	msr	BASEPRI, r0
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f7fe fec6 	bl	800c250 <vTaskSwitchContext>
 800d4c4:	f04f 0000 	mov.w	r0, #0
 800d4c8:	f380 8811 	msr	BASEPRI, r0
 800d4cc:	bc09      	pop	{r0, r3}
 800d4ce:	6819      	ldr	r1, [r3, #0]
 800d4d0:	6808      	ldr	r0, [r1, #0]
 800d4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d6:	f01e 0f10 	tst.w	lr, #16
 800d4da:	bf08      	it	eq
 800d4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4e0:	f380 8809 	msr	PSP, r0
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop
 800d4ec:	f3af 8000 	nop.w

0800d4f0 <pxCurrentTCBConst>:
 800d4f0:	200010cc 	.word	0x200010cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	607b      	str	r3, [r7, #4]
}
 800d510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d512:	f7fe fde3 	bl	800c0dc <xTaskIncrementTick>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d003      	beq.n	800d524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d51c:	4b06      	ldr	r3, [pc, #24]	; (800d538 <xPortSysTickHandler+0x40>)
 800d51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	2300      	movs	r3, #0
 800d526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	f383 8811 	msr	BASEPRI, r3
}
 800d52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	e000ed04 	.word	0xe000ed04

0800d53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d53c:	b480      	push	{r7}
 800d53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d540:	4b0b      	ldr	r3, [pc, #44]	; (800d570 <vPortSetupTimerInterrupt+0x34>)
 800d542:	2200      	movs	r2, #0
 800d544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d546:	4b0b      	ldr	r3, [pc, #44]	; (800d574 <vPortSetupTimerInterrupt+0x38>)
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d54c:	4b0a      	ldr	r3, [pc, #40]	; (800d578 <vPortSetupTimerInterrupt+0x3c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a0a      	ldr	r2, [pc, #40]	; (800d57c <vPortSetupTimerInterrupt+0x40>)
 800d552:	fba2 2303 	umull	r2, r3, r2, r3
 800d556:	099b      	lsrs	r3, r3, #6
 800d558:	4a09      	ldr	r2, [pc, #36]	; (800d580 <vPortSetupTimerInterrupt+0x44>)
 800d55a:	3b01      	subs	r3, #1
 800d55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d55e:	4b04      	ldr	r3, [pc, #16]	; (800d570 <vPortSetupTimerInterrupt+0x34>)
 800d560:	2207      	movs	r2, #7
 800d562:	601a      	str	r2, [r3, #0]
}
 800d564:	bf00      	nop
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	e000e010 	.word	0xe000e010
 800d574:	e000e018 	.word	0xe000e018
 800d578:	20000014 	.word	0x20000014
 800d57c:	10624dd3 	.word	0x10624dd3
 800d580:	e000e014 	.word	0xe000e014

0800d584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d594 <vPortEnableVFP+0x10>
 800d588:	6801      	ldr	r1, [r0, #0]
 800d58a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d58e:	6001      	str	r1, [r0, #0]
 800d590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d592:	bf00      	nop
 800d594:	e000ed88 	.word	0xe000ed88

0800d598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d59e:	f3ef 8305 	mrs	r3, IPSR
 800d5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b0f      	cmp	r3, #15
 800d5a8:	d914      	bls.n	800d5d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5aa:	4a17      	ldr	r2, [pc, #92]	; (800d608 <vPortValidateInterruptPriority+0x70>)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5b4:	4b15      	ldr	r3, [pc, #84]	; (800d60c <vPortValidateInterruptPriority+0x74>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	7afa      	ldrb	r2, [r7, #11]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d20a      	bcs.n	800d5d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	607b      	str	r3, [r7, #4]
}
 800d5d0:	bf00      	nop
 800d5d2:	e7fe      	b.n	800d5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5d4:	4b0e      	ldr	r3, [pc, #56]	; (800d610 <vPortValidateInterruptPriority+0x78>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d5dc:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <vPortValidateInterruptPriority+0x7c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d90a      	bls.n	800d5fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	603b      	str	r3, [r7, #0]
}
 800d5f6:	bf00      	nop
 800d5f8:	e7fe      	b.n	800d5f8 <vPortValidateInterruptPriority+0x60>
	}
 800d5fa:	bf00      	nop
 800d5fc:	3714      	adds	r7, #20
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop
 800d608:	e000e3f0 	.word	0xe000e3f0
 800d60c:	200016f8 	.word	0x200016f8
 800d610:	e000ed0c 	.word	0xe000ed0c
 800d614:	200016fc 	.word	0x200016fc

0800d618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08a      	sub	sp, #40	; 0x28
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d620:	2300      	movs	r3, #0
 800d622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d624:	f7fe fc9e 	bl	800bf64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d628:	4b5b      	ldr	r3, [pc, #364]	; (800d798 <pvPortMalloc+0x180>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d630:	f000 f920 	bl	800d874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d634:	4b59      	ldr	r3, [pc, #356]	; (800d79c <pvPortMalloc+0x184>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4013      	ands	r3, r2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f040 8093 	bne.w	800d768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01d      	beq.n	800d684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d648:	2208      	movs	r2, #8
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4413      	add	r3, r2
 800d64e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f003 0307 	and.w	r3, r3, #7
 800d656:	2b00      	cmp	r3, #0
 800d658:	d014      	beq.n	800d684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f023 0307 	bic.w	r3, r3, #7
 800d660:	3308      	adds	r3, #8
 800d662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f003 0307 	and.w	r3, r3, #7
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00a      	beq.n	800d684 <pvPortMalloc+0x6c>
	__asm volatile
 800d66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	617b      	str	r3, [r7, #20]
}
 800d680:	bf00      	nop
 800d682:	e7fe      	b.n	800d682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d06e      	beq.n	800d768 <pvPortMalloc+0x150>
 800d68a:	4b45      	ldr	r3, [pc, #276]	; (800d7a0 <pvPortMalloc+0x188>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	429a      	cmp	r2, r3
 800d692:	d869      	bhi.n	800d768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d694:	4b43      	ldr	r3, [pc, #268]	; (800d7a4 <pvPortMalloc+0x18c>)
 800d696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d698:	4b42      	ldr	r3, [pc, #264]	; (800d7a4 <pvPortMalloc+0x18c>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d69e:	e004      	b.n	800d6aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d903      	bls.n	800d6bc <pvPortMalloc+0xa4>
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1f1      	bne.n	800d6a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6bc:	4b36      	ldr	r3, [pc, #216]	; (800d798 <pvPortMalloc+0x180>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d050      	beq.n	800d768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d6c6:	6a3b      	ldr	r3, [r7, #32]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2208      	movs	r2, #8
 800d6cc:	4413      	add	r3, r2
 800d6ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	6a3b      	ldr	r3, [r7, #32]
 800d6d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	1ad2      	subs	r2, r2, r3
 800d6e0:	2308      	movs	r3, #8
 800d6e2:	005b      	lsls	r3, r3, #1
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d91f      	bls.n	800d728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	f003 0307 	and.w	r3, r3, #7
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <pvPortMalloc+0xf8>
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	613b      	str	r3, [r7, #16]
}
 800d70c:	bf00      	nop
 800d70e:	e7fe      	b.n	800d70e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	1ad2      	subs	r2, r2, r3
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d722:	69b8      	ldr	r0, [r7, #24]
 800d724:	f000 f908 	bl	800d938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d728:	4b1d      	ldr	r3, [pc, #116]	; (800d7a0 <pvPortMalloc+0x188>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	4a1b      	ldr	r2, [pc, #108]	; (800d7a0 <pvPortMalloc+0x188>)
 800d734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d736:	4b1a      	ldr	r3, [pc, #104]	; (800d7a0 <pvPortMalloc+0x188>)
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	4b1b      	ldr	r3, [pc, #108]	; (800d7a8 <pvPortMalloc+0x190>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d203      	bcs.n	800d74a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d742:	4b17      	ldr	r3, [pc, #92]	; (800d7a0 <pvPortMalloc+0x188>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a18      	ldr	r2, [pc, #96]	; (800d7a8 <pvPortMalloc+0x190>)
 800d748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	4b13      	ldr	r3, [pc, #76]	; (800d79c <pvPortMalloc+0x184>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	431a      	orrs	r2, r3
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	2200      	movs	r2, #0
 800d75c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d75e:	4b13      	ldr	r3, [pc, #76]	; (800d7ac <pvPortMalloc+0x194>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	3301      	adds	r3, #1
 800d764:	4a11      	ldr	r2, [pc, #68]	; (800d7ac <pvPortMalloc+0x194>)
 800d766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d768:	f7fe fc0a 	bl	800bf80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	f003 0307 	and.w	r3, r3, #7
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00a      	beq.n	800d78c <pvPortMalloc+0x174>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	60fb      	str	r3, [r7, #12]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <pvPortMalloc+0x172>
	return pvReturn;
 800d78c:	69fb      	ldr	r3, [r7, #28]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3728      	adds	r7, #40	; 0x28
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	20002a90 	.word	0x20002a90
 800d79c:	20002aa4 	.word	0x20002aa4
 800d7a0:	20002a94 	.word	0x20002a94
 800d7a4:	20002a88 	.word	0x20002a88
 800d7a8:	20002a98 	.word	0x20002a98
 800d7ac:	20002a9c 	.word	0x20002a9c

0800d7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d04d      	beq.n	800d85e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d7c2:	2308      	movs	r3, #8
 800d7c4:	425b      	negs	r3, r3
 800d7c6:	697a      	ldr	r2, [r7, #20]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	685a      	ldr	r2, [r3, #4]
 800d7d4:	4b24      	ldr	r3, [pc, #144]	; (800d868 <vPortFree+0xb8>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4013      	ands	r3, r2
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <vPortFree+0x44>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	60fb      	str	r3, [r7, #12]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00a      	beq.n	800d812 <vPortFree+0x62>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	60bb      	str	r3, [r7, #8]
}
 800d80e:	bf00      	nop
 800d810:	e7fe      	b.n	800d810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	4b14      	ldr	r3, [pc, #80]	; (800d868 <vPortFree+0xb8>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4013      	ands	r3, r2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d01e      	beq.n	800d85e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d11a      	bne.n	800d85e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	4b0e      	ldr	r3, [pc, #56]	; (800d868 <vPortFree+0xb8>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	43db      	mvns	r3, r3
 800d832:	401a      	ands	r2, r3
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d838:	f7fe fb94 	bl	800bf64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <vPortFree+0xbc>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4413      	add	r3, r2
 800d846:	4a09      	ldr	r2, [pc, #36]	; (800d86c <vPortFree+0xbc>)
 800d848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d84a:	6938      	ldr	r0, [r7, #16]
 800d84c:	f000 f874 	bl	800d938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d850:	4b07      	ldr	r3, [pc, #28]	; (800d870 <vPortFree+0xc0>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	3301      	adds	r3, #1
 800d856:	4a06      	ldr	r2, [pc, #24]	; (800d870 <vPortFree+0xc0>)
 800d858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d85a:	f7fe fb91 	bl	800bf80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d85e:	bf00      	nop
 800d860:	3718      	adds	r7, #24
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	20002aa4 	.word	0x20002aa4
 800d86c:	20002a94 	.word	0x20002a94
 800d870:	20002aa0 	.word	0x20002aa0

0800d874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d87a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d87e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d880:	4b27      	ldr	r3, [pc, #156]	; (800d920 <prvHeapInit+0xac>)
 800d882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00c      	beq.n	800d8a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3307      	adds	r3, #7
 800d892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f023 0307 	bic.w	r3, r3, #7
 800d89a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	4a1f      	ldr	r2, [pc, #124]	; (800d920 <prvHeapInit+0xac>)
 800d8a4:	4413      	add	r3, r2
 800d8a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8ac:	4a1d      	ldr	r2, [pc, #116]	; (800d924 <prvHeapInit+0xb0>)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8b2:	4b1c      	ldr	r3, [pc, #112]	; (800d924 <prvHeapInit+0xb0>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	4413      	add	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8c0:	2208      	movs	r2, #8
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	1a9b      	subs	r3, r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f023 0307 	bic.w	r3, r3, #7
 800d8ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4a15      	ldr	r2, [pc, #84]	; (800d928 <prvHeapInit+0xb4>)
 800d8d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d8d6:	4b14      	ldr	r3, [pc, #80]	; (800d928 <prvHeapInit+0xb4>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d8de:	4b12      	ldr	r3, [pc, #72]	; (800d928 <prvHeapInit+0xb4>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	1ad2      	subs	r2, r2, r3
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d8f4:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <prvHeapInit+0xb4>)
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4a0a      	ldr	r2, [pc, #40]	; (800d92c <prvHeapInit+0xb8>)
 800d902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	4a09      	ldr	r2, [pc, #36]	; (800d930 <prvHeapInit+0xbc>)
 800d90a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d90c:	4b09      	ldr	r3, [pc, #36]	; (800d934 <prvHeapInit+0xc0>)
 800d90e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d912:	601a      	str	r2, [r3, #0]
}
 800d914:	bf00      	nop
 800d916:	3714      	adds	r7, #20
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr
 800d920:	20001700 	.word	0x20001700
 800d924:	20002a88 	.word	0x20002a88
 800d928:	20002a90 	.word	0x20002a90
 800d92c:	20002a98 	.word	0x20002a98
 800d930:	20002a94 	.word	0x20002a94
 800d934:	20002aa4 	.word	0x20002aa4

0800d938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d940:	4b28      	ldr	r3, [pc, #160]	; (800d9e4 <prvInsertBlockIntoFreeList+0xac>)
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	e002      	b.n	800d94c <prvInsertBlockIntoFreeList+0x14>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	429a      	cmp	r2, r3
 800d954:	d8f7      	bhi.n	800d946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	4413      	add	r3, r2
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	429a      	cmp	r2, r3
 800d966:	d108      	bne.n	800d97a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	441a      	add	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	441a      	add	r2, r3
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d118      	bne.n	800d9c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	4b15      	ldr	r3, [pc, #84]	; (800d9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	429a      	cmp	r2, r3
 800d998:	d00d      	beq.n	800d9b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	441a      	add	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	e008      	b.n	800d9c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9b6:	4b0c      	ldr	r3, [pc, #48]	; (800d9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	e003      	b.n	800d9c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d002      	beq.n	800d9d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9d6:	bf00      	nop
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	20002a88 	.word	0x20002a88
 800d9e8:	20002a90 	.word	0x20002a90

0800d9ec <atof>:
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	f000 be13 	b.w	800e618 <strtod>

0800d9f2 <atoi>:
 800d9f2:	220a      	movs	r2, #10
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	f000 be9d 	b.w	800e734 <strtol>

0800d9fa <sulp>:
 800d9fa:	b570      	push	{r4, r5, r6, lr}
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
 800da00:	ec45 4b10 	vmov	d0, r4, r5
 800da04:	4616      	mov	r6, r2
 800da06:	f002 f8f7 	bl	800fbf8 <__ulp>
 800da0a:	ec51 0b10 	vmov	r0, r1, d0
 800da0e:	b17e      	cbz	r6, 800da30 <sulp+0x36>
 800da10:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da18:	2b00      	cmp	r3, #0
 800da1a:	dd09      	ble.n	800da30 <sulp+0x36>
 800da1c:	051b      	lsls	r3, r3, #20
 800da1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800da22:	2400      	movs	r4, #0
 800da24:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800da28:	4622      	mov	r2, r4
 800da2a:	462b      	mov	r3, r5
 800da2c:	f7f2 fde4 	bl	80005f8 <__aeabi_dmul>
 800da30:	bd70      	pop	{r4, r5, r6, pc}
 800da32:	0000      	movs	r0, r0
 800da34:	0000      	movs	r0, r0
	...

0800da38 <_strtod_l>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	ed2d 8b02 	vpush	{d8}
 800da40:	b09b      	sub	sp, #108	; 0x6c
 800da42:	4604      	mov	r4, r0
 800da44:	9213      	str	r2, [sp, #76]	; 0x4c
 800da46:	2200      	movs	r2, #0
 800da48:	9216      	str	r2, [sp, #88]	; 0x58
 800da4a:	460d      	mov	r5, r1
 800da4c:	f04f 0800 	mov.w	r8, #0
 800da50:	f04f 0900 	mov.w	r9, #0
 800da54:	460a      	mov	r2, r1
 800da56:	9215      	str	r2, [sp, #84]	; 0x54
 800da58:	7811      	ldrb	r1, [r2, #0]
 800da5a:	292b      	cmp	r1, #43	; 0x2b
 800da5c:	d04c      	beq.n	800daf8 <_strtod_l+0xc0>
 800da5e:	d83a      	bhi.n	800dad6 <_strtod_l+0x9e>
 800da60:	290d      	cmp	r1, #13
 800da62:	d834      	bhi.n	800dace <_strtod_l+0x96>
 800da64:	2908      	cmp	r1, #8
 800da66:	d834      	bhi.n	800dad2 <_strtod_l+0x9a>
 800da68:	2900      	cmp	r1, #0
 800da6a:	d03d      	beq.n	800dae8 <_strtod_l+0xb0>
 800da6c:	2200      	movs	r2, #0
 800da6e:	920a      	str	r2, [sp, #40]	; 0x28
 800da70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800da72:	7832      	ldrb	r2, [r6, #0]
 800da74:	2a30      	cmp	r2, #48	; 0x30
 800da76:	f040 80b4 	bne.w	800dbe2 <_strtod_l+0x1aa>
 800da7a:	7872      	ldrb	r2, [r6, #1]
 800da7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800da80:	2a58      	cmp	r2, #88	; 0x58
 800da82:	d170      	bne.n	800db66 <_strtod_l+0x12e>
 800da84:	9302      	str	r3, [sp, #8]
 800da86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	ab16      	add	r3, sp, #88	; 0x58
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	4a8e      	ldr	r2, [pc, #568]	; (800dcc8 <_strtod_l+0x290>)
 800da90:	ab17      	add	r3, sp, #92	; 0x5c
 800da92:	a915      	add	r1, sp, #84	; 0x54
 800da94:	4620      	mov	r0, r4
 800da96:	f001 f98d 	bl	800edb4 <__gethex>
 800da9a:	f010 070f 	ands.w	r7, r0, #15
 800da9e:	4605      	mov	r5, r0
 800daa0:	d005      	beq.n	800daae <_strtod_l+0x76>
 800daa2:	2f06      	cmp	r7, #6
 800daa4:	d12a      	bne.n	800dafc <_strtod_l+0xc4>
 800daa6:	3601      	adds	r6, #1
 800daa8:	2300      	movs	r3, #0
 800daaa:	9615      	str	r6, [sp, #84]	; 0x54
 800daac:	930a      	str	r3, [sp, #40]	; 0x28
 800daae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f040 857f 	bne.w	800e5b4 <_strtod_l+0xb7c>
 800dab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dab8:	b1db      	cbz	r3, 800daf2 <_strtod_l+0xba>
 800daba:	4642      	mov	r2, r8
 800dabc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dac0:	ec43 2b10 	vmov	d0, r2, r3
 800dac4:	b01b      	add	sp, #108	; 0x6c
 800dac6:	ecbd 8b02 	vpop	{d8}
 800daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	2920      	cmp	r1, #32
 800dad0:	d1cc      	bne.n	800da6c <_strtod_l+0x34>
 800dad2:	3201      	adds	r2, #1
 800dad4:	e7bf      	b.n	800da56 <_strtod_l+0x1e>
 800dad6:	292d      	cmp	r1, #45	; 0x2d
 800dad8:	d1c8      	bne.n	800da6c <_strtod_l+0x34>
 800dada:	2101      	movs	r1, #1
 800dadc:	910a      	str	r1, [sp, #40]	; 0x28
 800dade:	1c51      	adds	r1, r2, #1
 800dae0:	9115      	str	r1, [sp, #84]	; 0x54
 800dae2:	7852      	ldrb	r2, [r2, #1]
 800dae4:	2a00      	cmp	r2, #0
 800dae6:	d1c3      	bne.n	800da70 <_strtod_l+0x38>
 800dae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800daea:	9515      	str	r5, [sp, #84]	; 0x54
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 855f 	bne.w	800e5b0 <_strtod_l+0xb78>
 800daf2:	4642      	mov	r2, r8
 800daf4:	464b      	mov	r3, r9
 800daf6:	e7e3      	b.n	800dac0 <_strtod_l+0x88>
 800daf8:	2100      	movs	r1, #0
 800dafa:	e7ef      	b.n	800dadc <_strtod_l+0xa4>
 800dafc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dafe:	b13a      	cbz	r2, 800db10 <_strtod_l+0xd8>
 800db00:	2135      	movs	r1, #53	; 0x35
 800db02:	a818      	add	r0, sp, #96	; 0x60
 800db04:	f002 f975 	bl	800fdf2 <__copybits>
 800db08:	9916      	ldr	r1, [sp, #88]	; 0x58
 800db0a:	4620      	mov	r0, r4
 800db0c:	f001 fd48 	bl	800f5a0 <_Bfree>
 800db10:	3f01      	subs	r7, #1
 800db12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db14:	2f04      	cmp	r7, #4
 800db16:	d806      	bhi.n	800db26 <_strtod_l+0xee>
 800db18:	e8df f007 	tbb	[pc, r7]
 800db1c:	201d0314 	.word	0x201d0314
 800db20:	14          	.byte	0x14
 800db21:	00          	.byte	0x00
 800db22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800db26:	05e9      	lsls	r1, r5, #23
 800db28:	bf48      	it	mi
 800db2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800db2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db32:	0d1b      	lsrs	r3, r3, #20
 800db34:	051b      	lsls	r3, r3, #20
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1b9      	bne.n	800daae <_strtod_l+0x76>
 800db3a:	f001 f825 	bl	800eb88 <__errno>
 800db3e:	2322      	movs	r3, #34	; 0x22
 800db40:	6003      	str	r3, [r0, #0]
 800db42:	e7b4      	b.n	800daae <_strtod_l+0x76>
 800db44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800db48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800db50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800db54:	e7e7      	b.n	800db26 <_strtod_l+0xee>
 800db56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dcd0 <_strtod_l+0x298>
 800db5a:	e7e4      	b.n	800db26 <_strtod_l+0xee>
 800db5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800db60:	f04f 38ff 	mov.w	r8, #4294967295
 800db64:	e7df      	b.n	800db26 <_strtod_l+0xee>
 800db66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db68:	1c5a      	adds	r2, r3, #1
 800db6a:	9215      	str	r2, [sp, #84]	; 0x54
 800db6c:	785b      	ldrb	r3, [r3, #1]
 800db6e:	2b30      	cmp	r3, #48	; 0x30
 800db70:	d0f9      	beq.n	800db66 <_strtod_l+0x12e>
 800db72:	2b00      	cmp	r3, #0
 800db74:	d09b      	beq.n	800daae <_strtod_l+0x76>
 800db76:	2301      	movs	r3, #1
 800db78:	f04f 0a00 	mov.w	sl, #0
 800db7c:	9304      	str	r3, [sp, #16]
 800db7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db80:	930b      	str	r3, [sp, #44]	; 0x2c
 800db82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800db86:	46d3      	mov	fp, sl
 800db88:	220a      	movs	r2, #10
 800db8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800db8c:	7806      	ldrb	r6, [r0, #0]
 800db8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800db92:	b2d9      	uxtb	r1, r3
 800db94:	2909      	cmp	r1, #9
 800db96:	d926      	bls.n	800dbe6 <_strtod_l+0x1ae>
 800db98:	494c      	ldr	r1, [pc, #304]	; (800dccc <_strtod_l+0x294>)
 800db9a:	2201      	movs	r2, #1
 800db9c:	f000 ff2c 	bl	800e9f8 <strncmp>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d030      	beq.n	800dc06 <_strtod_l+0x1ce>
 800dba4:	2000      	movs	r0, #0
 800dba6:	4632      	mov	r2, r6
 800dba8:	9005      	str	r0, [sp, #20]
 800dbaa:	465e      	mov	r6, fp
 800dbac:	4603      	mov	r3, r0
 800dbae:	2a65      	cmp	r2, #101	; 0x65
 800dbb0:	d001      	beq.n	800dbb6 <_strtod_l+0x17e>
 800dbb2:	2a45      	cmp	r2, #69	; 0x45
 800dbb4:	d113      	bne.n	800dbde <_strtod_l+0x1a6>
 800dbb6:	b91e      	cbnz	r6, 800dbc0 <_strtod_l+0x188>
 800dbb8:	9a04      	ldr	r2, [sp, #16]
 800dbba:	4302      	orrs	r2, r0
 800dbbc:	d094      	beq.n	800dae8 <_strtod_l+0xb0>
 800dbbe:	2600      	movs	r6, #0
 800dbc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800dbc2:	1c6a      	adds	r2, r5, #1
 800dbc4:	9215      	str	r2, [sp, #84]	; 0x54
 800dbc6:	786a      	ldrb	r2, [r5, #1]
 800dbc8:	2a2b      	cmp	r2, #43	; 0x2b
 800dbca:	d074      	beq.n	800dcb6 <_strtod_l+0x27e>
 800dbcc:	2a2d      	cmp	r2, #45	; 0x2d
 800dbce:	d078      	beq.n	800dcc2 <_strtod_l+0x28a>
 800dbd0:	f04f 0c00 	mov.w	ip, #0
 800dbd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dbd8:	2909      	cmp	r1, #9
 800dbda:	d97f      	bls.n	800dcdc <_strtod_l+0x2a4>
 800dbdc:	9515      	str	r5, [sp, #84]	; 0x54
 800dbde:	2700      	movs	r7, #0
 800dbe0:	e09e      	b.n	800dd20 <_strtod_l+0x2e8>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e7c8      	b.n	800db78 <_strtod_l+0x140>
 800dbe6:	f1bb 0f08 	cmp.w	fp, #8
 800dbea:	bfd8      	it	le
 800dbec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dbee:	f100 0001 	add.w	r0, r0, #1
 800dbf2:	bfda      	itte	le
 800dbf4:	fb02 3301 	mlale	r3, r2, r1, r3
 800dbf8:	9309      	strle	r3, [sp, #36]	; 0x24
 800dbfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800dbfe:	f10b 0b01 	add.w	fp, fp, #1
 800dc02:	9015      	str	r0, [sp, #84]	; 0x54
 800dc04:	e7c1      	b.n	800db8a <_strtod_l+0x152>
 800dc06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	9215      	str	r2, [sp, #84]	; 0x54
 800dc0c:	785a      	ldrb	r2, [r3, #1]
 800dc0e:	f1bb 0f00 	cmp.w	fp, #0
 800dc12:	d037      	beq.n	800dc84 <_strtod_l+0x24c>
 800dc14:	9005      	str	r0, [sp, #20]
 800dc16:	465e      	mov	r6, fp
 800dc18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dc1c:	2b09      	cmp	r3, #9
 800dc1e:	d912      	bls.n	800dc46 <_strtod_l+0x20e>
 800dc20:	2301      	movs	r3, #1
 800dc22:	e7c4      	b.n	800dbae <_strtod_l+0x176>
 800dc24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc26:	1c5a      	adds	r2, r3, #1
 800dc28:	9215      	str	r2, [sp, #84]	; 0x54
 800dc2a:	785a      	ldrb	r2, [r3, #1]
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	2a30      	cmp	r2, #48	; 0x30
 800dc30:	d0f8      	beq.n	800dc24 <_strtod_l+0x1ec>
 800dc32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dc36:	2b08      	cmp	r3, #8
 800dc38:	f200 84c1 	bhi.w	800e5be <_strtod_l+0xb86>
 800dc3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc3e:	9005      	str	r0, [sp, #20]
 800dc40:	2000      	movs	r0, #0
 800dc42:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc44:	4606      	mov	r6, r0
 800dc46:	3a30      	subs	r2, #48	; 0x30
 800dc48:	f100 0301 	add.w	r3, r0, #1
 800dc4c:	d014      	beq.n	800dc78 <_strtod_l+0x240>
 800dc4e:	9905      	ldr	r1, [sp, #20]
 800dc50:	4419      	add	r1, r3
 800dc52:	9105      	str	r1, [sp, #20]
 800dc54:	4633      	mov	r3, r6
 800dc56:	eb00 0c06 	add.w	ip, r0, r6
 800dc5a:	210a      	movs	r1, #10
 800dc5c:	4563      	cmp	r3, ip
 800dc5e:	d113      	bne.n	800dc88 <_strtod_l+0x250>
 800dc60:	1833      	adds	r3, r6, r0
 800dc62:	2b08      	cmp	r3, #8
 800dc64:	f106 0601 	add.w	r6, r6, #1
 800dc68:	4406      	add	r6, r0
 800dc6a:	dc1a      	bgt.n	800dca2 <_strtod_l+0x26a>
 800dc6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc6e:	230a      	movs	r3, #10
 800dc70:	fb03 2301 	mla	r3, r3, r1, r2
 800dc74:	9309      	str	r3, [sp, #36]	; 0x24
 800dc76:	2300      	movs	r3, #0
 800dc78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dc7a:	1c51      	adds	r1, r2, #1
 800dc7c:	9115      	str	r1, [sp, #84]	; 0x54
 800dc7e:	7852      	ldrb	r2, [r2, #1]
 800dc80:	4618      	mov	r0, r3
 800dc82:	e7c9      	b.n	800dc18 <_strtod_l+0x1e0>
 800dc84:	4658      	mov	r0, fp
 800dc86:	e7d2      	b.n	800dc2e <_strtod_l+0x1f6>
 800dc88:	2b08      	cmp	r3, #8
 800dc8a:	f103 0301 	add.w	r3, r3, #1
 800dc8e:	dc03      	bgt.n	800dc98 <_strtod_l+0x260>
 800dc90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dc92:	434f      	muls	r7, r1
 800dc94:	9709      	str	r7, [sp, #36]	; 0x24
 800dc96:	e7e1      	b.n	800dc5c <_strtod_l+0x224>
 800dc98:	2b10      	cmp	r3, #16
 800dc9a:	bfd8      	it	le
 800dc9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800dca0:	e7dc      	b.n	800dc5c <_strtod_l+0x224>
 800dca2:	2e10      	cmp	r6, #16
 800dca4:	bfdc      	itt	le
 800dca6:	230a      	movle	r3, #10
 800dca8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800dcac:	e7e3      	b.n	800dc76 <_strtod_l+0x23e>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	9305      	str	r3, [sp, #20]
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e780      	b.n	800dbb8 <_strtod_l+0x180>
 800dcb6:	f04f 0c00 	mov.w	ip, #0
 800dcba:	1caa      	adds	r2, r5, #2
 800dcbc:	9215      	str	r2, [sp, #84]	; 0x54
 800dcbe:	78aa      	ldrb	r2, [r5, #2]
 800dcc0:	e788      	b.n	800dbd4 <_strtod_l+0x19c>
 800dcc2:	f04f 0c01 	mov.w	ip, #1
 800dcc6:	e7f8      	b.n	800dcba <_strtod_l+0x282>
 800dcc8:	08011064 	.word	0x08011064
 800dccc:	08011054 	.word	0x08011054
 800dcd0:	7ff00000 	.word	0x7ff00000
 800dcd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dcd6:	1c51      	adds	r1, r2, #1
 800dcd8:	9115      	str	r1, [sp, #84]	; 0x54
 800dcda:	7852      	ldrb	r2, [r2, #1]
 800dcdc:	2a30      	cmp	r2, #48	; 0x30
 800dcde:	d0f9      	beq.n	800dcd4 <_strtod_l+0x29c>
 800dce0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dce4:	2908      	cmp	r1, #8
 800dce6:	f63f af7a 	bhi.w	800dbde <_strtod_l+0x1a6>
 800dcea:	3a30      	subs	r2, #48	; 0x30
 800dcec:	9208      	str	r2, [sp, #32]
 800dcee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dcf0:	920c      	str	r2, [sp, #48]	; 0x30
 800dcf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dcf4:	1c57      	adds	r7, r2, #1
 800dcf6:	9715      	str	r7, [sp, #84]	; 0x54
 800dcf8:	7852      	ldrb	r2, [r2, #1]
 800dcfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dcfe:	f1be 0f09 	cmp.w	lr, #9
 800dd02:	d938      	bls.n	800dd76 <_strtod_l+0x33e>
 800dd04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd06:	1a7f      	subs	r7, r7, r1
 800dd08:	2f08      	cmp	r7, #8
 800dd0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dd0e:	dc03      	bgt.n	800dd18 <_strtod_l+0x2e0>
 800dd10:	9908      	ldr	r1, [sp, #32]
 800dd12:	428f      	cmp	r7, r1
 800dd14:	bfa8      	it	ge
 800dd16:	460f      	movge	r7, r1
 800dd18:	f1bc 0f00 	cmp.w	ip, #0
 800dd1c:	d000      	beq.n	800dd20 <_strtod_l+0x2e8>
 800dd1e:	427f      	negs	r7, r7
 800dd20:	2e00      	cmp	r6, #0
 800dd22:	d14f      	bne.n	800ddc4 <_strtod_l+0x38c>
 800dd24:	9904      	ldr	r1, [sp, #16]
 800dd26:	4301      	orrs	r1, r0
 800dd28:	f47f aec1 	bne.w	800daae <_strtod_l+0x76>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f47f aedb 	bne.w	800dae8 <_strtod_l+0xb0>
 800dd32:	2a69      	cmp	r2, #105	; 0x69
 800dd34:	d029      	beq.n	800dd8a <_strtod_l+0x352>
 800dd36:	dc26      	bgt.n	800dd86 <_strtod_l+0x34e>
 800dd38:	2a49      	cmp	r2, #73	; 0x49
 800dd3a:	d026      	beq.n	800dd8a <_strtod_l+0x352>
 800dd3c:	2a4e      	cmp	r2, #78	; 0x4e
 800dd3e:	f47f aed3 	bne.w	800dae8 <_strtod_l+0xb0>
 800dd42:	499b      	ldr	r1, [pc, #620]	; (800dfb0 <_strtod_l+0x578>)
 800dd44:	a815      	add	r0, sp, #84	; 0x54
 800dd46:	f001 fa75 	bl	800f234 <__match>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	f43f aecc 	beq.w	800dae8 <_strtod_l+0xb0>
 800dd50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b28      	cmp	r3, #40	; 0x28
 800dd56:	d12f      	bne.n	800ddb8 <_strtod_l+0x380>
 800dd58:	4996      	ldr	r1, [pc, #600]	; (800dfb4 <_strtod_l+0x57c>)
 800dd5a:	aa18      	add	r2, sp, #96	; 0x60
 800dd5c:	a815      	add	r0, sp, #84	; 0x54
 800dd5e:	f001 fa7d 	bl	800f25c <__hexnan>
 800dd62:	2805      	cmp	r0, #5
 800dd64:	d128      	bne.n	800ddb8 <_strtod_l+0x380>
 800dd66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dd70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dd74:	e69b      	b.n	800daae <_strtod_l+0x76>
 800dd76:	9f08      	ldr	r7, [sp, #32]
 800dd78:	210a      	movs	r1, #10
 800dd7a:	fb01 2107 	mla	r1, r1, r7, r2
 800dd7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dd82:	9208      	str	r2, [sp, #32]
 800dd84:	e7b5      	b.n	800dcf2 <_strtod_l+0x2ba>
 800dd86:	2a6e      	cmp	r2, #110	; 0x6e
 800dd88:	e7d9      	b.n	800dd3e <_strtod_l+0x306>
 800dd8a:	498b      	ldr	r1, [pc, #556]	; (800dfb8 <_strtod_l+0x580>)
 800dd8c:	a815      	add	r0, sp, #84	; 0x54
 800dd8e:	f001 fa51 	bl	800f234 <__match>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	f43f aea8 	beq.w	800dae8 <_strtod_l+0xb0>
 800dd98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd9a:	4988      	ldr	r1, [pc, #544]	; (800dfbc <_strtod_l+0x584>)
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	a815      	add	r0, sp, #84	; 0x54
 800dda0:	9315      	str	r3, [sp, #84]	; 0x54
 800dda2:	f001 fa47 	bl	800f234 <__match>
 800dda6:	b910      	cbnz	r0, 800ddae <_strtod_l+0x376>
 800dda8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddaa:	3301      	adds	r3, #1
 800ddac:	9315      	str	r3, [sp, #84]	; 0x54
 800ddae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800dfcc <_strtod_l+0x594>
 800ddb2:	f04f 0800 	mov.w	r8, #0
 800ddb6:	e67a      	b.n	800daae <_strtod_l+0x76>
 800ddb8:	4881      	ldr	r0, [pc, #516]	; (800dfc0 <_strtod_l+0x588>)
 800ddba:	f000 ff21 	bl	800ec00 <nan>
 800ddbe:	ec59 8b10 	vmov	r8, r9, d0
 800ddc2:	e674      	b.n	800daae <_strtod_l+0x76>
 800ddc4:	9b05      	ldr	r3, [sp, #20]
 800ddc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddc8:	1afb      	subs	r3, r7, r3
 800ddca:	f1bb 0f00 	cmp.w	fp, #0
 800ddce:	bf08      	it	eq
 800ddd0:	46b3      	moveq	fp, r6
 800ddd2:	2e10      	cmp	r6, #16
 800ddd4:	9308      	str	r3, [sp, #32]
 800ddd6:	4635      	mov	r5, r6
 800ddd8:	bfa8      	it	ge
 800ddda:	2510      	movge	r5, #16
 800dddc:	f7f2 fb92 	bl	8000504 <__aeabi_ui2d>
 800dde0:	2e09      	cmp	r6, #9
 800dde2:	4680      	mov	r8, r0
 800dde4:	4689      	mov	r9, r1
 800dde6:	dd13      	ble.n	800de10 <_strtod_l+0x3d8>
 800dde8:	4b76      	ldr	r3, [pc, #472]	; (800dfc4 <_strtod_l+0x58c>)
 800ddea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ddee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ddf2:	f7f2 fc01 	bl	80005f8 <__aeabi_dmul>
 800ddf6:	4680      	mov	r8, r0
 800ddf8:	4650      	mov	r0, sl
 800ddfa:	4689      	mov	r9, r1
 800ddfc:	f7f2 fb82 	bl	8000504 <__aeabi_ui2d>
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	4640      	mov	r0, r8
 800de06:	4649      	mov	r1, r9
 800de08:	f7f2 fa40 	bl	800028c <__adddf3>
 800de0c:	4680      	mov	r8, r0
 800de0e:	4689      	mov	r9, r1
 800de10:	2e0f      	cmp	r6, #15
 800de12:	dc38      	bgt.n	800de86 <_strtod_l+0x44e>
 800de14:	9b08      	ldr	r3, [sp, #32]
 800de16:	2b00      	cmp	r3, #0
 800de18:	f43f ae49 	beq.w	800daae <_strtod_l+0x76>
 800de1c:	dd24      	ble.n	800de68 <_strtod_l+0x430>
 800de1e:	2b16      	cmp	r3, #22
 800de20:	dc0b      	bgt.n	800de3a <_strtod_l+0x402>
 800de22:	4968      	ldr	r1, [pc, #416]	; (800dfc4 <_strtod_l+0x58c>)
 800de24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de2c:	4642      	mov	r2, r8
 800de2e:	464b      	mov	r3, r9
 800de30:	f7f2 fbe2 	bl	80005f8 <__aeabi_dmul>
 800de34:	4680      	mov	r8, r0
 800de36:	4689      	mov	r9, r1
 800de38:	e639      	b.n	800daae <_strtod_l+0x76>
 800de3a:	9a08      	ldr	r2, [sp, #32]
 800de3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800de40:	4293      	cmp	r3, r2
 800de42:	db20      	blt.n	800de86 <_strtod_l+0x44e>
 800de44:	4c5f      	ldr	r4, [pc, #380]	; (800dfc4 <_strtod_l+0x58c>)
 800de46:	f1c6 060f 	rsb	r6, r6, #15
 800de4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800de4e:	4642      	mov	r2, r8
 800de50:	464b      	mov	r3, r9
 800de52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de56:	f7f2 fbcf 	bl	80005f8 <__aeabi_dmul>
 800de5a:	9b08      	ldr	r3, [sp, #32]
 800de5c:	1b9e      	subs	r6, r3, r6
 800de5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800de62:	e9d4 2300 	ldrd	r2, r3, [r4]
 800de66:	e7e3      	b.n	800de30 <_strtod_l+0x3f8>
 800de68:	9b08      	ldr	r3, [sp, #32]
 800de6a:	3316      	adds	r3, #22
 800de6c:	db0b      	blt.n	800de86 <_strtod_l+0x44e>
 800de6e:	9b05      	ldr	r3, [sp, #20]
 800de70:	1bdf      	subs	r7, r3, r7
 800de72:	4b54      	ldr	r3, [pc, #336]	; (800dfc4 <_strtod_l+0x58c>)
 800de74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800de78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de7c:	4640      	mov	r0, r8
 800de7e:	4649      	mov	r1, r9
 800de80:	f7f2 fce4 	bl	800084c <__aeabi_ddiv>
 800de84:	e7d6      	b.n	800de34 <_strtod_l+0x3fc>
 800de86:	9b08      	ldr	r3, [sp, #32]
 800de88:	1b75      	subs	r5, r6, r5
 800de8a:	441d      	add	r5, r3
 800de8c:	2d00      	cmp	r5, #0
 800de8e:	dd70      	ble.n	800df72 <_strtod_l+0x53a>
 800de90:	f015 030f 	ands.w	r3, r5, #15
 800de94:	d00a      	beq.n	800deac <_strtod_l+0x474>
 800de96:	494b      	ldr	r1, [pc, #300]	; (800dfc4 <_strtod_l+0x58c>)
 800de98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de9c:	4642      	mov	r2, r8
 800de9e:	464b      	mov	r3, r9
 800dea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dea4:	f7f2 fba8 	bl	80005f8 <__aeabi_dmul>
 800dea8:	4680      	mov	r8, r0
 800deaa:	4689      	mov	r9, r1
 800deac:	f035 050f 	bics.w	r5, r5, #15
 800deb0:	d04d      	beq.n	800df4e <_strtod_l+0x516>
 800deb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800deb6:	dd22      	ble.n	800defe <_strtod_l+0x4c6>
 800deb8:	2500      	movs	r5, #0
 800deba:	46ab      	mov	fp, r5
 800debc:	9509      	str	r5, [sp, #36]	; 0x24
 800debe:	9505      	str	r5, [sp, #20]
 800dec0:	2322      	movs	r3, #34	; 0x22
 800dec2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800dfcc <_strtod_l+0x594>
 800dec6:	6023      	str	r3, [r4, #0]
 800dec8:	f04f 0800 	mov.w	r8, #0
 800decc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f43f aded 	beq.w	800daae <_strtod_l+0x76>
 800ded4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ded6:	4620      	mov	r0, r4
 800ded8:	f001 fb62 	bl	800f5a0 <_Bfree>
 800dedc:	9905      	ldr	r1, [sp, #20]
 800dede:	4620      	mov	r0, r4
 800dee0:	f001 fb5e 	bl	800f5a0 <_Bfree>
 800dee4:	4659      	mov	r1, fp
 800dee6:	4620      	mov	r0, r4
 800dee8:	f001 fb5a 	bl	800f5a0 <_Bfree>
 800deec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800deee:	4620      	mov	r0, r4
 800def0:	f001 fb56 	bl	800f5a0 <_Bfree>
 800def4:	4629      	mov	r1, r5
 800def6:	4620      	mov	r0, r4
 800def8:	f001 fb52 	bl	800f5a0 <_Bfree>
 800defc:	e5d7      	b.n	800daae <_strtod_l+0x76>
 800defe:	4b32      	ldr	r3, [pc, #200]	; (800dfc8 <_strtod_l+0x590>)
 800df00:	9304      	str	r3, [sp, #16]
 800df02:	2300      	movs	r3, #0
 800df04:	112d      	asrs	r5, r5, #4
 800df06:	4640      	mov	r0, r8
 800df08:	4649      	mov	r1, r9
 800df0a:	469a      	mov	sl, r3
 800df0c:	2d01      	cmp	r5, #1
 800df0e:	dc21      	bgt.n	800df54 <_strtod_l+0x51c>
 800df10:	b10b      	cbz	r3, 800df16 <_strtod_l+0x4de>
 800df12:	4680      	mov	r8, r0
 800df14:	4689      	mov	r9, r1
 800df16:	492c      	ldr	r1, [pc, #176]	; (800dfc8 <_strtod_l+0x590>)
 800df18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800df1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800df20:	4642      	mov	r2, r8
 800df22:	464b      	mov	r3, r9
 800df24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df28:	f7f2 fb66 	bl	80005f8 <__aeabi_dmul>
 800df2c:	4b27      	ldr	r3, [pc, #156]	; (800dfcc <_strtod_l+0x594>)
 800df2e:	460a      	mov	r2, r1
 800df30:	400b      	ands	r3, r1
 800df32:	4927      	ldr	r1, [pc, #156]	; (800dfd0 <_strtod_l+0x598>)
 800df34:	428b      	cmp	r3, r1
 800df36:	4680      	mov	r8, r0
 800df38:	d8be      	bhi.n	800deb8 <_strtod_l+0x480>
 800df3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800df3e:	428b      	cmp	r3, r1
 800df40:	bf86      	itte	hi
 800df42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800dfd4 <_strtod_l+0x59c>
 800df46:	f04f 38ff 	movhi.w	r8, #4294967295
 800df4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800df4e:	2300      	movs	r3, #0
 800df50:	9304      	str	r3, [sp, #16]
 800df52:	e07b      	b.n	800e04c <_strtod_l+0x614>
 800df54:	07ea      	lsls	r2, r5, #31
 800df56:	d505      	bpl.n	800df64 <_strtod_l+0x52c>
 800df58:	9b04      	ldr	r3, [sp, #16]
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	f7f2 fb4b 	bl	80005f8 <__aeabi_dmul>
 800df62:	2301      	movs	r3, #1
 800df64:	9a04      	ldr	r2, [sp, #16]
 800df66:	3208      	adds	r2, #8
 800df68:	f10a 0a01 	add.w	sl, sl, #1
 800df6c:	106d      	asrs	r5, r5, #1
 800df6e:	9204      	str	r2, [sp, #16]
 800df70:	e7cc      	b.n	800df0c <_strtod_l+0x4d4>
 800df72:	d0ec      	beq.n	800df4e <_strtod_l+0x516>
 800df74:	426d      	negs	r5, r5
 800df76:	f015 020f 	ands.w	r2, r5, #15
 800df7a:	d00a      	beq.n	800df92 <_strtod_l+0x55a>
 800df7c:	4b11      	ldr	r3, [pc, #68]	; (800dfc4 <_strtod_l+0x58c>)
 800df7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df82:	4640      	mov	r0, r8
 800df84:	4649      	mov	r1, r9
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	f7f2 fc5f 	bl	800084c <__aeabi_ddiv>
 800df8e:	4680      	mov	r8, r0
 800df90:	4689      	mov	r9, r1
 800df92:	112d      	asrs	r5, r5, #4
 800df94:	d0db      	beq.n	800df4e <_strtod_l+0x516>
 800df96:	2d1f      	cmp	r5, #31
 800df98:	dd1e      	ble.n	800dfd8 <_strtod_l+0x5a0>
 800df9a:	2500      	movs	r5, #0
 800df9c:	46ab      	mov	fp, r5
 800df9e:	9509      	str	r5, [sp, #36]	; 0x24
 800dfa0:	9505      	str	r5, [sp, #20]
 800dfa2:	2322      	movs	r3, #34	; 0x22
 800dfa4:	f04f 0800 	mov.w	r8, #0
 800dfa8:	f04f 0900 	mov.w	r9, #0
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	e78d      	b.n	800decc <_strtod_l+0x494>
 800dfb0:	0801105f 	.word	0x0801105f
 800dfb4:	08011078 	.word	0x08011078
 800dfb8:	08011056 	.word	0x08011056
 800dfbc:	08011059 	.word	0x08011059
 800dfc0:	0801126d 	.word	0x0801126d
 800dfc4:	08011360 	.word	0x08011360
 800dfc8:	08011338 	.word	0x08011338
 800dfcc:	7ff00000 	.word	0x7ff00000
 800dfd0:	7ca00000 	.word	0x7ca00000
 800dfd4:	7fefffff 	.word	0x7fefffff
 800dfd8:	f015 0310 	ands.w	r3, r5, #16
 800dfdc:	bf18      	it	ne
 800dfde:	236a      	movne	r3, #106	; 0x6a
 800dfe0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e384 <_strtod_l+0x94c>
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	4640      	mov	r0, r8
 800dfe8:	4649      	mov	r1, r9
 800dfea:	2300      	movs	r3, #0
 800dfec:	07ea      	lsls	r2, r5, #31
 800dfee:	d504      	bpl.n	800dffa <_strtod_l+0x5c2>
 800dff0:	e9da 2300 	ldrd	r2, r3, [sl]
 800dff4:	f7f2 fb00 	bl	80005f8 <__aeabi_dmul>
 800dff8:	2301      	movs	r3, #1
 800dffa:	106d      	asrs	r5, r5, #1
 800dffc:	f10a 0a08 	add.w	sl, sl, #8
 800e000:	d1f4      	bne.n	800dfec <_strtod_l+0x5b4>
 800e002:	b10b      	cbz	r3, 800e008 <_strtod_l+0x5d0>
 800e004:	4680      	mov	r8, r0
 800e006:	4689      	mov	r9, r1
 800e008:	9b04      	ldr	r3, [sp, #16]
 800e00a:	b1bb      	cbz	r3, 800e03c <_strtod_l+0x604>
 800e00c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e010:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e014:	2b00      	cmp	r3, #0
 800e016:	4649      	mov	r1, r9
 800e018:	dd10      	ble.n	800e03c <_strtod_l+0x604>
 800e01a:	2b1f      	cmp	r3, #31
 800e01c:	f340 811e 	ble.w	800e25c <_strtod_l+0x824>
 800e020:	2b34      	cmp	r3, #52	; 0x34
 800e022:	bfde      	ittt	le
 800e024:	f04f 33ff 	movle.w	r3, #4294967295
 800e028:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e02c:	4093      	lslle	r3, r2
 800e02e:	f04f 0800 	mov.w	r8, #0
 800e032:	bfcc      	ite	gt
 800e034:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e038:	ea03 0901 	andle.w	r9, r3, r1
 800e03c:	2200      	movs	r2, #0
 800e03e:	2300      	movs	r3, #0
 800e040:	4640      	mov	r0, r8
 800e042:	4649      	mov	r1, r9
 800e044:	f7f2 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d1a6      	bne.n	800df9a <_strtod_l+0x562>
 800e04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e052:	4633      	mov	r3, r6
 800e054:	465a      	mov	r2, fp
 800e056:	4620      	mov	r0, r4
 800e058:	f001 fb0a 	bl	800f670 <__s2b>
 800e05c:	9009      	str	r0, [sp, #36]	; 0x24
 800e05e:	2800      	cmp	r0, #0
 800e060:	f43f af2a 	beq.w	800deb8 <_strtod_l+0x480>
 800e064:	9a08      	ldr	r2, [sp, #32]
 800e066:	9b05      	ldr	r3, [sp, #20]
 800e068:	2a00      	cmp	r2, #0
 800e06a:	eba3 0307 	sub.w	r3, r3, r7
 800e06e:	bfa8      	it	ge
 800e070:	2300      	movge	r3, #0
 800e072:	930c      	str	r3, [sp, #48]	; 0x30
 800e074:	2500      	movs	r5, #0
 800e076:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e07a:	9312      	str	r3, [sp, #72]	; 0x48
 800e07c:	46ab      	mov	fp, r5
 800e07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e080:	4620      	mov	r0, r4
 800e082:	6859      	ldr	r1, [r3, #4]
 800e084:	f001 fa4c 	bl	800f520 <_Balloc>
 800e088:	9005      	str	r0, [sp, #20]
 800e08a:	2800      	cmp	r0, #0
 800e08c:	f43f af18 	beq.w	800dec0 <_strtod_l+0x488>
 800e090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e092:	691a      	ldr	r2, [r3, #16]
 800e094:	3202      	adds	r2, #2
 800e096:	f103 010c 	add.w	r1, r3, #12
 800e09a:	0092      	lsls	r2, r2, #2
 800e09c:	300c      	adds	r0, #12
 800e09e:	f000 fda0 	bl	800ebe2 <memcpy>
 800e0a2:	ec49 8b10 	vmov	d0, r8, r9
 800e0a6:	aa18      	add	r2, sp, #96	; 0x60
 800e0a8:	a917      	add	r1, sp, #92	; 0x5c
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f001 fe14 	bl	800fcd8 <__d2b>
 800e0b0:	ec49 8b18 	vmov	d8, r8, r9
 800e0b4:	9016      	str	r0, [sp, #88]	; 0x58
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f43f af02 	beq.w	800dec0 <_strtod_l+0x488>
 800e0bc:	2101      	movs	r1, #1
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f001 fb6e 	bl	800f7a0 <__i2b>
 800e0c4:	4683      	mov	fp, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	f43f aefa 	beq.w	800dec0 <_strtod_l+0x488>
 800e0cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e0ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e0d0:	2e00      	cmp	r6, #0
 800e0d2:	bfab      	itete	ge
 800e0d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e0d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e0d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e0da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e0de:	bfac      	ite	ge
 800e0e0:	eb06 0a03 	addge.w	sl, r6, r3
 800e0e4:	1b9f      	sublt	r7, r3, r6
 800e0e6:	9b04      	ldr	r3, [sp, #16]
 800e0e8:	1af6      	subs	r6, r6, r3
 800e0ea:	4416      	add	r6, r2
 800e0ec:	4ba0      	ldr	r3, [pc, #640]	; (800e370 <_strtod_l+0x938>)
 800e0ee:	3e01      	subs	r6, #1
 800e0f0:	429e      	cmp	r6, r3
 800e0f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e0f6:	f280 80c4 	bge.w	800e282 <_strtod_l+0x84a>
 800e0fa:	1b9b      	subs	r3, r3, r6
 800e0fc:	2b1f      	cmp	r3, #31
 800e0fe:	eba2 0203 	sub.w	r2, r2, r3
 800e102:	f04f 0101 	mov.w	r1, #1
 800e106:	f300 80b0 	bgt.w	800e26a <_strtod_l+0x832>
 800e10a:	fa01 f303 	lsl.w	r3, r1, r3
 800e10e:	930e      	str	r3, [sp, #56]	; 0x38
 800e110:	2300      	movs	r3, #0
 800e112:	930d      	str	r3, [sp, #52]	; 0x34
 800e114:	eb0a 0602 	add.w	r6, sl, r2
 800e118:	9b04      	ldr	r3, [sp, #16]
 800e11a:	45b2      	cmp	sl, r6
 800e11c:	4417      	add	r7, r2
 800e11e:	441f      	add	r7, r3
 800e120:	4653      	mov	r3, sl
 800e122:	bfa8      	it	ge
 800e124:	4633      	movge	r3, r6
 800e126:	42bb      	cmp	r3, r7
 800e128:	bfa8      	it	ge
 800e12a:	463b      	movge	r3, r7
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	bfc2      	ittt	gt
 800e130:	1af6      	subgt	r6, r6, r3
 800e132:	1aff      	subgt	r7, r7, r3
 800e134:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	dd17      	ble.n	800e16e <_strtod_l+0x736>
 800e13e:	4659      	mov	r1, fp
 800e140:	461a      	mov	r2, r3
 800e142:	4620      	mov	r0, r4
 800e144:	f001 fbec 	bl	800f920 <__pow5mult>
 800e148:	4683      	mov	fp, r0
 800e14a:	2800      	cmp	r0, #0
 800e14c:	f43f aeb8 	beq.w	800dec0 <_strtod_l+0x488>
 800e150:	4601      	mov	r1, r0
 800e152:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e154:	4620      	mov	r0, r4
 800e156:	f001 fb39 	bl	800f7cc <__multiply>
 800e15a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e15c:	2800      	cmp	r0, #0
 800e15e:	f43f aeaf 	beq.w	800dec0 <_strtod_l+0x488>
 800e162:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e164:	4620      	mov	r0, r4
 800e166:	f001 fa1b 	bl	800f5a0 <_Bfree>
 800e16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e16c:	9316      	str	r3, [sp, #88]	; 0x58
 800e16e:	2e00      	cmp	r6, #0
 800e170:	f300 808c 	bgt.w	800e28c <_strtod_l+0x854>
 800e174:	9b08      	ldr	r3, [sp, #32]
 800e176:	2b00      	cmp	r3, #0
 800e178:	dd08      	ble.n	800e18c <_strtod_l+0x754>
 800e17a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e17c:	9905      	ldr	r1, [sp, #20]
 800e17e:	4620      	mov	r0, r4
 800e180:	f001 fbce 	bl	800f920 <__pow5mult>
 800e184:	9005      	str	r0, [sp, #20]
 800e186:	2800      	cmp	r0, #0
 800e188:	f43f ae9a 	beq.w	800dec0 <_strtod_l+0x488>
 800e18c:	2f00      	cmp	r7, #0
 800e18e:	dd08      	ble.n	800e1a2 <_strtod_l+0x76a>
 800e190:	9905      	ldr	r1, [sp, #20]
 800e192:	463a      	mov	r2, r7
 800e194:	4620      	mov	r0, r4
 800e196:	f001 fc1d 	bl	800f9d4 <__lshift>
 800e19a:	9005      	str	r0, [sp, #20]
 800e19c:	2800      	cmp	r0, #0
 800e19e:	f43f ae8f 	beq.w	800dec0 <_strtod_l+0x488>
 800e1a2:	f1ba 0f00 	cmp.w	sl, #0
 800e1a6:	dd08      	ble.n	800e1ba <_strtod_l+0x782>
 800e1a8:	4659      	mov	r1, fp
 800e1aa:	4652      	mov	r2, sl
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f001 fc11 	bl	800f9d4 <__lshift>
 800e1b2:	4683      	mov	fp, r0
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	f43f ae83 	beq.w	800dec0 <_strtod_l+0x488>
 800e1ba:	9a05      	ldr	r2, [sp, #20]
 800e1bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f001 fc90 	bl	800fae4 <__mdiff>
 800e1c4:	4605      	mov	r5, r0
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	f43f ae7a 	beq.w	800dec0 <_strtod_l+0x488>
 800e1cc:	68c3      	ldr	r3, [r0, #12]
 800e1ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	60c3      	str	r3, [r0, #12]
 800e1d4:	4659      	mov	r1, fp
 800e1d6:	f001 fc69 	bl	800faac <__mcmp>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	da60      	bge.n	800e2a0 <_strtod_l+0x868>
 800e1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1e0:	ea53 0308 	orrs.w	r3, r3, r8
 800e1e4:	f040 8084 	bne.w	800e2f0 <_strtod_l+0x8b8>
 800e1e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d17f      	bne.n	800e2f0 <_strtod_l+0x8b8>
 800e1f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1f4:	0d1b      	lsrs	r3, r3, #20
 800e1f6:	051b      	lsls	r3, r3, #20
 800e1f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e1fc:	d978      	bls.n	800e2f0 <_strtod_l+0x8b8>
 800e1fe:	696b      	ldr	r3, [r5, #20]
 800e200:	b913      	cbnz	r3, 800e208 <_strtod_l+0x7d0>
 800e202:	692b      	ldr	r3, [r5, #16]
 800e204:	2b01      	cmp	r3, #1
 800e206:	dd73      	ble.n	800e2f0 <_strtod_l+0x8b8>
 800e208:	4629      	mov	r1, r5
 800e20a:	2201      	movs	r2, #1
 800e20c:	4620      	mov	r0, r4
 800e20e:	f001 fbe1 	bl	800f9d4 <__lshift>
 800e212:	4659      	mov	r1, fp
 800e214:	4605      	mov	r5, r0
 800e216:	f001 fc49 	bl	800faac <__mcmp>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	dd68      	ble.n	800e2f0 <_strtod_l+0x8b8>
 800e21e:	9904      	ldr	r1, [sp, #16]
 800e220:	4a54      	ldr	r2, [pc, #336]	; (800e374 <_strtod_l+0x93c>)
 800e222:	464b      	mov	r3, r9
 800e224:	2900      	cmp	r1, #0
 800e226:	f000 8084 	beq.w	800e332 <_strtod_l+0x8fa>
 800e22a:	ea02 0109 	and.w	r1, r2, r9
 800e22e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e232:	dc7e      	bgt.n	800e332 <_strtod_l+0x8fa>
 800e234:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e238:	f77f aeb3 	ble.w	800dfa2 <_strtod_l+0x56a>
 800e23c:	4b4e      	ldr	r3, [pc, #312]	; (800e378 <_strtod_l+0x940>)
 800e23e:	4640      	mov	r0, r8
 800e240:	4649      	mov	r1, r9
 800e242:	2200      	movs	r2, #0
 800e244:	f7f2 f9d8 	bl	80005f8 <__aeabi_dmul>
 800e248:	4b4a      	ldr	r3, [pc, #296]	; (800e374 <_strtod_l+0x93c>)
 800e24a:	400b      	ands	r3, r1
 800e24c:	4680      	mov	r8, r0
 800e24e:	4689      	mov	r9, r1
 800e250:	2b00      	cmp	r3, #0
 800e252:	f47f ae3f 	bne.w	800ded4 <_strtod_l+0x49c>
 800e256:	2322      	movs	r3, #34	; 0x22
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	e63b      	b.n	800ded4 <_strtod_l+0x49c>
 800e25c:	f04f 32ff 	mov.w	r2, #4294967295
 800e260:	fa02 f303 	lsl.w	r3, r2, r3
 800e264:	ea03 0808 	and.w	r8, r3, r8
 800e268:	e6e8      	b.n	800e03c <_strtod_l+0x604>
 800e26a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e26e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e272:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e276:	36e2      	adds	r6, #226	; 0xe2
 800e278:	fa01 f306 	lsl.w	r3, r1, r6
 800e27c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e280:	e748      	b.n	800e114 <_strtod_l+0x6dc>
 800e282:	2100      	movs	r1, #0
 800e284:	2301      	movs	r3, #1
 800e286:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e28a:	e743      	b.n	800e114 <_strtod_l+0x6dc>
 800e28c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e28e:	4632      	mov	r2, r6
 800e290:	4620      	mov	r0, r4
 800e292:	f001 fb9f 	bl	800f9d4 <__lshift>
 800e296:	9016      	str	r0, [sp, #88]	; 0x58
 800e298:	2800      	cmp	r0, #0
 800e29a:	f47f af6b 	bne.w	800e174 <_strtod_l+0x73c>
 800e29e:	e60f      	b.n	800dec0 <_strtod_l+0x488>
 800e2a0:	46ca      	mov	sl, r9
 800e2a2:	d171      	bne.n	800e388 <_strtod_l+0x950>
 800e2a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2aa:	b352      	cbz	r2, 800e302 <_strtod_l+0x8ca>
 800e2ac:	4a33      	ldr	r2, [pc, #204]	; (800e37c <_strtod_l+0x944>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d12a      	bne.n	800e308 <_strtod_l+0x8d0>
 800e2b2:	9b04      	ldr	r3, [sp, #16]
 800e2b4:	4641      	mov	r1, r8
 800e2b6:	b1fb      	cbz	r3, 800e2f8 <_strtod_l+0x8c0>
 800e2b8:	4b2e      	ldr	r3, [pc, #184]	; (800e374 <_strtod_l+0x93c>)
 800e2ba:	ea09 0303 	and.w	r3, r9, r3
 800e2be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c6:	d81a      	bhi.n	800e2fe <_strtod_l+0x8c6>
 800e2c8:	0d1b      	lsrs	r3, r3, #20
 800e2ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e2d2:	4299      	cmp	r1, r3
 800e2d4:	d118      	bne.n	800e308 <_strtod_l+0x8d0>
 800e2d6:	4b2a      	ldr	r3, [pc, #168]	; (800e380 <_strtod_l+0x948>)
 800e2d8:	459a      	cmp	sl, r3
 800e2da:	d102      	bne.n	800e2e2 <_strtod_l+0x8aa>
 800e2dc:	3101      	adds	r1, #1
 800e2de:	f43f adef 	beq.w	800dec0 <_strtod_l+0x488>
 800e2e2:	4b24      	ldr	r3, [pc, #144]	; (800e374 <_strtod_l+0x93c>)
 800e2e4:	ea0a 0303 	and.w	r3, sl, r3
 800e2e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e2ec:	f04f 0800 	mov.w	r8, #0
 800e2f0:	9b04      	ldr	r3, [sp, #16]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1a2      	bne.n	800e23c <_strtod_l+0x804>
 800e2f6:	e5ed      	b.n	800ded4 <_strtod_l+0x49c>
 800e2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2fc:	e7e9      	b.n	800e2d2 <_strtod_l+0x89a>
 800e2fe:	4613      	mov	r3, r2
 800e300:	e7e7      	b.n	800e2d2 <_strtod_l+0x89a>
 800e302:	ea53 0308 	orrs.w	r3, r3, r8
 800e306:	d08a      	beq.n	800e21e <_strtod_l+0x7e6>
 800e308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e30a:	b1e3      	cbz	r3, 800e346 <_strtod_l+0x90e>
 800e30c:	ea13 0f0a 	tst.w	r3, sl
 800e310:	d0ee      	beq.n	800e2f0 <_strtod_l+0x8b8>
 800e312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e314:	9a04      	ldr	r2, [sp, #16]
 800e316:	4640      	mov	r0, r8
 800e318:	4649      	mov	r1, r9
 800e31a:	b1c3      	cbz	r3, 800e34e <_strtod_l+0x916>
 800e31c:	f7ff fb6d 	bl	800d9fa <sulp>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	ec51 0b18 	vmov	r0, r1, d8
 800e328:	f7f1 ffb0 	bl	800028c <__adddf3>
 800e32c:	4680      	mov	r8, r0
 800e32e:	4689      	mov	r9, r1
 800e330:	e7de      	b.n	800e2f0 <_strtod_l+0x8b8>
 800e332:	4013      	ands	r3, r2
 800e334:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e338:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e33c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e340:	f04f 38ff 	mov.w	r8, #4294967295
 800e344:	e7d4      	b.n	800e2f0 <_strtod_l+0x8b8>
 800e346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e348:	ea13 0f08 	tst.w	r3, r8
 800e34c:	e7e0      	b.n	800e310 <_strtod_l+0x8d8>
 800e34e:	f7ff fb54 	bl	800d9fa <sulp>
 800e352:	4602      	mov	r2, r0
 800e354:	460b      	mov	r3, r1
 800e356:	ec51 0b18 	vmov	r0, r1, d8
 800e35a:	f7f1 ff95 	bl	8000288 <__aeabi_dsub>
 800e35e:	2200      	movs	r2, #0
 800e360:	2300      	movs	r3, #0
 800e362:	4680      	mov	r8, r0
 800e364:	4689      	mov	r9, r1
 800e366:	f7f2 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d0c0      	beq.n	800e2f0 <_strtod_l+0x8b8>
 800e36e:	e618      	b.n	800dfa2 <_strtod_l+0x56a>
 800e370:	fffffc02 	.word	0xfffffc02
 800e374:	7ff00000 	.word	0x7ff00000
 800e378:	39500000 	.word	0x39500000
 800e37c:	000fffff 	.word	0x000fffff
 800e380:	7fefffff 	.word	0x7fefffff
 800e384:	08011090 	.word	0x08011090
 800e388:	4659      	mov	r1, fp
 800e38a:	4628      	mov	r0, r5
 800e38c:	f001 fcfe 	bl	800fd8c <__ratio>
 800e390:	ec57 6b10 	vmov	r6, r7, d0
 800e394:	ee10 0a10 	vmov	r0, s0
 800e398:	2200      	movs	r2, #0
 800e39a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e39e:	4639      	mov	r1, r7
 800e3a0:	f7f2 fba6 	bl	8000af0 <__aeabi_dcmple>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d071      	beq.n	800e48c <_strtod_l+0xa54>
 800e3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d17c      	bne.n	800e4a8 <_strtod_l+0xa70>
 800e3ae:	f1b8 0f00 	cmp.w	r8, #0
 800e3b2:	d15a      	bne.n	800e46a <_strtod_l+0xa32>
 800e3b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d15d      	bne.n	800e478 <_strtod_l+0xa40>
 800e3bc:	4b90      	ldr	r3, [pc, #576]	; (800e600 <_strtod_l+0xbc8>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	4639      	mov	r1, r7
 800e3c4:	f7f2 fb8a 	bl	8000adc <__aeabi_dcmplt>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d15c      	bne.n	800e486 <_strtod_l+0xa4e>
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	4639      	mov	r1, r7
 800e3d0:	4b8c      	ldr	r3, [pc, #560]	; (800e604 <_strtod_l+0xbcc>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f7f2 f910 	bl	80005f8 <__aeabi_dmul>
 800e3d8:	4606      	mov	r6, r0
 800e3da:	460f      	mov	r7, r1
 800e3dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e3e0:	9606      	str	r6, [sp, #24]
 800e3e2:	9307      	str	r3, [sp, #28]
 800e3e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e3ec:	4b86      	ldr	r3, [pc, #536]	; (800e608 <_strtod_l+0xbd0>)
 800e3ee:	ea0a 0303 	and.w	r3, sl, r3
 800e3f2:	930d      	str	r3, [sp, #52]	; 0x34
 800e3f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3f6:	4b85      	ldr	r3, [pc, #532]	; (800e60c <_strtod_l+0xbd4>)
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	f040 8090 	bne.w	800e51e <_strtod_l+0xae6>
 800e3fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e402:	ec49 8b10 	vmov	d0, r8, r9
 800e406:	f001 fbf7 	bl	800fbf8 <__ulp>
 800e40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e40e:	ec51 0b10 	vmov	r0, r1, d0
 800e412:	f7f2 f8f1 	bl	80005f8 <__aeabi_dmul>
 800e416:	4642      	mov	r2, r8
 800e418:	464b      	mov	r3, r9
 800e41a:	f7f1 ff37 	bl	800028c <__adddf3>
 800e41e:	460b      	mov	r3, r1
 800e420:	4979      	ldr	r1, [pc, #484]	; (800e608 <_strtod_l+0xbd0>)
 800e422:	4a7b      	ldr	r2, [pc, #492]	; (800e610 <_strtod_l+0xbd8>)
 800e424:	4019      	ands	r1, r3
 800e426:	4291      	cmp	r1, r2
 800e428:	4680      	mov	r8, r0
 800e42a:	d944      	bls.n	800e4b6 <_strtod_l+0xa7e>
 800e42c:	ee18 2a90 	vmov	r2, s17
 800e430:	4b78      	ldr	r3, [pc, #480]	; (800e614 <_strtod_l+0xbdc>)
 800e432:	429a      	cmp	r2, r3
 800e434:	d104      	bne.n	800e440 <_strtod_l+0xa08>
 800e436:	ee18 3a10 	vmov	r3, s16
 800e43a:	3301      	adds	r3, #1
 800e43c:	f43f ad40 	beq.w	800dec0 <_strtod_l+0x488>
 800e440:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e614 <_strtod_l+0xbdc>
 800e444:	f04f 38ff 	mov.w	r8, #4294967295
 800e448:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e44a:	4620      	mov	r0, r4
 800e44c:	f001 f8a8 	bl	800f5a0 <_Bfree>
 800e450:	9905      	ldr	r1, [sp, #20]
 800e452:	4620      	mov	r0, r4
 800e454:	f001 f8a4 	bl	800f5a0 <_Bfree>
 800e458:	4659      	mov	r1, fp
 800e45a:	4620      	mov	r0, r4
 800e45c:	f001 f8a0 	bl	800f5a0 <_Bfree>
 800e460:	4629      	mov	r1, r5
 800e462:	4620      	mov	r0, r4
 800e464:	f001 f89c 	bl	800f5a0 <_Bfree>
 800e468:	e609      	b.n	800e07e <_strtod_l+0x646>
 800e46a:	f1b8 0f01 	cmp.w	r8, #1
 800e46e:	d103      	bne.n	800e478 <_strtod_l+0xa40>
 800e470:	f1b9 0f00 	cmp.w	r9, #0
 800e474:	f43f ad95 	beq.w	800dfa2 <_strtod_l+0x56a>
 800e478:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e5d0 <_strtod_l+0xb98>
 800e47c:	4f60      	ldr	r7, [pc, #384]	; (800e600 <_strtod_l+0xbc8>)
 800e47e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e482:	2600      	movs	r6, #0
 800e484:	e7ae      	b.n	800e3e4 <_strtod_l+0x9ac>
 800e486:	4f5f      	ldr	r7, [pc, #380]	; (800e604 <_strtod_l+0xbcc>)
 800e488:	2600      	movs	r6, #0
 800e48a:	e7a7      	b.n	800e3dc <_strtod_l+0x9a4>
 800e48c:	4b5d      	ldr	r3, [pc, #372]	; (800e604 <_strtod_l+0xbcc>)
 800e48e:	4630      	mov	r0, r6
 800e490:	4639      	mov	r1, r7
 800e492:	2200      	movs	r2, #0
 800e494:	f7f2 f8b0 	bl	80005f8 <__aeabi_dmul>
 800e498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e49a:	4606      	mov	r6, r0
 800e49c:	460f      	mov	r7, r1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d09c      	beq.n	800e3dc <_strtod_l+0x9a4>
 800e4a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e4a6:	e79d      	b.n	800e3e4 <_strtod_l+0x9ac>
 800e4a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e5d8 <_strtod_l+0xba0>
 800e4ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4b0:	ec57 6b17 	vmov	r6, r7, d7
 800e4b4:	e796      	b.n	800e3e4 <_strtod_l+0x9ac>
 800e4b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e4ba:	9b04      	ldr	r3, [sp, #16]
 800e4bc:	46ca      	mov	sl, r9
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1c2      	bne.n	800e448 <_strtod_l+0xa10>
 800e4c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4c8:	0d1b      	lsrs	r3, r3, #20
 800e4ca:	051b      	lsls	r3, r3, #20
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d1bb      	bne.n	800e448 <_strtod_l+0xa10>
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	f7f2 fbda 	bl	8000c8c <__aeabi_d2lz>
 800e4d8:	f7f2 f860 	bl	800059c <__aeabi_l2d>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	f7f1 fed0 	bl	8000288 <__aeabi_dsub>
 800e4e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4ee:	ea43 0308 	orr.w	r3, r3, r8
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	460f      	mov	r7, r1
 800e4f8:	d054      	beq.n	800e5a4 <_strtod_l+0xb6c>
 800e4fa:	a339      	add	r3, pc, #228	; (adr r3, 800e5e0 <_strtod_l+0xba8>)
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	f7f2 faec 	bl	8000adc <__aeabi_dcmplt>
 800e504:	2800      	cmp	r0, #0
 800e506:	f47f ace5 	bne.w	800ded4 <_strtod_l+0x49c>
 800e50a:	a337      	add	r3, pc, #220	; (adr r3, 800e5e8 <_strtod_l+0xbb0>)
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	4630      	mov	r0, r6
 800e512:	4639      	mov	r1, r7
 800e514:	f7f2 fb00 	bl	8000b18 <__aeabi_dcmpgt>
 800e518:	2800      	cmp	r0, #0
 800e51a:	d095      	beq.n	800e448 <_strtod_l+0xa10>
 800e51c:	e4da      	b.n	800ded4 <_strtod_l+0x49c>
 800e51e:	9b04      	ldr	r3, [sp, #16]
 800e520:	b333      	cbz	r3, 800e570 <_strtod_l+0xb38>
 800e522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e524:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e528:	d822      	bhi.n	800e570 <_strtod_l+0xb38>
 800e52a:	a331      	add	r3, pc, #196	; (adr r3, 800e5f0 <_strtod_l+0xbb8>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	4630      	mov	r0, r6
 800e532:	4639      	mov	r1, r7
 800e534:	f7f2 fadc 	bl	8000af0 <__aeabi_dcmple>
 800e538:	b1a0      	cbz	r0, 800e564 <_strtod_l+0xb2c>
 800e53a:	4639      	mov	r1, r7
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7f2 fb1d 	bl	8000b7c <__aeabi_d2uiz>
 800e542:	2801      	cmp	r0, #1
 800e544:	bf38      	it	cc
 800e546:	2001      	movcc	r0, #1
 800e548:	f7f1 ffdc 	bl	8000504 <__aeabi_ui2d>
 800e54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e54e:	4606      	mov	r6, r0
 800e550:	460f      	mov	r7, r1
 800e552:	bb23      	cbnz	r3, 800e59e <_strtod_l+0xb66>
 800e554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e558:	9010      	str	r0, [sp, #64]	; 0x40
 800e55a:	9311      	str	r3, [sp, #68]	; 0x44
 800e55c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e560:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e568:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e56c:	1a9b      	subs	r3, r3, r2
 800e56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e570:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e574:	eeb0 0a48 	vmov.f32	s0, s16
 800e578:	eef0 0a68 	vmov.f32	s1, s17
 800e57c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e580:	f001 fb3a 	bl	800fbf8 <__ulp>
 800e584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e588:	ec53 2b10 	vmov	r2, r3, d0
 800e58c:	f7f2 f834 	bl	80005f8 <__aeabi_dmul>
 800e590:	ec53 2b18 	vmov	r2, r3, d8
 800e594:	f7f1 fe7a 	bl	800028c <__adddf3>
 800e598:	4680      	mov	r8, r0
 800e59a:	4689      	mov	r9, r1
 800e59c:	e78d      	b.n	800e4ba <_strtod_l+0xa82>
 800e59e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e5a2:	e7db      	b.n	800e55c <_strtod_l+0xb24>
 800e5a4:	a314      	add	r3, pc, #80	; (adr r3, 800e5f8 <_strtod_l+0xbc0>)
 800e5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5aa:	f7f2 fa97 	bl	8000adc <__aeabi_dcmplt>
 800e5ae:	e7b3      	b.n	800e518 <_strtod_l+0xae0>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5b8:	6013      	str	r3, [r2, #0]
 800e5ba:	f7ff ba7c 	b.w	800dab6 <_strtod_l+0x7e>
 800e5be:	2a65      	cmp	r2, #101	; 0x65
 800e5c0:	f43f ab75 	beq.w	800dcae <_strtod_l+0x276>
 800e5c4:	2a45      	cmp	r2, #69	; 0x45
 800e5c6:	f43f ab72 	beq.w	800dcae <_strtod_l+0x276>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	f7ff bbaa 	b.w	800dd24 <_strtod_l+0x2ec>
 800e5d0:	00000000 	.word	0x00000000
 800e5d4:	bff00000 	.word	0xbff00000
 800e5d8:	00000000 	.word	0x00000000
 800e5dc:	3ff00000 	.word	0x3ff00000
 800e5e0:	94a03595 	.word	0x94a03595
 800e5e4:	3fdfffff 	.word	0x3fdfffff
 800e5e8:	35afe535 	.word	0x35afe535
 800e5ec:	3fe00000 	.word	0x3fe00000
 800e5f0:	ffc00000 	.word	0xffc00000
 800e5f4:	41dfffff 	.word	0x41dfffff
 800e5f8:	94a03595 	.word	0x94a03595
 800e5fc:	3fcfffff 	.word	0x3fcfffff
 800e600:	3ff00000 	.word	0x3ff00000
 800e604:	3fe00000 	.word	0x3fe00000
 800e608:	7ff00000 	.word	0x7ff00000
 800e60c:	7fe00000 	.word	0x7fe00000
 800e610:	7c9fffff 	.word	0x7c9fffff
 800e614:	7fefffff 	.word	0x7fefffff

0800e618 <strtod>:
 800e618:	460a      	mov	r2, r1
 800e61a:	4601      	mov	r1, r0
 800e61c:	4802      	ldr	r0, [pc, #8]	; (800e628 <strtod+0x10>)
 800e61e:	4b03      	ldr	r3, [pc, #12]	; (800e62c <strtod+0x14>)
 800e620:	6800      	ldr	r0, [r0, #0]
 800e622:	f7ff ba09 	b.w	800da38 <_strtod_l>
 800e626:	bf00      	nop
 800e628:	20000200 	.word	0x20000200
 800e62c:	20000048 	.word	0x20000048

0800e630 <_strtol_l.constprop.0>:
 800e630:	2b01      	cmp	r3, #1
 800e632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e636:	d001      	beq.n	800e63c <_strtol_l.constprop.0+0xc>
 800e638:	2b24      	cmp	r3, #36	; 0x24
 800e63a:	d906      	bls.n	800e64a <_strtol_l.constprop.0+0x1a>
 800e63c:	f000 faa4 	bl	800eb88 <__errno>
 800e640:	2316      	movs	r3, #22
 800e642:	6003      	str	r3, [r0, #0]
 800e644:	2000      	movs	r0, #0
 800e646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e64a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e730 <_strtol_l.constprop.0+0x100>
 800e64e:	460d      	mov	r5, r1
 800e650:	462e      	mov	r6, r5
 800e652:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e656:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e65a:	f017 0708 	ands.w	r7, r7, #8
 800e65e:	d1f7      	bne.n	800e650 <_strtol_l.constprop.0+0x20>
 800e660:	2c2d      	cmp	r4, #45	; 0x2d
 800e662:	d132      	bne.n	800e6ca <_strtol_l.constprop.0+0x9a>
 800e664:	782c      	ldrb	r4, [r5, #0]
 800e666:	2701      	movs	r7, #1
 800e668:	1cb5      	adds	r5, r6, #2
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d05b      	beq.n	800e726 <_strtol_l.constprop.0+0xf6>
 800e66e:	2b10      	cmp	r3, #16
 800e670:	d109      	bne.n	800e686 <_strtol_l.constprop.0+0x56>
 800e672:	2c30      	cmp	r4, #48	; 0x30
 800e674:	d107      	bne.n	800e686 <_strtol_l.constprop.0+0x56>
 800e676:	782c      	ldrb	r4, [r5, #0]
 800e678:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e67c:	2c58      	cmp	r4, #88	; 0x58
 800e67e:	d14d      	bne.n	800e71c <_strtol_l.constprop.0+0xec>
 800e680:	786c      	ldrb	r4, [r5, #1]
 800e682:	2310      	movs	r3, #16
 800e684:	3502      	adds	r5, #2
 800e686:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e68a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e68e:	f04f 0e00 	mov.w	lr, #0
 800e692:	fbb8 f9f3 	udiv	r9, r8, r3
 800e696:	4676      	mov	r6, lr
 800e698:	fb03 8a19 	mls	sl, r3, r9, r8
 800e69c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e6a0:	f1bc 0f09 	cmp.w	ip, #9
 800e6a4:	d816      	bhi.n	800e6d4 <_strtol_l.constprop.0+0xa4>
 800e6a6:	4664      	mov	r4, ip
 800e6a8:	42a3      	cmp	r3, r4
 800e6aa:	dd24      	ble.n	800e6f6 <_strtol_l.constprop.0+0xc6>
 800e6ac:	f1be 3fff 	cmp.w	lr, #4294967295
 800e6b0:	d008      	beq.n	800e6c4 <_strtol_l.constprop.0+0x94>
 800e6b2:	45b1      	cmp	r9, r6
 800e6b4:	d31c      	bcc.n	800e6f0 <_strtol_l.constprop.0+0xc0>
 800e6b6:	d101      	bne.n	800e6bc <_strtol_l.constprop.0+0x8c>
 800e6b8:	45a2      	cmp	sl, r4
 800e6ba:	db19      	blt.n	800e6f0 <_strtol_l.constprop.0+0xc0>
 800e6bc:	fb06 4603 	mla	r6, r6, r3, r4
 800e6c0:	f04f 0e01 	mov.w	lr, #1
 800e6c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6c8:	e7e8      	b.n	800e69c <_strtol_l.constprop.0+0x6c>
 800e6ca:	2c2b      	cmp	r4, #43	; 0x2b
 800e6cc:	bf04      	itt	eq
 800e6ce:	782c      	ldrbeq	r4, [r5, #0]
 800e6d0:	1cb5      	addeq	r5, r6, #2
 800e6d2:	e7ca      	b.n	800e66a <_strtol_l.constprop.0+0x3a>
 800e6d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e6d8:	f1bc 0f19 	cmp.w	ip, #25
 800e6dc:	d801      	bhi.n	800e6e2 <_strtol_l.constprop.0+0xb2>
 800e6de:	3c37      	subs	r4, #55	; 0x37
 800e6e0:	e7e2      	b.n	800e6a8 <_strtol_l.constprop.0+0x78>
 800e6e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e6e6:	f1bc 0f19 	cmp.w	ip, #25
 800e6ea:	d804      	bhi.n	800e6f6 <_strtol_l.constprop.0+0xc6>
 800e6ec:	3c57      	subs	r4, #87	; 0x57
 800e6ee:	e7db      	b.n	800e6a8 <_strtol_l.constprop.0+0x78>
 800e6f0:	f04f 3eff 	mov.w	lr, #4294967295
 800e6f4:	e7e6      	b.n	800e6c4 <_strtol_l.constprop.0+0x94>
 800e6f6:	f1be 3fff 	cmp.w	lr, #4294967295
 800e6fa:	d105      	bne.n	800e708 <_strtol_l.constprop.0+0xd8>
 800e6fc:	2322      	movs	r3, #34	; 0x22
 800e6fe:	6003      	str	r3, [r0, #0]
 800e700:	4646      	mov	r6, r8
 800e702:	b942      	cbnz	r2, 800e716 <_strtol_l.constprop.0+0xe6>
 800e704:	4630      	mov	r0, r6
 800e706:	e79e      	b.n	800e646 <_strtol_l.constprop.0+0x16>
 800e708:	b107      	cbz	r7, 800e70c <_strtol_l.constprop.0+0xdc>
 800e70a:	4276      	negs	r6, r6
 800e70c:	2a00      	cmp	r2, #0
 800e70e:	d0f9      	beq.n	800e704 <_strtol_l.constprop.0+0xd4>
 800e710:	f1be 0f00 	cmp.w	lr, #0
 800e714:	d000      	beq.n	800e718 <_strtol_l.constprop.0+0xe8>
 800e716:	1e69      	subs	r1, r5, #1
 800e718:	6011      	str	r1, [r2, #0]
 800e71a:	e7f3      	b.n	800e704 <_strtol_l.constprop.0+0xd4>
 800e71c:	2430      	movs	r4, #48	; 0x30
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1b1      	bne.n	800e686 <_strtol_l.constprop.0+0x56>
 800e722:	2308      	movs	r3, #8
 800e724:	e7af      	b.n	800e686 <_strtol_l.constprop.0+0x56>
 800e726:	2c30      	cmp	r4, #48	; 0x30
 800e728:	d0a5      	beq.n	800e676 <_strtol_l.constprop.0+0x46>
 800e72a:	230a      	movs	r3, #10
 800e72c:	e7ab      	b.n	800e686 <_strtol_l.constprop.0+0x56>
 800e72e:	bf00      	nop
 800e730:	080110b9 	.word	0x080110b9

0800e734 <strtol>:
 800e734:	4613      	mov	r3, r2
 800e736:	460a      	mov	r2, r1
 800e738:	4601      	mov	r1, r0
 800e73a:	4802      	ldr	r0, [pc, #8]	; (800e744 <strtol+0x10>)
 800e73c:	6800      	ldr	r0, [r0, #0]
 800e73e:	f7ff bf77 	b.w	800e630 <_strtol_l.constprop.0>
 800e742:	bf00      	nop
 800e744:	20000200 	.word	0x20000200

0800e748 <std>:
 800e748:	2300      	movs	r3, #0
 800e74a:	b510      	push	{r4, lr}
 800e74c:	4604      	mov	r4, r0
 800e74e:	e9c0 3300 	strd	r3, r3, [r0]
 800e752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e756:	6083      	str	r3, [r0, #8]
 800e758:	8181      	strh	r1, [r0, #12]
 800e75a:	6643      	str	r3, [r0, #100]	; 0x64
 800e75c:	81c2      	strh	r2, [r0, #14]
 800e75e:	6183      	str	r3, [r0, #24]
 800e760:	4619      	mov	r1, r3
 800e762:	2208      	movs	r2, #8
 800e764:	305c      	adds	r0, #92	; 0x5c
 800e766:	f000 f93f 	bl	800e9e8 <memset>
 800e76a:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <std+0x58>)
 800e76c:	6263      	str	r3, [r4, #36]	; 0x24
 800e76e:	4b0d      	ldr	r3, [pc, #52]	; (800e7a4 <std+0x5c>)
 800e770:	62a3      	str	r3, [r4, #40]	; 0x28
 800e772:	4b0d      	ldr	r3, [pc, #52]	; (800e7a8 <std+0x60>)
 800e774:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e776:	4b0d      	ldr	r3, [pc, #52]	; (800e7ac <std+0x64>)
 800e778:	6323      	str	r3, [r4, #48]	; 0x30
 800e77a:	4b0d      	ldr	r3, [pc, #52]	; (800e7b0 <std+0x68>)
 800e77c:	6224      	str	r4, [r4, #32]
 800e77e:	429c      	cmp	r4, r3
 800e780:	d006      	beq.n	800e790 <std+0x48>
 800e782:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e786:	4294      	cmp	r4, r2
 800e788:	d002      	beq.n	800e790 <std+0x48>
 800e78a:	33d0      	adds	r3, #208	; 0xd0
 800e78c:	429c      	cmp	r4, r3
 800e78e:	d105      	bne.n	800e79c <std+0x54>
 800e790:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e798:	f000 ba20 	b.w	800ebdc <__retarget_lock_init_recursive>
 800e79c:	bd10      	pop	{r4, pc}
 800e79e:	bf00      	nop
 800e7a0:	0800e8f1 	.word	0x0800e8f1
 800e7a4:	0800e913 	.word	0x0800e913
 800e7a8:	0800e94b 	.word	0x0800e94b
 800e7ac:	0800e96f 	.word	0x0800e96f
 800e7b0:	20002aa8 	.word	0x20002aa8

0800e7b4 <stdio_exit_handler>:
 800e7b4:	4a02      	ldr	r2, [pc, #8]	; (800e7c0 <stdio_exit_handler+0xc>)
 800e7b6:	4903      	ldr	r1, [pc, #12]	; (800e7c4 <stdio_exit_handler+0x10>)
 800e7b8:	4803      	ldr	r0, [pc, #12]	; (800e7c8 <stdio_exit_handler+0x14>)
 800e7ba:	f000 b869 	b.w	800e890 <_fwalk_sglue>
 800e7be:	bf00      	nop
 800e7c0:	2000003c 	.word	0x2000003c
 800e7c4:	080107f9 	.word	0x080107f9
 800e7c8:	200001b4 	.word	0x200001b4

0800e7cc <cleanup_stdio>:
 800e7cc:	6841      	ldr	r1, [r0, #4]
 800e7ce:	4b0c      	ldr	r3, [pc, #48]	; (800e800 <cleanup_stdio+0x34>)
 800e7d0:	4299      	cmp	r1, r3
 800e7d2:	b510      	push	{r4, lr}
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	d001      	beq.n	800e7dc <cleanup_stdio+0x10>
 800e7d8:	f002 f80e 	bl	80107f8 <_fflush_r>
 800e7dc:	68a1      	ldr	r1, [r4, #8]
 800e7de:	4b09      	ldr	r3, [pc, #36]	; (800e804 <cleanup_stdio+0x38>)
 800e7e0:	4299      	cmp	r1, r3
 800e7e2:	d002      	beq.n	800e7ea <cleanup_stdio+0x1e>
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f002 f807 	bl	80107f8 <_fflush_r>
 800e7ea:	68e1      	ldr	r1, [r4, #12]
 800e7ec:	4b06      	ldr	r3, [pc, #24]	; (800e808 <cleanup_stdio+0x3c>)
 800e7ee:	4299      	cmp	r1, r3
 800e7f0:	d004      	beq.n	800e7fc <cleanup_stdio+0x30>
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7f8:	f001 bffe 	b.w	80107f8 <_fflush_r>
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	bf00      	nop
 800e800:	20002aa8 	.word	0x20002aa8
 800e804:	20002b10 	.word	0x20002b10
 800e808:	20002b78 	.word	0x20002b78

0800e80c <global_stdio_init.part.0>:
 800e80c:	b510      	push	{r4, lr}
 800e80e:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <global_stdio_init.part.0+0x30>)
 800e810:	4c0b      	ldr	r4, [pc, #44]	; (800e840 <global_stdio_init.part.0+0x34>)
 800e812:	4a0c      	ldr	r2, [pc, #48]	; (800e844 <global_stdio_init.part.0+0x38>)
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	4620      	mov	r0, r4
 800e818:	2200      	movs	r2, #0
 800e81a:	2104      	movs	r1, #4
 800e81c:	f7ff ff94 	bl	800e748 <std>
 800e820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e824:	2201      	movs	r2, #1
 800e826:	2109      	movs	r1, #9
 800e828:	f7ff ff8e 	bl	800e748 <std>
 800e82c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e830:	2202      	movs	r2, #2
 800e832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e836:	2112      	movs	r1, #18
 800e838:	f7ff bf86 	b.w	800e748 <std>
 800e83c:	20002be0 	.word	0x20002be0
 800e840:	20002aa8 	.word	0x20002aa8
 800e844:	0800e7b5 	.word	0x0800e7b5

0800e848 <__sfp_lock_acquire>:
 800e848:	4801      	ldr	r0, [pc, #4]	; (800e850 <__sfp_lock_acquire+0x8>)
 800e84a:	f000 b9c8 	b.w	800ebde <__retarget_lock_acquire_recursive>
 800e84e:	bf00      	nop
 800e850:	20002be9 	.word	0x20002be9

0800e854 <__sfp_lock_release>:
 800e854:	4801      	ldr	r0, [pc, #4]	; (800e85c <__sfp_lock_release+0x8>)
 800e856:	f000 b9c3 	b.w	800ebe0 <__retarget_lock_release_recursive>
 800e85a:	bf00      	nop
 800e85c:	20002be9 	.word	0x20002be9

0800e860 <__sinit>:
 800e860:	b510      	push	{r4, lr}
 800e862:	4604      	mov	r4, r0
 800e864:	f7ff fff0 	bl	800e848 <__sfp_lock_acquire>
 800e868:	6a23      	ldr	r3, [r4, #32]
 800e86a:	b11b      	cbz	r3, 800e874 <__sinit+0x14>
 800e86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e870:	f7ff bff0 	b.w	800e854 <__sfp_lock_release>
 800e874:	4b04      	ldr	r3, [pc, #16]	; (800e888 <__sinit+0x28>)
 800e876:	6223      	str	r3, [r4, #32]
 800e878:	4b04      	ldr	r3, [pc, #16]	; (800e88c <__sinit+0x2c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1f5      	bne.n	800e86c <__sinit+0xc>
 800e880:	f7ff ffc4 	bl	800e80c <global_stdio_init.part.0>
 800e884:	e7f2      	b.n	800e86c <__sinit+0xc>
 800e886:	bf00      	nop
 800e888:	0800e7cd 	.word	0x0800e7cd
 800e88c:	20002be0 	.word	0x20002be0

0800e890 <_fwalk_sglue>:
 800e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e894:	4607      	mov	r7, r0
 800e896:	4688      	mov	r8, r1
 800e898:	4614      	mov	r4, r2
 800e89a:	2600      	movs	r6, #0
 800e89c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8a0:	f1b9 0901 	subs.w	r9, r9, #1
 800e8a4:	d505      	bpl.n	800e8b2 <_fwalk_sglue+0x22>
 800e8a6:	6824      	ldr	r4, [r4, #0]
 800e8a8:	2c00      	cmp	r4, #0
 800e8aa:	d1f7      	bne.n	800e89c <_fwalk_sglue+0xc>
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d907      	bls.n	800e8c8 <_fwalk_sglue+0x38>
 800e8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	d003      	beq.n	800e8c8 <_fwalk_sglue+0x38>
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	47c0      	blx	r8
 800e8c6:	4306      	orrs	r6, r0
 800e8c8:	3568      	adds	r5, #104	; 0x68
 800e8ca:	e7e9      	b.n	800e8a0 <_fwalk_sglue+0x10>

0800e8cc <iprintf>:
 800e8cc:	b40f      	push	{r0, r1, r2, r3}
 800e8ce:	b507      	push	{r0, r1, r2, lr}
 800e8d0:	4906      	ldr	r1, [pc, #24]	; (800e8ec <iprintf+0x20>)
 800e8d2:	ab04      	add	r3, sp, #16
 800e8d4:	6808      	ldr	r0, [r1, #0]
 800e8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8da:	6881      	ldr	r1, [r0, #8]
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	f001 fc5b 	bl	8010198 <_vfiprintf_r>
 800e8e2:	b003      	add	sp, #12
 800e8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8e8:	b004      	add	sp, #16
 800e8ea:	4770      	bx	lr
 800e8ec:	20000200 	.word	0x20000200

0800e8f0 <__sread>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f8:	f000 f922 	bl	800eb40 <_read_r>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	bfab      	itete	ge
 800e900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e902:	89a3      	ldrhlt	r3, [r4, #12]
 800e904:	181b      	addge	r3, r3, r0
 800e906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e90a:	bfac      	ite	ge
 800e90c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e90e:	81a3      	strhlt	r3, [r4, #12]
 800e910:	bd10      	pop	{r4, pc}

0800e912 <__swrite>:
 800e912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e916:	461f      	mov	r7, r3
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	05db      	lsls	r3, r3, #23
 800e91c:	4605      	mov	r5, r0
 800e91e:	460c      	mov	r4, r1
 800e920:	4616      	mov	r6, r2
 800e922:	d505      	bpl.n	800e930 <__swrite+0x1e>
 800e924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e928:	2302      	movs	r3, #2
 800e92a:	2200      	movs	r2, #0
 800e92c:	f000 f8f6 	bl	800eb1c <_lseek_r>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	4632      	mov	r2, r6
 800e93e:	463b      	mov	r3, r7
 800e940:	4628      	mov	r0, r5
 800e942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e946:	f000 b90d 	b.w	800eb64 <_write_r>

0800e94a <__sseek>:
 800e94a:	b510      	push	{r4, lr}
 800e94c:	460c      	mov	r4, r1
 800e94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e952:	f000 f8e3 	bl	800eb1c <_lseek_r>
 800e956:	1c43      	adds	r3, r0, #1
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	bf15      	itete	ne
 800e95c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e95e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e966:	81a3      	strheq	r3, [r4, #12]
 800e968:	bf18      	it	ne
 800e96a:	81a3      	strhne	r3, [r4, #12]
 800e96c:	bd10      	pop	{r4, pc}

0800e96e <__sclose>:
 800e96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e972:	f000 b8c3 	b.w	800eafc <_close_r>

0800e976 <_vsniprintf_r>:
 800e976:	b530      	push	{r4, r5, lr}
 800e978:	4614      	mov	r4, r2
 800e97a:	2c00      	cmp	r4, #0
 800e97c:	b09b      	sub	sp, #108	; 0x6c
 800e97e:	4605      	mov	r5, r0
 800e980:	461a      	mov	r2, r3
 800e982:	da05      	bge.n	800e990 <_vsniprintf_r+0x1a>
 800e984:	238b      	movs	r3, #139	; 0x8b
 800e986:	6003      	str	r3, [r0, #0]
 800e988:	f04f 30ff 	mov.w	r0, #4294967295
 800e98c:	b01b      	add	sp, #108	; 0x6c
 800e98e:	bd30      	pop	{r4, r5, pc}
 800e990:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e994:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e998:	bf14      	ite	ne
 800e99a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e99e:	4623      	moveq	r3, r4
 800e9a0:	9302      	str	r3, [sp, #8]
 800e9a2:	9305      	str	r3, [sp, #20]
 800e9a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9a8:	9100      	str	r1, [sp, #0]
 800e9aa:	9104      	str	r1, [sp, #16]
 800e9ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e9b0:	4669      	mov	r1, sp
 800e9b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e9b4:	f001 fac8 	bl	800ff48 <_svfiprintf_r>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	bfbc      	itt	lt
 800e9bc:	238b      	movlt	r3, #139	; 0x8b
 800e9be:	602b      	strlt	r3, [r5, #0]
 800e9c0:	2c00      	cmp	r4, #0
 800e9c2:	d0e3      	beq.n	800e98c <_vsniprintf_r+0x16>
 800e9c4:	9b00      	ldr	r3, [sp, #0]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	701a      	strb	r2, [r3, #0]
 800e9ca:	e7df      	b.n	800e98c <_vsniprintf_r+0x16>

0800e9cc <vsniprintf>:
 800e9cc:	b507      	push	{r0, r1, r2, lr}
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	460a      	mov	r2, r1
 800e9d4:	4601      	mov	r1, r0
 800e9d6:	4803      	ldr	r0, [pc, #12]	; (800e9e4 <vsniprintf+0x18>)
 800e9d8:	6800      	ldr	r0, [r0, #0]
 800e9da:	f7ff ffcc 	bl	800e976 <_vsniprintf_r>
 800e9de:	b003      	add	sp, #12
 800e9e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9e4:	20000200 	.word	0x20000200

0800e9e8 <memset>:
 800e9e8:	4402      	add	r2, r0
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d100      	bne.n	800e9f2 <memset+0xa>
 800e9f0:	4770      	bx	lr
 800e9f2:	f803 1b01 	strb.w	r1, [r3], #1
 800e9f6:	e7f9      	b.n	800e9ec <memset+0x4>

0800e9f8 <strncmp>:
 800e9f8:	b510      	push	{r4, lr}
 800e9fa:	b16a      	cbz	r2, 800ea18 <strncmp+0x20>
 800e9fc:	3901      	subs	r1, #1
 800e9fe:	1884      	adds	r4, r0, r2
 800ea00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d103      	bne.n	800ea14 <strncmp+0x1c>
 800ea0c:	42a0      	cmp	r0, r4
 800ea0e:	d001      	beq.n	800ea14 <strncmp+0x1c>
 800ea10:	2a00      	cmp	r2, #0
 800ea12:	d1f5      	bne.n	800ea00 <strncmp+0x8>
 800ea14:	1ad0      	subs	r0, r2, r3
 800ea16:	bd10      	pop	{r4, pc}
 800ea18:	4610      	mov	r0, r2
 800ea1a:	e7fc      	b.n	800ea16 <strncmp+0x1e>

0800ea1c <strncpy>:
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	3901      	subs	r1, #1
 800ea20:	4603      	mov	r3, r0
 800ea22:	b132      	cbz	r2, 800ea32 <strncpy+0x16>
 800ea24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea28:	f803 4b01 	strb.w	r4, [r3], #1
 800ea2c:	3a01      	subs	r2, #1
 800ea2e:	2c00      	cmp	r4, #0
 800ea30:	d1f7      	bne.n	800ea22 <strncpy+0x6>
 800ea32:	441a      	add	r2, r3
 800ea34:	2100      	movs	r1, #0
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d100      	bne.n	800ea3c <strncpy+0x20>
 800ea3a:	bd10      	pop	{r4, pc}
 800ea3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ea40:	e7f9      	b.n	800ea36 <strncpy+0x1a>
	...

0800ea44 <strtok>:
 800ea44:	4b16      	ldr	r3, [pc, #88]	; (800eaa0 <strtok+0x5c>)
 800ea46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea48:	681e      	ldr	r6, [r3, #0]
 800ea4a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ea4c:	4605      	mov	r5, r0
 800ea4e:	b9fc      	cbnz	r4, 800ea90 <strtok+0x4c>
 800ea50:	2050      	movs	r0, #80	; 0x50
 800ea52:	9101      	str	r1, [sp, #4]
 800ea54:	f000 fc9e 	bl	800f394 <malloc>
 800ea58:	9901      	ldr	r1, [sp, #4]
 800ea5a:	6470      	str	r0, [r6, #68]	; 0x44
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	b920      	cbnz	r0, 800ea6a <strtok+0x26>
 800ea60:	4b10      	ldr	r3, [pc, #64]	; (800eaa4 <strtok+0x60>)
 800ea62:	4811      	ldr	r0, [pc, #68]	; (800eaa8 <strtok+0x64>)
 800ea64:	215b      	movs	r1, #91	; 0x5b
 800ea66:	f000 f8d3 	bl	800ec10 <__assert_func>
 800ea6a:	e9c0 4400 	strd	r4, r4, [r0]
 800ea6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ea72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ea76:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ea7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ea7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ea82:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ea86:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ea8a:	6184      	str	r4, [r0, #24]
 800ea8c:	7704      	strb	r4, [r0, #28]
 800ea8e:	6244      	str	r4, [r0, #36]	; 0x24
 800ea90:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ea92:	2301      	movs	r3, #1
 800ea94:	4628      	mov	r0, r5
 800ea96:	b002      	add	sp, #8
 800ea98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea9c:	f000 b806 	b.w	800eaac <__strtok_r>
 800eaa0:	20000200 	.word	0x20000200
 800eaa4:	080111b9 	.word	0x080111b9
 800eaa8:	080111d0 	.word	0x080111d0

0800eaac <__strtok_r>:
 800eaac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaae:	b908      	cbnz	r0, 800eab4 <__strtok_r+0x8>
 800eab0:	6810      	ldr	r0, [r2, #0]
 800eab2:	b188      	cbz	r0, 800ead8 <__strtok_r+0x2c>
 800eab4:	4604      	mov	r4, r0
 800eab6:	4620      	mov	r0, r4
 800eab8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800eabc:	460f      	mov	r7, r1
 800eabe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eac2:	b91e      	cbnz	r6, 800eacc <__strtok_r+0x20>
 800eac4:	b965      	cbnz	r5, 800eae0 <__strtok_r+0x34>
 800eac6:	6015      	str	r5, [r2, #0]
 800eac8:	4628      	mov	r0, r5
 800eaca:	e005      	b.n	800ead8 <__strtok_r+0x2c>
 800eacc:	42b5      	cmp	r5, r6
 800eace:	d1f6      	bne.n	800eabe <__strtok_r+0x12>
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1f0      	bne.n	800eab6 <__strtok_r+0xa>
 800ead4:	6014      	str	r4, [r2, #0]
 800ead6:	7003      	strb	r3, [r0, #0]
 800ead8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eada:	461c      	mov	r4, r3
 800eadc:	e00c      	b.n	800eaf8 <__strtok_r+0x4c>
 800eade:	b915      	cbnz	r5, 800eae6 <__strtok_r+0x3a>
 800eae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eae4:	460e      	mov	r6, r1
 800eae6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800eaea:	42ab      	cmp	r3, r5
 800eaec:	d1f7      	bne.n	800eade <__strtok_r+0x32>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d0f3      	beq.n	800eada <__strtok_r+0x2e>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800eaf8:	6014      	str	r4, [r2, #0]
 800eafa:	e7ed      	b.n	800ead8 <__strtok_r+0x2c>

0800eafc <_close_r>:
 800eafc:	b538      	push	{r3, r4, r5, lr}
 800eafe:	4d06      	ldr	r5, [pc, #24]	; (800eb18 <_close_r+0x1c>)
 800eb00:	2300      	movs	r3, #0
 800eb02:	4604      	mov	r4, r0
 800eb04:	4608      	mov	r0, r1
 800eb06:	602b      	str	r3, [r5, #0]
 800eb08:	f7f3 fdfd 	bl	8002706 <_close>
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d102      	bne.n	800eb16 <_close_r+0x1a>
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	b103      	cbz	r3, 800eb16 <_close_r+0x1a>
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	20002be4 	.word	0x20002be4

0800eb1c <_lseek_r>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	4d07      	ldr	r5, [pc, #28]	; (800eb3c <_lseek_r+0x20>)
 800eb20:	4604      	mov	r4, r0
 800eb22:	4608      	mov	r0, r1
 800eb24:	4611      	mov	r1, r2
 800eb26:	2200      	movs	r2, #0
 800eb28:	602a      	str	r2, [r5, #0]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	f7f3 fe12 	bl	8002754 <_lseek>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_lseek_r+0x1e>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_lseek_r+0x1e>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	20002be4 	.word	0x20002be4

0800eb40 <_read_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	4d07      	ldr	r5, [pc, #28]	; (800eb60 <_read_r+0x20>)
 800eb44:	4604      	mov	r4, r0
 800eb46:	4608      	mov	r0, r1
 800eb48:	4611      	mov	r1, r2
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	602a      	str	r2, [r5, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	f7f3 fda0 	bl	8002694 <_read>
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	d102      	bne.n	800eb5e <_read_r+0x1e>
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	b103      	cbz	r3, 800eb5e <_read_r+0x1e>
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	bd38      	pop	{r3, r4, r5, pc}
 800eb60:	20002be4 	.word	0x20002be4

0800eb64 <_write_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	4d07      	ldr	r5, [pc, #28]	; (800eb84 <_write_r+0x20>)
 800eb68:	4604      	mov	r4, r0
 800eb6a:	4608      	mov	r0, r1
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	2200      	movs	r2, #0
 800eb70:	602a      	str	r2, [r5, #0]
 800eb72:	461a      	mov	r2, r3
 800eb74:	f7f3 fdab 	bl	80026ce <_write>
 800eb78:	1c43      	adds	r3, r0, #1
 800eb7a:	d102      	bne.n	800eb82 <_write_r+0x1e>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	b103      	cbz	r3, 800eb82 <_write_r+0x1e>
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	bd38      	pop	{r3, r4, r5, pc}
 800eb84:	20002be4 	.word	0x20002be4

0800eb88 <__errno>:
 800eb88:	4b01      	ldr	r3, [pc, #4]	; (800eb90 <__errno+0x8>)
 800eb8a:	6818      	ldr	r0, [r3, #0]
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	20000200 	.word	0x20000200

0800eb94 <__libc_init_array>:
 800eb94:	b570      	push	{r4, r5, r6, lr}
 800eb96:	4d0d      	ldr	r5, [pc, #52]	; (800ebcc <__libc_init_array+0x38>)
 800eb98:	4c0d      	ldr	r4, [pc, #52]	; (800ebd0 <__libc_init_array+0x3c>)
 800eb9a:	1b64      	subs	r4, r4, r5
 800eb9c:	10a4      	asrs	r4, r4, #2
 800eb9e:	2600      	movs	r6, #0
 800eba0:	42a6      	cmp	r6, r4
 800eba2:	d109      	bne.n	800ebb8 <__libc_init_array+0x24>
 800eba4:	4d0b      	ldr	r5, [pc, #44]	; (800ebd4 <__libc_init_array+0x40>)
 800eba6:	4c0c      	ldr	r4, [pc, #48]	; (800ebd8 <__libc_init_array+0x44>)
 800eba8:	f002 f83c 	bl	8010c24 <_init>
 800ebac:	1b64      	subs	r4, r4, r5
 800ebae:	10a4      	asrs	r4, r4, #2
 800ebb0:	2600      	movs	r6, #0
 800ebb2:	42a6      	cmp	r6, r4
 800ebb4:	d105      	bne.n	800ebc2 <__libc_init_array+0x2e>
 800ebb6:	bd70      	pop	{r4, r5, r6, pc}
 800ebb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebbc:	4798      	blx	r3
 800ebbe:	3601      	adds	r6, #1
 800ebc0:	e7ee      	b.n	800eba0 <__libc_init_array+0xc>
 800ebc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebc6:	4798      	blx	r3
 800ebc8:	3601      	adds	r6, #1
 800ebca:	e7f2      	b.n	800ebb2 <__libc_init_array+0x1e>
 800ebcc:	08011470 	.word	0x08011470
 800ebd0:	08011470 	.word	0x08011470
 800ebd4:	08011470 	.word	0x08011470
 800ebd8:	08011474 	.word	0x08011474

0800ebdc <__retarget_lock_init_recursive>:
 800ebdc:	4770      	bx	lr

0800ebde <__retarget_lock_acquire_recursive>:
 800ebde:	4770      	bx	lr

0800ebe0 <__retarget_lock_release_recursive>:
 800ebe0:	4770      	bx	lr

0800ebe2 <memcpy>:
 800ebe2:	440a      	add	r2, r1
 800ebe4:	4291      	cmp	r1, r2
 800ebe6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebea:	d100      	bne.n	800ebee <memcpy+0xc>
 800ebec:	4770      	bx	lr
 800ebee:	b510      	push	{r4, lr}
 800ebf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebf8:	4291      	cmp	r1, r2
 800ebfa:	d1f9      	bne.n	800ebf0 <memcpy+0xe>
 800ebfc:	bd10      	pop	{r4, pc}
	...

0800ec00 <nan>:
 800ec00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ec08 <nan+0x8>
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	00000000 	.word	0x00000000
 800ec0c:	7ff80000 	.word	0x7ff80000

0800ec10 <__assert_func>:
 800ec10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec12:	4614      	mov	r4, r2
 800ec14:	461a      	mov	r2, r3
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <__assert_func+0x2c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	68d8      	ldr	r0, [r3, #12]
 800ec1e:	b14c      	cbz	r4, 800ec34 <__assert_func+0x24>
 800ec20:	4b07      	ldr	r3, [pc, #28]	; (800ec40 <__assert_func+0x30>)
 800ec22:	9100      	str	r1, [sp, #0]
 800ec24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec28:	4906      	ldr	r1, [pc, #24]	; (800ec44 <__assert_func+0x34>)
 800ec2a:	462b      	mov	r3, r5
 800ec2c:	f001 fe0c 	bl	8010848 <fiprintf>
 800ec30:	f001 fedc 	bl	80109ec <abort>
 800ec34:	4b04      	ldr	r3, [pc, #16]	; (800ec48 <__assert_func+0x38>)
 800ec36:	461c      	mov	r4, r3
 800ec38:	e7f3      	b.n	800ec22 <__assert_func+0x12>
 800ec3a:	bf00      	nop
 800ec3c:	20000200 	.word	0x20000200
 800ec40:	08011232 	.word	0x08011232
 800ec44:	0801123f 	.word	0x0801123f
 800ec48:	0801126d 	.word	0x0801126d

0800ec4c <_free_r>:
 800ec4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec4e:	2900      	cmp	r1, #0
 800ec50:	d044      	beq.n	800ecdc <_free_r+0x90>
 800ec52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec56:	9001      	str	r0, [sp, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec5e:	bfb8      	it	lt
 800ec60:	18e4      	addlt	r4, r4, r3
 800ec62:	f000 fc51 	bl	800f508 <__malloc_lock>
 800ec66:	4a1e      	ldr	r2, [pc, #120]	; (800ece0 <_free_r+0x94>)
 800ec68:	9801      	ldr	r0, [sp, #4]
 800ec6a:	6813      	ldr	r3, [r2, #0]
 800ec6c:	b933      	cbnz	r3, 800ec7c <_free_r+0x30>
 800ec6e:	6063      	str	r3, [r4, #4]
 800ec70:	6014      	str	r4, [r2, #0]
 800ec72:	b003      	add	sp, #12
 800ec74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec78:	f000 bc4c 	b.w	800f514 <__malloc_unlock>
 800ec7c:	42a3      	cmp	r3, r4
 800ec7e:	d908      	bls.n	800ec92 <_free_r+0x46>
 800ec80:	6825      	ldr	r5, [r4, #0]
 800ec82:	1961      	adds	r1, r4, r5
 800ec84:	428b      	cmp	r3, r1
 800ec86:	bf01      	itttt	eq
 800ec88:	6819      	ldreq	r1, [r3, #0]
 800ec8a:	685b      	ldreq	r3, [r3, #4]
 800ec8c:	1949      	addeq	r1, r1, r5
 800ec8e:	6021      	streq	r1, [r4, #0]
 800ec90:	e7ed      	b.n	800ec6e <_free_r+0x22>
 800ec92:	461a      	mov	r2, r3
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	b10b      	cbz	r3, 800ec9c <_free_r+0x50>
 800ec98:	42a3      	cmp	r3, r4
 800ec9a:	d9fa      	bls.n	800ec92 <_free_r+0x46>
 800ec9c:	6811      	ldr	r1, [r2, #0]
 800ec9e:	1855      	adds	r5, r2, r1
 800eca0:	42a5      	cmp	r5, r4
 800eca2:	d10b      	bne.n	800ecbc <_free_r+0x70>
 800eca4:	6824      	ldr	r4, [r4, #0]
 800eca6:	4421      	add	r1, r4
 800eca8:	1854      	adds	r4, r2, r1
 800ecaa:	42a3      	cmp	r3, r4
 800ecac:	6011      	str	r1, [r2, #0]
 800ecae:	d1e0      	bne.n	800ec72 <_free_r+0x26>
 800ecb0:	681c      	ldr	r4, [r3, #0]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	6053      	str	r3, [r2, #4]
 800ecb6:	440c      	add	r4, r1
 800ecb8:	6014      	str	r4, [r2, #0]
 800ecba:	e7da      	b.n	800ec72 <_free_r+0x26>
 800ecbc:	d902      	bls.n	800ecc4 <_free_r+0x78>
 800ecbe:	230c      	movs	r3, #12
 800ecc0:	6003      	str	r3, [r0, #0]
 800ecc2:	e7d6      	b.n	800ec72 <_free_r+0x26>
 800ecc4:	6825      	ldr	r5, [r4, #0]
 800ecc6:	1961      	adds	r1, r4, r5
 800ecc8:	428b      	cmp	r3, r1
 800ecca:	bf04      	itt	eq
 800eccc:	6819      	ldreq	r1, [r3, #0]
 800ecce:	685b      	ldreq	r3, [r3, #4]
 800ecd0:	6063      	str	r3, [r4, #4]
 800ecd2:	bf04      	itt	eq
 800ecd4:	1949      	addeq	r1, r1, r5
 800ecd6:	6021      	streq	r1, [r4, #0]
 800ecd8:	6054      	str	r4, [r2, #4]
 800ecda:	e7ca      	b.n	800ec72 <_free_r+0x26>
 800ecdc:	b003      	add	sp, #12
 800ecde:	bd30      	pop	{r4, r5, pc}
 800ece0:	20002bec 	.word	0x20002bec

0800ece4 <rshift>:
 800ece4:	6903      	ldr	r3, [r0, #16]
 800ece6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ecea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ecf2:	f100 0414 	add.w	r4, r0, #20
 800ecf6:	dd45      	ble.n	800ed84 <rshift+0xa0>
 800ecf8:	f011 011f 	ands.w	r1, r1, #31
 800ecfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed04:	d10c      	bne.n	800ed20 <rshift+0x3c>
 800ed06:	f100 0710 	add.w	r7, r0, #16
 800ed0a:	4629      	mov	r1, r5
 800ed0c:	42b1      	cmp	r1, r6
 800ed0e:	d334      	bcc.n	800ed7a <rshift+0x96>
 800ed10:	1a9b      	subs	r3, r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	1eea      	subs	r2, r5, #3
 800ed16:	4296      	cmp	r6, r2
 800ed18:	bf38      	it	cc
 800ed1a:	2300      	movcc	r3, #0
 800ed1c:	4423      	add	r3, r4
 800ed1e:	e015      	b.n	800ed4c <rshift+0x68>
 800ed20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed24:	f1c1 0820 	rsb	r8, r1, #32
 800ed28:	40cf      	lsrs	r7, r1
 800ed2a:	f105 0e04 	add.w	lr, r5, #4
 800ed2e:	46a1      	mov	r9, r4
 800ed30:	4576      	cmp	r6, lr
 800ed32:	46f4      	mov	ip, lr
 800ed34:	d815      	bhi.n	800ed62 <rshift+0x7e>
 800ed36:	1a9a      	subs	r2, r3, r2
 800ed38:	0092      	lsls	r2, r2, #2
 800ed3a:	3a04      	subs	r2, #4
 800ed3c:	3501      	adds	r5, #1
 800ed3e:	42ae      	cmp	r6, r5
 800ed40:	bf38      	it	cc
 800ed42:	2200      	movcc	r2, #0
 800ed44:	18a3      	adds	r3, r4, r2
 800ed46:	50a7      	str	r7, [r4, r2]
 800ed48:	b107      	cbz	r7, 800ed4c <rshift+0x68>
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	1b1a      	subs	r2, r3, r4
 800ed4e:	42a3      	cmp	r3, r4
 800ed50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed54:	bf08      	it	eq
 800ed56:	2300      	moveq	r3, #0
 800ed58:	6102      	str	r2, [r0, #16]
 800ed5a:	bf08      	it	eq
 800ed5c:	6143      	streq	r3, [r0, #20]
 800ed5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed62:	f8dc c000 	ldr.w	ip, [ip]
 800ed66:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed6a:	ea4c 0707 	orr.w	r7, ip, r7
 800ed6e:	f849 7b04 	str.w	r7, [r9], #4
 800ed72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed76:	40cf      	lsrs	r7, r1
 800ed78:	e7da      	b.n	800ed30 <rshift+0x4c>
 800ed7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed82:	e7c3      	b.n	800ed0c <rshift+0x28>
 800ed84:	4623      	mov	r3, r4
 800ed86:	e7e1      	b.n	800ed4c <rshift+0x68>

0800ed88 <__hexdig_fun>:
 800ed88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ed8c:	2b09      	cmp	r3, #9
 800ed8e:	d802      	bhi.n	800ed96 <__hexdig_fun+0xe>
 800ed90:	3820      	subs	r0, #32
 800ed92:	b2c0      	uxtb	r0, r0
 800ed94:	4770      	bx	lr
 800ed96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ed9a:	2b05      	cmp	r3, #5
 800ed9c:	d801      	bhi.n	800eda2 <__hexdig_fun+0x1a>
 800ed9e:	3847      	subs	r0, #71	; 0x47
 800eda0:	e7f7      	b.n	800ed92 <__hexdig_fun+0xa>
 800eda2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eda6:	2b05      	cmp	r3, #5
 800eda8:	d801      	bhi.n	800edae <__hexdig_fun+0x26>
 800edaa:	3827      	subs	r0, #39	; 0x27
 800edac:	e7f1      	b.n	800ed92 <__hexdig_fun+0xa>
 800edae:	2000      	movs	r0, #0
 800edb0:	4770      	bx	lr
	...

0800edb4 <__gethex>:
 800edb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb8:	4617      	mov	r7, r2
 800edba:	680a      	ldr	r2, [r1, #0]
 800edbc:	b085      	sub	sp, #20
 800edbe:	f102 0b02 	add.w	fp, r2, #2
 800edc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800edc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800edca:	4681      	mov	r9, r0
 800edcc:	468a      	mov	sl, r1
 800edce:	9302      	str	r3, [sp, #8]
 800edd0:	32fe      	adds	r2, #254	; 0xfe
 800edd2:	eb02 030b 	add.w	r3, r2, fp
 800edd6:	46d8      	mov	r8, fp
 800edd8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800eddc:	9301      	str	r3, [sp, #4]
 800edde:	2830      	cmp	r0, #48	; 0x30
 800ede0:	d0f7      	beq.n	800edd2 <__gethex+0x1e>
 800ede2:	f7ff ffd1 	bl	800ed88 <__hexdig_fun>
 800ede6:	4604      	mov	r4, r0
 800ede8:	2800      	cmp	r0, #0
 800edea:	d138      	bne.n	800ee5e <__gethex+0xaa>
 800edec:	49a7      	ldr	r1, [pc, #668]	; (800f08c <__gethex+0x2d8>)
 800edee:	2201      	movs	r2, #1
 800edf0:	4640      	mov	r0, r8
 800edf2:	f7ff fe01 	bl	800e9f8 <strncmp>
 800edf6:	4606      	mov	r6, r0
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d169      	bne.n	800eed0 <__gethex+0x11c>
 800edfc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ee00:	465d      	mov	r5, fp
 800ee02:	f7ff ffc1 	bl	800ed88 <__hexdig_fun>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d064      	beq.n	800eed4 <__gethex+0x120>
 800ee0a:	465a      	mov	r2, fp
 800ee0c:	7810      	ldrb	r0, [r2, #0]
 800ee0e:	2830      	cmp	r0, #48	; 0x30
 800ee10:	4690      	mov	r8, r2
 800ee12:	f102 0201 	add.w	r2, r2, #1
 800ee16:	d0f9      	beq.n	800ee0c <__gethex+0x58>
 800ee18:	f7ff ffb6 	bl	800ed88 <__hexdig_fun>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	fab0 f480 	clz	r4, r0
 800ee22:	0964      	lsrs	r4, r4, #5
 800ee24:	465e      	mov	r6, fp
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	4642      	mov	r2, r8
 800ee2a:	4615      	mov	r5, r2
 800ee2c:	3201      	adds	r2, #1
 800ee2e:	7828      	ldrb	r0, [r5, #0]
 800ee30:	f7ff ffaa 	bl	800ed88 <__hexdig_fun>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d1f8      	bne.n	800ee2a <__gethex+0x76>
 800ee38:	4994      	ldr	r1, [pc, #592]	; (800f08c <__gethex+0x2d8>)
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f7ff fddb 	bl	800e9f8 <strncmp>
 800ee42:	b978      	cbnz	r0, 800ee64 <__gethex+0xb0>
 800ee44:	b946      	cbnz	r6, 800ee58 <__gethex+0xa4>
 800ee46:	1c6e      	adds	r6, r5, #1
 800ee48:	4632      	mov	r2, r6
 800ee4a:	4615      	mov	r5, r2
 800ee4c:	3201      	adds	r2, #1
 800ee4e:	7828      	ldrb	r0, [r5, #0]
 800ee50:	f7ff ff9a 	bl	800ed88 <__hexdig_fun>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d1f8      	bne.n	800ee4a <__gethex+0x96>
 800ee58:	1b73      	subs	r3, r6, r5
 800ee5a:	009e      	lsls	r6, r3, #2
 800ee5c:	e004      	b.n	800ee68 <__gethex+0xb4>
 800ee5e:	2400      	movs	r4, #0
 800ee60:	4626      	mov	r6, r4
 800ee62:	e7e1      	b.n	800ee28 <__gethex+0x74>
 800ee64:	2e00      	cmp	r6, #0
 800ee66:	d1f7      	bne.n	800ee58 <__gethex+0xa4>
 800ee68:	782b      	ldrb	r3, [r5, #0]
 800ee6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ee6e:	2b50      	cmp	r3, #80	; 0x50
 800ee70:	d13d      	bne.n	800eeee <__gethex+0x13a>
 800ee72:	786b      	ldrb	r3, [r5, #1]
 800ee74:	2b2b      	cmp	r3, #43	; 0x2b
 800ee76:	d02f      	beq.n	800eed8 <__gethex+0x124>
 800ee78:	2b2d      	cmp	r3, #45	; 0x2d
 800ee7a:	d031      	beq.n	800eee0 <__gethex+0x12c>
 800ee7c:	1c69      	adds	r1, r5, #1
 800ee7e:	f04f 0b00 	mov.w	fp, #0
 800ee82:	7808      	ldrb	r0, [r1, #0]
 800ee84:	f7ff ff80 	bl	800ed88 <__hexdig_fun>
 800ee88:	1e42      	subs	r2, r0, #1
 800ee8a:	b2d2      	uxtb	r2, r2
 800ee8c:	2a18      	cmp	r2, #24
 800ee8e:	d82e      	bhi.n	800eeee <__gethex+0x13a>
 800ee90:	f1a0 0210 	sub.w	r2, r0, #16
 800ee94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee98:	f7ff ff76 	bl	800ed88 <__hexdig_fun>
 800ee9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800eea0:	fa5f fc8c 	uxtb.w	ip, ip
 800eea4:	f1bc 0f18 	cmp.w	ip, #24
 800eea8:	d91d      	bls.n	800eee6 <__gethex+0x132>
 800eeaa:	f1bb 0f00 	cmp.w	fp, #0
 800eeae:	d000      	beq.n	800eeb2 <__gethex+0xfe>
 800eeb0:	4252      	negs	r2, r2
 800eeb2:	4416      	add	r6, r2
 800eeb4:	f8ca 1000 	str.w	r1, [sl]
 800eeb8:	b1dc      	cbz	r4, 800eef2 <__gethex+0x13e>
 800eeba:	9b01      	ldr	r3, [sp, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	bf14      	ite	ne
 800eec0:	f04f 0800 	movne.w	r8, #0
 800eec4:	f04f 0806 	moveq.w	r8, #6
 800eec8:	4640      	mov	r0, r8
 800eeca:	b005      	add	sp, #20
 800eecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed0:	4645      	mov	r5, r8
 800eed2:	4626      	mov	r6, r4
 800eed4:	2401      	movs	r4, #1
 800eed6:	e7c7      	b.n	800ee68 <__gethex+0xb4>
 800eed8:	f04f 0b00 	mov.w	fp, #0
 800eedc:	1ca9      	adds	r1, r5, #2
 800eede:	e7d0      	b.n	800ee82 <__gethex+0xce>
 800eee0:	f04f 0b01 	mov.w	fp, #1
 800eee4:	e7fa      	b.n	800eedc <__gethex+0x128>
 800eee6:	230a      	movs	r3, #10
 800eee8:	fb03 0002 	mla	r0, r3, r2, r0
 800eeec:	e7d0      	b.n	800ee90 <__gethex+0xdc>
 800eeee:	4629      	mov	r1, r5
 800eef0:	e7e0      	b.n	800eeb4 <__gethex+0x100>
 800eef2:	eba5 0308 	sub.w	r3, r5, r8
 800eef6:	3b01      	subs	r3, #1
 800eef8:	4621      	mov	r1, r4
 800eefa:	2b07      	cmp	r3, #7
 800eefc:	dc0a      	bgt.n	800ef14 <__gethex+0x160>
 800eefe:	4648      	mov	r0, r9
 800ef00:	f000 fb0e 	bl	800f520 <_Balloc>
 800ef04:	4604      	mov	r4, r0
 800ef06:	b940      	cbnz	r0, 800ef1a <__gethex+0x166>
 800ef08:	4b61      	ldr	r3, [pc, #388]	; (800f090 <__gethex+0x2dc>)
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	21e4      	movs	r1, #228	; 0xe4
 800ef0e:	4861      	ldr	r0, [pc, #388]	; (800f094 <__gethex+0x2e0>)
 800ef10:	f7ff fe7e 	bl	800ec10 <__assert_func>
 800ef14:	3101      	adds	r1, #1
 800ef16:	105b      	asrs	r3, r3, #1
 800ef18:	e7ef      	b.n	800eefa <__gethex+0x146>
 800ef1a:	f100 0a14 	add.w	sl, r0, #20
 800ef1e:	2300      	movs	r3, #0
 800ef20:	495a      	ldr	r1, [pc, #360]	; (800f08c <__gethex+0x2d8>)
 800ef22:	f8cd a004 	str.w	sl, [sp, #4]
 800ef26:	469b      	mov	fp, r3
 800ef28:	45a8      	cmp	r8, r5
 800ef2a:	d342      	bcc.n	800efb2 <__gethex+0x1fe>
 800ef2c:	9801      	ldr	r0, [sp, #4]
 800ef2e:	f840 bb04 	str.w	fp, [r0], #4
 800ef32:	eba0 000a 	sub.w	r0, r0, sl
 800ef36:	1080      	asrs	r0, r0, #2
 800ef38:	6120      	str	r0, [r4, #16]
 800ef3a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ef3e:	4658      	mov	r0, fp
 800ef40:	f000 fbe0 	bl	800f704 <__hi0bits>
 800ef44:	683d      	ldr	r5, [r7, #0]
 800ef46:	eba8 0000 	sub.w	r0, r8, r0
 800ef4a:	42a8      	cmp	r0, r5
 800ef4c:	dd59      	ble.n	800f002 <__gethex+0x24e>
 800ef4e:	eba0 0805 	sub.w	r8, r0, r5
 800ef52:	4641      	mov	r1, r8
 800ef54:	4620      	mov	r0, r4
 800ef56:	f000 ff6f 	bl	800fe38 <__any_on>
 800ef5a:	4683      	mov	fp, r0
 800ef5c:	b1b8      	cbz	r0, 800ef8e <__gethex+0x1da>
 800ef5e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ef62:	1159      	asrs	r1, r3, #5
 800ef64:	f003 021f 	and.w	r2, r3, #31
 800ef68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ef6c:	f04f 0b01 	mov.w	fp, #1
 800ef70:	fa0b f202 	lsl.w	r2, fp, r2
 800ef74:	420a      	tst	r2, r1
 800ef76:	d00a      	beq.n	800ef8e <__gethex+0x1da>
 800ef78:	455b      	cmp	r3, fp
 800ef7a:	dd06      	ble.n	800ef8a <__gethex+0x1d6>
 800ef7c:	f1a8 0102 	sub.w	r1, r8, #2
 800ef80:	4620      	mov	r0, r4
 800ef82:	f000 ff59 	bl	800fe38 <__any_on>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d138      	bne.n	800effc <__gethex+0x248>
 800ef8a:	f04f 0b02 	mov.w	fp, #2
 800ef8e:	4641      	mov	r1, r8
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7ff fea7 	bl	800ece4 <rshift>
 800ef96:	4446      	add	r6, r8
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	42b3      	cmp	r3, r6
 800ef9c:	da41      	bge.n	800f022 <__gethex+0x26e>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4648      	mov	r0, r9
 800efa2:	f000 fafd 	bl	800f5a0 <_Bfree>
 800efa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efa8:	2300      	movs	r3, #0
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800efb0:	e78a      	b.n	800eec8 <__gethex+0x114>
 800efb2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800efb6:	2a2e      	cmp	r2, #46	; 0x2e
 800efb8:	d014      	beq.n	800efe4 <__gethex+0x230>
 800efba:	2b20      	cmp	r3, #32
 800efbc:	d106      	bne.n	800efcc <__gethex+0x218>
 800efbe:	9b01      	ldr	r3, [sp, #4]
 800efc0:	f843 bb04 	str.w	fp, [r3], #4
 800efc4:	f04f 0b00 	mov.w	fp, #0
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	465b      	mov	r3, fp
 800efcc:	7828      	ldrb	r0, [r5, #0]
 800efce:	9303      	str	r3, [sp, #12]
 800efd0:	f7ff feda 	bl	800ed88 <__hexdig_fun>
 800efd4:	9b03      	ldr	r3, [sp, #12]
 800efd6:	f000 000f 	and.w	r0, r0, #15
 800efda:	4098      	lsls	r0, r3
 800efdc:	ea4b 0b00 	orr.w	fp, fp, r0
 800efe0:	3304      	adds	r3, #4
 800efe2:	e7a1      	b.n	800ef28 <__gethex+0x174>
 800efe4:	45a8      	cmp	r8, r5
 800efe6:	d8e8      	bhi.n	800efba <__gethex+0x206>
 800efe8:	2201      	movs	r2, #1
 800efea:	4628      	mov	r0, r5
 800efec:	9303      	str	r3, [sp, #12]
 800efee:	f7ff fd03 	bl	800e9f8 <strncmp>
 800eff2:	4926      	ldr	r1, [pc, #152]	; (800f08c <__gethex+0x2d8>)
 800eff4:	9b03      	ldr	r3, [sp, #12]
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d1df      	bne.n	800efba <__gethex+0x206>
 800effa:	e795      	b.n	800ef28 <__gethex+0x174>
 800effc:	f04f 0b03 	mov.w	fp, #3
 800f000:	e7c5      	b.n	800ef8e <__gethex+0x1da>
 800f002:	da0b      	bge.n	800f01c <__gethex+0x268>
 800f004:	eba5 0800 	sub.w	r8, r5, r0
 800f008:	4621      	mov	r1, r4
 800f00a:	4642      	mov	r2, r8
 800f00c:	4648      	mov	r0, r9
 800f00e:	f000 fce1 	bl	800f9d4 <__lshift>
 800f012:	eba6 0608 	sub.w	r6, r6, r8
 800f016:	4604      	mov	r4, r0
 800f018:	f100 0a14 	add.w	sl, r0, #20
 800f01c:	f04f 0b00 	mov.w	fp, #0
 800f020:	e7ba      	b.n	800ef98 <__gethex+0x1e4>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	42b3      	cmp	r3, r6
 800f026:	dd73      	ble.n	800f110 <__gethex+0x35c>
 800f028:	1b9e      	subs	r6, r3, r6
 800f02a:	42b5      	cmp	r5, r6
 800f02c:	dc34      	bgt.n	800f098 <__gethex+0x2e4>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b02      	cmp	r3, #2
 800f032:	d023      	beq.n	800f07c <__gethex+0x2c8>
 800f034:	2b03      	cmp	r3, #3
 800f036:	d025      	beq.n	800f084 <__gethex+0x2d0>
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d115      	bne.n	800f068 <__gethex+0x2b4>
 800f03c:	42b5      	cmp	r5, r6
 800f03e:	d113      	bne.n	800f068 <__gethex+0x2b4>
 800f040:	2d01      	cmp	r5, #1
 800f042:	d10b      	bne.n	800f05c <__gethex+0x2a8>
 800f044:	9a02      	ldr	r2, [sp, #8]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6013      	str	r3, [r2, #0]
 800f04a:	2301      	movs	r3, #1
 800f04c:	6123      	str	r3, [r4, #16]
 800f04e:	f8ca 3000 	str.w	r3, [sl]
 800f052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f054:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f058:	601c      	str	r4, [r3, #0]
 800f05a:	e735      	b.n	800eec8 <__gethex+0x114>
 800f05c:	1e69      	subs	r1, r5, #1
 800f05e:	4620      	mov	r0, r4
 800f060:	f000 feea 	bl	800fe38 <__any_on>
 800f064:	2800      	cmp	r0, #0
 800f066:	d1ed      	bne.n	800f044 <__gethex+0x290>
 800f068:	4621      	mov	r1, r4
 800f06a:	4648      	mov	r0, r9
 800f06c:	f000 fa98 	bl	800f5a0 <_Bfree>
 800f070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f072:	2300      	movs	r3, #0
 800f074:	6013      	str	r3, [r2, #0]
 800f076:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f07a:	e725      	b.n	800eec8 <__gethex+0x114>
 800f07c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1f2      	bne.n	800f068 <__gethex+0x2b4>
 800f082:	e7df      	b.n	800f044 <__gethex+0x290>
 800f084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1dc      	bne.n	800f044 <__gethex+0x290>
 800f08a:	e7ed      	b.n	800f068 <__gethex+0x2b4>
 800f08c:	08011054 	.word	0x08011054
 800f090:	0801126e 	.word	0x0801126e
 800f094:	0801127f 	.word	0x0801127f
 800f098:	f106 38ff 	add.w	r8, r6, #4294967295
 800f09c:	f1bb 0f00 	cmp.w	fp, #0
 800f0a0:	d133      	bne.n	800f10a <__gethex+0x356>
 800f0a2:	f1b8 0f00 	cmp.w	r8, #0
 800f0a6:	d004      	beq.n	800f0b2 <__gethex+0x2fe>
 800f0a8:	4641      	mov	r1, r8
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 fec4 	bl	800fe38 <__any_on>
 800f0b0:	4683      	mov	fp, r0
 800f0b2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f0bc:	f008 081f 	and.w	r8, r8, #31
 800f0c0:	fa03 f308 	lsl.w	r3, r3, r8
 800f0c4:	4213      	tst	r3, r2
 800f0c6:	4631      	mov	r1, r6
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	bf18      	it	ne
 800f0cc:	f04b 0b02 	orrne.w	fp, fp, #2
 800f0d0:	1bad      	subs	r5, r5, r6
 800f0d2:	f7ff fe07 	bl	800ece4 <rshift>
 800f0d6:	687e      	ldr	r6, [r7, #4]
 800f0d8:	f04f 0802 	mov.w	r8, #2
 800f0dc:	f1bb 0f00 	cmp.w	fp, #0
 800f0e0:	d04a      	beq.n	800f178 <__gethex+0x3c4>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d016      	beq.n	800f116 <__gethex+0x362>
 800f0e8:	2b03      	cmp	r3, #3
 800f0ea:	d018      	beq.n	800f11e <__gethex+0x36a>
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d109      	bne.n	800f104 <__gethex+0x350>
 800f0f0:	f01b 0f02 	tst.w	fp, #2
 800f0f4:	d006      	beq.n	800f104 <__gethex+0x350>
 800f0f6:	f8da 3000 	ldr.w	r3, [sl]
 800f0fa:	ea4b 0b03 	orr.w	fp, fp, r3
 800f0fe:	f01b 0f01 	tst.w	fp, #1
 800f102:	d10f      	bne.n	800f124 <__gethex+0x370>
 800f104:	f048 0810 	orr.w	r8, r8, #16
 800f108:	e036      	b.n	800f178 <__gethex+0x3c4>
 800f10a:	f04f 0b01 	mov.w	fp, #1
 800f10e:	e7d0      	b.n	800f0b2 <__gethex+0x2fe>
 800f110:	f04f 0801 	mov.w	r8, #1
 800f114:	e7e2      	b.n	800f0dc <__gethex+0x328>
 800f116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f118:	f1c3 0301 	rsb	r3, r3, #1
 800f11c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f11e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f120:	2b00      	cmp	r3, #0
 800f122:	d0ef      	beq.n	800f104 <__gethex+0x350>
 800f124:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f128:	f104 0214 	add.w	r2, r4, #20
 800f12c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f130:	9301      	str	r3, [sp, #4]
 800f132:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f136:	2300      	movs	r3, #0
 800f138:	4694      	mov	ip, r2
 800f13a:	f852 1b04 	ldr.w	r1, [r2], #4
 800f13e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f142:	d01e      	beq.n	800f182 <__gethex+0x3ce>
 800f144:	3101      	adds	r1, #1
 800f146:	f8cc 1000 	str.w	r1, [ip]
 800f14a:	f1b8 0f02 	cmp.w	r8, #2
 800f14e:	f104 0214 	add.w	r2, r4, #20
 800f152:	d13d      	bne.n	800f1d0 <__gethex+0x41c>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	3b01      	subs	r3, #1
 800f158:	42ab      	cmp	r3, r5
 800f15a:	d10b      	bne.n	800f174 <__gethex+0x3c0>
 800f15c:	1169      	asrs	r1, r5, #5
 800f15e:	2301      	movs	r3, #1
 800f160:	f005 051f 	and.w	r5, r5, #31
 800f164:	fa03 f505 	lsl.w	r5, r3, r5
 800f168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f16c:	421d      	tst	r5, r3
 800f16e:	bf18      	it	ne
 800f170:	f04f 0801 	movne.w	r8, #1
 800f174:	f048 0820 	orr.w	r8, r8, #32
 800f178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f17a:	601c      	str	r4, [r3, #0]
 800f17c:	9b02      	ldr	r3, [sp, #8]
 800f17e:	601e      	str	r6, [r3, #0]
 800f180:	e6a2      	b.n	800eec8 <__gethex+0x114>
 800f182:	4290      	cmp	r0, r2
 800f184:	f842 3c04 	str.w	r3, [r2, #-4]
 800f188:	d8d6      	bhi.n	800f138 <__gethex+0x384>
 800f18a:	68a2      	ldr	r2, [r4, #8]
 800f18c:	4593      	cmp	fp, r2
 800f18e:	db17      	blt.n	800f1c0 <__gethex+0x40c>
 800f190:	6861      	ldr	r1, [r4, #4]
 800f192:	4648      	mov	r0, r9
 800f194:	3101      	adds	r1, #1
 800f196:	f000 f9c3 	bl	800f520 <_Balloc>
 800f19a:	4682      	mov	sl, r0
 800f19c:	b918      	cbnz	r0, 800f1a6 <__gethex+0x3f2>
 800f19e:	4b1b      	ldr	r3, [pc, #108]	; (800f20c <__gethex+0x458>)
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	2184      	movs	r1, #132	; 0x84
 800f1a4:	e6b3      	b.n	800ef0e <__gethex+0x15a>
 800f1a6:	6922      	ldr	r2, [r4, #16]
 800f1a8:	3202      	adds	r2, #2
 800f1aa:	f104 010c 	add.w	r1, r4, #12
 800f1ae:	0092      	lsls	r2, r2, #2
 800f1b0:	300c      	adds	r0, #12
 800f1b2:	f7ff fd16 	bl	800ebe2 <memcpy>
 800f1b6:	4621      	mov	r1, r4
 800f1b8:	4648      	mov	r0, r9
 800f1ba:	f000 f9f1 	bl	800f5a0 <_Bfree>
 800f1be:	4654      	mov	r4, sl
 800f1c0:	6922      	ldr	r2, [r4, #16]
 800f1c2:	1c51      	adds	r1, r2, #1
 800f1c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f1c8:	6121      	str	r1, [r4, #16]
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	6151      	str	r1, [r2, #20]
 800f1ce:	e7bc      	b.n	800f14a <__gethex+0x396>
 800f1d0:	6921      	ldr	r1, [r4, #16]
 800f1d2:	4559      	cmp	r1, fp
 800f1d4:	dd0b      	ble.n	800f1ee <__gethex+0x43a>
 800f1d6:	2101      	movs	r1, #1
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f7ff fd83 	bl	800ece4 <rshift>
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	3601      	adds	r6, #1
 800f1e2:	42b3      	cmp	r3, r6
 800f1e4:	f6ff aedb 	blt.w	800ef9e <__gethex+0x1ea>
 800f1e8:	f04f 0801 	mov.w	r8, #1
 800f1ec:	e7c2      	b.n	800f174 <__gethex+0x3c0>
 800f1ee:	f015 051f 	ands.w	r5, r5, #31
 800f1f2:	d0f9      	beq.n	800f1e8 <__gethex+0x434>
 800f1f4:	9b01      	ldr	r3, [sp, #4]
 800f1f6:	441a      	add	r2, r3
 800f1f8:	f1c5 0520 	rsb	r5, r5, #32
 800f1fc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f200:	f000 fa80 	bl	800f704 <__hi0bits>
 800f204:	42a8      	cmp	r0, r5
 800f206:	dbe6      	blt.n	800f1d6 <__gethex+0x422>
 800f208:	e7ee      	b.n	800f1e8 <__gethex+0x434>
 800f20a:	bf00      	nop
 800f20c:	0801126e 	.word	0x0801126e

0800f210 <L_shift>:
 800f210:	f1c2 0208 	rsb	r2, r2, #8
 800f214:	0092      	lsls	r2, r2, #2
 800f216:	b570      	push	{r4, r5, r6, lr}
 800f218:	f1c2 0620 	rsb	r6, r2, #32
 800f21c:	6843      	ldr	r3, [r0, #4]
 800f21e:	6804      	ldr	r4, [r0, #0]
 800f220:	fa03 f506 	lsl.w	r5, r3, r6
 800f224:	432c      	orrs	r4, r5
 800f226:	40d3      	lsrs	r3, r2
 800f228:	6004      	str	r4, [r0, #0]
 800f22a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f22e:	4288      	cmp	r0, r1
 800f230:	d3f4      	bcc.n	800f21c <L_shift+0xc>
 800f232:	bd70      	pop	{r4, r5, r6, pc}

0800f234 <__match>:
 800f234:	b530      	push	{r4, r5, lr}
 800f236:	6803      	ldr	r3, [r0, #0]
 800f238:	3301      	adds	r3, #1
 800f23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f23e:	b914      	cbnz	r4, 800f246 <__match+0x12>
 800f240:	6003      	str	r3, [r0, #0]
 800f242:	2001      	movs	r0, #1
 800f244:	bd30      	pop	{r4, r5, pc}
 800f246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f24a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f24e:	2d19      	cmp	r5, #25
 800f250:	bf98      	it	ls
 800f252:	3220      	addls	r2, #32
 800f254:	42a2      	cmp	r2, r4
 800f256:	d0f0      	beq.n	800f23a <__match+0x6>
 800f258:	2000      	movs	r0, #0
 800f25a:	e7f3      	b.n	800f244 <__match+0x10>

0800f25c <__hexnan>:
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	680b      	ldr	r3, [r1, #0]
 800f262:	6801      	ldr	r1, [r0, #0]
 800f264:	115e      	asrs	r6, r3, #5
 800f266:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f26a:	f013 031f 	ands.w	r3, r3, #31
 800f26e:	b087      	sub	sp, #28
 800f270:	bf18      	it	ne
 800f272:	3604      	addne	r6, #4
 800f274:	2500      	movs	r5, #0
 800f276:	1f37      	subs	r7, r6, #4
 800f278:	4682      	mov	sl, r0
 800f27a:	4690      	mov	r8, r2
 800f27c:	9301      	str	r3, [sp, #4]
 800f27e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f282:	46b9      	mov	r9, r7
 800f284:	463c      	mov	r4, r7
 800f286:	9502      	str	r5, [sp, #8]
 800f288:	46ab      	mov	fp, r5
 800f28a:	784a      	ldrb	r2, [r1, #1]
 800f28c:	1c4b      	adds	r3, r1, #1
 800f28e:	9303      	str	r3, [sp, #12]
 800f290:	b342      	cbz	r2, 800f2e4 <__hexnan+0x88>
 800f292:	4610      	mov	r0, r2
 800f294:	9105      	str	r1, [sp, #20]
 800f296:	9204      	str	r2, [sp, #16]
 800f298:	f7ff fd76 	bl	800ed88 <__hexdig_fun>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d14f      	bne.n	800f340 <__hexnan+0xe4>
 800f2a0:	9a04      	ldr	r2, [sp, #16]
 800f2a2:	9905      	ldr	r1, [sp, #20]
 800f2a4:	2a20      	cmp	r2, #32
 800f2a6:	d818      	bhi.n	800f2da <__hexnan+0x7e>
 800f2a8:	9b02      	ldr	r3, [sp, #8]
 800f2aa:	459b      	cmp	fp, r3
 800f2ac:	dd13      	ble.n	800f2d6 <__hexnan+0x7a>
 800f2ae:	454c      	cmp	r4, r9
 800f2b0:	d206      	bcs.n	800f2c0 <__hexnan+0x64>
 800f2b2:	2d07      	cmp	r5, #7
 800f2b4:	dc04      	bgt.n	800f2c0 <__hexnan+0x64>
 800f2b6:	462a      	mov	r2, r5
 800f2b8:	4649      	mov	r1, r9
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f7ff ffa8 	bl	800f210 <L_shift>
 800f2c0:	4544      	cmp	r4, r8
 800f2c2:	d950      	bls.n	800f366 <__hexnan+0x10a>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f1a4 0904 	sub.w	r9, r4, #4
 800f2ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2ce:	f8cd b008 	str.w	fp, [sp, #8]
 800f2d2:	464c      	mov	r4, r9
 800f2d4:	461d      	mov	r5, r3
 800f2d6:	9903      	ldr	r1, [sp, #12]
 800f2d8:	e7d7      	b.n	800f28a <__hexnan+0x2e>
 800f2da:	2a29      	cmp	r2, #41	; 0x29
 800f2dc:	d155      	bne.n	800f38a <__hexnan+0x12e>
 800f2de:	3102      	adds	r1, #2
 800f2e0:	f8ca 1000 	str.w	r1, [sl]
 800f2e4:	f1bb 0f00 	cmp.w	fp, #0
 800f2e8:	d04f      	beq.n	800f38a <__hexnan+0x12e>
 800f2ea:	454c      	cmp	r4, r9
 800f2ec:	d206      	bcs.n	800f2fc <__hexnan+0xa0>
 800f2ee:	2d07      	cmp	r5, #7
 800f2f0:	dc04      	bgt.n	800f2fc <__hexnan+0xa0>
 800f2f2:	462a      	mov	r2, r5
 800f2f4:	4649      	mov	r1, r9
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f7ff ff8a 	bl	800f210 <L_shift>
 800f2fc:	4544      	cmp	r4, r8
 800f2fe:	d934      	bls.n	800f36a <__hexnan+0x10e>
 800f300:	f1a8 0204 	sub.w	r2, r8, #4
 800f304:	4623      	mov	r3, r4
 800f306:	f853 1b04 	ldr.w	r1, [r3], #4
 800f30a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f30e:	429f      	cmp	r7, r3
 800f310:	d2f9      	bcs.n	800f306 <__hexnan+0xaa>
 800f312:	1b3b      	subs	r3, r7, r4
 800f314:	f023 0303 	bic.w	r3, r3, #3
 800f318:	3304      	adds	r3, #4
 800f31a:	3e03      	subs	r6, #3
 800f31c:	3401      	adds	r4, #1
 800f31e:	42a6      	cmp	r6, r4
 800f320:	bf38      	it	cc
 800f322:	2304      	movcc	r3, #4
 800f324:	4443      	add	r3, r8
 800f326:	2200      	movs	r2, #0
 800f328:	f843 2b04 	str.w	r2, [r3], #4
 800f32c:	429f      	cmp	r7, r3
 800f32e:	d2fb      	bcs.n	800f328 <__hexnan+0xcc>
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	b91b      	cbnz	r3, 800f33c <__hexnan+0xe0>
 800f334:	4547      	cmp	r7, r8
 800f336:	d126      	bne.n	800f386 <__hexnan+0x12a>
 800f338:	2301      	movs	r3, #1
 800f33a:	603b      	str	r3, [r7, #0]
 800f33c:	2005      	movs	r0, #5
 800f33e:	e025      	b.n	800f38c <__hexnan+0x130>
 800f340:	3501      	adds	r5, #1
 800f342:	2d08      	cmp	r5, #8
 800f344:	f10b 0b01 	add.w	fp, fp, #1
 800f348:	dd06      	ble.n	800f358 <__hexnan+0xfc>
 800f34a:	4544      	cmp	r4, r8
 800f34c:	d9c3      	bls.n	800f2d6 <__hexnan+0x7a>
 800f34e:	2300      	movs	r3, #0
 800f350:	f844 3c04 	str.w	r3, [r4, #-4]
 800f354:	2501      	movs	r5, #1
 800f356:	3c04      	subs	r4, #4
 800f358:	6822      	ldr	r2, [r4, #0]
 800f35a:	f000 000f 	and.w	r0, r0, #15
 800f35e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f362:	6020      	str	r0, [r4, #0]
 800f364:	e7b7      	b.n	800f2d6 <__hexnan+0x7a>
 800f366:	2508      	movs	r5, #8
 800f368:	e7b5      	b.n	800f2d6 <__hexnan+0x7a>
 800f36a:	9b01      	ldr	r3, [sp, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d0df      	beq.n	800f330 <__hexnan+0xd4>
 800f370:	f1c3 0320 	rsb	r3, r3, #32
 800f374:	f04f 32ff 	mov.w	r2, #4294967295
 800f378:	40da      	lsrs	r2, r3
 800f37a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f37e:	4013      	ands	r3, r2
 800f380:	f846 3c04 	str.w	r3, [r6, #-4]
 800f384:	e7d4      	b.n	800f330 <__hexnan+0xd4>
 800f386:	3f04      	subs	r7, #4
 800f388:	e7d2      	b.n	800f330 <__hexnan+0xd4>
 800f38a:	2004      	movs	r0, #4
 800f38c:	b007      	add	sp, #28
 800f38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f394 <malloc>:
 800f394:	4b02      	ldr	r3, [pc, #8]	; (800f3a0 <malloc+0xc>)
 800f396:	4601      	mov	r1, r0
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	f000 b823 	b.w	800f3e4 <_malloc_r>
 800f39e:	bf00      	nop
 800f3a0:	20000200 	.word	0x20000200

0800f3a4 <sbrk_aligned>:
 800f3a4:	b570      	push	{r4, r5, r6, lr}
 800f3a6:	4e0e      	ldr	r6, [pc, #56]	; (800f3e0 <sbrk_aligned+0x3c>)
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	6831      	ldr	r1, [r6, #0]
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	b911      	cbnz	r1, 800f3b6 <sbrk_aligned+0x12>
 800f3b0:	f001 fb0c 	bl	80109cc <_sbrk_r>
 800f3b4:	6030      	str	r0, [r6, #0]
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f001 fb07 	bl	80109cc <_sbrk_r>
 800f3be:	1c43      	adds	r3, r0, #1
 800f3c0:	d00a      	beq.n	800f3d8 <sbrk_aligned+0x34>
 800f3c2:	1cc4      	adds	r4, r0, #3
 800f3c4:	f024 0403 	bic.w	r4, r4, #3
 800f3c8:	42a0      	cmp	r0, r4
 800f3ca:	d007      	beq.n	800f3dc <sbrk_aligned+0x38>
 800f3cc:	1a21      	subs	r1, r4, r0
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f001 fafc 	bl	80109cc <_sbrk_r>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d101      	bne.n	800f3dc <sbrk_aligned+0x38>
 800f3d8:	f04f 34ff 	mov.w	r4, #4294967295
 800f3dc:	4620      	mov	r0, r4
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	20002bf0 	.word	0x20002bf0

0800f3e4 <_malloc_r>:
 800f3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e8:	1ccd      	adds	r5, r1, #3
 800f3ea:	f025 0503 	bic.w	r5, r5, #3
 800f3ee:	3508      	adds	r5, #8
 800f3f0:	2d0c      	cmp	r5, #12
 800f3f2:	bf38      	it	cc
 800f3f4:	250c      	movcc	r5, #12
 800f3f6:	2d00      	cmp	r5, #0
 800f3f8:	4607      	mov	r7, r0
 800f3fa:	db01      	blt.n	800f400 <_malloc_r+0x1c>
 800f3fc:	42a9      	cmp	r1, r5
 800f3fe:	d905      	bls.n	800f40c <_malloc_r+0x28>
 800f400:	230c      	movs	r3, #12
 800f402:	603b      	str	r3, [r7, #0]
 800f404:	2600      	movs	r6, #0
 800f406:	4630      	mov	r0, r6
 800f408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f40c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f4e0 <_malloc_r+0xfc>
 800f410:	f000 f87a 	bl	800f508 <__malloc_lock>
 800f414:	f8d8 3000 	ldr.w	r3, [r8]
 800f418:	461c      	mov	r4, r3
 800f41a:	bb5c      	cbnz	r4, 800f474 <_malloc_r+0x90>
 800f41c:	4629      	mov	r1, r5
 800f41e:	4638      	mov	r0, r7
 800f420:	f7ff ffc0 	bl	800f3a4 <sbrk_aligned>
 800f424:	1c43      	adds	r3, r0, #1
 800f426:	4604      	mov	r4, r0
 800f428:	d155      	bne.n	800f4d6 <_malloc_r+0xf2>
 800f42a:	f8d8 4000 	ldr.w	r4, [r8]
 800f42e:	4626      	mov	r6, r4
 800f430:	2e00      	cmp	r6, #0
 800f432:	d145      	bne.n	800f4c0 <_malloc_r+0xdc>
 800f434:	2c00      	cmp	r4, #0
 800f436:	d048      	beq.n	800f4ca <_malloc_r+0xe6>
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	4631      	mov	r1, r6
 800f43c:	4638      	mov	r0, r7
 800f43e:	eb04 0903 	add.w	r9, r4, r3
 800f442:	f001 fac3 	bl	80109cc <_sbrk_r>
 800f446:	4581      	cmp	r9, r0
 800f448:	d13f      	bne.n	800f4ca <_malloc_r+0xe6>
 800f44a:	6821      	ldr	r1, [r4, #0]
 800f44c:	1a6d      	subs	r5, r5, r1
 800f44e:	4629      	mov	r1, r5
 800f450:	4638      	mov	r0, r7
 800f452:	f7ff ffa7 	bl	800f3a4 <sbrk_aligned>
 800f456:	3001      	adds	r0, #1
 800f458:	d037      	beq.n	800f4ca <_malloc_r+0xe6>
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	442b      	add	r3, r5
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	f8d8 3000 	ldr.w	r3, [r8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d038      	beq.n	800f4da <_malloc_r+0xf6>
 800f468:	685a      	ldr	r2, [r3, #4]
 800f46a:	42a2      	cmp	r2, r4
 800f46c:	d12b      	bne.n	800f4c6 <_malloc_r+0xe2>
 800f46e:	2200      	movs	r2, #0
 800f470:	605a      	str	r2, [r3, #4]
 800f472:	e00f      	b.n	800f494 <_malloc_r+0xb0>
 800f474:	6822      	ldr	r2, [r4, #0]
 800f476:	1b52      	subs	r2, r2, r5
 800f478:	d41f      	bmi.n	800f4ba <_malloc_r+0xd6>
 800f47a:	2a0b      	cmp	r2, #11
 800f47c:	d917      	bls.n	800f4ae <_malloc_r+0xca>
 800f47e:	1961      	adds	r1, r4, r5
 800f480:	42a3      	cmp	r3, r4
 800f482:	6025      	str	r5, [r4, #0]
 800f484:	bf18      	it	ne
 800f486:	6059      	strne	r1, [r3, #4]
 800f488:	6863      	ldr	r3, [r4, #4]
 800f48a:	bf08      	it	eq
 800f48c:	f8c8 1000 	streq.w	r1, [r8]
 800f490:	5162      	str	r2, [r4, r5]
 800f492:	604b      	str	r3, [r1, #4]
 800f494:	4638      	mov	r0, r7
 800f496:	f104 060b 	add.w	r6, r4, #11
 800f49a:	f000 f83b 	bl	800f514 <__malloc_unlock>
 800f49e:	f026 0607 	bic.w	r6, r6, #7
 800f4a2:	1d23      	adds	r3, r4, #4
 800f4a4:	1af2      	subs	r2, r6, r3
 800f4a6:	d0ae      	beq.n	800f406 <_malloc_r+0x22>
 800f4a8:	1b9b      	subs	r3, r3, r6
 800f4aa:	50a3      	str	r3, [r4, r2]
 800f4ac:	e7ab      	b.n	800f406 <_malloc_r+0x22>
 800f4ae:	42a3      	cmp	r3, r4
 800f4b0:	6862      	ldr	r2, [r4, #4]
 800f4b2:	d1dd      	bne.n	800f470 <_malloc_r+0x8c>
 800f4b4:	f8c8 2000 	str.w	r2, [r8]
 800f4b8:	e7ec      	b.n	800f494 <_malloc_r+0xb0>
 800f4ba:	4623      	mov	r3, r4
 800f4bc:	6864      	ldr	r4, [r4, #4]
 800f4be:	e7ac      	b.n	800f41a <_malloc_r+0x36>
 800f4c0:	4634      	mov	r4, r6
 800f4c2:	6876      	ldr	r6, [r6, #4]
 800f4c4:	e7b4      	b.n	800f430 <_malloc_r+0x4c>
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	e7cc      	b.n	800f464 <_malloc_r+0x80>
 800f4ca:	230c      	movs	r3, #12
 800f4cc:	603b      	str	r3, [r7, #0]
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	f000 f820 	bl	800f514 <__malloc_unlock>
 800f4d4:	e797      	b.n	800f406 <_malloc_r+0x22>
 800f4d6:	6025      	str	r5, [r4, #0]
 800f4d8:	e7dc      	b.n	800f494 <_malloc_r+0xb0>
 800f4da:	605b      	str	r3, [r3, #4]
 800f4dc:	deff      	udf	#255	; 0xff
 800f4de:	bf00      	nop
 800f4e0:	20002bec 	.word	0x20002bec

0800f4e4 <__ascii_mbtowc>:
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	b901      	cbnz	r1, 800f4ea <__ascii_mbtowc+0x6>
 800f4e8:	a901      	add	r1, sp, #4
 800f4ea:	b142      	cbz	r2, 800f4fe <__ascii_mbtowc+0x1a>
 800f4ec:	b14b      	cbz	r3, 800f502 <__ascii_mbtowc+0x1e>
 800f4ee:	7813      	ldrb	r3, [r2, #0]
 800f4f0:	600b      	str	r3, [r1, #0]
 800f4f2:	7812      	ldrb	r2, [r2, #0]
 800f4f4:	1e10      	subs	r0, r2, #0
 800f4f6:	bf18      	it	ne
 800f4f8:	2001      	movne	r0, #1
 800f4fa:	b002      	add	sp, #8
 800f4fc:	4770      	bx	lr
 800f4fe:	4610      	mov	r0, r2
 800f500:	e7fb      	b.n	800f4fa <__ascii_mbtowc+0x16>
 800f502:	f06f 0001 	mvn.w	r0, #1
 800f506:	e7f8      	b.n	800f4fa <__ascii_mbtowc+0x16>

0800f508 <__malloc_lock>:
 800f508:	4801      	ldr	r0, [pc, #4]	; (800f510 <__malloc_lock+0x8>)
 800f50a:	f7ff bb68 	b.w	800ebde <__retarget_lock_acquire_recursive>
 800f50e:	bf00      	nop
 800f510:	20002be8 	.word	0x20002be8

0800f514 <__malloc_unlock>:
 800f514:	4801      	ldr	r0, [pc, #4]	; (800f51c <__malloc_unlock+0x8>)
 800f516:	f7ff bb63 	b.w	800ebe0 <__retarget_lock_release_recursive>
 800f51a:	bf00      	nop
 800f51c:	20002be8 	.word	0x20002be8

0800f520 <_Balloc>:
 800f520:	b570      	push	{r4, r5, r6, lr}
 800f522:	69c6      	ldr	r6, [r0, #28]
 800f524:	4604      	mov	r4, r0
 800f526:	460d      	mov	r5, r1
 800f528:	b976      	cbnz	r6, 800f548 <_Balloc+0x28>
 800f52a:	2010      	movs	r0, #16
 800f52c:	f7ff ff32 	bl	800f394 <malloc>
 800f530:	4602      	mov	r2, r0
 800f532:	61e0      	str	r0, [r4, #28]
 800f534:	b920      	cbnz	r0, 800f540 <_Balloc+0x20>
 800f536:	4b18      	ldr	r3, [pc, #96]	; (800f598 <_Balloc+0x78>)
 800f538:	4818      	ldr	r0, [pc, #96]	; (800f59c <_Balloc+0x7c>)
 800f53a:	216b      	movs	r1, #107	; 0x6b
 800f53c:	f7ff fb68 	bl	800ec10 <__assert_func>
 800f540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f544:	6006      	str	r6, [r0, #0]
 800f546:	60c6      	str	r6, [r0, #12]
 800f548:	69e6      	ldr	r6, [r4, #28]
 800f54a:	68f3      	ldr	r3, [r6, #12]
 800f54c:	b183      	cbz	r3, 800f570 <_Balloc+0x50>
 800f54e:	69e3      	ldr	r3, [r4, #28]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f556:	b9b8      	cbnz	r0, 800f588 <_Balloc+0x68>
 800f558:	2101      	movs	r1, #1
 800f55a:	fa01 f605 	lsl.w	r6, r1, r5
 800f55e:	1d72      	adds	r2, r6, #5
 800f560:	0092      	lsls	r2, r2, #2
 800f562:	4620      	mov	r0, r4
 800f564:	f001 fa49 	bl	80109fa <_calloc_r>
 800f568:	b160      	cbz	r0, 800f584 <_Balloc+0x64>
 800f56a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f56e:	e00e      	b.n	800f58e <_Balloc+0x6e>
 800f570:	2221      	movs	r2, #33	; 0x21
 800f572:	2104      	movs	r1, #4
 800f574:	4620      	mov	r0, r4
 800f576:	f001 fa40 	bl	80109fa <_calloc_r>
 800f57a:	69e3      	ldr	r3, [r4, #28]
 800f57c:	60f0      	str	r0, [r6, #12]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1e4      	bne.n	800f54e <_Balloc+0x2e>
 800f584:	2000      	movs	r0, #0
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	6802      	ldr	r2, [r0, #0]
 800f58a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f58e:	2300      	movs	r3, #0
 800f590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f594:	e7f7      	b.n	800f586 <_Balloc+0x66>
 800f596:	bf00      	nop
 800f598:	080111b9 	.word	0x080111b9
 800f59c:	080112df 	.word	0x080112df

0800f5a0 <_Bfree>:
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	69c6      	ldr	r6, [r0, #28]
 800f5a4:	4605      	mov	r5, r0
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	b976      	cbnz	r6, 800f5c8 <_Bfree+0x28>
 800f5aa:	2010      	movs	r0, #16
 800f5ac:	f7ff fef2 	bl	800f394 <malloc>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	61e8      	str	r0, [r5, #28]
 800f5b4:	b920      	cbnz	r0, 800f5c0 <_Bfree+0x20>
 800f5b6:	4b09      	ldr	r3, [pc, #36]	; (800f5dc <_Bfree+0x3c>)
 800f5b8:	4809      	ldr	r0, [pc, #36]	; (800f5e0 <_Bfree+0x40>)
 800f5ba:	218f      	movs	r1, #143	; 0x8f
 800f5bc:	f7ff fb28 	bl	800ec10 <__assert_func>
 800f5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5c4:	6006      	str	r6, [r0, #0]
 800f5c6:	60c6      	str	r6, [r0, #12]
 800f5c8:	b13c      	cbz	r4, 800f5da <_Bfree+0x3a>
 800f5ca:	69eb      	ldr	r3, [r5, #28]
 800f5cc:	6862      	ldr	r2, [r4, #4]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5d4:	6021      	str	r1, [r4, #0]
 800f5d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5da:	bd70      	pop	{r4, r5, r6, pc}
 800f5dc:	080111b9 	.word	0x080111b9
 800f5e0:	080112df 	.word	0x080112df

0800f5e4 <__multadd>:
 800f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e8:	690d      	ldr	r5, [r1, #16]
 800f5ea:	4607      	mov	r7, r0
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	461e      	mov	r6, r3
 800f5f0:	f101 0c14 	add.w	ip, r1, #20
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	f8dc 3000 	ldr.w	r3, [ip]
 800f5fa:	b299      	uxth	r1, r3
 800f5fc:	fb02 6101 	mla	r1, r2, r1, r6
 800f600:	0c1e      	lsrs	r6, r3, #16
 800f602:	0c0b      	lsrs	r3, r1, #16
 800f604:	fb02 3306 	mla	r3, r2, r6, r3
 800f608:	b289      	uxth	r1, r1
 800f60a:	3001      	adds	r0, #1
 800f60c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f610:	4285      	cmp	r5, r0
 800f612:	f84c 1b04 	str.w	r1, [ip], #4
 800f616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f61a:	dcec      	bgt.n	800f5f6 <__multadd+0x12>
 800f61c:	b30e      	cbz	r6, 800f662 <__multadd+0x7e>
 800f61e:	68a3      	ldr	r3, [r4, #8]
 800f620:	42ab      	cmp	r3, r5
 800f622:	dc19      	bgt.n	800f658 <__multadd+0x74>
 800f624:	6861      	ldr	r1, [r4, #4]
 800f626:	4638      	mov	r0, r7
 800f628:	3101      	adds	r1, #1
 800f62a:	f7ff ff79 	bl	800f520 <_Balloc>
 800f62e:	4680      	mov	r8, r0
 800f630:	b928      	cbnz	r0, 800f63e <__multadd+0x5a>
 800f632:	4602      	mov	r2, r0
 800f634:	4b0c      	ldr	r3, [pc, #48]	; (800f668 <__multadd+0x84>)
 800f636:	480d      	ldr	r0, [pc, #52]	; (800f66c <__multadd+0x88>)
 800f638:	21ba      	movs	r1, #186	; 0xba
 800f63a:	f7ff fae9 	bl	800ec10 <__assert_func>
 800f63e:	6922      	ldr	r2, [r4, #16]
 800f640:	3202      	adds	r2, #2
 800f642:	f104 010c 	add.w	r1, r4, #12
 800f646:	0092      	lsls	r2, r2, #2
 800f648:	300c      	adds	r0, #12
 800f64a:	f7ff faca 	bl	800ebe2 <memcpy>
 800f64e:	4621      	mov	r1, r4
 800f650:	4638      	mov	r0, r7
 800f652:	f7ff ffa5 	bl	800f5a0 <_Bfree>
 800f656:	4644      	mov	r4, r8
 800f658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f65c:	3501      	adds	r5, #1
 800f65e:	615e      	str	r6, [r3, #20]
 800f660:	6125      	str	r5, [r4, #16]
 800f662:	4620      	mov	r0, r4
 800f664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f668:	0801126e 	.word	0x0801126e
 800f66c:	080112df 	.word	0x080112df

0800f670 <__s2b>:
 800f670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f674:	460c      	mov	r4, r1
 800f676:	4615      	mov	r5, r2
 800f678:	461f      	mov	r7, r3
 800f67a:	2209      	movs	r2, #9
 800f67c:	3308      	adds	r3, #8
 800f67e:	4606      	mov	r6, r0
 800f680:	fb93 f3f2 	sdiv	r3, r3, r2
 800f684:	2100      	movs	r1, #0
 800f686:	2201      	movs	r2, #1
 800f688:	429a      	cmp	r2, r3
 800f68a:	db09      	blt.n	800f6a0 <__s2b+0x30>
 800f68c:	4630      	mov	r0, r6
 800f68e:	f7ff ff47 	bl	800f520 <_Balloc>
 800f692:	b940      	cbnz	r0, 800f6a6 <__s2b+0x36>
 800f694:	4602      	mov	r2, r0
 800f696:	4b19      	ldr	r3, [pc, #100]	; (800f6fc <__s2b+0x8c>)
 800f698:	4819      	ldr	r0, [pc, #100]	; (800f700 <__s2b+0x90>)
 800f69a:	21d3      	movs	r1, #211	; 0xd3
 800f69c:	f7ff fab8 	bl	800ec10 <__assert_func>
 800f6a0:	0052      	lsls	r2, r2, #1
 800f6a2:	3101      	adds	r1, #1
 800f6a4:	e7f0      	b.n	800f688 <__s2b+0x18>
 800f6a6:	9b08      	ldr	r3, [sp, #32]
 800f6a8:	6143      	str	r3, [r0, #20]
 800f6aa:	2d09      	cmp	r5, #9
 800f6ac:	f04f 0301 	mov.w	r3, #1
 800f6b0:	6103      	str	r3, [r0, #16]
 800f6b2:	dd16      	ble.n	800f6e2 <__s2b+0x72>
 800f6b4:	f104 0909 	add.w	r9, r4, #9
 800f6b8:	46c8      	mov	r8, r9
 800f6ba:	442c      	add	r4, r5
 800f6bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f6c0:	4601      	mov	r1, r0
 800f6c2:	3b30      	subs	r3, #48	; 0x30
 800f6c4:	220a      	movs	r2, #10
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ff8c 	bl	800f5e4 <__multadd>
 800f6cc:	45a0      	cmp	r8, r4
 800f6ce:	d1f5      	bne.n	800f6bc <__s2b+0x4c>
 800f6d0:	f1a5 0408 	sub.w	r4, r5, #8
 800f6d4:	444c      	add	r4, r9
 800f6d6:	1b2d      	subs	r5, r5, r4
 800f6d8:	1963      	adds	r3, r4, r5
 800f6da:	42bb      	cmp	r3, r7
 800f6dc:	db04      	blt.n	800f6e8 <__s2b+0x78>
 800f6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e2:	340a      	adds	r4, #10
 800f6e4:	2509      	movs	r5, #9
 800f6e6:	e7f6      	b.n	800f6d6 <__s2b+0x66>
 800f6e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6ec:	4601      	mov	r1, r0
 800f6ee:	3b30      	subs	r3, #48	; 0x30
 800f6f0:	220a      	movs	r2, #10
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7ff ff76 	bl	800f5e4 <__multadd>
 800f6f8:	e7ee      	b.n	800f6d8 <__s2b+0x68>
 800f6fa:	bf00      	nop
 800f6fc:	0801126e 	.word	0x0801126e
 800f700:	080112df 	.word	0x080112df

0800f704 <__hi0bits>:
 800f704:	0c03      	lsrs	r3, r0, #16
 800f706:	041b      	lsls	r3, r3, #16
 800f708:	b9d3      	cbnz	r3, 800f740 <__hi0bits+0x3c>
 800f70a:	0400      	lsls	r0, r0, #16
 800f70c:	2310      	movs	r3, #16
 800f70e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f712:	bf04      	itt	eq
 800f714:	0200      	lsleq	r0, r0, #8
 800f716:	3308      	addeq	r3, #8
 800f718:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f71c:	bf04      	itt	eq
 800f71e:	0100      	lsleq	r0, r0, #4
 800f720:	3304      	addeq	r3, #4
 800f722:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f726:	bf04      	itt	eq
 800f728:	0080      	lsleq	r0, r0, #2
 800f72a:	3302      	addeq	r3, #2
 800f72c:	2800      	cmp	r0, #0
 800f72e:	db05      	blt.n	800f73c <__hi0bits+0x38>
 800f730:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f734:	f103 0301 	add.w	r3, r3, #1
 800f738:	bf08      	it	eq
 800f73a:	2320      	moveq	r3, #32
 800f73c:	4618      	mov	r0, r3
 800f73e:	4770      	bx	lr
 800f740:	2300      	movs	r3, #0
 800f742:	e7e4      	b.n	800f70e <__hi0bits+0xa>

0800f744 <__lo0bits>:
 800f744:	6803      	ldr	r3, [r0, #0]
 800f746:	f013 0207 	ands.w	r2, r3, #7
 800f74a:	d00c      	beq.n	800f766 <__lo0bits+0x22>
 800f74c:	07d9      	lsls	r1, r3, #31
 800f74e:	d422      	bmi.n	800f796 <__lo0bits+0x52>
 800f750:	079a      	lsls	r2, r3, #30
 800f752:	bf49      	itett	mi
 800f754:	085b      	lsrmi	r3, r3, #1
 800f756:	089b      	lsrpl	r3, r3, #2
 800f758:	6003      	strmi	r3, [r0, #0]
 800f75a:	2201      	movmi	r2, #1
 800f75c:	bf5c      	itt	pl
 800f75e:	6003      	strpl	r3, [r0, #0]
 800f760:	2202      	movpl	r2, #2
 800f762:	4610      	mov	r0, r2
 800f764:	4770      	bx	lr
 800f766:	b299      	uxth	r1, r3
 800f768:	b909      	cbnz	r1, 800f76e <__lo0bits+0x2a>
 800f76a:	0c1b      	lsrs	r3, r3, #16
 800f76c:	2210      	movs	r2, #16
 800f76e:	b2d9      	uxtb	r1, r3
 800f770:	b909      	cbnz	r1, 800f776 <__lo0bits+0x32>
 800f772:	3208      	adds	r2, #8
 800f774:	0a1b      	lsrs	r3, r3, #8
 800f776:	0719      	lsls	r1, r3, #28
 800f778:	bf04      	itt	eq
 800f77a:	091b      	lsreq	r3, r3, #4
 800f77c:	3204      	addeq	r2, #4
 800f77e:	0799      	lsls	r1, r3, #30
 800f780:	bf04      	itt	eq
 800f782:	089b      	lsreq	r3, r3, #2
 800f784:	3202      	addeq	r2, #2
 800f786:	07d9      	lsls	r1, r3, #31
 800f788:	d403      	bmi.n	800f792 <__lo0bits+0x4e>
 800f78a:	085b      	lsrs	r3, r3, #1
 800f78c:	f102 0201 	add.w	r2, r2, #1
 800f790:	d003      	beq.n	800f79a <__lo0bits+0x56>
 800f792:	6003      	str	r3, [r0, #0]
 800f794:	e7e5      	b.n	800f762 <__lo0bits+0x1e>
 800f796:	2200      	movs	r2, #0
 800f798:	e7e3      	b.n	800f762 <__lo0bits+0x1e>
 800f79a:	2220      	movs	r2, #32
 800f79c:	e7e1      	b.n	800f762 <__lo0bits+0x1e>
	...

0800f7a0 <__i2b>:
 800f7a0:	b510      	push	{r4, lr}
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	2101      	movs	r1, #1
 800f7a6:	f7ff febb 	bl	800f520 <_Balloc>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	b928      	cbnz	r0, 800f7ba <__i2b+0x1a>
 800f7ae:	4b05      	ldr	r3, [pc, #20]	; (800f7c4 <__i2b+0x24>)
 800f7b0:	4805      	ldr	r0, [pc, #20]	; (800f7c8 <__i2b+0x28>)
 800f7b2:	f240 1145 	movw	r1, #325	; 0x145
 800f7b6:	f7ff fa2b 	bl	800ec10 <__assert_func>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	6144      	str	r4, [r0, #20]
 800f7be:	6103      	str	r3, [r0, #16]
 800f7c0:	bd10      	pop	{r4, pc}
 800f7c2:	bf00      	nop
 800f7c4:	0801126e 	.word	0x0801126e
 800f7c8:	080112df 	.word	0x080112df

0800f7cc <__multiply>:
 800f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d0:	4691      	mov	r9, r2
 800f7d2:	690a      	ldr	r2, [r1, #16]
 800f7d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	bfb8      	it	lt
 800f7dc:	460b      	movlt	r3, r1
 800f7de:	460c      	mov	r4, r1
 800f7e0:	bfbc      	itt	lt
 800f7e2:	464c      	movlt	r4, r9
 800f7e4:	4699      	movlt	r9, r3
 800f7e6:	6927      	ldr	r7, [r4, #16]
 800f7e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7ec:	68a3      	ldr	r3, [r4, #8]
 800f7ee:	6861      	ldr	r1, [r4, #4]
 800f7f0:	eb07 060a 	add.w	r6, r7, sl
 800f7f4:	42b3      	cmp	r3, r6
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	bfb8      	it	lt
 800f7fa:	3101      	addlt	r1, #1
 800f7fc:	f7ff fe90 	bl	800f520 <_Balloc>
 800f800:	b930      	cbnz	r0, 800f810 <__multiply+0x44>
 800f802:	4602      	mov	r2, r0
 800f804:	4b44      	ldr	r3, [pc, #272]	; (800f918 <__multiply+0x14c>)
 800f806:	4845      	ldr	r0, [pc, #276]	; (800f91c <__multiply+0x150>)
 800f808:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f80c:	f7ff fa00 	bl	800ec10 <__assert_func>
 800f810:	f100 0514 	add.w	r5, r0, #20
 800f814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f818:	462b      	mov	r3, r5
 800f81a:	2200      	movs	r2, #0
 800f81c:	4543      	cmp	r3, r8
 800f81e:	d321      	bcc.n	800f864 <__multiply+0x98>
 800f820:	f104 0314 	add.w	r3, r4, #20
 800f824:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f828:	f109 0314 	add.w	r3, r9, #20
 800f82c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f830:	9202      	str	r2, [sp, #8]
 800f832:	1b3a      	subs	r2, r7, r4
 800f834:	3a15      	subs	r2, #21
 800f836:	f022 0203 	bic.w	r2, r2, #3
 800f83a:	3204      	adds	r2, #4
 800f83c:	f104 0115 	add.w	r1, r4, #21
 800f840:	428f      	cmp	r7, r1
 800f842:	bf38      	it	cc
 800f844:	2204      	movcc	r2, #4
 800f846:	9201      	str	r2, [sp, #4]
 800f848:	9a02      	ldr	r2, [sp, #8]
 800f84a:	9303      	str	r3, [sp, #12]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d80c      	bhi.n	800f86a <__multiply+0x9e>
 800f850:	2e00      	cmp	r6, #0
 800f852:	dd03      	ble.n	800f85c <__multiply+0x90>
 800f854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d05b      	beq.n	800f914 <__multiply+0x148>
 800f85c:	6106      	str	r6, [r0, #16]
 800f85e:	b005      	add	sp, #20
 800f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f864:	f843 2b04 	str.w	r2, [r3], #4
 800f868:	e7d8      	b.n	800f81c <__multiply+0x50>
 800f86a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f86e:	f1ba 0f00 	cmp.w	sl, #0
 800f872:	d024      	beq.n	800f8be <__multiply+0xf2>
 800f874:	f104 0e14 	add.w	lr, r4, #20
 800f878:	46a9      	mov	r9, r5
 800f87a:	f04f 0c00 	mov.w	ip, #0
 800f87e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f882:	f8d9 1000 	ldr.w	r1, [r9]
 800f886:	fa1f fb82 	uxth.w	fp, r2
 800f88a:	b289      	uxth	r1, r1
 800f88c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f890:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f894:	f8d9 2000 	ldr.w	r2, [r9]
 800f898:	4461      	add	r1, ip
 800f89a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f89e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f8a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f8a6:	b289      	uxth	r1, r1
 800f8a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8ac:	4577      	cmp	r7, lr
 800f8ae:	f849 1b04 	str.w	r1, [r9], #4
 800f8b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8b6:	d8e2      	bhi.n	800f87e <__multiply+0xb2>
 800f8b8:	9a01      	ldr	r2, [sp, #4]
 800f8ba:	f845 c002 	str.w	ip, [r5, r2]
 800f8be:	9a03      	ldr	r2, [sp, #12]
 800f8c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	f1b9 0f00 	cmp.w	r9, #0
 800f8ca:	d021      	beq.n	800f910 <__multiply+0x144>
 800f8cc:	6829      	ldr	r1, [r5, #0]
 800f8ce:	f104 0c14 	add.w	ip, r4, #20
 800f8d2:	46ae      	mov	lr, r5
 800f8d4:	f04f 0a00 	mov.w	sl, #0
 800f8d8:	f8bc b000 	ldrh.w	fp, [ip]
 800f8dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8e0:	fb09 220b 	mla	r2, r9, fp, r2
 800f8e4:	4452      	add	r2, sl
 800f8e6:	b289      	uxth	r1, r1
 800f8e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8ec:	f84e 1b04 	str.w	r1, [lr], #4
 800f8f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f8f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8f8:	f8be 1000 	ldrh.w	r1, [lr]
 800f8fc:	fb09 110a 	mla	r1, r9, sl, r1
 800f900:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f904:	4567      	cmp	r7, ip
 800f906:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f90a:	d8e5      	bhi.n	800f8d8 <__multiply+0x10c>
 800f90c:	9a01      	ldr	r2, [sp, #4]
 800f90e:	50a9      	str	r1, [r5, r2]
 800f910:	3504      	adds	r5, #4
 800f912:	e799      	b.n	800f848 <__multiply+0x7c>
 800f914:	3e01      	subs	r6, #1
 800f916:	e79b      	b.n	800f850 <__multiply+0x84>
 800f918:	0801126e 	.word	0x0801126e
 800f91c:	080112df 	.word	0x080112df

0800f920 <__pow5mult>:
 800f920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f924:	4615      	mov	r5, r2
 800f926:	f012 0203 	ands.w	r2, r2, #3
 800f92a:	4606      	mov	r6, r0
 800f92c:	460f      	mov	r7, r1
 800f92e:	d007      	beq.n	800f940 <__pow5mult+0x20>
 800f930:	4c25      	ldr	r4, [pc, #148]	; (800f9c8 <__pow5mult+0xa8>)
 800f932:	3a01      	subs	r2, #1
 800f934:	2300      	movs	r3, #0
 800f936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f93a:	f7ff fe53 	bl	800f5e4 <__multadd>
 800f93e:	4607      	mov	r7, r0
 800f940:	10ad      	asrs	r5, r5, #2
 800f942:	d03d      	beq.n	800f9c0 <__pow5mult+0xa0>
 800f944:	69f4      	ldr	r4, [r6, #28]
 800f946:	b97c      	cbnz	r4, 800f968 <__pow5mult+0x48>
 800f948:	2010      	movs	r0, #16
 800f94a:	f7ff fd23 	bl	800f394 <malloc>
 800f94e:	4602      	mov	r2, r0
 800f950:	61f0      	str	r0, [r6, #28]
 800f952:	b928      	cbnz	r0, 800f960 <__pow5mult+0x40>
 800f954:	4b1d      	ldr	r3, [pc, #116]	; (800f9cc <__pow5mult+0xac>)
 800f956:	481e      	ldr	r0, [pc, #120]	; (800f9d0 <__pow5mult+0xb0>)
 800f958:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f95c:	f7ff f958 	bl	800ec10 <__assert_func>
 800f960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f964:	6004      	str	r4, [r0, #0]
 800f966:	60c4      	str	r4, [r0, #12]
 800f968:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f96c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f970:	b94c      	cbnz	r4, 800f986 <__pow5mult+0x66>
 800f972:	f240 2171 	movw	r1, #625	; 0x271
 800f976:	4630      	mov	r0, r6
 800f978:	f7ff ff12 	bl	800f7a0 <__i2b>
 800f97c:	2300      	movs	r3, #0
 800f97e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f982:	4604      	mov	r4, r0
 800f984:	6003      	str	r3, [r0, #0]
 800f986:	f04f 0900 	mov.w	r9, #0
 800f98a:	07eb      	lsls	r3, r5, #31
 800f98c:	d50a      	bpl.n	800f9a4 <__pow5mult+0x84>
 800f98e:	4639      	mov	r1, r7
 800f990:	4622      	mov	r2, r4
 800f992:	4630      	mov	r0, r6
 800f994:	f7ff ff1a 	bl	800f7cc <__multiply>
 800f998:	4639      	mov	r1, r7
 800f99a:	4680      	mov	r8, r0
 800f99c:	4630      	mov	r0, r6
 800f99e:	f7ff fdff 	bl	800f5a0 <_Bfree>
 800f9a2:	4647      	mov	r7, r8
 800f9a4:	106d      	asrs	r5, r5, #1
 800f9a6:	d00b      	beq.n	800f9c0 <__pow5mult+0xa0>
 800f9a8:	6820      	ldr	r0, [r4, #0]
 800f9aa:	b938      	cbnz	r0, 800f9bc <__pow5mult+0x9c>
 800f9ac:	4622      	mov	r2, r4
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f7ff ff0b 	bl	800f7cc <__multiply>
 800f9b6:	6020      	str	r0, [r4, #0]
 800f9b8:	f8c0 9000 	str.w	r9, [r0]
 800f9bc:	4604      	mov	r4, r0
 800f9be:	e7e4      	b.n	800f98a <__pow5mult+0x6a>
 800f9c0:	4638      	mov	r0, r7
 800f9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9c6:	bf00      	nop
 800f9c8:	08011428 	.word	0x08011428
 800f9cc:	080111b9 	.word	0x080111b9
 800f9d0:	080112df 	.word	0x080112df

0800f9d4 <__lshift>:
 800f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d8:	460c      	mov	r4, r1
 800f9da:	6849      	ldr	r1, [r1, #4]
 800f9dc:	6923      	ldr	r3, [r4, #16]
 800f9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9e2:	68a3      	ldr	r3, [r4, #8]
 800f9e4:	4607      	mov	r7, r0
 800f9e6:	4691      	mov	r9, r2
 800f9e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9ec:	f108 0601 	add.w	r6, r8, #1
 800f9f0:	42b3      	cmp	r3, r6
 800f9f2:	db0b      	blt.n	800fa0c <__lshift+0x38>
 800f9f4:	4638      	mov	r0, r7
 800f9f6:	f7ff fd93 	bl	800f520 <_Balloc>
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	b948      	cbnz	r0, 800fa12 <__lshift+0x3e>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	4b28      	ldr	r3, [pc, #160]	; (800faa4 <__lshift+0xd0>)
 800fa02:	4829      	ldr	r0, [pc, #164]	; (800faa8 <__lshift+0xd4>)
 800fa04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fa08:	f7ff f902 	bl	800ec10 <__assert_func>
 800fa0c:	3101      	adds	r1, #1
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	e7ee      	b.n	800f9f0 <__lshift+0x1c>
 800fa12:	2300      	movs	r3, #0
 800fa14:	f100 0114 	add.w	r1, r0, #20
 800fa18:	f100 0210 	add.w	r2, r0, #16
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	4553      	cmp	r3, sl
 800fa20:	db33      	blt.n	800fa8a <__lshift+0xb6>
 800fa22:	6920      	ldr	r0, [r4, #16]
 800fa24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa28:	f104 0314 	add.w	r3, r4, #20
 800fa2c:	f019 091f 	ands.w	r9, r9, #31
 800fa30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa38:	d02b      	beq.n	800fa92 <__lshift+0xbe>
 800fa3a:	f1c9 0e20 	rsb	lr, r9, #32
 800fa3e:	468a      	mov	sl, r1
 800fa40:	2200      	movs	r2, #0
 800fa42:	6818      	ldr	r0, [r3, #0]
 800fa44:	fa00 f009 	lsl.w	r0, r0, r9
 800fa48:	4310      	orrs	r0, r2
 800fa4a:	f84a 0b04 	str.w	r0, [sl], #4
 800fa4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa52:	459c      	cmp	ip, r3
 800fa54:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa58:	d8f3      	bhi.n	800fa42 <__lshift+0x6e>
 800fa5a:	ebac 0304 	sub.w	r3, ip, r4
 800fa5e:	3b15      	subs	r3, #21
 800fa60:	f023 0303 	bic.w	r3, r3, #3
 800fa64:	3304      	adds	r3, #4
 800fa66:	f104 0015 	add.w	r0, r4, #21
 800fa6a:	4584      	cmp	ip, r0
 800fa6c:	bf38      	it	cc
 800fa6e:	2304      	movcc	r3, #4
 800fa70:	50ca      	str	r2, [r1, r3]
 800fa72:	b10a      	cbz	r2, 800fa78 <__lshift+0xa4>
 800fa74:	f108 0602 	add.w	r6, r8, #2
 800fa78:	3e01      	subs	r6, #1
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	612e      	str	r6, [r5, #16]
 800fa7e:	4621      	mov	r1, r4
 800fa80:	f7ff fd8e 	bl	800f5a0 <_Bfree>
 800fa84:	4628      	mov	r0, r5
 800fa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa8e:	3301      	adds	r3, #1
 800fa90:	e7c5      	b.n	800fa1e <__lshift+0x4a>
 800fa92:	3904      	subs	r1, #4
 800fa94:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa98:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa9c:	459c      	cmp	ip, r3
 800fa9e:	d8f9      	bhi.n	800fa94 <__lshift+0xc0>
 800faa0:	e7ea      	b.n	800fa78 <__lshift+0xa4>
 800faa2:	bf00      	nop
 800faa4:	0801126e 	.word	0x0801126e
 800faa8:	080112df 	.word	0x080112df

0800faac <__mcmp>:
 800faac:	b530      	push	{r4, r5, lr}
 800faae:	6902      	ldr	r2, [r0, #16]
 800fab0:	690c      	ldr	r4, [r1, #16]
 800fab2:	1b12      	subs	r2, r2, r4
 800fab4:	d10e      	bne.n	800fad4 <__mcmp+0x28>
 800fab6:	f100 0314 	add.w	r3, r0, #20
 800faba:	3114      	adds	r1, #20
 800fabc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fac0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fac4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fac8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800facc:	42a5      	cmp	r5, r4
 800face:	d003      	beq.n	800fad8 <__mcmp+0x2c>
 800fad0:	d305      	bcc.n	800fade <__mcmp+0x32>
 800fad2:	2201      	movs	r2, #1
 800fad4:	4610      	mov	r0, r2
 800fad6:	bd30      	pop	{r4, r5, pc}
 800fad8:	4283      	cmp	r3, r0
 800fada:	d3f3      	bcc.n	800fac4 <__mcmp+0x18>
 800fadc:	e7fa      	b.n	800fad4 <__mcmp+0x28>
 800fade:	f04f 32ff 	mov.w	r2, #4294967295
 800fae2:	e7f7      	b.n	800fad4 <__mcmp+0x28>

0800fae4 <__mdiff>:
 800fae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	460c      	mov	r4, r1
 800faea:	4606      	mov	r6, r0
 800faec:	4611      	mov	r1, r2
 800faee:	4620      	mov	r0, r4
 800faf0:	4690      	mov	r8, r2
 800faf2:	f7ff ffdb 	bl	800faac <__mcmp>
 800faf6:	1e05      	subs	r5, r0, #0
 800faf8:	d110      	bne.n	800fb1c <__mdiff+0x38>
 800fafa:	4629      	mov	r1, r5
 800fafc:	4630      	mov	r0, r6
 800fafe:	f7ff fd0f 	bl	800f520 <_Balloc>
 800fb02:	b930      	cbnz	r0, 800fb12 <__mdiff+0x2e>
 800fb04:	4b3a      	ldr	r3, [pc, #232]	; (800fbf0 <__mdiff+0x10c>)
 800fb06:	4602      	mov	r2, r0
 800fb08:	f240 2137 	movw	r1, #567	; 0x237
 800fb0c:	4839      	ldr	r0, [pc, #228]	; (800fbf4 <__mdiff+0x110>)
 800fb0e:	f7ff f87f 	bl	800ec10 <__assert_func>
 800fb12:	2301      	movs	r3, #1
 800fb14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1c:	bfa4      	itt	ge
 800fb1e:	4643      	movge	r3, r8
 800fb20:	46a0      	movge	r8, r4
 800fb22:	4630      	mov	r0, r6
 800fb24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb28:	bfa6      	itte	ge
 800fb2a:	461c      	movge	r4, r3
 800fb2c:	2500      	movge	r5, #0
 800fb2e:	2501      	movlt	r5, #1
 800fb30:	f7ff fcf6 	bl	800f520 <_Balloc>
 800fb34:	b920      	cbnz	r0, 800fb40 <__mdiff+0x5c>
 800fb36:	4b2e      	ldr	r3, [pc, #184]	; (800fbf0 <__mdiff+0x10c>)
 800fb38:	4602      	mov	r2, r0
 800fb3a:	f240 2145 	movw	r1, #581	; 0x245
 800fb3e:	e7e5      	b.n	800fb0c <__mdiff+0x28>
 800fb40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb44:	6926      	ldr	r6, [r4, #16]
 800fb46:	60c5      	str	r5, [r0, #12]
 800fb48:	f104 0914 	add.w	r9, r4, #20
 800fb4c:	f108 0514 	add.w	r5, r8, #20
 800fb50:	f100 0e14 	add.w	lr, r0, #20
 800fb54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb5c:	f108 0210 	add.w	r2, r8, #16
 800fb60:	46f2      	mov	sl, lr
 800fb62:	2100      	movs	r1, #0
 800fb64:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb6c:	fa11 f88b 	uxtah	r8, r1, fp
 800fb70:	b299      	uxth	r1, r3
 800fb72:	0c1b      	lsrs	r3, r3, #16
 800fb74:	eba8 0801 	sub.w	r8, r8, r1
 800fb78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb80:	fa1f f888 	uxth.w	r8, r8
 800fb84:	1419      	asrs	r1, r3, #16
 800fb86:	454e      	cmp	r6, r9
 800fb88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb8c:	f84a 3b04 	str.w	r3, [sl], #4
 800fb90:	d8e8      	bhi.n	800fb64 <__mdiff+0x80>
 800fb92:	1b33      	subs	r3, r6, r4
 800fb94:	3b15      	subs	r3, #21
 800fb96:	f023 0303 	bic.w	r3, r3, #3
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	3415      	adds	r4, #21
 800fb9e:	42a6      	cmp	r6, r4
 800fba0:	bf38      	it	cc
 800fba2:	2304      	movcc	r3, #4
 800fba4:	441d      	add	r5, r3
 800fba6:	4473      	add	r3, lr
 800fba8:	469e      	mov	lr, r3
 800fbaa:	462e      	mov	r6, r5
 800fbac:	4566      	cmp	r6, ip
 800fbae:	d30e      	bcc.n	800fbce <__mdiff+0xea>
 800fbb0:	f10c 0203 	add.w	r2, ip, #3
 800fbb4:	1b52      	subs	r2, r2, r5
 800fbb6:	f022 0203 	bic.w	r2, r2, #3
 800fbba:	3d03      	subs	r5, #3
 800fbbc:	45ac      	cmp	ip, r5
 800fbbe:	bf38      	it	cc
 800fbc0:	2200      	movcc	r2, #0
 800fbc2:	4413      	add	r3, r2
 800fbc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fbc8:	b17a      	cbz	r2, 800fbea <__mdiff+0x106>
 800fbca:	6107      	str	r7, [r0, #16]
 800fbcc:	e7a4      	b.n	800fb18 <__mdiff+0x34>
 800fbce:	f856 8b04 	ldr.w	r8, [r6], #4
 800fbd2:	fa11 f288 	uxtah	r2, r1, r8
 800fbd6:	1414      	asrs	r4, r2, #16
 800fbd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbdc:	b292      	uxth	r2, r2
 800fbde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbe2:	f84e 2b04 	str.w	r2, [lr], #4
 800fbe6:	1421      	asrs	r1, r4, #16
 800fbe8:	e7e0      	b.n	800fbac <__mdiff+0xc8>
 800fbea:	3f01      	subs	r7, #1
 800fbec:	e7ea      	b.n	800fbc4 <__mdiff+0xe0>
 800fbee:	bf00      	nop
 800fbf0:	0801126e 	.word	0x0801126e
 800fbf4:	080112df 	.word	0x080112df

0800fbf8 <__ulp>:
 800fbf8:	b082      	sub	sp, #8
 800fbfa:	ed8d 0b00 	vstr	d0, [sp]
 800fbfe:	9a01      	ldr	r2, [sp, #4]
 800fc00:	4b0f      	ldr	r3, [pc, #60]	; (800fc40 <__ulp+0x48>)
 800fc02:	4013      	ands	r3, r2
 800fc04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	dc08      	bgt.n	800fc1e <__ulp+0x26>
 800fc0c:	425b      	negs	r3, r3
 800fc0e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800fc12:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fc16:	da04      	bge.n	800fc22 <__ulp+0x2a>
 800fc18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fc1c:	4113      	asrs	r3, r2
 800fc1e:	2200      	movs	r2, #0
 800fc20:	e008      	b.n	800fc34 <__ulp+0x3c>
 800fc22:	f1a2 0314 	sub.w	r3, r2, #20
 800fc26:	2b1e      	cmp	r3, #30
 800fc28:	bfda      	itte	le
 800fc2a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fc2e:	40da      	lsrle	r2, r3
 800fc30:	2201      	movgt	r2, #1
 800fc32:	2300      	movs	r3, #0
 800fc34:	4619      	mov	r1, r3
 800fc36:	4610      	mov	r0, r2
 800fc38:	ec41 0b10 	vmov	d0, r0, r1
 800fc3c:	b002      	add	sp, #8
 800fc3e:	4770      	bx	lr
 800fc40:	7ff00000 	.word	0x7ff00000

0800fc44 <__b2d>:
 800fc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc48:	6906      	ldr	r6, [r0, #16]
 800fc4a:	f100 0814 	add.w	r8, r0, #20
 800fc4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fc52:	1f37      	subs	r7, r6, #4
 800fc54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fc58:	4610      	mov	r0, r2
 800fc5a:	f7ff fd53 	bl	800f704 <__hi0bits>
 800fc5e:	f1c0 0320 	rsb	r3, r0, #32
 800fc62:	280a      	cmp	r0, #10
 800fc64:	600b      	str	r3, [r1, #0]
 800fc66:	491b      	ldr	r1, [pc, #108]	; (800fcd4 <__b2d+0x90>)
 800fc68:	dc15      	bgt.n	800fc96 <__b2d+0x52>
 800fc6a:	f1c0 0c0b 	rsb	ip, r0, #11
 800fc6e:	fa22 f30c 	lsr.w	r3, r2, ip
 800fc72:	45b8      	cmp	r8, r7
 800fc74:	ea43 0501 	orr.w	r5, r3, r1
 800fc78:	bf34      	ite	cc
 800fc7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc7e:	2300      	movcs	r3, #0
 800fc80:	3015      	adds	r0, #21
 800fc82:	fa02 f000 	lsl.w	r0, r2, r0
 800fc86:	fa23 f30c 	lsr.w	r3, r3, ip
 800fc8a:	4303      	orrs	r3, r0
 800fc8c:	461c      	mov	r4, r3
 800fc8e:	ec45 4b10 	vmov	d0, r4, r5
 800fc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc96:	45b8      	cmp	r8, r7
 800fc98:	bf3a      	itte	cc
 800fc9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc9e:	f1a6 0708 	subcc.w	r7, r6, #8
 800fca2:	2300      	movcs	r3, #0
 800fca4:	380b      	subs	r0, #11
 800fca6:	d012      	beq.n	800fcce <__b2d+0x8a>
 800fca8:	f1c0 0120 	rsb	r1, r0, #32
 800fcac:	fa23 f401 	lsr.w	r4, r3, r1
 800fcb0:	4082      	lsls	r2, r0
 800fcb2:	4322      	orrs	r2, r4
 800fcb4:	4547      	cmp	r7, r8
 800fcb6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fcba:	bf8c      	ite	hi
 800fcbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fcc0:	2200      	movls	r2, #0
 800fcc2:	4083      	lsls	r3, r0
 800fcc4:	40ca      	lsrs	r2, r1
 800fcc6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fcca:	4313      	orrs	r3, r2
 800fccc:	e7de      	b.n	800fc8c <__b2d+0x48>
 800fcce:	ea42 0501 	orr.w	r5, r2, r1
 800fcd2:	e7db      	b.n	800fc8c <__b2d+0x48>
 800fcd4:	3ff00000 	.word	0x3ff00000

0800fcd8 <__d2b>:
 800fcd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcdc:	460f      	mov	r7, r1
 800fcde:	2101      	movs	r1, #1
 800fce0:	ec59 8b10 	vmov	r8, r9, d0
 800fce4:	4616      	mov	r6, r2
 800fce6:	f7ff fc1b 	bl	800f520 <_Balloc>
 800fcea:	4604      	mov	r4, r0
 800fcec:	b930      	cbnz	r0, 800fcfc <__d2b+0x24>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	4b24      	ldr	r3, [pc, #144]	; (800fd84 <__d2b+0xac>)
 800fcf2:	4825      	ldr	r0, [pc, #148]	; (800fd88 <__d2b+0xb0>)
 800fcf4:	f240 310f 	movw	r1, #783	; 0x30f
 800fcf8:	f7fe ff8a 	bl	800ec10 <__assert_func>
 800fcfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd04:	bb2d      	cbnz	r5, 800fd52 <__d2b+0x7a>
 800fd06:	9301      	str	r3, [sp, #4]
 800fd08:	f1b8 0300 	subs.w	r3, r8, #0
 800fd0c:	d026      	beq.n	800fd5c <__d2b+0x84>
 800fd0e:	4668      	mov	r0, sp
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	f7ff fd17 	bl	800f744 <__lo0bits>
 800fd16:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fd1a:	b1e8      	cbz	r0, 800fd58 <__d2b+0x80>
 800fd1c:	f1c0 0320 	rsb	r3, r0, #32
 800fd20:	fa02 f303 	lsl.w	r3, r2, r3
 800fd24:	430b      	orrs	r3, r1
 800fd26:	40c2      	lsrs	r2, r0
 800fd28:	6163      	str	r3, [r4, #20]
 800fd2a:	9201      	str	r2, [sp, #4]
 800fd2c:	9b01      	ldr	r3, [sp, #4]
 800fd2e:	61a3      	str	r3, [r4, #24]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	bf14      	ite	ne
 800fd34:	2202      	movne	r2, #2
 800fd36:	2201      	moveq	r2, #1
 800fd38:	6122      	str	r2, [r4, #16]
 800fd3a:	b1bd      	cbz	r5, 800fd6c <__d2b+0x94>
 800fd3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd40:	4405      	add	r5, r0
 800fd42:	603d      	str	r5, [r7, #0]
 800fd44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd48:	6030      	str	r0, [r6, #0]
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	b003      	add	sp, #12
 800fd4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd56:	e7d6      	b.n	800fd06 <__d2b+0x2e>
 800fd58:	6161      	str	r1, [r4, #20]
 800fd5a:	e7e7      	b.n	800fd2c <__d2b+0x54>
 800fd5c:	a801      	add	r0, sp, #4
 800fd5e:	f7ff fcf1 	bl	800f744 <__lo0bits>
 800fd62:	9b01      	ldr	r3, [sp, #4]
 800fd64:	6163      	str	r3, [r4, #20]
 800fd66:	3020      	adds	r0, #32
 800fd68:	2201      	movs	r2, #1
 800fd6a:	e7e5      	b.n	800fd38 <__d2b+0x60>
 800fd6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd74:	6038      	str	r0, [r7, #0]
 800fd76:	6918      	ldr	r0, [r3, #16]
 800fd78:	f7ff fcc4 	bl	800f704 <__hi0bits>
 800fd7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd80:	e7e2      	b.n	800fd48 <__d2b+0x70>
 800fd82:	bf00      	nop
 800fd84:	0801126e 	.word	0x0801126e
 800fd88:	080112df 	.word	0x080112df

0800fd8c <__ratio>:
 800fd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd90:	4688      	mov	r8, r1
 800fd92:	4669      	mov	r1, sp
 800fd94:	4681      	mov	r9, r0
 800fd96:	f7ff ff55 	bl	800fc44 <__b2d>
 800fd9a:	a901      	add	r1, sp, #4
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	ec55 4b10 	vmov	r4, r5, d0
 800fda2:	f7ff ff4f 	bl	800fc44 <__b2d>
 800fda6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdaa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fdae:	eba3 0c02 	sub.w	ip, r3, r2
 800fdb2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fdb6:	1a9b      	subs	r3, r3, r2
 800fdb8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fdbc:	ec51 0b10 	vmov	r0, r1, d0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	bfd6      	itet	le
 800fdc4:	460a      	movle	r2, r1
 800fdc6:	462a      	movgt	r2, r5
 800fdc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fdcc:	468b      	mov	fp, r1
 800fdce:	462f      	mov	r7, r5
 800fdd0:	bfd4      	ite	le
 800fdd2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fdd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fdda:	4620      	mov	r0, r4
 800fddc:	ee10 2a10 	vmov	r2, s0
 800fde0:	465b      	mov	r3, fp
 800fde2:	4639      	mov	r1, r7
 800fde4:	f7f0 fd32 	bl	800084c <__aeabi_ddiv>
 800fde8:	ec41 0b10 	vmov	d0, r0, r1
 800fdec:	b003      	add	sp, #12
 800fdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdf2 <__copybits>:
 800fdf2:	3901      	subs	r1, #1
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	1149      	asrs	r1, r1, #5
 800fdf8:	6914      	ldr	r4, [r2, #16]
 800fdfa:	3101      	adds	r1, #1
 800fdfc:	f102 0314 	add.w	r3, r2, #20
 800fe00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fe04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe08:	1f05      	subs	r5, r0, #4
 800fe0a:	42a3      	cmp	r3, r4
 800fe0c:	d30c      	bcc.n	800fe28 <__copybits+0x36>
 800fe0e:	1aa3      	subs	r3, r4, r2
 800fe10:	3b11      	subs	r3, #17
 800fe12:	f023 0303 	bic.w	r3, r3, #3
 800fe16:	3211      	adds	r2, #17
 800fe18:	42a2      	cmp	r2, r4
 800fe1a:	bf88      	it	hi
 800fe1c:	2300      	movhi	r3, #0
 800fe1e:	4418      	add	r0, r3
 800fe20:	2300      	movs	r3, #0
 800fe22:	4288      	cmp	r0, r1
 800fe24:	d305      	bcc.n	800fe32 <__copybits+0x40>
 800fe26:	bd70      	pop	{r4, r5, r6, pc}
 800fe28:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe2c:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe30:	e7eb      	b.n	800fe0a <__copybits+0x18>
 800fe32:	f840 3b04 	str.w	r3, [r0], #4
 800fe36:	e7f4      	b.n	800fe22 <__copybits+0x30>

0800fe38 <__any_on>:
 800fe38:	f100 0214 	add.w	r2, r0, #20
 800fe3c:	6900      	ldr	r0, [r0, #16]
 800fe3e:	114b      	asrs	r3, r1, #5
 800fe40:	4298      	cmp	r0, r3
 800fe42:	b510      	push	{r4, lr}
 800fe44:	db11      	blt.n	800fe6a <__any_on+0x32>
 800fe46:	dd0a      	ble.n	800fe5e <__any_on+0x26>
 800fe48:	f011 011f 	ands.w	r1, r1, #31
 800fe4c:	d007      	beq.n	800fe5e <__any_on+0x26>
 800fe4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe52:	fa24 f001 	lsr.w	r0, r4, r1
 800fe56:	fa00 f101 	lsl.w	r1, r0, r1
 800fe5a:	428c      	cmp	r4, r1
 800fe5c:	d10b      	bne.n	800fe76 <__any_on+0x3e>
 800fe5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d803      	bhi.n	800fe6e <__any_on+0x36>
 800fe66:	2000      	movs	r0, #0
 800fe68:	bd10      	pop	{r4, pc}
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	e7f7      	b.n	800fe5e <__any_on+0x26>
 800fe6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe72:	2900      	cmp	r1, #0
 800fe74:	d0f5      	beq.n	800fe62 <__any_on+0x2a>
 800fe76:	2001      	movs	r0, #1
 800fe78:	e7f6      	b.n	800fe68 <__any_on+0x30>

0800fe7a <__ascii_wctomb>:
 800fe7a:	b149      	cbz	r1, 800fe90 <__ascii_wctomb+0x16>
 800fe7c:	2aff      	cmp	r2, #255	; 0xff
 800fe7e:	bf85      	ittet	hi
 800fe80:	238a      	movhi	r3, #138	; 0x8a
 800fe82:	6003      	strhi	r3, [r0, #0]
 800fe84:	700a      	strbls	r2, [r1, #0]
 800fe86:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe8a:	bf98      	it	ls
 800fe8c:	2001      	movls	r0, #1
 800fe8e:	4770      	bx	lr
 800fe90:	4608      	mov	r0, r1
 800fe92:	4770      	bx	lr

0800fe94 <__ssputs_r>:
 800fe94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe98:	688e      	ldr	r6, [r1, #8]
 800fe9a:	461f      	mov	r7, r3
 800fe9c:	42be      	cmp	r6, r7
 800fe9e:	680b      	ldr	r3, [r1, #0]
 800fea0:	4682      	mov	sl, r0
 800fea2:	460c      	mov	r4, r1
 800fea4:	4690      	mov	r8, r2
 800fea6:	d82c      	bhi.n	800ff02 <__ssputs_r+0x6e>
 800fea8:	898a      	ldrh	r2, [r1, #12]
 800feaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800feae:	d026      	beq.n	800fefe <__ssputs_r+0x6a>
 800feb0:	6965      	ldr	r5, [r4, #20]
 800feb2:	6909      	ldr	r1, [r1, #16]
 800feb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800feb8:	eba3 0901 	sub.w	r9, r3, r1
 800febc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fec0:	1c7b      	adds	r3, r7, #1
 800fec2:	444b      	add	r3, r9
 800fec4:	106d      	asrs	r5, r5, #1
 800fec6:	429d      	cmp	r5, r3
 800fec8:	bf38      	it	cc
 800feca:	461d      	movcc	r5, r3
 800fecc:	0553      	lsls	r3, r2, #21
 800fece:	d527      	bpl.n	800ff20 <__ssputs_r+0x8c>
 800fed0:	4629      	mov	r1, r5
 800fed2:	f7ff fa87 	bl	800f3e4 <_malloc_r>
 800fed6:	4606      	mov	r6, r0
 800fed8:	b360      	cbz	r0, 800ff34 <__ssputs_r+0xa0>
 800feda:	6921      	ldr	r1, [r4, #16]
 800fedc:	464a      	mov	r2, r9
 800fede:	f7fe fe80 	bl	800ebe2 <memcpy>
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feec:	81a3      	strh	r3, [r4, #12]
 800feee:	6126      	str	r6, [r4, #16]
 800fef0:	6165      	str	r5, [r4, #20]
 800fef2:	444e      	add	r6, r9
 800fef4:	eba5 0509 	sub.w	r5, r5, r9
 800fef8:	6026      	str	r6, [r4, #0]
 800fefa:	60a5      	str	r5, [r4, #8]
 800fefc:	463e      	mov	r6, r7
 800fefe:	42be      	cmp	r6, r7
 800ff00:	d900      	bls.n	800ff04 <__ssputs_r+0x70>
 800ff02:	463e      	mov	r6, r7
 800ff04:	6820      	ldr	r0, [r4, #0]
 800ff06:	4632      	mov	r2, r6
 800ff08:	4641      	mov	r1, r8
 800ff0a:	f000 fd45 	bl	8010998 <memmove>
 800ff0e:	68a3      	ldr	r3, [r4, #8]
 800ff10:	1b9b      	subs	r3, r3, r6
 800ff12:	60a3      	str	r3, [r4, #8]
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	4433      	add	r3, r6
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff20:	462a      	mov	r2, r5
 800ff22:	f000 fd80 	bl	8010a26 <_realloc_r>
 800ff26:	4606      	mov	r6, r0
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d1e0      	bne.n	800feee <__ssputs_r+0x5a>
 800ff2c:	6921      	ldr	r1, [r4, #16]
 800ff2e:	4650      	mov	r0, sl
 800ff30:	f7fe fe8c 	bl	800ec4c <_free_r>
 800ff34:	230c      	movs	r3, #12
 800ff36:	f8ca 3000 	str.w	r3, [sl]
 800ff3a:	89a3      	ldrh	r3, [r4, #12]
 800ff3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff40:	81a3      	strh	r3, [r4, #12]
 800ff42:	f04f 30ff 	mov.w	r0, #4294967295
 800ff46:	e7e9      	b.n	800ff1c <__ssputs_r+0x88>

0800ff48 <_svfiprintf_r>:
 800ff48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4c:	4698      	mov	r8, r3
 800ff4e:	898b      	ldrh	r3, [r1, #12]
 800ff50:	061b      	lsls	r3, r3, #24
 800ff52:	b09d      	sub	sp, #116	; 0x74
 800ff54:	4607      	mov	r7, r0
 800ff56:	460d      	mov	r5, r1
 800ff58:	4614      	mov	r4, r2
 800ff5a:	d50e      	bpl.n	800ff7a <_svfiprintf_r+0x32>
 800ff5c:	690b      	ldr	r3, [r1, #16]
 800ff5e:	b963      	cbnz	r3, 800ff7a <_svfiprintf_r+0x32>
 800ff60:	2140      	movs	r1, #64	; 0x40
 800ff62:	f7ff fa3f 	bl	800f3e4 <_malloc_r>
 800ff66:	6028      	str	r0, [r5, #0]
 800ff68:	6128      	str	r0, [r5, #16]
 800ff6a:	b920      	cbnz	r0, 800ff76 <_svfiprintf_r+0x2e>
 800ff6c:	230c      	movs	r3, #12
 800ff6e:	603b      	str	r3, [r7, #0]
 800ff70:	f04f 30ff 	mov.w	r0, #4294967295
 800ff74:	e0d0      	b.n	8010118 <_svfiprintf_r+0x1d0>
 800ff76:	2340      	movs	r3, #64	; 0x40
 800ff78:	616b      	str	r3, [r5, #20]
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff7e:	2320      	movs	r3, #32
 800ff80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff88:	2330      	movs	r3, #48	; 0x30
 800ff8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010130 <_svfiprintf_r+0x1e8>
 800ff8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff92:	f04f 0901 	mov.w	r9, #1
 800ff96:	4623      	mov	r3, r4
 800ff98:	469a      	mov	sl, r3
 800ff9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff9e:	b10a      	cbz	r2, 800ffa4 <_svfiprintf_r+0x5c>
 800ffa0:	2a25      	cmp	r2, #37	; 0x25
 800ffa2:	d1f9      	bne.n	800ff98 <_svfiprintf_r+0x50>
 800ffa4:	ebba 0b04 	subs.w	fp, sl, r4
 800ffa8:	d00b      	beq.n	800ffc2 <_svfiprintf_r+0x7a>
 800ffaa:	465b      	mov	r3, fp
 800ffac:	4622      	mov	r2, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	4638      	mov	r0, r7
 800ffb2:	f7ff ff6f 	bl	800fe94 <__ssputs_r>
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	f000 80a9 	beq.w	801010e <_svfiprintf_r+0x1c6>
 800ffbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffbe:	445a      	add	r2, fp
 800ffc0:	9209      	str	r2, [sp, #36]	; 0x24
 800ffc2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f000 80a1 	beq.w	801010e <_svfiprintf_r+0x1c6>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffd6:	f10a 0a01 	add.w	sl, sl, #1
 800ffda:	9304      	str	r3, [sp, #16]
 800ffdc:	9307      	str	r3, [sp, #28]
 800ffde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffe2:	931a      	str	r3, [sp, #104]	; 0x68
 800ffe4:	4654      	mov	r4, sl
 800ffe6:	2205      	movs	r2, #5
 800ffe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffec:	4850      	ldr	r0, [pc, #320]	; (8010130 <_svfiprintf_r+0x1e8>)
 800ffee:	f7f0 f8f7 	bl	80001e0 <memchr>
 800fff2:	9a04      	ldr	r2, [sp, #16]
 800fff4:	b9d8      	cbnz	r0, 801002e <_svfiprintf_r+0xe6>
 800fff6:	06d0      	lsls	r0, r2, #27
 800fff8:	bf44      	itt	mi
 800fffa:	2320      	movmi	r3, #32
 800fffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010000:	0711      	lsls	r1, r2, #28
 8010002:	bf44      	itt	mi
 8010004:	232b      	movmi	r3, #43	; 0x2b
 8010006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801000a:	f89a 3000 	ldrb.w	r3, [sl]
 801000e:	2b2a      	cmp	r3, #42	; 0x2a
 8010010:	d015      	beq.n	801003e <_svfiprintf_r+0xf6>
 8010012:	9a07      	ldr	r2, [sp, #28]
 8010014:	4654      	mov	r4, sl
 8010016:	2000      	movs	r0, #0
 8010018:	f04f 0c0a 	mov.w	ip, #10
 801001c:	4621      	mov	r1, r4
 801001e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010022:	3b30      	subs	r3, #48	; 0x30
 8010024:	2b09      	cmp	r3, #9
 8010026:	d94d      	bls.n	80100c4 <_svfiprintf_r+0x17c>
 8010028:	b1b0      	cbz	r0, 8010058 <_svfiprintf_r+0x110>
 801002a:	9207      	str	r2, [sp, #28]
 801002c:	e014      	b.n	8010058 <_svfiprintf_r+0x110>
 801002e:	eba0 0308 	sub.w	r3, r0, r8
 8010032:	fa09 f303 	lsl.w	r3, r9, r3
 8010036:	4313      	orrs	r3, r2
 8010038:	9304      	str	r3, [sp, #16]
 801003a:	46a2      	mov	sl, r4
 801003c:	e7d2      	b.n	800ffe4 <_svfiprintf_r+0x9c>
 801003e:	9b03      	ldr	r3, [sp, #12]
 8010040:	1d19      	adds	r1, r3, #4
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	9103      	str	r1, [sp, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	bfbb      	ittet	lt
 801004a:	425b      	neglt	r3, r3
 801004c:	f042 0202 	orrlt.w	r2, r2, #2
 8010050:	9307      	strge	r3, [sp, #28]
 8010052:	9307      	strlt	r3, [sp, #28]
 8010054:	bfb8      	it	lt
 8010056:	9204      	strlt	r2, [sp, #16]
 8010058:	7823      	ldrb	r3, [r4, #0]
 801005a:	2b2e      	cmp	r3, #46	; 0x2e
 801005c:	d10c      	bne.n	8010078 <_svfiprintf_r+0x130>
 801005e:	7863      	ldrb	r3, [r4, #1]
 8010060:	2b2a      	cmp	r3, #42	; 0x2a
 8010062:	d134      	bne.n	80100ce <_svfiprintf_r+0x186>
 8010064:	9b03      	ldr	r3, [sp, #12]
 8010066:	1d1a      	adds	r2, r3, #4
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	9203      	str	r2, [sp, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	bfb8      	it	lt
 8010070:	f04f 33ff 	movlt.w	r3, #4294967295
 8010074:	3402      	adds	r4, #2
 8010076:	9305      	str	r3, [sp, #20]
 8010078:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010140 <_svfiprintf_r+0x1f8>
 801007c:	7821      	ldrb	r1, [r4, #0]
 801007e:	2203      	movs	r2, #3
 8010080:	4650      	mov	r0, sl
 8010082:	f7f0 f8ad 	bl	80001e0 <memchr>
 8010086:	b138      	cbz	r0, 8010098 <_svfiprintf_r+0x150>
 8010088:	9b04      	ldr	r3, [sp, #16]
 801008a:	eba0 000a 	sub.w	r0, r0, sl
 801008e:	2240      	movs	r2, #64	; 0x40
 8010090:	4082      	lsls	r2, r0
 8010092:	4313      	orrs	r3, r2
 8010094:	3401      	adds	r4, #1
 8010096:	9304      	str	r3, [sp, #16]
 8010098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801009c:	4825      	ldr	r0, [pc, #148]	; (8010134 <_svfiprintf_r+0x1ec>)
 801009e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100a2:	2206      	movs	r2, #6
 80100a4:	f7f0 f89c 	bl	80001e0 <memchr>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d038      	beq.n	801011e <_svfiprintf_r+0x1d6>
 80100ac:	4b22      	ldr	r3, [pc, #136]	; (8010138 <_svfiprintf_r+0x1f0>)
 80100ae:	bb1b      	cbnz	r3, 80100f8 <_svfiprintf_r+0x1b0>
 80100b0:	9b03      	ldr	r3, [sp, #12]
 80100b2:	3307      	adds	r3, #7
 80100b4:	f023 0307 	bic.w	r3, r3, #7
 80100b8:	3308      	adds	r3, #8
 80100ba:	9303      	str	r3, [sp, #12]
 80100bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100be:	4433      	add	r3, r6
 80100c0:	9309      	str	r3, [sp, #36]	; 0x24
 80100c2:	e768      	b.n	800ff96 <_svfiprintf_r+0x4e>
 80100c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80100c8:	460c      	mov	r4, r1
 80100ca:	2001      	movs	r0, #1
 80100cc:	e7a6      	b.n	801001c <_svfiprintf_r+0xd4>
 80100ce:	2300      	movs	r3, #0
 80100d0:	3401      	adds	r4, #1
 80100d2:	9305      	str	r3, [sp, #20]
 80100d4:	4619      	mov	r1, r3
 80100d6:	f04f 0c0a 	mov.w	ip, #10
 80100da:	4620      	mov	r0, r4
 80100dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100e0:	3a30      	subs	r2, #48	; 0x30
 80100e2:	2a09      	cmp	r2, #9
 80100e4:	d903      	bls.n	80100ee <_svfiprintf_r+0x1a6>
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0c6      	beq.n	8010078 <_svfiprintf_r+0x130>
 80100ea:	9105      	str	r1, [sp, #20]
 80100ec:	e7c4      	b.n	8010078 <_svfiprintf_r+0x130>
 80100ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80100f2:	4604      	mov	r4, r0
 80100f4:	2301      	movs	r3, #1
 80100f6:	e7f0      	b.n	80100da <_svfiprintf_r+0x192>
 80100f8:	ab03      	add	r3, sp, #12
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	462a      	mov	r2, r5
 80100fe:	4b0f      	ldr	r3, [pc, #60]	; (801013c <_svfiprintf_r+0x1f4>)
 8010100:	a904      	add	r1, sp, #16
 8010102:	4638      	mov	r0, r7
 8010104:	f3af 8000 	nop.w
 8010108:	1c42      	adds	r2, r0, #1
 801010a:	4606      	mov	r6, r0
 801010c:	d1d6      	bne.n	80100bc <_svfiprintf_r+0x174>
 801010e:	89ab      	ldrh	r3, [r5, #12]
 8010110:	065b      	lsls	r3, r3, #25
 8010112:	f53f af2d 	bmi.w	800ff70 <_svfiprintf_r+0x28>
 8010116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010118:	b01d      	add	sp, #116	; 0x74
 801011a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011e:	ab03      	add	r3, sp, #12
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	462a      	mov	r2, r5
 8010124:	4b05      	ldr	r3, [pc, #20]	; (801013c <_svfiprintf_r+0x1f4>)
 8010126:	a904      	add	r1, sp, #16
 8010128:	4638      	mov	r0, r7
 801012a:	f000 f9bd 	bl	80104a8 <_printf_i>
 801012e:	e7eb      	b.n	8010108 <_svfiprintf_r+0x1c0>
 8010130:	08011434 	.word	0x08011434
 8010134:	0801143e 	.word	0x0801143e
 8010138:	00000000 	.word	0x00000000
 801013c:	0800fe95 	.word	0x0800fe95
 8010140:	0801143a 	.word	0x0801143a

08010144 <__sfputc_r>:
 8010144:	6893      	ldr	r3, [r2, #8]
 8010146:	3b01      	subs	r3, #1
 8010148:	2b00      	cmp	r3, #0
 801014a:	b410      	push	{r4}
 801014c:	6093      	str	r3, [r2, #8]
 801014e:	da08      	bge.n	8010162 <__sfputc_r+0x1e>
 8010150:	6994      	ldr	r4, [r2, #24]
 8010152:	42a3      	cmp	r3, r4
 8010154:	db01      	blt.n	801015a <__sfputc_r+0x16>
 8010156:	290a      	cmp	r1, #10
 8010158:	d103      	bne.n	8010162 <__sfputc_r+0x1e>
 801015a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801015e:	f000 bb85 	b.w	801086c <__swbuf_r>
 8010162:	6813      	ldr	r3, [r2, #0]
 8010164:	1c58      	adds	r0, r3, #1
 8010166:	6010      	str	r0, [r2, #0]
 8010168:	7019      	strb	r1, [r3, #0]
 801016a:	4608      	mov	r0, r1
 801016c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010170:	4770      	bx	lr

08010172 <__sfputs_r>:
 8010172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010174:	4606      	mov	r6, r0
 8010176:	460f      	mov	r7, r1
 8010178:	4614      	mov	r4, r2
 801017a:	18d5      	adds	r5, r2, r3
 801017c:	42ac      	cmp	r4, r5
 801017e:	d101      	bne.n	8010184 <__sfputs_r+0x12>
 8010180:	2000      	movs	r0, #0
 8010182:	e007      	b.n	8010194 <__sfputs_r+0x22>
 8010184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010188:	463a      	mov	r2, r7
 801018a:	4630      	mov	r0, r6
 801018c:	f7ff ffda 	bl	8010144 <__sfputc_r>
 8010190:	1c43      	adds	r3, r0, #1
 8010192:	d1f3      	bne.n	801017c <__sfputs_r+0xa>
 8010194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010198 <_vfiprintf_r>:
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	460d      	mov	r5, r1
 801019e:	b09d      	sub	sp, #116	; 0x74
 80101a0:	4614      	mov	r4, r2
 80101a2:	4698      	mov	r8, r3
 80101a4:	4606      	mov	r6, r0
 80101a6:	b118      	cbz	r0, 80101b0 <_vfiprintf_r+0x18>
 80101a8:	6a03      	ldr	r3, [r0, #32]
 80101aa:	b90b      	cbnz	r3, 80101b0 <_vfiprintf_r+0x18>
 80101ac:	f7fe fb58 	bl	800e860 <__sinit>
 80101b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101b2:	07d9      	lsls	r1, r3, #31
 80101b4:	d405      	bmi.n	80101c2 <_vfiprintf_r+0x2a>
 80101b6:	89ab      	ldrh	r3, [r5, #12]
 80101b8:	059a      	lsls	r2, r3, #22
 80101ba:	d402      	bmi.n	80101c2 <_vfiprintf_r+0x2a>
 80101bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101be:	f7fe fd0e 	bl	800ebde <__retarget_lock_acquire_recursive>
 80101c2:	89ab      	ldrh	r3, [r5, #12]
 80101c4:	071b      	lsls	r3, r3, #28
 80101c6:	d501      	bpl.n	80101cc <_vfiprintf_r+0x34>
 80101c8:	692b      	ldr	r3, [r5, #16]
 80101ca:	b99b      	cbnz	r3, 80101f4 <_vfiprintf_r+0x5c>
 80101cc:	4629      	mov	r1, r5
 80101ce:	4630      	mov	r0, r6
 80101d0:	f000 fb8a 	bl	80108e8 <__swsetup_r>
 80101d4:	b170      	cbz	r0, 80101f4 <_vfiprintf_r+0x5c>
 80101d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101d8:	07dc      	lsls	r4, r3, #31
 80101da:	d504      	bpl.n	80101e6 <_vfiprintf_r+0x4e>
 80101dc:	f04f 30ff 	mov.w	r0, #4294967295
 80101e0:	b01d      	add	sp, #116	; 0x74
 80101e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e6:	89ab      	ldrh	r3, [r5, #12]
 80101e8:	0598      	lsls	r0, r3, #22
 80101ea:	d4f7      	bmi.n	80101dc <_vfiprintf_r+0x44>
 80101ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101ee:	f7fe fcf7 	bl	800ebe0 <__retarget_lock_release_recursive>
 80101f2:	e7f3      	b.n	80101dc <_vfiprintf_r+0x44>
 80101f4:	2300      	movs	r3, #0
 80101f6:	9309      	str	r3, [sp, #36]	; 0x24
 80101f8:	2320      	movs	r3, #32
 80101fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010202:	2330      	movs	r3, #48	; 0x30
 8010204:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80103b8 <_vfiprintf_r+0x220>
 8010208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801020c:	f04f 0901 	mov.w	r9, #1
 8010210:	4623      	mov	r3, r4
 8010212:	469a      	mov	sl, r3
 8010214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010218:	b10a      	cbz	r2, 801021e <_vfiprintf_r+0x86>
 801021a:	2a25      	cmp	r2, #37	; 0x25
 801021c:	d1f9      	bne.n	8010212 <_vfiprintf_r+0x7a>
 801021e:	ebba 0b04 	subs.w	fp, sl, r4
 8010222:	d00b      	beq.n	801023c <_vfiprintf_r+0xa4>
 8010224:	465b      	mov	r3, fp
 8010226:	4622      	mov	r2, r4
 8010228:	4629      	mov	r1, r5
 801022a:	4630      	mov	r0, r6
 801022c:	f7ff ffa1 	bl	8010172 <__sfputs_r>
 8010230:	3001      	adds	r0, #1
 8010232:	f000 80a9 	beq.w	8010388 <_vfiprintf_r+0x1f0>
 8010236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010238:	445a      	add	r2, fp
 801023a:	9209      	str	r2, [sp, #36]	; 0x24
 801023c:	f89a 3000 	ldrb.w	r3, [sl]
 8010240:	2b00      	cmp	r3, #0
 8010242:	f000 80a1 	beq.w	8010388 <_vfiprintf_r+0x1f0>
 8010246:	2300      	movs	r3, #0
 8010248:	f04f 32ff 	mov.w	r2, #4294967295
 801024c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010250:	f10a 0a01 	add.w	sl, sl, #1
 8010254:	9304      	str	r3, [sp, #16]
 8010256:	9307      	str	r3, [sp, #28]
 8010258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801025c:	931a      	str	r3, [sp, #104]	; 0x68
 801025e:	4654      	mov	r4, sl
 8010260:	2205      	movs	r2, #5
 8010262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010266:	4854      	ldr	r0, [pc, #336]	; (80103b8 <_vfiprintf_r+0x220>)
 8010268:	f7ef ffba 	bl	80001e0 <memchr>
 801026c:	9a04      	ldr	r2, [sp, #16]
 801026e:	b9d8      	cbnz	r0, 80102a8 <_vfiprintf_r+0x110>
 8010270:	06d1      	lsls	r1, r2, #27
 8010272:	bf44      	itt	mi
 8010274:	2320      	movmi	r3, #32
 8010276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801027a:	0713      	lsls	r3, r2, #28
 801027c:	bf44      	itt	mi
 801027e:	232b      	movmi	r3, #43	; 0x2b
 8010280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010284:	f89a 3000 	ldrb.w	r3, [sl]
 8010288:	2b2a      	cmp	r3, #42	; 0x2a
 801028a:	d015      	beq.n	80102b8 <_vfiprintf_r+0x120>
 801028c:	9a07      	ldr	r2, [sp, #28]
 801028e:	4654      	mov	r4, sl
 8010290:	2000      	movs	r0, #0
 8010292:	f04f 0c0a 	mov.w	ip, #10
 8010296:	4621      	mov	r1, r4
 8010298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801029c:	3b30      	subs	r3, #48	; 0x30
 801029e:	2b09      	cmp	r3, #9
 80102a0:	d94d      	bls.n	801033e <_vfiprintf_r+0x1a6>
 80102a2:	b1b0      	cbz	r0, 80102d2 <_vfiprintf_r+0x13a>
 80102a4:	9207      	str	r2, [sp, #28]
 80102a6:	e014      	b.n	80102d2 <_vfiprintf_r+0x13a>
 80102a8:	eba0 0308 	sub.w	r3, r0, r8
 80102ac:	fa09 f303 	lsl.w	r3, r9, r3
 80102b0:	4313      	orrs	r3, r2
 80102b2:	9304      	str	r3, [sp, #16]
 80102b4:	46a2      	mov	sl, r4
 80102b6:	e7d2      	b.n	801025e <_vfiprintf_r+0xc6>
 80102b8:	9b03      	ldr	r3, [sp, #12]
 80102ba:	1d19      	adds	r1, r3, #4
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	9103      	str	r1, [sp, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	bfbb      	ittet	lt
 80102c4:	425b      	neglt	r3, r3
 80102c6:	f042 0202 	orrlt.w	r2, r2, #2
 80102ca:	9307      	strge	r3, [sp, #28]
 80102cc:	9307      	strlt	r3, [sp, #28]
 80102ce:	bfb8      	it	lt
 80102d0:	9204      	strlt	r2, [sp, #16]
 80102d2:	7823      	ldrb	r3, [r4, #0]
 80102d4:	2b2e      	cmp	r3, #46	; 0x2e
 80102d6:	d10c      	bne.n	80102f2 <_vfiprintf_r+0x15a>
 80102d8:	7863      	ldrb	r3, [r4, #1]
 80102da:	2b2a      	cmp	r3, #42	; 0x2a
 80102dc:	d134      	bne.n	8010348 <_vfiprintf_r+0x1b0>
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	1d1a      	adds	r2, r3, #4
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	9203      	str	r2, [sp, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	bfb8      	it	lt
 80102ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80102ee:	3402      	adds	r4, #2
 80102f0:	9305      	str	r3, [sp, #20]
 80102f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80103c8 <_vfiprintf_r+0x230>
 80102f6:	7821      	ldrb	r1, [r4, #0]
 80102f8:	2203      	movs	r2, #3
 80102fa:	4650      	mov	r0, sl
 80102fc:	f7ef ff70 	bl	80001e0 <memchr>
 8010300:	b138      	cbz	r0, 8010312 <_vfiprintf_r+0x17a>
 8010302:	9b04      	ldr	r3, [sp, #16]
 8010304:	eba0 000a 	sub.w	r0, r0, sl
 8010308:	2240      	movs	r2, #64	; 0x40
 801030a:	4082      	lsls	r2, r0
 801030c:	4313      	orrs	r3, r2
 801030e:	3401      	adds	r4, #1
 8010310:	9304      	str	r3, [sp, #16]
 8010312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010316:	4829      	ldr	r0, [pc, #164]	; (80103bc <_vfiprintf_r+0x224>)
 8010318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801031c:	2206      	movs	r2, #6
 801031e:	f7ef ff5f 	bl	80001e0 <memchr>
 8010322:	2800      	cmp	r0, #0
 8010324:	d03f      	beq.n	80103a6 <_vfiprintf_r+0x20e>
 8010326:	4b26      	ldr	r3, [pc, #152]	; (80103c0 <_vfiprintf_r+0x228>)
 8010328:	bb1b      	cbnz	r3, 8010372 <_vfiprintf_r+0x1da>
 801032a:	9b03      	ldr	r3, [sp, #12]
 801032c:	3307      	adds	r3, #7
 801032e:	f023 0307 	bic.w	r3, r3, #7
 8010332:	3308      	adds	r3, #8
 8010334:	9303      	str	r3, [sp, #12]
 8010336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010338:	443b      	add	r3, r7
 801033a:	9309      	str	r3, [sp, #36]	; 0x24
 801033c:	e768      	b.n	8010210 <_vfiprintf_r+0x78>
 801033e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010342:	460c      	mov	r4, r1
 8010344:	2001      	movs	r0, #1
 8010346:	e7a6      	b.n	8010296 <_vfiprintf_r+0xfe>
 8010348:	2300      	movs	r3, #0
 801034a:	3401      	adds	r4, #1
 801034c:	9305      	str	r3, [sp, #20]
 801034e:	4619      	mov	r1, r3
 8010350:	f04f 0c0a 	mov.w	ip, #10
 8010354:	4620      	mov	r0, r4
 8010356:	f810 2b01 	ldrb.w	r2, [r0], #1
 801035a:	3a30      	subs	r2, #48	; 0x30
 801035c:	2a09      	cmp	r2, #9
 801035e:	d903      	bls.n	8010368 <_vfiprintf_r+0x1d0>
 8010360:	2b00      	cmp	r3, #0
 8010362:	d0c6      	beq.n	80102f2 <_vfiprintf_r+0x15a>
 8010364:	9105      	str	r1, [sp, #20]
 8010366:	e7c4      	b.n	80102f2 <_vfiprintf_r+0x15a>
 8010368:	fb0c 2101 	mla	r1, ip, r1, r2
 801036c:	4604      	mov	r4, r0
 801036e:	2301      	movs	r3, #1
 8010370:	e7f0      	b.n	8010354 <_vfiprintf_r+0x1bc>
 8010372:	ab03      	add	r3, sp, #12
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	462a      	mov	r2, r5
 8010378:	4b12      	ldr	r3, [pc, #72]	; (80103c4 <_vfiprintf_r+0x22c>)
 801037a:	a904      	add	r1, sp, #16
 801037c:	4630      	mov	r0, r6
 801037e:	f3af 8000 	nop.w
 8010382:	4607      	mov	r7, r0
 8010384:	1c78      	adds	r0, r7, #1
 8010386:	d1d6      	bne.n	8010336 <_vfiprintf_r+0x19e>
 8010388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801038a:	07d9      	lsls	r1, r3, #31
 801038c:	d405      	bmi.n	801039a <_vfiprintf_r+0x202>
 801038e:	89ab      	ldrh	r3, [r5, #12]
 8010390:	059a      	lsls	r2, r3, #22
 8010392:	d402      	bmi.n	801039a <_vfiprintf_r+0x202>
 8010394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010396:	f7fe fc23 	bl	800ebe0 <__retarget_lock_release_recursive>
 801039a:	89ab      	ldrh	r3, [r5, #12]
 801039c:	065b      	lsls	r3, r3, #25
 801039e:	f53f af1d 	bmi.w	80101dc <_vfiprintf_r+0x44>
 80103a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103a4:	e71c      	b.n	80101e0 <_vfiprintf_r+0x48>
 80103a6:	ab03      	add	r3, sp, #12
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	462a      	mov	r2, r5
 80103ac:	4b05      	ldr	r3, [pc, #20]	; (80103c4 <_vfiprintf_r+0x22c>)
 80103ae:	a904      	add	r1, sp, #16
 80103b0:	4630      	mov	r0, r6
 80103b2:	f000 f879 	bl	80104a8 <_printf_i>
 80103b6:	e7e4      	b.n	8010382 <_vfiprintf_r+0x1ea>
 80103b8:	08011434 	.word	0x08011434
 80103bc:	0801143e 	.word	0x0801143e
 80103c0:	00000000 	.word	0x00000000
 80103c4:	08010173 	.word	0x08010173
 80103c8:	0801143a 	.word	0x0801143a

080103cc <_printf_common>:
 80103cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	4616      	mov	r6, r2
 80103d2:	4699      	mov	r9, r3
 80103d4:	688a      	ldr	r2, [r1, #8]
 80103d6:	690b      	ldr	r3, [r1, #16]
 80103d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80103dc:	4293      	cmp	r3, r2
 80103de:	bfb8      	it	lt
 80103e0:	4613      	movlt	r3, r2
 80103e2:	6033      	str	r3, [r6, #0]
 80103e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80103e8:	4607      	mov	r7, r0
 80103ea:	460c      	mov	r4, r1
 80103ec:	b10a      	cbz	r2, 80103f2 <_printf_common+0x26>
 80103ee:	3301      	adds	r3, #1
 80103f0:	6033      	str	r3, [r6, #0]
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	0699      	lsls	r1, r3, #26
 80103f6:	bf42      	ittt	mi
 80103f8:	6833      	ldrmi	r3, [r6, #0]
 80103fa:	3302      	addmi	r3, #2
 80103fc:	6033      	strmi	r3, [r6, #0]
 80103fe:	6825      	ldr	r5, [r4, #0]
 8010400:	f015 0506 	ands.w	r5, r5, #6
 8010404:	d106      	bne.n	8010414 <_printf_common+0x48>
 8010406:	f104 0a19 	add.w	sl, r4, #25
 801040a:	68e3      	ldr	r3, [r4, #12]
 801040c:	6832      	ldr	r2, [r6, #0]
 801040e:	1a9b      	subs	r3, r3, r2
 8010410:	42ab      	cmp	r3, r5
 8010412:	dc26      	bgt.n	8010462 <_printf_common+0x96>
 8010414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010418:	1e13      	subs	r3, r2, #0
 801041a:	6822      	ldr	r2, [r4, #0]
 801041c:	bf18      	it	ne
 801041e:	2301      	movne	r3, #1
 8010420:	0692      	lsls	r2, r2, #26
 8010422:	d42b      	bmi.n	801047c <_printf_common+0xb0>
 8010424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010428:	4649      	mov	r1, r9
 801042a:	4638      	mov	r0, r7
 801042c:	47c0      	blx	r8
 801042e:	3001      	adds	r0, #1
 8010430:	d01e      	beq.n	8010470 <_printf_common+0xa4>
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	6922      	ldr	r2, [r4, #16]
 8010436:	f003 0306 	and.w	r3, r3, #6
 801043a:	2b04      	cmp	r3, #4
 801043c:	bf02      	ittt	eq
 801043e:	68e5      	ldreq	r5, [r4, #12]
 8010440:	6833      	ldreq	r3, [r6, #0]
 8010442:	1aed      	subeq	r5, r5, r3
 8010444:	68a3      	ldr	r3, [r4, #8]
 8010446:	bf0c      	ite	eq
 8010448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801044c:	2500      	movne	r5, #0
 801044e:	4293      	cmp	r3, r2
 8010450:	bfc4      	itt	gt
 8010452:	1a9b      	subgt	r3, r3, r2
 8010454:	18ed      	addgt	r5, r5, r3
 8010456:	2600      	movs	r6, #0
 8010458:	341a      	adds	r4, #26
 801045a:	42b5      	cmp	r5, r6
 801045c:	d11a      	bne.n	8010494 <_printf_common+0xc8>
 801045e:	2000      	movs	r0, #0
 8010460:	e008      	b.n	8010474 <_printf_common+0xa8>
 8010462:	2301      	movs	r3, #1
 8010464:	4652      	mov	r2, sl
 8010466:	4649      	mov	r1, r9
 8010468:	4638      	mov	r0, r7
 801046a:	47c0      	blx	r8
 801046c:	3001      	adds	r0, #1
 801046e:	d103      	bne.n	8010478 <_printf_common+0xac>
 8010470:	f04f 30ff 	mov.w	r0, #4294967295
 8010474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010478:	3501      	adds	r5, #1
 801047a:	e7c6      	b.n	801040a <_printf_common+0x3e>
 801047c:	18e1      	adds	r1, r4, r3
 801047e:	1c5a      	adds	r2, r3, #1
 8010480:	2030      	movs	r0, #48	; 0x30
 8010482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010486:	4422      	add	r2, r4
 8010488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801048c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010490:	3302      	adds	r3, #2
 8010492:	e7c7      	b.n	8010424 <_printf_common+0x58>
 8010494:	2301      	movs	r3, #1
 8010496:	4622      	mov	r2, r4
 8010498:	4649      	mov	r1, r9
 801049a:	4638      	mov	r0, r7
 801049c:	47c0      	blx	r8
 801049e:	3001      	adds	r0, #1
 80104a0:	d0e6      	beq.n	8010470 <_printf_common+0xa4>
 80104a2:	3601      	adds	r6, #1
 80104a4:	e7d9      	b.n	801045a <_printf_common+0x8e>
	...

080104a8 <_printf_i>:
 80104a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104ac:	7e0f      	ldrb	r7, [r1, #24]
 80104ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104b0:	2f78      	cmp	r7, #120	; 0x78
 80104b2:	4691      	mov	r9, r2
 80104b4:	4680      	mov	r8, r0
 80104b6:	460c      	mov	r4, r1
 80104b8:	469a      	mov	sl, r3
 80104ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80104be:	d807      	bhi.n	80104d0 <_printf_i+0x28>
 80104c0:	2f62      	cmp	r7, #98	; 0x62
 80104c2:	d80a      	bhi.n	80104da <_printf_i+0x32>
 80104c4:	2f00      	cmp	r7, #0
 80104c6:	f000 80d4 	beq.w	8010672 <_printf_i+0x1ca>
 80104ca:	2f58      	cmp	r7, #88	; 0x58
 80104cc:	f000 80c0 	beq.w	8010650 <_printf_i+0x1a8>
 80104d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80104d8:	e03a      	b.n	8010550 <_printf_i+0xa8>
 80104da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80104de:	2b15      	cmp	r3, #21
 80104e0:	d8f6      	bhi.n	80104d0 <_printf_i+0x28>
 80104e2:	a101      	add	r1, pc, #4	; (adr r1, 80104e8 <_printf_i+0x40>)
 80104e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80104e8:	08010541 	.word	0x08010541
 80104ec:	08010555 	.word	0x08010555
 80104f0:	080104d1 	.word	0x080104d1
 80104f4:	080104d1 	.word	0x080104d1
 80104f8:	080104d1 	.word	0x080104d1
 80104fc:	080104d1 	.word	0x080104d1
 8010500:	08010555 	.word	0x08010555
 8010504:	080104d1 	.word	0x080104d1
 8010508:	080104d1 	.word	0x080104d1
 801050c:	080104d1 	.word	0x080104d1
 8010510:	080104d1 	.word	0x080104d1
 8010514:	08010659 	.word	0x08010659
 8010518:	08010581 	.word	0x08010581
 801051c:	08010613 	.word	0x08010613
 8010520:	080104d1 	.word	0x080104d1
 8010524:	080104d1 	.word	0x080104d1
 8010528:	0801067b 	.word	0x0801067b
 801052c:	080104d1 	.word	0x080104d1
 8010530:	08010581 	.word	0x08010581
 8010534:	080104d1 	.word	0x080104d1
 8010538:	080104d1 	.word	0x080104d1
 801053c:	0801061b 	.word	0x0801061b
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	1d1a      	adds	r2, r3, #4
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	602a      	str	r2, [r5, #0]
 8010548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801054c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010550:	2301      	movs	r3, #1
 8010552:	e09f      	b.n	8010694 <_printf_i+0x1ec>
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	682b      	ldr	r3, [r5, #0]
 8010558:	0607      	lsls	r7, r0, #24
 801055a:	f103 0104 	add.w	r1, r3, #4
 801055e:	6029      	str	r1, [r5, #0]
 8010560:	d501      	bpl.n	8010566 <_printf_i+0xbe>
 8010562:	681e      	ldr	r6, [r3, #0]
 8010564:	e003      	b.n	801056e <_printf_i+0xc6>
 8010566:	0646      	lsls	r6, r0, #25
 8010568:	d5fb      	bpl.n	8010562 <_printf_i+0xba>
 801056a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801056e:	2e00      	cmp	r6, #0
 8010570:	da03      	bge.n	801057a <_printf_i+0xd2>
 8010572:	232d      	movs	r3, #45	; 0x2d
 8010574:	4276      	negs	r6, r6
 8010576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801057a:	485a      	ldr	r0, [pc, #360]	; (80106e4 <_printf_i+0x23c>)
 801057c:	230a      	movs	r3, #10
 801057e:	e012      	b.n	80105a6 <_printf_i+0xfe>
 8010580:	682b      	ldr	r3, [r5, #0]
 8010582:	6820      	ldr	r0, [r4, #0]
 8010584:	1d19      	adds	r1, r3, #4
 8010586:	6029      	str	r1, [r5, #0]
 8010588:	0605      	lsls	r5, r0, #24
 801058a:	d501      	bpl.n	8010590 <_printf_i+0xe8>
 801058c:	681e      	ldr	r6, [r3, #0]
 801058e:	e002      	b.n	8010596 <_printf_i+0xee>
 8010590:	0641      	lsls	r1, r0, #25
 8010592:	d5fb      	bpl.n	801058c <_printf_i+0xe4>
 8010594:	881e      	ldrh	r6, [r3, #0]
 8010596:	4853      	ldr	r0, [pc, #332]	; (80106e4 <_printf_i+0x23c>)
 8010598:	2f6f      	cmp	r7, #111	; 0x6f
 801059a:	bf0c      	ite	eq
 801059c:	2308      	moveq	r3, #8
 801059e:	230a      	movne	r3, #10
 80105a0:	2100      	movs	r1, #0
 80105a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105a6:	6865      	ldr	r5, [r4, #4]
 80105a8:	60a5      	str	r5, [r4, #8]
 80105aa:	2d00      	cmp	r5, #0
 80105ac:	bfa2      	ittt	ge
 80105ae:	6821      	ldrge	r1, [r4, #0]
 80105b0:	f021 0104 	bicge.w	r1, r1, #4
 80105b4:	6021      	strge	r1, [r4, #0]
 80105b6:	b90e      	cbnz	r6, 80105bc <_printf_i+0x114>
 80105b8:	2d00      	cmp	r5, #0
 80105ba:	d04b      	beq.n	8010654 <_printf_i+0x1ac>
 80105bc:	4615      	mov	r5, r2
 80105be:	fbb6 f1f3 	udiv	r1, r6, r3
 80105c2:	fb03 6711 	mls	r7, r3, r1, r6
 80105c6:	5dc7      	ldrb	r7, [r0, r7]
 80105c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80105cc:	4637      	mov	r7, r6
 80105ce:	42bb      	cmp	r3, r7
 80105d0:	460e      	mov	r6, r1
 80105d2:	d9f4      	bls.n	80105be <_printf_i+0x116>
 80105d4:	2b08      	cmp	r3, #8
 80105d6:	d10b      	bne.n	80105f0 <_printf_i+0x148>
 80105d8:	6823      	ldr	r3, [r4, #0]
 80105da:	07de      	lsls	r6, r3, #31
 80105dc:	d508      	bpl.n	80105f0 <_printf_i+0x148>
 80105de:	6923      	ldr	r3, [r4, #16]
 80105e0:	6861      	ldr	r1, [r4, #4]
 80105e2:	4299      	cmp	r1, r3
 80105e4:	bfde      	ittt	le
 80105e6:	2330      	movle	r3, #48	; 0x30
 80105e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80105ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80105f0:	1b52      	subs	r2, r2, r5
 80105f2:	6122      	str	r2, [r4, #16]
 80105f4:	f8cd a000 	str.w	sl, [sp]
 80105f8:	464b      	mov	r3, r9
 80105fa:	aa03      	add	r2, sp, #12
 80105fc:	4621      	mov	r1, r4
 80105fe:	4640      	mov	r0, r8
 8010600:	f7ff fee4 	bl	80103cc <_printf_common>
 8010604:	3001      	adds	r0, #1
 8010606:	d14a      	bne.n	801069e <_printf_i+0x1f6>
 8010608:	f04f 30ff 	mov.w	r0, #4294967295
 801060c:	b004      	add	sp, #16
 801060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010612:	6823      	ldr	r3, [r4, #0]
 8010614:	f043 0320 	orr.w	r3, r3, #32
 8010618:	6023      	str	r3, [r4, #0]
 801061a:	4833      	ldr	r0, [pc, #204]	; (80106e8 <_printf_i+0x240>)
 801061c:	2778      	movs	r7, #120	; 0x78
 801061e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	6829      	ldr	r1, [r5, #0]
 8010626:	061f      	lsls	r7, r3, #24
 8010628:	f851 6b04 	ldr.w	r6, [r1], #4
 801062c:	d402      	bmi.n	8010634 <_printf_i+0x18c>
 801062e:	065f      	lsls	r7, r3, #25
 8010630:	bf48      	it	mi
 8010632:	b2b6      	uxthmi	r6, r6
 8010634:	07df      	lsls	r7, r3, #31
 8010636:	bf48      	it	mi
 8010638:	f043 0320 	orrmi.w	r3, r3, #32
 801063c:	6029      	str	r1, [r5, #0]
 801063e:	bf48      	it	mi
 8010640:	6023      	strmi	r3, [r4, #0]
 8010642:	b91e      	cbnz	r6, 801064c <_printf_i+0x1a4>
 8010644:	6823      	ldr	r3, [r4, #0]
 8010646:	f023 0320 	bic.w	r3, r3, #32
 801064a:	6023      	str	r3, [r4, #0]
 801064c:	2310      	movs	r3, #16
 801064e:	e7a7      	b.n	80105a0 <_printf_i+0xf8>
 8010650:	4824      	ldr	r0, [pc, #144]	; (80106e4 <_printf_i+0x23c>)
 8010652:	e7e4      	b.n	801061e <_printf_i+0x176>
 8010654:	4615      	mov	r5, r2
 8010656:	e7bd      	b.n	80105d4 <_printf_i+0x12c>
 8010658:	682b      	ldr	r3, [r5, #0]
 801065a:	6826      	ldr	r6, [r4, #0]
 801065c:	6961      	ldr	r1, [r4, #20]
 801065e:	1d18      	adds	r0, r3, #4
 8010660:	6028      	str	r0, [r5, #0]
 8010662:	0635      	lsls	r5, r6, #24
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	d501      	bpl.n	801066c <_printf_i+0x1c4>
 8010668:	6019      	str	r1, [r3, #0]
 801066a:	e002      	b.n	8010672 <_printf_i+0x1ca>
 801066c:	0670      	lsls	r0, r6, #25
 801066e:	d5fb      	bpl.n	8010668 <_printf_i+0x1c0>
 8010670:	8019      	strh	r1, [r3, #0]
 8010672:	2300      	movs	r3, #0
 8010674:	6123      	str	r3, [r4, #16]
 8010676:	4615      	mov	r5, r2
 8010678:	e7bc      	b.n	80105f4 <_printf_i+0x14c>
 801067a:	682b      	ldr	r3, [r5, #0]
 801067c:	1d1a      	adds	r2, r3, #4
 801067e:	602a      	str	r2, [r5, #0]
 8010680:	681d      	ldr	r5, [r3, #0]
 8010682:	6862      	ldr	r2, [r4, #4]
 8010684:	2100      	movs	r1, #0
 8010686:	4628      	mov	r0, r5
 8010688:	f7ef fdaa 	bl	80001e0 <memchr>
 801068c:	b108      	cbz	r0, 8010692 <_printf_i+0x1ea>
 801068e:	1b40      	subs	r0, r0, r5
 8010690:	6060      	str	r0, [r4, #4]
 8010692:	6863      	ldr	r3, [r4, #4]
 8010694:	6123      	str	r3, [r4, #16]
 8010696:	2300      	movs	r3, #0
 8010698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801069c:	e7aa      	b.n	80105f4 <_printf_i+0x14c>
 801069e:	6923      	ldr	r3, [r4, #16]
 80106a0:	462a      	mov	r2, r5
 80106a2:	4649      	mov	r1, r9
 80106a4:	4640      	mov	r0, r8
 80106a6:	47d0      	blx	sl
 80106a8:	3001      	adds	r0, #1
 80106aa:	d0ad      	beq.n	8010608 <_printf_i+0x160>
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	079b      	lsls	r3, r3, #30
 80106b0:	d413      	bmi.n	80106da <_printf_i+0x232>
 80106b2:	68e0      	ldr	r0, [r4, #12]
 80106b4:	9b03      	ldr	r3, [sp, #12]
 80106b6:	4298      	cmp	r0, r3
 80106b8:	bfb8      	it	lt
 80106ba:	4618      	movlt	r0, r3
 80106bc:	e7a6      	b.n	801060c <_printf_i+0x164>
 80106be:	2301      	movs	r3, #1
 80106c0:	4632      	mov	r2, r6
 80106c2:	4649      	mov	r1, r9
 80106c4:	4640      	mov	r0, r8
 80106c6:	47d0      	blx	sl
 80106c8:	3001      	adds	r0, #1
 80106ca:	d09d      	beq.n	8010608 <_printf_i+0x160>
 80106cc:	3501      	adds	r5, #1
 80106ce:	68e3      	ldr	r3, [r4, #12]
 80106d0:	9903      	ldr	r1, [sp, #12]
 80106d2:	1a5b      	subs	r3, r3, r1
 80106d4:	42ab      	cmp	r3, r5
 80106d6:	dcf2      	bgt.n	80106be <_printf_i+0x216>
 80106d8:	e7eb      	b.n	80106b2 <_printf_i+0x20a>
 80106da:	2500      	movs	r5, #0
 80106dc:	f104 0619 	add.w	r6, r4, #25
 80106e0:	e7f5      	b.n	80106ce <_printf_i+0x226>
 80106e2:	bf00      	nop
 80106e4:	08011445 	.word	0x08011445
 80106e8:	08011456 	.word	0x08011456

080106ec <__sflush_r>:
 80106ec:	898a      	ldrh	r2, [r1, #12]
 80106ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f2:	4605      	mov	r5, r0
 80106f4:	0710      	lsls	r0, r2, #28
 80106f6:	460c      	mov	r4, r1
 80106f8:	d458      	bmi.n	80107ac <__sflush_r+0xc0>
 80106fa:	684b      	ldr	r3, [r1, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	dc05      	bgt.n	801070c <__sflush_r+0x20>
 8010700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010702:	2b00      	cmp	r3, #0
 8010704:	dc02      	bgt.n	801070c <__sflush_r+0x20>
 8010706:	2000      	movs	r0, #0
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801070e:	2e00      	cmp	r6, #0
 8010710:	d0f9      	beq.n	8010706 <__sflush_r+0x1a>
 8010712:	2300      	movs	r3, #0
 8010714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010718:	682f      	ldr	r7, [r5, #0]
 801071a:	6a21      	ldr	r1, [r4, #32]
 801071c:	602b      	str	r3, [r5, #0]
 801071e:	d032      	beq.n	8010786 <__sflush_r+0x9a>
 8010720:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010722:	89a3      	ldrh	r3, [r4, #12]
 8010724:	075a      	lsls	r2, r3, #29
 8010726:	d505      	bpl.n	8010734 <__sflush_r+0x48>
 8010728:	6863      	ldr	r3, [r4, #4]
 801072a:	1ac0      	subs	r0, r0, r3
 801072c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801072e:	b10b      	cbz	r3, 8010734 <__sflush_r+0x48>
 8010730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010732:	1ac0      	subs	r0, r0, r3
 8010734:	2300      	movs	r3, #0
 8010736:	4602      	mov	r2, r0
 8010738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801073a:	6a21      	ldr	r1, [r4, #32]
 801073c:	4628      	mov	r0, r5
 801073e:	47b0      	blx	r6
 8010740:	1c43      	adds	r3, r0, #1
 8010742:	89a3      	ldrh	r3, [r4, #12]
 8010744:	d106      	bne.n	8010754 <__sflush_r+0x68>
 8010746:	6829      	ldr	r1, [r5, #0]
 8010748:	291d      	cmp	r1, #29
 801074a:	d82b      	bhi.n	80107a4 <__sflush_r+0xb8>
 801074c:	4a29      	ldr	r2, [pc, #164]	; (80107f4 <__sflush_r+0x108>)
 801074e:	410a      	asrs	r2, r1
 8010750:	07d6      	lsls	r6, r2, #31
 8010752:	d427      	bmi.n	80107a4 <__sflush_r+0xb8>
 8010754:	2200      	movs	r2, #0
 8010756:	6062      	str	r2, [r4, #4]
 8010758:	04d9      	lsls	r1, r3, #19
 801075a:	6922      	ldr	r2, [r4, #16]
 801075c:	6022      	str	r2, [r4, #0]
 801075e:	d504      	bpl.n	801076a <__sflush_r+0x7e>
 8010760:	1c42      	adds	r2, r0, #1
 8010762:	d101      	bne.n	8010768 <__sflush_r+0x7c>
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	b903      	cbnz	r3, 801076a <__sflush_r+0x7e>
 8010768:	6560      	str	r0, [r4, #84]	; 0x54
 801076a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801076c:	602f      	str	r7, [r5, #0]
 801076e:	2900      	cmp	r1, #0
 8010770:	d0c9      	beq.n	8010706 <__sflush_r+0x1a>
 8010772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010776:	4299      	cmp	r1, r3
 8010778:	d002      	beq.n	8010780 <__sflush_r+0x94>
 801077a:	4628      	mov	r0, r5
 801077c:	f7fe fa66 	bl	800ec4c <_free_r>
 8010780:	2000      	movs	r0, #0
 8010782:	6360      	str	r0, [r4, #52]	; 0x34
 8010784:	e7c0      	b.n	8010708 <__sflush_r+0x1c>
 8010786:	2301      	movs	r3, #1
 8010788:	4628      	mov	r0, r5
 801078a:	47b0      	blx	r6
 801078c:	1c41      	adds	r1, r0, #1
 801078e:	d1c8      	bne.n	8010722 <__sflush_r+0x36>
 8010790:	682b      	ldr	r3, [r5, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d0c5      	beq.n	8010722 <__sflush_r+0x36>
 8010796:	2b1d      	cmp	r3, #29
 8010798:	d001      	beq.n	801079e <__sflush_r+0xb2>
 801079a:	2b16      	cmp	r3, #22
 801079c:	d101      	bne.n	80107a2 <__sflush_r+0xb6>
 801079e:	602f      	str	r7, [r5, #0]
 80107a0:	e7b1      	b.n	8010706 <__sflush_r+0x1a>
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107a8:	81a3      	strh	r3, [r4, #12]
 80107aa:	e7ad      	b.n	8010708 <__sflush_r+0x1c>
 80107ac:	690f      	ldr	r7, [r1, #16]
 80107ae:	2f00      	cmp	r7, #0
 80107b0:	d0a9      	beq.n	8010706 <__sflush_r+0x1a>
 80107b2:	0793      	lsls	r3, r2, #30
 80107b4:	680e      	ldr	r6, [r1, #0]
 80107b6:	bf08      	it	eq
 80107b8:	694b      	ldreq	r3, [r1, #20]
 80107ba:	600f      	str	r7, [r1, #0]
 80107bc:	bf18      	it	ne
 80107be:	2300      	movne	r3, #0
 80107c0:	eba6 0807 	sub.w	r8, r6, r7
 80107c4:	608b      	str	r3, [r1, #8]
 80107c6:	f1b8 0f00 	cmp.w	r8, #0
 80107ca:	dd9c      	ble.n	8010706 <__sflush_r+0x1a>
 80107cc:	6a21      	ldr	r1, [r4, #32]
 80107ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80107d0:	4643      	mov	r3, r8
 80107d2:	463a      	mov	r2, r7
 80107d4:	4628      	mov	r0, r5
 80107d6:	47b0      	blx	r6
 80107d8:	2800      	cmp	r0, #0
 80107da:	dc06      	bgt.n	80107ea <__sflush_r+0xfe>
 80107dc:	89a3      	ldrh	r3, [r4, #12]
 80107de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107e2:	81a3      	strh	r3, [r4, #12]
 80107e4:	f04f 30ff 	mov.w	r0, #4294967295
 80107e8:	e78e      	b.n	8010708 <__sflush_r+0x1c>
 80107ea:	4407      	add	r7, r0
 80107ec:	eba8 0800 	sub.w	r8, r8, r0
 80107f0:	e7e9      	b.n	80107c6 <__sflush_r+0xda>
 80107f2:	bf00      	nop
 80107f4:	dfbffffe 	.word	0xdfbffffe

080107f8 <_fflush_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	690b      	ldr	r3, [r1, #16]
 80107fc:	4605      	mov	r5, r0
 80107fe:	460c      	mov	r4, r1
 8010800:	b913      	cbnz	r3, 8010808 <_fflush_r+0x10>
 8010802:	2500      	movs	r5, #0
 8010804:	4628      	mov	r0, r5
 8010806:	bd38      	pop	{r3, r4, r5, pc}
 8010808:	b118      	cbz	r0, 8010812 <_fflush_r+0x1a>
 801080a:	6a03      	ldr	r3, [r0, #32]
 801080c:	b90b      	cbnz	r3, 8010812 <_fflush_r+0x1a>
 801080e:	f7fe f827 	bl	800e860 <__sinit>
 8010812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d0f3      	beq.n	8010802 <_fflush_r+0xa>
 801081a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801081c:	07d0      	lsls	r0, r2, #31
 801081e:	d404      	bmi.n	801082a <_fflush_r+0x32>
 8010820:	0599      	lsls	r1, r3, #22
 8010822:	d402      	bmi.n	801082a <_fflush_r+0x32>
 8010824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010826:	f7fe f9da 	bl	800ebde <__retarget_lock_acquire_recursive>
 801082a:	4628      	mov	r0, r5
 801082c:	4621      	mov	r1, r4
 801082e:	f7ff ff5d 	bl	80106ec <__sflush_r>
 8010832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010834:	07da      	lsls	r2, r3, #31
 8010836:	4605      	mov	r5, r0
 8010838:	d4e4      	bmi.n	8010804 <_fflush_r+0xc>
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	059b      	lsls	r3, r3, #22
 801083e:	d4e1      	bmi.n	8010804 <_fflush_r+0xc>
 8010840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010842:	f7fe f9cd 	bl	800ebe0 <__retarget_lock_release_recursive>
 8010846:	e7dd      	b.n	8010804 <_fflush_r+0xc>

08010848 <fiprintf>:
 8010848:	b40e      	push	{r1, r2, r3}
 801084a:	b503      	push	{r0, r1, lr}
 801084c:	4601      	mov	r1, r0
 801084e:	ab03      	add	r3, sp, #12
 8010850:	4805      	ldr	r0, [pc, #20]	; (8010868 <fiprintf+0x20>)
 8010852:	f853 2b04 	ldr.w	r2, [r3], #4
 8010856:	6800      	ldr	r0, [r0, #0]
 8010858:	9301      	str	r3, [sp, #4]
 801085a:	f7ff fc9d 	bl	8010198 <_vfiprintf_r>
 801085e:	b002      	add	sp, #8
 8010860:	f85d eb04 	ldr.w	lr, [sp], #4
 8010864:	b003      	add	sp, #12
 8010866:	4770      	bx	lr
 8010868:	20000200 	.word	0x20000200

0801086c <__swbuf_r>:
 801086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801086e:	460e      	mov	r6, r1
 8010870:	4614      	mov	r4, r2
 8010872:	4605      	mov	r5, r0
 8010874:	b118      	cbz	r0, 801087e <__swbuf_r+0x12>
 8010876:	6a03      	ldr	r3, [r0, #32]
 8010878:	b90b      	cbnz	r3, 801087e <__swbuf_r+0x12>
 801087a:	f7fd fff1 	bl	800e860 <__sinit>
 801087e:	69a3      	ldr	r3, [r4, #24]
 8010880:	60a3      	str	r3, [r4, #8]
 8010882:	89a3      	ldrh	r3, [r4, #12]
 8010884:	071a      	lsls	r2, r3, #28
 8010886:	d525      	bpl.n	80108d4 <__swbuf_r+0x68>
 8010888:	6923      	ldr	r3, [r4, #16]
 801088a:	b31b      	cbz	r3, 80108d4 <__swbuf_r+0x68>
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	6922      	ldr	r2, [r4, #16]
 8010890:	1a98      	subs	r0, r3, r2
 8010892:	6963      	ldr	r3, [r4, #20]
 8010894:	b2f6      	uxtb	r6, r6
 8010896:	4283      	cmp	r3, r0
 8010898:	4637      	mov	r7, r6
 801089a:	dc04      	bgt.n	80108a6 <__swbuf_r+0x3a>
 801089c:	4621      	mov	r1, r4
 801089e:	4628      	mov	r0, r5
 80108a0:	f7ff ffaa 	bl	80107f8 <_fflush_r>
 80108a4:	b9e0      	cbnz	r0, 80108e0 <__swbuf_r+0x74>
 80108a6:	68a3      	ldr	r3, [r4, #8]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	60a3      	str	r3, [r4, #8]
 80108ac:	6823      	ldr	r3, [r4, #0]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	6022      	str	r2, [r4, #0]
 80108b2:	701e      	strb	r6, [r3, #0]
 80108b4:	6962      	ldr	r2, [r4, #20]
 80108b6:	1c43      	adds	r3, r0, #1
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d004      	beq.n	80108c6 <__swbuf_r+0x5a>
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	07db      	lsls	r3, r3, #31
 80108c0:	d506      	bpl.n	80108d0 <__swbuf_r+0x64>
 80108c2:	2e0a      	cmp	r6, #10
 80108c4:	d104      	bne.n	80108d0 <__swbuf_r+0x64>
 80108c6:	4621      	mov	r1, r4
 80108c8:	4628      	mov	r0, r5
 80108ca:	f7ff ff95 	bl	80107f8 <_fflush_r>
 80108ce:	b938      	cbnz	r0, 80108e0 <__swbuf_r+0x74>
 80108d0:	4638      	mov	r0, r7
 80108d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108d4:	4621      	mov	r1, r4
 80108d6:	4628      	mov	r0, r5
 80108d8:	f000 f806 	bl	80108e8 <__swsetup_r>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d0d5      	beq.n	801088c <__swbuf_r+0x20>
 80108e0:	f04f 37ff 	mov.w	r7, #4294967295
 80108e4:	e7f4      	b.n	80108d0 <__swbuf_r+0x64>
	...

080108e8 <__swsetup_r>:
 80108e8:	b538      	push	{r3, r4, r5, lr}
 80108ea:	4b2a      	ldr	r3, [pc, #168]	; (8010994 <__swsetup_r+0xac>)
 80108ec:	4605      	mov	r5, r0
 80108ee:	6818      	ldr	r0, [r3, #0]
 80108f0:	460c      	mov	r4, r1
 80108f2:	b118      	cbz	r0, 80108fc <__swsetup_r+0x14>
 80108f4:	6a03      	ldr	r3, [r0, #32]
 80108f6:	b90b      	cbnz	r3, 80108fc <__swsetup_r+0x14>
 80108f8:	f7fd ffb2 	bl	800e860 <__sinit>
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010902:	0718      	lsls	r0, r3, #28
 8010904:	d422      	bmi.n	801094c <__swsetup_r+0x64>
 8010906:	06d9      	lsls	r1, r3, #27
 8010908:	d407      	bmi.n	801091a <__swsetup_r+0x32>
 801090a:	2309      	movs	r3, #9
 801090c:	602b      	str	r3, [r5, #0]
 801090e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010912:	81a3      	strh	r3, [r4, #12]
 8010914:	f04f 30ff 	mov.w	r0, #4294967295
 8010918:	e034      	b.n	8010984 <__swsetup_r+0x9c>
 801091a:	0758      	lsls	r0, r3, #29
 801091c:	d512      	bpl.n	8010944 <__swsetup_r+0x5c>
 801091e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010920:	b141      	cbz	r1, 8010934 <__swsetup_r+0x4c>
 8010922:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010926:	4299      	cmp	r1, r3
 8010928:	d002      	beq.n	8010930 <__swsetup_r+0x48>
 801092a:	4628      	mov	r0, r5
 801092c:	f7fe f98e 	bl	800ec4c <_free_r>
 8010930:	2300      	movs	r3, #0
 8010932:	6363      	str	r3, [r4, #52]	; 0x34
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801093a:	81a3      	strh	r3, [r4, #12]
 801093c:	2300      	movs	r3, #0
 801093e:	6063      	str	r3, [r4, #4]
 8010940:	6923      	ldr	r3, [r4, #16]
 8010942:	6023      	str	r3, [r4, #0]
 8010944:	89a3      	ldrh	r3, [r4, #12]
 8010946:	f043 0308 	orr.w	r3, r3, #8
 801094a:	81a3      	strh	r3, [r4, #12]
 801094c:	6923      	ldr	r3, [r4, #16]
 801094e:	b94b      	cbnz	r3, 8010964 <__swsetup_r+0x7c>
 8010950:	89a3      	ldrh	r3, [r4, #12]
 8010952:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801095a:	d003      	beq.n	8010964 <__swsetup_r+0x7c>
 801095c:	4621      	mov	r1, r4
 801095e:	4628      	mov	r0, r5
 8010960:	f000 f8b6 	bl	8010ad0 <__smakebuf_r>
 8010964:	89a0      	ldrh	r0, [r4, #12]
 8010966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801096a:	f010 0301 	ands.w	r3, r0, #1
 801096e:	d00a      	beq.n	8010986 <__swsetup_r+0x9e>
 8010970:	2300      	movs	r3, #0
 8010972:	60a3      	str	r3, [r4, #8]
 8010974:	6963      	ldr	r3, [r4, #20]
 8010976:	425b      	negs	r3, r3
 8010978:	61a3      	str	r3, [r4, #24]
 801097a:	6923      	ldr	r3, [r4, #16]
 801097c:	b943      	cbnz	r3, 8010990 <__swsetup_r+0xa8>
 801097e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010982:	d1c4      	bne.n	801090e <__swsetup_r+0x26>
 8010984:	bd38      	pop	{r3, r4, r5, pc}
 8010986:	0781      	lsls	r1, r0, #30
 8010988:	bf58      	it	pl
 801098a:	6963      	ldrpl	r3, [r4, #20]
 801098c:	60a3      	str	r3, [r4, #8]
 801098e:	e7f4      	b.n	801097a <__swsetup_r+0x92>
 8010990:	2000      	movs	r0, #0
 8010992:	e7f7      	b.n	8010984 <__swsetup_r+0x9c>
 8010994:	20000200 	.word	0x20000200

08010998 <memmove>:
 8010998:	4288      	cmp	r0, r1
 801099a:	b510      	push	{r4, lr}
 801099c:	eb01 0402 	add.w	r4, r1, r2
 80109a0:	d902      	bls.n	80109a8 <memmove+0x10>
 80109a2:	4284      	cmp	r4, r0
 80109a4:	4623      	mov	r3, r4
 80109a6:	d807      	bhi.n	80109b8 <memmove+0x20>
 80109a8:	1e43      	subs	r3, r0, #1
 80109aa:	42a1      	cmp	r1, r4
 80109ac:	d008      	beq.n	80109c0 <memmove+0x28>
 80109ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109b6:	e7f8      	b.n	80109aa <memmove+0x12>
 80109b8:	4402      	add	r2, r0
 80109ba:	4601      	mov	r1, r0
 80109bc:	428a      	cmp	r2, r1
 80109be:	d100      	bne.n	80109c2 <memmove+0x2a>
 80109c0:	bd10      	pop	{r4, pc}
 80109c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109ca:	e7f7      	b.n	80109bc <memmove+0x24>

080109cc <_sbrk_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d06      	ldr	r5, [pc, #24]	; (80109e8 <_sbrk_r+0x1c>)
 80109d0:	2300      	movs	r3, #0
 80109d2:	4604      	mov	r4, r0
 80109d4:	4608      	mov	r0, r1
 80109d6:	602b      	str	r3, [r5, #0]
 80109d8:	f7f1 feca 	bl	8002770 <_sbrk>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d102      	bne.n	80109e6 <_sbrk_r+0x1a>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	b103      	cbz	r3, 80109e6 <_sbrk_r+0x1a>
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
 80109e8:	20002be4 	.word	0x20002be4

080109ec <abort>:
 80109ec:	b508      	push	{r3, lr}
 80109ee:	2006      	movs	r0, #6
 80109f0:	f000 f8d2 	bl	8010b98 <raise>
 80109f4:	2001      	movs	r0, #1
 80109f6:	f7f1 fe43 	bl	8002680 <_exit>

080109fa <_calloc_r>:
 80109fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109fc:	fba1 2402 	umull	r2, r4, r1, r2
 8010a00:	b94c      	cbnz	r4, 8010a16 <_calloc_r+0x1c>
 8010a02:	4611      	mov	r1, r2
 8010a04:	9201      	str	r2, [sp, #4]
 8010a06:	f7fe fced 	bl	800f3e4 <_malloc_r>
 8010a0a:	9a01      	ldr	r2, [sp, #4]
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	b930      	cbnz	r0, 8010a1e <_calloc_r+0x24>
 8010a10:	4628      	mov	r0, r5
 8010a12:	b003      	add	sp, #12
 8010a14:	bd30      	pop	{r4, r5, pc}
 8010a16:	220c      	movs	r2, #12
 8010a18:	6002      	str	r2, [r0, #0]
 8010a1a:	2500      	movs	r5, #0
 8010a1c:	e7f8      	b.n	8010a10 <_calloc_r+0x16>
 8010a1e:	4621      	mov	r1, r4
 8010a20:	f7fd ffe2 	bl	800e9e8 <memset>
 8010a24:	e7f4      	b.n	8010a10 <_calloc_r+0x16>

08010a26 <_realloc_r>:
 8010a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2a:	4680      	mov	r8, r0
 8010a2c:	4614      	mov	r4, r2
 8010a2e:	460e      	mov	r6, r1
 8010a30:	b921      	cbnz	r1, 8010a3c <_realloc_r+0x16>
 8010a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a36:	4611      	mov	r1, r2
 8010a38:	f7fe bcd4 	b.w	800f3e4 <_malloc_r>
 8010a3c:	b92a      	cbnz	r2, 8010a4a <_realloc_r+0x24>
 8010a3e:	f7fe f905 	bl	800ec4c <_free_r>
 8010a42:	4625      	mov	r5, r4
 8010a44:	4628      	mov	r0, r5
 8010a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a4a:	f000 f8e3 	bl	8010c14 <_malloc_usable_size_r>
 8010a4e:	4284      	cmp	r4, r0
 8010a50:	4607      	mov	r7, r0
 8010a52:	d802      	bhi.n	8010a5a <_realloc_r+0x34>
 8010a54:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010a58:	d812      	bhi.n	8010a80 <_realloc_r+0x5a>
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	4640      	mov	r0, r8
 8010a5e:	f7fe fcc1 	bl	800f3e4 <_malloc_r>
 8010a62:	4605      	mov	r5, r0
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d0ed      	beq.n	8010a44 <_realloc_r+0x1e>
 8010a68:	42bc      	cmp	r4, r7
 8010a6a:	4622      	mov	r2, r4
 8010a6c:	4631      	mov	r1, r6
 8010a6e:	bf28      	it	cs
 8010a70:	463a      	movcs	r2, r7
 8010a72:	f7fe f8b6 	bl	800ebe2 <memcpy>
 8010a76:	4631      	mov	r1, r6
 8010a78:	4640      	mov	r0, r8
 8010a7a:	f7fe f8e7 	bl	800ec4c <_free_r>
 8010a7e:	e7e1      	b.n	8010a44 <_realloc_r+0x1e>
 8010a80:	4635      	mov	r5, r6
 8010a82:	e7df      	b.n	8010a44 <_realloc_r+0x1e>

08010a84 <__swhatbuf_r>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	460c      	mov	r4, r1
 8010a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a8c:	2900      	cmp	r1, #0
 8010a8e:	b096      	sub	sp, #88	; 0x58
 8010a90:	4615      	mov	r5, r2
 8010a92:	461e      	mov	r6, r3
 8010a94:	da0d      	bge.n	8010ab2 <__swhatbuf_r+0x2e>
 8010a96:	89a3      	ldrh	r3, [r4, #12]
 8010a98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010a9c:	f04f 0100 	mov.w	r1, #0
 8010aa0:	bf0c      	ite	eq
 8010aa2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010aa6:	2340      	movne	r3, #64	; 0x40
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	6031      	str	r1, [r6, #0]
 8010aac:	602b      	str	r3, [r5, #0]
 8010aae:	b016      	add	sp, #88	; 0x58
 8010ab0:	bd70      	pop	{r4, r5, r6, pc}
 8010ab2:	466a      	mov	r2, sp
 8010ab4:	f000 f878 	bl	8010ba8 <_fstat_r>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	dbec      	blt.n	8010a96 <__swhatbuf_r+0x12>
 8010abc:	9901      	ldr	r1, [sp, #4]
 8010abe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010ac2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010ac6:	4259      	negs	r1, r3
 8010ac8:	4159      	adcs	r1, r3
 8010aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ace:	e7eb      	b.n	8010aa8 <__swhatbuf_r+0x24>

08010ad0 <__smakebuf_r>:
 8010ad0:	898b      	ldrh	r3, [r1, #12]
 8010ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ad4:	079d      	lsls	r5, r3, #30
 8010ad6:	4606      	mov	r6, r0
 8010ad8:	460c      	mov	r4, r1
 8010ada:	d507      	bpl.n	8010aec <__smakebuf_r+0x1c>
 8010adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ae0:	6023      	str	r3, [r4, #0]
 8010ae2:	6123      	str	r3, [r4, #16]
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	6163      	str	r3, [r4, #20]
 8010ae8:	b002      	add	sp, #8
 8010aea:	bd70      	pop	{r4, r5, r6, pc}
 8010aec:	ab01      	add	r3, sp, #4
 8010aee:	466a      	mov	r2, sp
 8010af0:	f7ff ffc8 	bl	8010a84 <__swhatbuf_r>
 8010af4:	9900      	ldr	r1, [sp, #0]
 8010af6:	4605      	mov	r5, r0
 8010af8:	4630      	mov	r0, r6
 8010afa:	f7fe fc73 	bl	800f3e4 <_malloc_r>
 8010afe:	b948      	cbnz	r0, 8010b14 <__smakebuf_r+0x44>
 8010b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b04:	059a      	lsls	r2, r3, #22
 8010b06:	d4ef      	bmi.n	8010ae8 <__smakebuf_r+0x18>
 8010b08:	f023 0303 	bic.w	r3, r3, #3
 8010b0c:	f043 0302 	orr.w	r3, r3, #2
 8010b10:	81a3      	strh	r3, [r4, #12]
 8010b12:	e7e3      	b.n	8010adc <__smakebuf_r+0xc>
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	6020      	str	r0, [r4, #0]
 8010b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b1c:	81a3      	strh	r3, [r4, #12]
 8010b1e:	9b00      	ldr	r3, [sp, #0]
 8010b20:	6163      	str	r3, [r4, #20]
 8010b22:	9b01      	ldr	r3, [sp, #4]
 8010b24:	6120      	str	r0, [r4, #16]
 8010b26:	b15b      	cbz	r3, 8010b40 <__smakebuf_r+0x70>
 8010b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b2c:	4630      	mov	r0, r6
 8010b2e:	f000 f84d 	bl	8010bcc <_isatty_r>
 8010b32:	b128      	cbz	r0, 8010b40 <__smakebuf_r+0x70>
 8010b34:	89a3      	ldrh	r3, [r4, #12]
 8010b36:	f023 0303 	bic.w	r3, r3, #3
 8010b3a:	f043 0301 	orr.w	r3, r3, #1
 8010b3e:	81a3      	strh	r3, [r4, #12]
 8010b40:	89a3      	ldrh	r3, [r4, #12]
 8010b42:	431d      	orrs	r5, r3
 8010b44:	81a5      	strh	r5, [r4, #12]
 8010b46:	e7cf      	b.n	8010ae8 <__smakebuf_r+0x18>

08010b48 <_raise_r>:
 8010b48:	291f      	cmp	r1, #31
 8010b4a:	b538      	push	{r3, r4, r5, lr}
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	460d      	mov	r5, r1
 8010b50:	d904      	bls.n	8010b5c <_raise_r+0x14>
 8010b52:	2316      	movs	r3, #22
 8010b54:	6003      	str	r3, [r0, #0]
 8010b56:	f04f 30ff 	mov.w	r0, #4294967295
 8010b5a:	bd38      	pop	{r3, r4, r5, pc}
 8010b5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010b5e:	b112      	cbz	r2, 8010b66 <_raise_r+0x1e>
 8010b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b64:	b94b      	cbnz	r3, 8010b7a <_raise_r+0x32>
 8010b66:	4620      	mov	r0, r4
 8010b68:	f000 f852 	bl	8010c10 <_getpid_r>
 8010b6c:	462a      	mov	r2, r5
 8010b6e:	4601      	mov	r1, r0
 8010b70:	4620      	mov	r0, r4
 8010b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b76:	f000 b839 	b.w	8010bec <_kill_r>
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d00a      	beq.n	8010b94 <_raise_r+0x4c>
 8010b7e:	1c59      	adds	r1, r3, #1
 8010b80:	d103      	bne.n	8010b8a <_raise_r+0x42>
 8010b82:	2316      	movs	r3, #22
 8010b84:	6003      	str	r3, [r0, #0]
 8010b86:	2001      	movs	r0, #1
 8010b88:	e7e7      	b.n	8010b5a <_raise_r+0x12>
 8010b8a:	2400      	movs	r4, #0
 8010b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b90:	4628      	mov	r0, r5
 8010b92:	4798      	blx	r3
 8010b94:	2000      	movs	r0, #0
 8010b96:	e7e0      	b.n	8010b5a <_raise_r+0x12>

08010b98 <raise>:
 8010b98:	4b02      	ldr	r3, [pc, #8]	; (8010ba4 <raise+0xc>)
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	6818      	ldr	r0, [r3, #0]
 8010b9e:	f7ff bfd3 	b.w	8010b48 <_raise_r>
 8010ba2:	bf00      	nop
 8010ba4:	20000200 	.word	0x20000200

08010ba8 <_fstat_r>:
 8010ba8:	b538      	push	{r3, r4, r5, lr}
 8010baa:	4d07      	ldr	r5, [pc, #28]	; (8010bc8 <_fstat_r+0x20>)
 8010bac:	2300      	movs	r3, #0
 8010bae:	4604      	mov	r4, r0
 8010bb0:	4608      	mov	r0, r1
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	602b      	str	r3, [r5, #0]
 8010bb6:	f7f1 fdb2 	bl	800271e <_fstat>
 8010bba:	1c43      	adds	r3, r0, #1
 8010bbc:	d102      	bne.n	8010bc4 <_fstat_r+0x1c>
 8010bbe:	682b      	ldr	r3, [r5, #0]
 8010bc0:	b103      	cbz	r3, 8010bc4 <_fstat_r+0x1c>
 8010bc2:	6023      	str	r3, [r4, #0]
 8010bc4:	bd38      	pop	{r3, r4, r5, pc}
 8010bc6:	bf00      	nop
 8010bc8:	20002be4 	.word	0x20002be4

08010bcc <_isatty_r>:
 8010bcc:	b538      	push	{r3, r4, r5, lr}
 8010bce:	4d06      	ldr	r5, [pc, #24]	; (8010be8 <_isatty_r+0x1c>)
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	4608      	mov	r0, r1
 8010bd6:	602b      	str	r3, [r5, #0]
 8010bd8:	f7f1 fdb1 	bl	800273e <_isatty>
 8010bdc:	1c43      	adds	r3, r0, #1
 8010bde:	d102      	bne.n	8010be6 <_isatty_r+0x1a>
 8010be0:	682b      	ldr	r3, [r5, #0]
 8010be2:	b103      	cbz	r3, 8010be6 <_isatty_r+0x1a>
 8010be4:	6023      	str	r3, [r4, #0]
 8010be6:	bd38      	pop	{r3, r4, r5, pc}
 8010be8:	20002be4 	.word	0x20002be4

08010bec <_kill_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4d07      	ldr	r5, [pc, #28]	; (8010c0c <_kill_r+0x20>)
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	602b      	str	r3, [r5, #0]
 8010bfa:	f7f1 fd31 	bl	8002660 <_kill>
 8010bfe:	1c43      	adds	r3, r0, #1
 8010c00:	d102      	bne.n	8010c08 <_kill_r+0x1c>
 8010c02:	682b      	ldr	r3, [r5, #0]
 8010c04:	b103      	cbz	r3, 8010c08 <_kill_r+0x1c>
 8010c06:	6023      	str	r3, [r4, #0]
 8010c08:	bd38      	pop	{r3, r4, r5, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20002be4 	.word	0x20002be4

08010c10 <_getpid_r>:
 8010c10:	f7f1 bd1e 	b.w	8002650 <_getpid>

08010c14 <_malloc_usable_size_r>:
 8010c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c18:	1f18      	subs	r0, r3, #4
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	bfbc      	itt	lt
 8010c1e:	580b      	ldrlt	r3, [r1, r0]
 8010c20:	18c0      	addlt	r0, r0, r3
 8010c22:	4770      	bx	lr

08010c24 <_init>:
 8010c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c26:	bf00      	nop
 8010c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c2a:	bc08      	pop	{r3}
 8010c2c:	469e      	mov	lr, r3
 8010c2e:	4770      	bx	lr

08010c30 <_fini>:
 8010c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c32:	bf00      	nop
 8010c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c36:	bc08      	pop	{r3}
 8010c38:	469e      	mov	lr, r3
 8010c3a:	4770      	bx	lr
