
Pancake_Printer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007274  08007274  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800727c  0800727c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002240  20000018  0800729c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002258  0800729c  00022258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a851  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000376c  00000000  00000000  0003a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d1  00000000  00000000  0003f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282c1  00000000  00000000  00040901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019967  00000000  00000000  00068bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc93b  00000000  00000000  00082529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006080  00000000  00000000  0017ee64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00184ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070e0 	.word	0x080070e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080070e0 	.word	0x080070e0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <delayms>:
float speed = 20.0; //mm/s
float extrude_speed = 10.0; //mm/s

bool extrusion_on = false;

void delayms(uint16_t ms){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  osDelay(ms);
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	4618      	mov	r0, r3
 80004da:	f004 f8a3 	bl	8004624 <osDelay>
  //delayus(ms * 1000);
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <delayus>:

void delayus(uint16_t us){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(htime,0);  // set the counter value a 0
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <delayus+0x40>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2200      	movs	r2, #0
 80004fa:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htime);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <delayus+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fd85 	bl	8003010 <HAL_TIM_Base_Start>
  while (__HAL_TIM_GET_COUNTER(htime) < us);
 8000506:	bf00      	nop
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <delayus+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3f8      	bcc.n	8000508 <delayus+0x20>
  HAL_TIM_Base_Stop(htime);// wait for the counter to reach the us input in the parameter
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <delayus+0x40>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fde0 	bl	80030e0 <HAL_TIM_Base_Stop>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000034 	.word	0x20000034

0800052c <motor_init>:

void motor_init(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  //For some reason non-syncronus delay needed before synchronous delay will work.
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2110      	movs	r1, #16
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <motor_init+0xf4>)
 8000536:	f001 f9a9 	bl	800188c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	4837      	ldr	r0, [pc, #220]	; (8000620 <motor_init+0xf4>)
 8000542:	f001 f9a3 	bl	800188c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f001 f99c 	bl	800188c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f001 f995 	bl	800188c <HAL_GPIO_WritePin>
  delayus(2);
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff ffc0 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f001 f98b 	bl	800188c <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <motor_init+0xf8>)
 8000578:	edd3 7a00 	vldr	s15, [r3]
 800057c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000628 <motor_init+0xfc>
 8000580:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000584:	eddf 6a29 	vldr	s13, [pc, #164]	; 800062c <motor_init+0x100>
 8000588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800058c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000590:	ee17 3a90 	vmov	r3, s15
 8000594:	b29b      	uxth	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffa6 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <motor_init+0xf4>)
 80005a2:	f001 f973 	bl	800188c <HAL_GPIO_WritePin>
  delayus(2);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ff9e 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <motor_init+0xf4>)
 80005b2:	f001 f96b 	bl	800188c <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <motor_init+0xf8>)
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000628 <motor_init+0xfc>
 80005c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005c4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800062c <motor_init+0x100>
 80005c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d0:	ee17 3a90 	vmov	r3, s15
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff86 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	480f      	ldr	r0, [pc, #60]	; (8000620 <motor_init+0xf4>)
 80005e2:	f001 f953 	bl	800188c <HAL_GPIO_WritePin>
  delayus(2);
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff ff7e 	bl	80004e8 <delayus>
  HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <motor_init+0xf4>)
 80005f2:	f001 f94b 	bl	800188c <HAL_GPIO_WritePin>
  delayus(1000000 / (Z_STEPS_PER_MM * extrude_speed));
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <motor_init+0xf8>)
 80005f8:	edd3 7a00 	vldr	s15, [r3]
 80005fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000628 <motor_init+0xfc>
 8000600:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000604:	eddf 6a09 	vldr	s13, [pc, #36]	; 800062c <motor_init+0x100>
 8000608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 3a90 	vmov	r3, s15
 8000614:	b29b      	uxth	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff66 	bl	80004e8 <delayus>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	48000400 	.word	0x48000400
 8000624:	20000004 	.word	0x20000004
 8000628:	42480000 	.word	0x42480000
 800062c:	49742400 	.word	0x49742400

08000630 <set_timer>:

void set_timer(TIM_HandleTypeDef *htim){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  htime = htim;
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <set_timer+0x1c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000034 	.word	0x20000034

08000650 <set_speed>:

void set_speed(float new_speed){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	ed87 0a01 	vstr	s0, [r7, #4]
  speed = new_speed;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <set_speed+0x1c>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20000000 	.word	0x20000000

08000670 <move>:

void move(float x, float y){
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	ed87 0a01 	vstr	s0, [r7, #4]
 800067a:	edc7 0a00 	vstr	s1, [r7]
  int x_steps = (x - current_x) * X_STEPS_PER_MM;
 800067e:	4b71      	ldr	r3, [pc, #452]	; (8000844 <move+0x1d4>)
 8000680:	edd3 7a00 	vldr	s15, [r3]
 8000684:	ed97 7a01 	vldr	s14, [r7, #4]
 8000688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800068c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000698:	ee17 3a90 	vmov	r3, s15
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  int y_steps = (y - current_y) * Y_STEPS_PER_MM;
 800069e:	4b6a      	ldr	r3, [pc, #424]	; (8000848 <move+0x1d8>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	ed97 7a00 	vldr	s14, [r7]
 80006a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80006b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b8:	ee17 3a90 	vmov	r3, s15
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2110      	movs	r1, #16
 80006c2:	4862      	ldr	r0, [pc, #392]	; (800084c <move+0x1dc>)
 80006c4:	f001 f8e2 	bl	800188c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	485f      	ldr	r0, [pc, #380]	; (800084c <move+0x1dc>)
 80006d0:	f001 f8dc 	bl	800188c <HAL_GPIO_WritePin>
  if(x_steps < 0){
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da07      	bge.n	80006ea <move+0x7a>
    HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	485b      	ldr	r0, [pc, #364]	; (800084c <move+0x1dc>)
 80006e0:	f001 f8d4 	bl	800188c <HAL_GPIO_WritePin>
    x_steps *= -1;
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	425b      	negs	r3, r3
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if(y_steps < 0){
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da08      	bge.n	8000702 <move+0x92>
    HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4855      	ldr	r0, [pc, #340]	; (800084c <move+0x1dc>)
 80006f8:	f001 f8c8 	bl	800188c <HAL_GPIO_WritePin>
    y_steps *= -1;
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	425b      	negs	r3, r3
 8000700:	623b      	str	r3, [r7, #32]
  }

  int max_steps = x_steps;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	61fb      	str	r3, [r7, #28]
  if(y_steps > x_steps){
 8000706:	6a3a      	ldr	r2, [r7, #32]
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	429a      	cmp	r2, r3
 800070c:	dd01      	ble.n	8000712 <move+0xa2>
    max_steps = y_steps;
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	61fb      	str	r3, [r7, #28]
  }

  int x_step_ratio = max_steps / x_steps;
 8000712:	69fa      	ldr	r2, [r7, #28]
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	fb92 f3f3 	sdiv	r3, r2, r3
 800071a:	60fb      	str	r3, [r7, #12]
  int y_step_ratio = max_steps / y_steps;
 800071c:	69fa      	ldr	r2, [r7, #28]
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	fb92 f3f3 	sdiv	r3, r2, r3
 8000724:	60bb      	str	r3, [r7, #8]

  int x_taken = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  int y_taken = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

  for(int i = 0; i < max_steps; i++){
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	e04a      	b.n	80007ca <move+0x15a>
    if(i % x_step_ratio == 0){
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	fb93 f2f2 	sdiv	r2, r3, r2
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	fb01 f202 	mul.w	r2, r1, r2
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d109      	bne.n	800075c <move+0xec>
      HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 f89b 	bl	800188c <HAL_GPIO_WritePin>
      x_taken++;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	3301      	adds	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
    }
    if(i % y_step_ratio == 0){
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	fb93 f2f2 	sdiv	r2, r3, r2
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	fb01 f202 	mul.w	r2, r1, r2
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	2b00      	cmp	r3, #0
 800076e:	d107      	bne.n	8000780 <move+0x110>
      HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	4835      	ldr	r0, [pc, #212]	; (800084c <move+0x1dc>)
 8000776:	f001 f889 	bl	800188c <HAL_GPIO_WritePin>
      y_taken++;
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
    }
    delayms(2);
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff fea3 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f001 f87c 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	482c      	ldr	r0, [pc, #176]	; (800084c <move+0x1dc>)
 800079a:	f001 f877 	bl	800188c <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed)); // 1000000us/1s / (step/mm * mm/s)
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <move+0x1e0>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80007a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ac:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000854 <move+0x1e4>
 80007b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b8:	ee17 3a90 	vmov	r3, s15
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe84 	bl	80004cc <delayms>
  for(int i = 0; i < max_steps; i++){
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	3301      	adds	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	dbb0      	blt.n	8000734 <move+0xc4>
  }

  while (x_steps > x_taken){
 80007d2:	e013      	b.n	80007fc <move+0x18c>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f001 f855 	bl	800188c <HAL_GPIO_WritePin>
    delayms(2);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f7ff fe72 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f001 f84b 	bl	800188c <HAL_GPIO_WritePin>
    x_taken++;
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  while (x_steps > x_taken){
 80007fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	429a      	cmp	r2, r3
 8000802:	dce7      	bgt.n	80007d4 <move+0x164>
  }
  while (y_steps > y_taken){
 8000804:	e00f      	b.n	8000826 <move+0x1b6>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2108      	movs	r1, #8
 800080a:	4810      	ldr	r0, [pc, #64]	; (800084c <move+0x1dc>)
 800080c:	f001 f83e 	bl	800188c <HAL_GPIO_WritePin>
    delayms(2);
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fe5b 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <move+0x1dc>)
 800081c:	f001 f836 	bl	800188c <HAL_GPIO_WritePin>
    y_taken++;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
  while (y_steps > y_taken){
 8000826:	6a3a      	ldr	r2, [r7, #32]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	429a      	cmp	r2, r3
 800082c:	dceb      	bgt.n	8000806 <move+0x196>
  }
  current_x = x;
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <move+0x1d4>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6013      	str	r3, [r2, #0]
  current_y = y;
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <move+0x1d8>)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	6013      	str	r3, [r2, #0]
}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000038 	.word	0x20000038
 8000848:	2000003c 	.word	0x2000003c
 800084c:	48000400 	.word	0x48000400
 8000850:	20000000 	.word	0x20000000
 8000854:	447a0000 	.word	0x447a0000

08000858 <home>:


void home() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2110      	movs	r1, #16
 8000860:	4859      	ldr	r0, [pc, #356]	; (80009c8 <home+0x170>)
 8000862:	f001 f813 	bl	800188c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	4856      	ldr	r0, [pc, #344]	; (80009c8 <home+0x170>)
 800086e:	f001 f80d 	bl	800188c <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8000872:	e023      	b.n	80008bc <home+0x64>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f001 f805 	bl	800188c <HAL_GPIO_WritePin>
    delayms(2);
 8000882:	2002      	movs	r0, #2
 8000884:	f7ff fe22 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fffb 	bl	800188c <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <home+0x174>)
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80008a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008a4:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80009d0 <home+0x178>
 80008a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b0:	ee17 3a90 	vmov	r3, s15
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe08 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	4845      	ldr	r0, [pc, #276]	; (80009d4 <home+0x17c>)
 80008c0:	f000 ffcc 	bl	800185c <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0d4      	beq.n	8000874 <home+0x1c>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80008ca:	e01f      	b.n	800090c <home+0xb4>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2108      	movs	r1, #8
 80008d0:	483d      	ldr	r0, [pc, #244]	; (80009c8 <home+0x170>)
 80008d2:	f000 ffdb 	bl	800188c <HAL_GPIO_WritePin>
    delayms(2);
 80008d6:	2002      	movs	r0, #2
 80008d8:	f7ff fdf8 	bl	80004cc <delayms>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2108      	movs	r1, #8
 80008e0:	4839      	ldr	r0, [pc, #228]	; (80009c8 <home+0x170>)
 80008e2:	f000 ffd3 	bl	800188c <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * speed));
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <home+0x174>)
 80008e8:	edd3 7a00 	vldr	s15, [r3]
 80008ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80008f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008f4:	eddf 6a36 	vldr	s13, [pc, #216]	; 80009d0 <home+0x178>
 80008f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000900:	ee17 3a90 	vmov	r3, s15
 8000904:	b29b      	uxth	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fde0 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	482e      	ldr	r0, [pc, #184]	; (80009c8 <home+0x170>)
 8000910:	f000 ffa4 	bl	800185c <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0d8      	beq.n	80008cc <home+0x74>
  }

  current_x = 0;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <home+0x180>)
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  current_y = 0;
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <home+0x184>)
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	601a      	str	r2, [r3, #0]

  //move away from limit switch by small distance
  move(10,10);
 800092a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800092e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000932:	f7ff fe9d 	bl	8000670 <move>

  //move slow towards limit switch
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <home+0x170>)
 800093c:	f000 ffa6 	bl	800188c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000946:	4820      	ldr	r0, [pc, #128]	; (80009c8 <home+0x170>)
 8000948:	f000 ffa0 	bl	800188c <HAL_GPIO_WritePin>
  //move fast until limit switch hit
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 800094c:	e013      	b.n	8000976 <home+0x11e>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f000 ff98 	bl	800188c <HAL_GPIO_WritePin>
    delayus(2);
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fdc3 	bl	80004e8 <delayus>
    HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 ff8e 	bl	800188c <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 8000970:	2005      	movs	r0, #5
 8000972:	f7ff fdab 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(X_STOP_GPIO_Port, X_STOP_Pin)){
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	4816      	ldr	r0, [pc, #88]	; (80009d4 <home+0x17c>)
 800097a:	f000 ff6f 	bl	800185c <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0e4      	beq.n	800094e <home+0xf6>
  }
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 8000984:	e00f      	b.n	80009a6 <home+0x14e>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	480f      	ldr	r0, [pc, #60]	; (80009c8 <home+0x170>)
 800098c:	f000 ff7e 	bl	800188c <HAL_GPIO_WritePin>
    delayus(2);
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fda9 	bl	80004e8 <delayus>
    HAL_GPIO_WritePin(Y_STEP_GPIO_Port, Y_STEP_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <home+0x170>)
 800099c:	f000 ff76 	bl	800188c <HAL_GPIO_WritePin>
    delayms(1000 / (X_STEPS_PER_MM * 10));
 80009a0:	2005      	movs	r0, #5
 80009a2:	f7ff fd93 	bl	80004cc <delayms>
  while(!HAL_GPIO_ReadPin(Y_STOP_GPIO_Port, Y_STOP_Pin)){
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <home+0x170>)
 80009aa:	f000 ff57 	bl	800185c <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0e8      	beq.n	8000986 <home+0x12e>
  }

  current_x = 0;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <home+0x180>)
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  current_y = 0;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <home+0x184>)
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	48000400 	.word	0x48000400
 80009cc:	20000000 	.word	0x20000000
 80009d0:	447a0000 	.word	0x447a0000
 80009d4:	48000800 	.word	0x48000800
 80009d8:	20000038 	.word	0x20000038
 80009dc:	2000003c 	.word	0x2000003c

080009e0 <start_extrusion>:

void start_extrusion(){
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  extrusion_on = true;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <start_extrusion+0x14>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000040 	.word	0x20000040

080009f8 <stop_extrusion>:

void stop_extrusion(){
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  extrusion_on = false;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <stop_extrusion+0x14>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000040 	.word	0x20000040

08000a10 <extrude>:

void extrude(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  if(extrusion_on){
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <extrude+0x50>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d01f      	beq.n	8000a5c <extrude+0x4c>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <extrude+0x54>)
 8000a22:	f000 ff33 	bl	800188c <HAL_GPIO_WritePin>
    delayus(2);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fd5e 	bl	80004e8 <delayus>
    HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2120      	movs	r1, #32
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <extrude+0x54>)
 8000a32:	f000 ff2b 	bl	800188c <HAL_GPIO_WritePin>
    delayms(1000 / (Z_STEPS_PER_MM * extrude_speed));
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <extrude+0x58>)
 8000a38:	edd3 7a00 	vldr	s15, [r3]
 8000a3c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000a6c <extrude+0x5c>
 8000a40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a44:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000a70 <extrude+0x60>
 8000a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a50:	ee17 3a90 	vmov	r3, s15
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd38 	bl	80004cc <delayms>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000040 	.word	0x20000040
 8000a64:	48000400 	.word	0x48000400
 8000a68:	20000004 	.word	0x20000004
 8000a6c:	42480000 	.word	0x42480000
 8000a70:	447a0000 	.word	0x447a0000

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f000 fc24 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f864 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f000 f938 	bl	8000cf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a84:	f000 f906 	bl	8000c94 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a88:	f000 f8b0 	bl	8000bec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  set_timer(&htim1);
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <main+0x8c>)
 8000a8e:	f7ff fdcf 	bl	8000630 <set_timer>
  motor_init();
 8000a92:	f7ff fd4b 	bl	800052c <motor_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a96:	f003 fce9 	bl	800446c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &commandQueue_attributes);
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <main+0x90>)
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	2010      	movs	r0, #16
 8000aa0:	f003 fddb 	bl	800465a <osMessageQueueNew>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <main+0x94>)
 8000aa8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <main+0x98>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <main+0x9c>)
 8000ab0:	f003 fd26 	bl	8004500 <osThreadNew>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <main+0xa0>)
 8000ab8:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <main+0xa4>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4817      	ldr	r0, [pc, #92]	; (8000b1c <main+0xa8>)
 8000ac0:	f003 fd1e 	bl	8004500 <osThreadNew>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <main+0xac>)
 8000ac8:	6013      	str	r3, [r2, #0]

  /* creation of parserTask */
  parserTaskHandle = osThreadNew(StartParserTask, NULL, &parserTask_attributes);
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <main+0xb0>)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4816      	ldr	r0, [pc, #88]	; (8000b28 <main+0xb4>)
 8000ad0:	f003 fd16 	bl	8004500 <osThreadNew>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <main+0xb8>)
 8000ad8:	6013      	str	r3, [r2, #0]

  /* creation of menuTask */
  menuTaskHandle = osThreadNew(StartMenuTask, NULL, &menuTask_attributes);
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <main+0xbc>)
 8000adc:	2100      	movs	r1, #0
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <main+0xc0>)
 8000ae0:	f003 fd0e 	bl	8004500 <osThreadNew>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <main+0xc4>)
 8000ae8:	6013      	str	r3, [r2, #0]

  /* creation of extruderTask */
  extruderTaskHandle = osThreadNew(StartExtruderTask, NULL, &extruderTask_attributes);
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <main+0xc8>)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4814      	ldr	r0, [pc, #80]	; (8000b40 <main+0xcc>)
 8000af0:	f003 fd06 	bl	8004500 <osThreadNew>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <main+0xd0>)
 8000af8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000afa:	f003 fcdb 	bl	80044b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000afe:	e7fe      	b.n	8000afe <main+0x8a>
 8000b00:	20000044 	.word	0x20000044
 8000b04:	08007214 	.word	0x08007214
 8000b08:	2000012c 	.word	0x2000012c
 8000b0c:	08007160 	.word	0x08007160
 8000b10:	08000f09 	.word	0x08000f09
 8000b14:	20000118 	.word	0x20000118
 8000b18:	08007184 	.word	0x08007184
 8000b1c:	08000f19 	.word	0x08000f19
 8000b20:	2000011c 	.word	0x2000011c
 8000b24:	080071a8 	.word	0x080071a8
 8000b28:	08000f7d 	.word	0x08000f7d
 8000b2c:	20000120 	.word	0x20000120
 8000b30:	080071cc 	.word	0x080071cc
 8000b34:	08000f8d 	.word	0x08000f8d
 8000b38:	20000124 	.word	0x20000124
 8000b3c:	080071f0 	.word	0x080071f0
 8000b40:	08000f9d 	.word	0x08000f9d
 8000b44:	20000128 	.word	0x20000128

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b096      	sub	sp, #88	; 0x58
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2244      	movs	r2, #68	; 0x44
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f006 fa88 	bl	800706c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b6e:	f000 feb3 	bl	80018d8 <HAL_PWREx_ControlVoltageScaling>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b78:	f000 fa26 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b86:	2310      	movs	r3, #16
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b96:	230a      	movs	r3, #10
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 feea 	bl	8001984 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bb6:	f000 fa07 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fab2 	bl	800213c <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bde:	f000 f9f3 	bl	8000fc8 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3758      	adds	r7, #88	; 0x58
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c0c:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <MX_TIM1_Init+0xa4>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c12:	224f      	movs	r2, #79	; 0x4f
 8000c14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c36:	4815      	ldr	r0, [pc, #84]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c38:	f002 f992 	bl	8002f60 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c42:	f000 f9c1 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c54:	f002 fbde 	bl	8003414 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c5e:	f000 f9b3 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_TIM1_Init+0xa0>)
 8000c74:	f002 fdf4 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c7e:	f000 f9a3 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000044 	.word	0x20000044
 8000c90:	40012c00 	.word	0x40012c00

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_USART2_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd8:	f002 fe68 	bl	80039ac <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f000 f971 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000090 	.word	0x20000090
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a7a      	ldr	r2, [pc, #488]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b78      	ldr	r3, [pc, #480]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b75      	ldr	r3, [pc, #468]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a74      	ldr	r2, [pc, #464]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b72      	ldr	r3, [pc, #456]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b6f      	ldr	r3, [pc, #444]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b6c      	ldr	r3, [pc, #432]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b69      	ldr	r3, [pc, #420]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a68      	ldr	r2, [pc, #416]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b66      	ldr	r3, [pc, #408]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b63      	ldr	r3, [pc, #396]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a62      	ldr	r2, [pc, #392]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b60      	ldr	r3, [pc, #384]	; (8000ef8 <MX_GPIO_Init+0x204>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|X_STEP_Pin
 8000d82:	2200      	movs	r2, #0
 8000d84:	f249 7101 	movw	r1, #38657	; 0x9701
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f000 fd7e 	bl	800188c <HAL_GPIO_WritePin>
                          |SD_CS_Pin|Screen_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Touch_CS_Pin|Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin
 8000d90:	2200      	movs	r2, #0
 8000d92:	f240 41ba 	movw	r1, #1210	; 0x4ba
 8000d96:	4859      	ldr	r0, [pc, #356]	; (8000efc <MX_GPIO_Init+0x208>)
 8000d98:	f000 fd78 	bl	800188c <HAL_GPIO_WritePin>
                          |Z_STEP_Pin|Screen_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_RST_GPIO_Port, Screen_RST_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4857      	ldr	r0, [pc, #348]	; (8000f00 <MX_GPIO_Init+0x20c>)
 8000da2:	f000 fd73 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4851      	ldr	r0, [pc, #324]	; (8000f04 <MX_GPIO_Init+0x210>)
 8000dbe:	f000 fba3 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_CS_Pin Z_DIR_Pin ENABLE_Pin SD_CS_Pin
                           Screen_DC_Pin */
  GPIO_InitStruct.Pin = Screen_CS_Pin|Z_DIR_Pin|ENABLE_Pin|SD_CS_Pin
 8000dc2:	f249 3301 	movw	r3, #37633	; 0x9301
 8000dc6:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f000 fb93 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SCK_Pin SD_MISO_Pin SD_MOSI_Pin */
  GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000de2:	23e0      	movs	r3, #224	; 0xe0
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f000 fb82 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_CS_Pin Y_DIR_Pin X_DIR_Pin Screen_LED_Pin */
  GPIO_InitStruct.Pin = Touch_CS_Pin|Y_DIR_Pin|X_DIR_Pin|Screen_LED_Pin;
 8000e04:	f240 4392 	movw	r3, #1170	; 0x492
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4837      	ldr	r0, [pc, #220]	; (8000efc <MX_GPIO_Init+0x208>)
 8000e1e:	f000 fb73 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_IRQ_Pin Y_STOP_Pin */
  GPIO_InitStruct.Pin = Touch_IRQ_Pin|Y_STOP_Pin;
 8000e22:	2344      	movs	r3, #68	; 0x44
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4831      	ldr	r0, [pc, #196]	; (8000efc <MX_GPIO_Init+0x208>)
 8000e36:	f000 fb67 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : Touch_SCK_Pin Touch_MISO_Pin Touch_MOSI_Pin */
  GPIO_InitStruct.Pin = Touch_SCK_Pin|Touch_MISO_Pin|Touch_MOSI_Pin;
 8000e3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4829      	ldr	r0, [pc, #164]	; (8000efc <MX_GPIO_Init+0x208>)
 8000e58:	f000 fb56 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STOP_Pin */
  GPIO_InitStruct.Pin = X_STOP_Pin;
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(X_STOP_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4825      	ldr	r0, [pc, #148]	; (8000f04 <MX_GPIO_Init+0x210>)
 8000e70:	f000 fb4a 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_STEP_Pin */
  GPIO_InitStruct.Pin = X_STEP_Pin;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f000 fb3a 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_SCK_Pin Screen_MISO_Pin Screen_MOSI_Pin */
  GPIO_InitStruct.Pin = Screen_SCK_Pin|Screen_MISO_Pin|Screen_MOSI_Pin;
 8000e94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <MX_GPIO_Init+0x210>)
 8000eb2:	f000 fb29 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_RST_Pin */
  GPIO_InitStruct.Pin = Screen_RST_Pin;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Screen_RST_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_GPIO_Init+0x20c>)
 8000ece:	f000 fb1b 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_STEP_Pin Z_STEP_Pin */
  GPIO_InitStruct.Pin = Y_STEP_Pin|Z_STEP_Pin;
 8000ed2:	2328      	movs	r3, #40	; 0x28
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_GPIO_Init+0x208>)
 8000eea:	f000 fb0d 	bl	8001508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48000400 	.word	0x48000400
 8000f00:	48000c00 	.word	0x48000c00
 8000f04:	48000800 	.word	0x48000800

08000f08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f003 fb87 	bl	8004624 <osDelay>
 8000f16:	e7fb      	b.n	8000f10 <StartDefaultTask+0x8>

08000f18 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
  /* Infinite loop */
  home();
 8000f20:	f7ff fc9a 	bl	8000858 <home>
  start_extrusion();
 8000f24:	f7ff fd5c 	bl	80009e0 <start_extrusion>
  move(40,40);
 8000f28:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f70 <StartCommandTask+0x58>
 8000f2c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000f70 <StartCommandTask+0x58>
 8000f30:	f7ff fb9e 	bl	8000670 <move>
  osDelay(1000);
 8000f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f38:	f003 fb74 	bl	8004624 <osDelay>
  stop_extrusion();
 8000f3c:	f7ff fd5c 	bl	80009f8 <stop_extrusion>
  set_speed(100);
 8000f40:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000f74 <StartCommandTask+0x5c>
 8000f44:	f7ff fb84 	bl	8000650 <set_speed>
  move(80,80);
 8000f48:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000f78 <StartCommandTask+0x60>
 8000f4c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000f78 <StartCommandTask+0x60>
 8000f50:	f7ff fb8e 	bl	8000670 <move>
  start_extrusion();
 8000f54:	f7ff fd44 	bl	80009e0 <start_extrusion>
  move(40,40);
 8000f58:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000f70 <StartCommandTask+0x58>
 8000f5c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000f70 <StartCommandTask+0x58>
 8000f60:	f7ff fb86 	bl	8000670 <move>
  stop_extrusion();
 8000f64:	f7ff fd48 	bl	80009f8 <stop_extrusion>
  //reset_extruder();
  for(;;)
  {
    osDelay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f003 fb5b 	bl	8004624 <osDelay>
 8000f6e:	e7fb      	b.n	8000f68 <StartCommandTask+0x50>
 8000f70:	42200000 	.word	0x42200000
 8000f74:	42c80000 	.word	0x42c80000
 8000f78:	42a00000 	.word	0x42a00000

08000f7c <StartParserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParserTask */
void StartParserTask(void *argument)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParserTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f003 fb4d 	bl	8004624 <osDelay>
 8000f8a:	e7fb      	b.n	8000f84 <StartParserTask+0x8>

08000f8c <StartMenuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMenuTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f003 fb45 	bl	8004624 <osDelay>
 8000f9a:	e7fb      	b.n	8000f94 <StartMenuTask+0x8>

08000f9c <StartExtruderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartExtruderTask */
void StartExtruderTask(void *argument)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartExtruderTask */
  /* Infinite loop */
  while(true){
    extrude();
 8000fa4:	f7ff fd34 	bl	8000a10 <extrude>
 8000fa8:	e7fc      	b.n	8000fa4 <StartExtruderTask+0x8>

08000faa <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fba:	d101      	bne.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fbc:	f000 f9a2 	bl	8001304 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_MspInit+0x4c>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_MspInit+0x4c>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_MspInit+0x4c>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	210f      	movs	r1, #15
 800100e:	f06f 0001 	mvn.w	r0, #1
 8001012:	f000 fa4f 	bl	80014b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_TIM_Base_MspInit+0x38>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10b      	bne.n	800104e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_TIM_Base_MspInit+0x3c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_TIM_Base_MspInit+0x3c>)
 800103c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_Base_MspInit+0x3c>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40012c00 	.word	0x40012c00
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ac      	sub	sp, #176	; 0xb0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2288      	movs	r2, #136	; 0x88
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fff1 	bl	800706c <memset>
  if(huart->Instance==USART2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a21      	ldr	r2, [pc, #132]	; (8001114 <HAL_UART_MspInit+0xb0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d13b      	bne.n	800110c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001094:	2302      	movs	r3, #2
 8001096:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 faa1 	bl	80025e8 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010ac:	f7ff ff8c 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_UART_MspInit+0xb4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_UART_MspInit+0xb4>)
 80010b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ba:	6593      	str	r3, [r2, #88]	; 0x58
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_UART_MspInit+0xb4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_UART_MspInit+0xb4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <HAL_UART_MspInit+0xb4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_UART_MspInit+0xb4>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010e0:	230c      	movs	r3, #12
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f8:	2307      	movs	r3, #7
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f000 f9fe 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	37b0      	adds	r7, #176	; 0xb0
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40004400 	.word	0x40004400
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b34      	ldr	r3, [pc, #208]	; (80011fc <HAL_InitTick+0xe0>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	4a33      	ldr	r2, [pc, #204]	; (80011fc <HAL_InitTick+0xe0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6593      	str	r3, [r2, #88]	; 0x58
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_InitTick+0xe0>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001142:	f107 0210 	add.w	r2, r7, #16
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f9b9 	bl	80024c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001158:	2b00      	cmp	r3, #0
 800115a:	d103      	bne.n	8001164 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800115c:	f001 f986 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8001160:	6378      	str	r0, [r7, #52]	; 0x34
 8001162:	e004      	b.n	800116e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001164:	f001 f982 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8001168:	4603      	mov	r3, r0
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001170:	4a23      	ldr	r2, [pc, #140]	; (8001200 <HAL_InitTick+0xe4>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9b      	lsrs	r3, r3, #18
 8001178:	3b01      	subs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_InitTick+0xe8>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_InitTick+0xe8>)
 8001186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800118a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800118c:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_InitTick+0xe8>)
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_InitTick+0xe8>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_InitTick+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_InitTick+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <HAL_InitTick+0xe8>)
 80011a6:	f001 fedb 	bl	8002f60 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11b      	bne.n	80011f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <HAL_InitTick+0xe8>)
 80011ba:	f001 ffb9 	bl	8003130 <HAL_TIM_Base_Start_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d111      	bne.n	80011f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011cc:	201c      	movs	r0, #28
 80011ce:	f000 f98d 	bl	80014ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d808      	bhi.n	80011ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	201c      	movs	r0, #28
 80011de:	f000 f969 	bl	80014b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_InitTick+0xec>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e002      	b.n	80011f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3738      	adds	r7, #56	; 0x38
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	431bde83 	.word	0x431bde83
 8001204:	20000130 	.word	0x20000130
 8001208:	2000000c 	.word	0x2000000c

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM2_IRQHandler+0x10>)
 800123e:	f001 ffe7 	bl	8003210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000130 	.word	0x20000130

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001274:	f7ff ffea 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopForever+0x6>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopForever+0xe>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopForever+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129e:	f005 feed 	bl	800707c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a2:	f7ff fbe7 	bl	8000a74 <main>

080012a6 <LoopForever>:

LoopForever:
    b LoopForever
 80012a6:	e7fe      	b.n	80012a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80012b4:	08007284 	.word	0x08007284
  ldr r2, =_sbss
 80012b8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012bc:	20002258 	.word	0x20002258

080012c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC1_2_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_Init+0x3c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_Init+0x3c>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f8df 	bl	800149e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e0:	200f      	movs	r0, #15
 80012e2:	f7ff ff1b 	bl	800111c <HAL_InitTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	e001      	b.n	80012f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f2:	f7ff fe6f 	bl	8000fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000010 	.word	0x20000010
 8001328:	2000017c 	.word	0x2000017c

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000017c 	.word	0x2000017c

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff4c 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c6:	f7ff ff61 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f7ff ffb1 	bl	8001438 <NVIC_EncodePriority>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff80 	bl	80013e4 <__NVIC_SetPriority>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff54 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e17f      	b.n	8001818 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8171 	beq.w	8001812 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d005      	beq.n	8001548 <HAL_GPIO_Init+0x40>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d130      	bne.n	80015aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157e:	2201      	movs	r2, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 0201 	and.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d118      	bne.n	80015e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d017      	beq.n	8001624 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d123      	bne.n	8001678 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80ac 	beq.w	8001812 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <HAL_GPIO_Init+0x330>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	4a5e      	ldr	r2, [pc, #376]	; (8001838 <HAL_GPIO_Init+0x330>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6613      	str	r3, [r2, #96]	; 0x60
 80016c6:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <HAL_GPIO_Init+0x330>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016d2:	4a5a      	ldr	r2, [pc, #360]	; (800183c <HAL_GPIO_Init+0x334>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016fc:	d025      	beq.n	800174a <HAL_GPIO_Init+0x242>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_GPIO_Init+0x338>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01f      	beq.n	8001746 <HAL_GPIO_Init+0x23e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4e      	ldr	r2, [pc, #312]	; (8001844 <HAL_GPIO_Init+0x33c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_GPIO_Init+0x23a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <HAL_GPIO_Init+0x340>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <HAL_GPIO_Init+0x236>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_GPIO_Init+0x344>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00d      	beq.n	800173a <HAL_GPIO_Init+0x232>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4b      	ldr	r2, [pc, #300]	; (8001850 <HAL_GPIO_Init+0x348>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <HAL_GPIO_Init+0x22e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <HAL_GPIO_Init+0x34c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_GPIO_Init+0x22a>
 800172e:	2306      	movs	r3, #6
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001732:	2307      	movs	r3, #7
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x244>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x244>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x244>
 800174a:	2300      	movs	r3, #0
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800175c:	4937      	ldr	r1, [pc, #220]	; (800183c <HAL_GPIO_Init+0x334>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_GPIO_Init+0x350>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800178e:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_GPIO_Init+0x350>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_GPIO_Init+0x350>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <HAL_GPIO_Init+0x350>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_GPIO_Init+0x350>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_GPIO_Init+0x350>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_GPIO_Init+0x350>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_GPIO_Init+0x350>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f ae78 	bne.w	8001518 <HAL_GPIO_Init+0x10>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	48000400 	.word	0x48000400
 8001844:	48000800 	.word	0x48000800
 8001848:	48000c00 	.word	0x48000c00
 800184c:	48001000 	.word	0x48001000
 8001850:	48001400 	.word	0x48001400
 8001854:	48001800 	.word	0x48001800
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e001      	b.n	800187e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40007000 	.word	0x40007000

080018d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e6:	d130      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f4:	d038      	beq.n	8001968 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018fe:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001904:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2232      	movs	r2, #50	; 0x32
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	3301      	adds	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800191c:	e002      	b.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3b01      	subs	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001930:	d102      	bne.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f2      	bne.n	800191e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001944:	d110      	bne.n	8001968 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e00f      	b.n	800196a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001956:	d007      	beq.n	8001968 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001966:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40007000 	.word	0x40007000
 800197c:	20000008 	.word	0x20000008
 8001980:	431bde83 	.word	0x431bde83

08001984 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e3ca      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001996:	4b97      	ldr	r3, [pc, #604]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a0:	4b94      	ldr	r3, [pc, #592]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80e4 	beq.w	8001b80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <HAL_RCC_OscConfig+0x4a>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	f040 808b 	bne.w	8001adc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	f040 8087 	bne.w	8001adc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x62>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e3a2      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	4b82      	ldr	r3, [pc, #520]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_RCC_OscConfig+0x7c>
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fe:	e005      	b.n	8001a0c <HAL_RCC_OscConfig+0x88>
 8001a00:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d223      	bcs.n	8001a58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fd87 	bl	8002528 <RCC_SetFlashLatencyFromMSIRange>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e383      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a24:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a72      	ldr	r2, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	496d      	ldr	r1, [pc, #436]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a42:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	4968      	ldr	r1, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
 8001a56:	e025      	b.n	8001aa4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a58:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4960      	ldr	r1, [pc, #384]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a76:	4b5f      	ldr	r3, [pc, #380]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	495b      	ldr	r1, [pc, #364]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fd47 	bl	8002528 <RCC_SetFlashLatencyFromMSIRange>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e343      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa4:	f000 fc4a 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	4950      	ldr	r1, [pc, #320]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	4a4e      	ldr	r2, [pc, #312]	; (8001bfc <HAL_RCC_OscConfig+0x278>)
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ac4:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fb27 	bl	800111c <HAL_InitTick>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d052      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	e327      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d032      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ae4:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a42      	ldr	r2, [pc, #264]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc1c 	bl	800132c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc18 	bl	800132c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e310      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4931      	ldr	r1, [pc, #196]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	492c      	ldr	r1, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	e01a      	b.n	8001b80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fbe9 	bl	800132c <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fbe5 	bl	800132c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e2dd      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x1da>
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d074      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x21a>
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d10e      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d064      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d160      	bne.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e2ba      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x24a>
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e026      	b.n	8001c1c <HAL_RCC_OscConfig+0x298>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd6:	d115      	bne.n	8001c04 <HAL_RCC_OscConfig+0x280>
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a02      	ldr	r2, [pc, #8]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x298>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	0800722c 	.word	0x0800722c
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	4ba0      	ldr	r3, [pc, #640]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a9f      	ldr	r2, [pc, #636]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b9d      	ldr	r3, [pc, #628]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a9c      	ldr	r2, [pc, #624]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff fb82 	bl	800132c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fb7e 	bl	800132c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e276      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3e:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x2a8>
 8001c4a:	e014      	b.n	8001c76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb6e 	bl	800132c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fb6a 	bl	800132c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e262      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d0>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d060      	beq.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_OscConfig+0x310>
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d119      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d116      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	4b7c      	ldr	r3, [pc, #496]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x328>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e23f      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	4973      	ldr	r1, [pc, #460]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc0:	e040      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d023      	beq.n	8001d12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cca:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fb29 	bl	800132c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fb25 	bl	800132c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e21d      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf0:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	495f      	ldr	r1, [pc, #380]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
 8001d10:	e018      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a5c      	ldr	r2, [pc, #368]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fb05 	bl	800132c <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff fb01 	bl	800132c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e1f9      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f0      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d03c      	beq.n	8001dca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fae0 	bl	800132c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fadc 	bl	800132c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1d4      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ef      	beq.n	8001d70 <HAL_RCC_OscConfig+0x3ec>
 8001d90:	e01b      	b.n	8001dca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d98:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff fac3 	bl	800132c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff fabf 	bl	800132c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1b7      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1ef      	bne.n	8001daa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80a6 	beq.w	8001f24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df2:	6593      	str	r3, [r2, #88]	; 0x58
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e00:	2301      	movs	r3, #1
 8001e02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_RCC_OscConfig+0x508>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d118      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_OscConfig+0x508>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x508>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa86 	bl	800132c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e24:	f7ff fa82 	bl	800132c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e17a      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_RCC_OscConfig+0x508>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4d8>
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e5a:	e029      	b.n	8001eb0 <HAL_RCC_OscConfig+0x52c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d115      	bne.n	8001e90 <HAL_RCC_OscConfig+0x50c>
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e84:	e014      	b.n	8001eb0 <HAL_RCC_OscConfig+0x52c>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	4b9c      	ldr	r3, [pc, #624]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a9b      	ldr	r2, [pc, #620]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea0:	4b98      	ldr	r3, [pc, #608]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a97      	ldr	r2, [pc, #604]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d016      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fa38 	bl	800132c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fa34 	bl	800132c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e12a      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed6:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ed      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x53c>
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fa21 	bl	800132c <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7ff fa1d 	bl	800132c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e113      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f04:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ed      	bne.n	8001eee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f18:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a79      	ldr	r2, [pc, #484]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80fe 	beq.w	800212a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	f040 80d0 	bne.w	80020d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f38:	4b72      	ldr	r3, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d130      	bne.n	8001fae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	3b01      	subs	r3, #1
 8001f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d127      	bne.n	8001fae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d11f      	bne.n	8001fae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f78:	2a07      	cmp	r2, #7
 8001f7a:	bf14      	ite	ne
 8001f7c:	2201      	movne	r2, #1
 8001f7e:	2200      	moveq	r2, #0
 8001f80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d113      	bne.n	8001fae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	3b01      	subs	r3, #1
 8001f94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d06e      	beq.n	800208c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d069      	beq.n	8002088 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0ad      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fdc:	f7ff f9a6 	bl	800132c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f9a2 	bl	800132c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e09a      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff6:	4b43      	ldr	r3, [pc, #268]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002002:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b40      	ldr	r3, [pc, #256]	; (8002108 <HAL_RCC_OscConfig+0x784>)
 8002008:	4013      	ands	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002012:	3a01      	subs	r2, #1
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	4311      	orrs	r1, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800201c:	0212      	lsls	r2, r2, #8
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002024:	0852      	lsrs	r2, r2, #1
 8002026:	3a01      	subs	r2, #1
 8002028:	0552      	lsls	r2, r2, #21
 800202a:	4311      	orrs	r1, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002030:	0852      	lsrs	r2, r2, #1
 8002032:	3a01      	subs	r2, #1
 8002034:	0652      	lsls	r2, r2, #25
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800203c:	0912      	lsrs	r2, r2, #4
 800203e:	0452      	lsls	r2, r2, #17
 8002040:	430a      	orrs	r2, r1
 8002042:	4930      	ldr	r1, [pc, #192]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8002044:	4313      	orrs	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002048:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2d      	ldr	r2, [pc, #180]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002060:	f7ff f964 	bl	800132c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f960 	bl	800132c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e058      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002086:	e050      	b.n	800212a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e04f      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d148      	bne.n	800212a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b0:	f7ff f93c 	bl	800132c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff f938 	bl	800132c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e030      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x734>
 80020d6:	e028      	b.n	800212a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d023      	beq.n	8002126 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_RCC_OscConfig+0x780>)
 80020e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff f91f 	bl	800132c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f0:	e00c      	b.n	800210c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff f91b 	bl	800132c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d905      	bls.n	800210c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e013      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
 8002104:	40021000 	.word	0x40021000
 8002108:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x7b0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ec      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_OscConfig+0x7b0>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4905      	ldr	r1, [pc, #20]	; (8002134 <HAL_RCC_OscConfig+0x7b0>)
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x7b4>)
 8002120:	4013      	ands	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
 8002124:	e001      	b.n	800212a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	feeefffc 	.word	0xfeeefffc

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0e7      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b75      	ldr	r3, [pc, #468]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4970      	ldr	r1, [pc, #448]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b6e      	ldr	r3, [pc, #440]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0cf      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002198:	429a      	cmp	r2, r3
 800219a:	d908      	bls.n	80021ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219c:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4960      	ldr	r1, [pc, #384]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04c      	beq.n	8002254 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	4b5a      	ldr	r3, [pc, #360]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d121      	bne.n	8002212 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0a6      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d115      	bne.n	8002212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e09a      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e08e      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e086      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4943      	ldr	r1, [pc, #268]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002224:	f7ff f882 	bl	800132c <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff f87e 	bl	800132c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e06e      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b3a      	ldr	r3, [pc, #232]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800226c:	429a      	cmp	r2, r3
 800226e:	d208      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	492b      	ldr	r1, [pc, #172]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d210      	bcs.n	80022b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 0207 	bic.w	r2, r3, #7
 8002298:	4923      	ldr	r1, [pc, #140]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_RCC_ClockConfig+0x1ec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e036      	b.n	8002320 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4918      	ldr	r1, [pc, #96]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d009      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4910      	ldr	r1, [pc, #64]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022f0:	f000 f824 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	490b      	ldr	r1, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1f4>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x1f8>)
 800230e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1fc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe ff01 	bl	800111c <HAL_InitTick>
 800231a:	4603      	mov	r3, r0
 800231c:	72fb      	strb	r3, [r7, #11]

  return status;
 800231e:	7afb      	ldrb	r3, [r7, #11]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40022000 	.word	0x40022000
 800232c:	40021000 	.word	0x40021000
 8002330:	0800722c 	.word	0x0800722c
 8002334:	20000008 	.word	0x20000008
 8002338:	2000000c 	.word	0x2000000c

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002354:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x34>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d121      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d11e      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e005      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <HAL_RCC_GetSysClockFreq+0x10c>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e004      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_RCC_GetSysClockFreq+0x114>)
 80023c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d134      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d003      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0xac>
 80023e0:	e005      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e4:	617b      	str	r3, [r7, #20]
      break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ea:	617b      	str	r3, [r7, #20]
      break;
 80023ec:	e002      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	617b      	str	r3, [r7, #20]
      break;
 80023f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	3301      	adds	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	fb03 f202 	mul.w	r2, r3, r2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	0e5b      	lsrs	r3, r3, #25
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	3301      	adds	r3, #1
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002434:	69bb      	ldr	r3, [r7, #24]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	08007244 	.word	0x08007244
 800244c:	00f42400 	.word	0x00f42400
 8002450:	007a1200 	.word	0x007a1200

08002454 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_RCC_GetHCLKFreq+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000008 	.word	0x20000008

0800246c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002470:	f7ff fff0 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4904      	ldr	r1, [pc, #16]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	0800723c 	.word	0x0800723c

08002498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800249c:	f7ff ffda 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0adb      	lsrs	r3, r3, #11
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	0800723c 	.word	0x0800723c

080024c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	220f      	movs	r2, #15
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_RCC_GetClockConfig+0x60>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0207 	and.w	r2, r3, #7
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	40022000 	.word	0x40022000

08002528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002540:	f7ff f9bc 	bl	80018bc <HAL_PWREx_GetVoltageRange>
 8002544:	6178      	str	r0, [r7, #20]
 8002546:	e014      	b.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	4a24      	ldr	r2, [pc, #144]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	6593      	str	r3, [r2, #88]	; 0x58
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002560:	f7ff f9ac 	bl	80018bc <HAL_PWREx_GetVoltageRange>
 8002564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002578:	d10b      	bne.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	d919      	bls.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2ba0      	cmp	r3, #160	; 0xa0
 8002584:	d902      	bls.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002586:	2302      	movs	r3, #2
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	e013      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800258c:	2301      	movs	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e010      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b80      	cmp	r3, #128	; 0x80
 8002596:	d902      	bls.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002598:	2303      	movs	r3, #3
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	e00a      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b80      	cmp	r3, #128	; 0x80
 80025a2:	d102      	bne.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a4:	2302      	movs	r3, #2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	e004      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b70      	cmp	r3, #112	; 0x70
 80025ae:	d101      	bne.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b0:	2301      	movs	r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 0207 	bic.w	r2, r3, #7
 80025bc:	4909      	ldr	r1, [pc, #36]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40022000 	.word	0x40022000

080025e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025f0:	2300      	movs	r3, #0
 80025f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025f4:	2300      	movs	r3, #0
 80025f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002600:	2b00      	cmp	r3, #0
 8002602:	d041      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800260c:	d02a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800260e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002612:	d824      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800261a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800261e:	d81e      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002628:	d010      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800262a:	e018      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800262c:	4b86      	ldr	r3, [pc, #536]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a85      	ldr	r2, [pc, #532]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002638:	e015      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fabb 	bl	8002bbc <RCCEx_PLLSAI1_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800264a:	e00c      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3320      	adds	r3, #32
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fba6 	bl	8002da4 <RCCEx_PLLSAI2_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800265c:	e003      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	74fb      	strb	r3, [r7, #19]
      break;
 8002662:	e000      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800266c:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800267a:	4973      	ldr	r1, [pc, #460]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002682:	e001      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d041      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002698:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800269c:	d02a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800269e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026a2:	d824      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ae:	d81e      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d010      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026ba:	e018      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026bc:	4b62      	ldr	r3, [pc, #392]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a61      	ldr	r2, [pc, #388]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c8:	e015      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fa73 	bl	8002bbc <RCCEx_PLLSAI1_Config>
 80026d6:	4603      	mov	r3, r0
 80026d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026da:	e00c      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3320      	adds	r3, #32
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fb5e 	bl	8002da4 <RCCEx_PLLSAI2_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ec:	e003      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	74fb      	strb	r3, [r7, #19]
      break;
 80026f2:	e000      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800270a:	494f      	ldr	r1, [pc, #316]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002712:	e001      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a0 	beq.w	8002866 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	4a40      	ldr	r2, [pc, #256]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	; 0x58
 800274c:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002758:	2301      	movs	r3, #1
 800275a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a3a      	ldr	r2, [pc, #232]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002768:	f7fe fde0 	bl	800132c <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800276e:	e009      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7fe fddc 	bl	800132c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	74fb      	strb	r3, [r7, #19]
        break;
 8002782:	e005      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002784:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ef      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d15c      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002796:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01f      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d019      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fd9b 	bl	800132c <HAL_GetTick>
 80027f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f8:	e00b      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fd97 	bl	800132c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d902      	bls.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	74fb      	strb	r3, [r7, #19]
            break;
 8002810:	e006      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ec      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002836:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800283e:	e009      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
 8002844:	e006      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002854:	7c7b      	ldrb	r3, [r7, #17]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285a:	4b9e      	ldr	r3, [pc, #632]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a9d      	ldr	r2, [pc, #628]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002872:	4b98      	ldr	r3, [pc, #608]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f023 0203 	bic.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	4994      	ldr	r1, [pc, #592]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002894:	4b8f      	ldr	r3, [pc, #572]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f023 020c 	bic.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	498c      	ldr	r1, [pc, #560]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028b6:	4b87      	ldr	r3, [pc, #540]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4983      	ldr	r1, [pc, #524]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028d8:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	497b      	ldr	r1, [pc, #492]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028fa:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002908:	4972      	ldr	r1, [pc, #456]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800291c:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	496a      	ldr	r1, [pc, #424]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	4961      	ldr	r1, [pc, #388]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002960:	4b5c      	ldr	r3, [pc, #368]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	4959      	ldr	r1, [pc, #356]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	4950      	ldr	r1, [pc, #320]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029a4:	4b4b      	ldr	r3, [pc, #300]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	4948      	ldr	r1, [pc, #288]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029c6:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	493f      	ldr	r1, [pc, #252]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d028      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e8:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f6:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a06:	d106      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a08:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a12:	60d3      	str	r3, [r2, #12]
 8002a14:	e011      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f8c8 	bl	8002bbc <RCCEx_PLLSAI1_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d028      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a70:	60d3      	str	r3, [r2, #12]
 8002a72:	e011      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f899 	bl	8002bbc <RCCEx_PLLSAI1_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d02b      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a02      	ldr	r2, [pc, #8]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ace:	60d3      	str	r3, [r2, #12]
 8002ad0:	e014      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f867 	bl	8002bbc <RCCEx_PLLSAI1_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02f      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b16:	4928      	ldr	r1, [pc, #160]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f844 	bl	8002bbc <RCCEx_PLLSAI1_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d014      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	74bb      	strb	r3, [r7, #18]
 8002b42:	e011      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3320      	adds	r3, #32
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f925 	bl	8002da4 <RCCEx_PLLSAI2_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b82:	490d      	ldr	r1, [pc, #52]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba6:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000

08002bbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bca:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d018      	beq.n	8002c08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0203 	and.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d10d      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bee:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d047      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	e044      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d018      	beq.n	8002c42 <RCCEx_PLLSAI1_Config+0x86>
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d825      	bhi.n	8002c60 <RCCEx_PLLSAI1_Config+0xa4>
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d002      	beq.n	8002c1e <RCCEx_PLLSAI1_Config+0x62>
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d009      	beq.n	8002c30 <RCCEx_PLLSAI1_Config+0x74>
 8002c1c:	e020      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c1e:	4b60      	ldr	r3, [pc, #384]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11d      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2e:	e01a      	b.n	8002c66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c30:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e013      	b.n	8002c6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c42:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10f      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c5e:	e006      	b.n	8002c6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e004      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	4944      	ldr	r1, [pc, #272]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d17d      	bne.n	8002d94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fb42 	bl	800132c <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002caa:	e009      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cac:	f7fe fb3e 	bl	800132c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cbe:	e005      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cc0:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ef      	bne.n	8002cac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d160      	bne.n	8002d94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd8:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6892      	ldr	r2, [r2, #8]
 8002ce8:	0211      	lsls	r1, r2, #8
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	0912      	lsrs	r2, r2, #4
 8002cf0:	0452      	lsls	r2, r2, #17
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	492a      	ldr	r1, [pc, #168]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	610b      	str	r3, [r1, #16]
 8002cfa:	e027      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d112      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d02:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6892      	ldr	r2, [r2, #8]
 8002d12:	0211      	lsls	r1, r2, #8
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6912      	ldr	r2, [r2, #16]
 8002d18:	0852      	lsrs	r2, r2, #1
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	0552      	lsls	r2, r2, #21
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	491f      	ldr	r1, [pc, #124]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	610b      	str	r3, [r1, #16]
 8002d26:	e011      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
 8002d38:	0211      	lsls	r1, r2, #8
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6952      	ldr	r2, [r2, #20]
 8002d3e:	0852      	lsrs	r2, r2, #1
 8002d40:	3a01      	subs	r2, #1
 8002d42:	0652      	lsls	r2, r2, #25
 8002d44:	430a      	orrs	r2, r1
 8002d46:	4916      	ldr	r1, [pc, #88]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fae8 	bl	800132c <HAL_GetTick>
 8002d5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d5e:	e009      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d60:	f7fe fae4 	bl	800132c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d902      	bls.n	8002d74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	73fb      	strb	r3, [r7, #15]
          break;
 8002d72:	e005      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ef      	beq.n	8002d60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	4904      	ldr	r1, [pc, #16]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000

08002da4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db2:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d018      	beq.n	8002df0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dbe:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0203 	and.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dd6:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
       ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d047      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e044      	b.n	8002e7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d018      	beq.n	8002e2a <RCCEx_PLLSAI2_Config+0x86>
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d825      	bhi.n	8002e48 <RCCEx_PLLSAI2_Config+0xa4>
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d002      	beq.n	8002e06 <RCCEx_PLLSAI2_Config+0x62>
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d009      	beq.n	8002e18 <RCCEx_PLLSAI2_Config+0x74>
 8002e04:	e020      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e06:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11d      	bne.n	8002e4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e16:	e01a      	b.n	8002e4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d116      	bne.n	8002e52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e013      	b.n	8002e52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10f      	bne.n	8002e56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e36:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e46:	e006      	b.n	8002e56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e004      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e002      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	430b      	orrs	r3, r1
 8002e74:	4939      	ldr	r1, [pc, #228]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d167      	bne.n	8002f50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a35      	ldr	r2, [pc, #212]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fa4e 	bl	800132c <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e92:	e009      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e94:	f7fe fa4a 	bl	800132c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d902      	bls.n	8002ea8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea6:	e005      	b.n	8002eb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ea8:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ef      	bne.n	8002e94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d14a      	bne.n	8002f50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6892      	ldr	r2, [r2, #8]
 8002ed0:	0211      	lsls	r1, r2, #8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	0912      	lsrs	r2, r2, #4
 8002ed8:	0452      	lsls	r2, r2, #17
 8002eda:	430a      	orrs	r2, r1
 8002edc:	491f      	ldr	r1, [pc, #124]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	614b      	str	r3, [r1, #20]
 8002ee2:	e011      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6892      	ldr	r2, [r2, #8]
 8002ef4:	0211      	lsls	r1, r2, #8
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6912      	ldr	r2, [r2, #16]
 8002efa:	0852      	lsrs	r2, r2, #1
 8002efc:	3a01      	subs	r2, #1
 8002efe:	0652      	lsls	r2, r2, #25
 8002f00:	430a      	orrs	r2, r1
 8002f02:	4916      	ldr	r1, [pc, #88]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe fa0a 	bl	800132c <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f1a:	e009      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f1c:	f7fe fa06 	bl	800132c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d902      	bls.n	8002f30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f2e:	e005      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ef      	beq.n	8002f1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4904      	ldr	r1, [pc, #16]	; (8002f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e049      	b.n	8003006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe f84c 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 fb2a 	bl	80035f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e047      	b.n	80030b8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <HAL_TIM_Base_Start+0xb4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_TIM_Base_Start+0x66>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d018      	beq.n	8003076 <HAL_TIM_Base_Start+0x66>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_TIM_Base_Start+0xb8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_TIM_Base_Start+0x66>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <HAL_TIM_Base_Start+0xbc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIM_Base_Start+0x66>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_TIM_Base_Start+0xc0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIM_Base_Start+0x66>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_TIM_Base_Start+0xc4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIM_Base_Start+0x66>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_TIM_Base_Start+0xc8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d115      	bne.n	80030a2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_TIM_Base_Start+0xcc>)
 800307e:	4013      	ands	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d015      	beq.n	80030b4 <HAL_TIM_Base_Start+0xa4>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308e:	d011      	beq.n	80030b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a0:	e008      	b.n	80030b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e000      	b.n	80030b6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40013400 	.word	0x40013400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	00010007 	.word	0x00010007

080030e0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <HAL_TIM_Base_Stop+0x38>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a1a      	ldr	r2, [r3, #32]
 80030fe:	f240 4344 	movw	r3, #1092	; 0x444
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_TIM_Base_Stop+0x38>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d001      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e04f      	b.n	80031e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01d      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x76>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d018      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x76>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x76>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x76>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_TIM_Base_Start_IT+0xd0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x76>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIM_Base_Start_IT+0xd4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x76>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_TIM_Base_Start_IT+0xd8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d115      	bne.n	80031d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_TIM_Base_Start_IT+0xdc>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b06      	cmp	r3, #6
 80031b6:	d015      	beq.n	80031e4 <HAL_TIM_Base_Start_IT+0xb4>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031be:	d011      	beq.n	80031e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	e008      	b.n	80031e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e000      	b.n	80031e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800
 8003200:	40000c00 	.word	0x40000c00
 8003204:	40013400 	.word	0x40013400
 8003208:	40014000 	.word	0x40014000
 800320c:	00010007 	.word	0x00010007

08003210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d020      	beq.n	8003274 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0202 	mvn.w	r2, #2
 8003244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9ad 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f99f 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f9b0 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d020      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0204 	mvn.w	r2, #4
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f987 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f979 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f98a 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0208 	mvn.w	r2, #8
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2204      	movs	r2, #4
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f961 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f953 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f964 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2208      	movs	r2, #8
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f93b 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f92d 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f93e 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0201 	mvn.w	r2, #1
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fe17 	bl	8000faa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 faf2 	bl	8003984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 faea 	bl	8003998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8fd 	bl	80035e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0220 	mvn.w	r2, #32
 8003404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fab2 	bl	8003970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_TIM_ConfigClockSource+0x1c>
 800342c:	2302      	movs	r3, #2
 800342e:	e0b6      	b.n	800359e <HAL_TIM_ConfigClockSource+0x18a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346c:	d03e      	beq.n	80034ec <HAL_TIM_ConfigClockSource+0xd8>
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003472:	f200 8087 	bhi.w	8003584 <HAL_TIM_ConfigClockSource+0x170>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	f000 8086 	beq.w	800358a <HAL_TIM_ConfigClockSource+0x176>
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003482:	d87f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 8003484:	2b70      	cmp	r3, #112	; 0x70
 8003486:	d01a      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xaa>
 8003488:	2b70      	cmp	r3, #112	; 0x70
 800348a:	d87b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 800348c:	2b60      	cmp	r3, #96	; 0x60
 800348e:	d050      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x11e>
 8003490:	2b60      	cmp	r3, #96	; 0x60
 8003492:	d877      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 8003494:	2b50      	cmp	r3, #80	; 0x50
 8003496:	d03c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xfe>
 8003498:	2b50      	cmp	r3, #80	; 0x50
 800349a:	d873      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d058      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x13e>
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d86f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 80034a4:	2b30      	cmp	r3, #48	; 0x30
 80034a6:	d064      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034a8:	2b30      	cmp	r3, #48	; 0x30
 80034aa:	d86b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d060      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d867      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05c      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d05a      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15e>
 80034bc:	e062      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ce:	f000 f9a7 	bl	8003820 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
      break;
 80034ea:	e04f      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	f000 f990 	bl	8003820 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800350e:	609a      	str	r2, [r3, #8]
      break;
 8003510:	e03c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	461a      	mov	r2, r3
 8003520:	f000 f904 	bl	800372c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2150      	movs	r1, #80	; 0x50
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f95d 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 8003530:	e02c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800353e:	461a      	mov	r2, r3
 8003540:	f000 f923 	bl	800378a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2160      	movs	r1, #96	; 0x60
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f94d 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 8003550:	e01c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355e:	461a      	mov	r2, r3
 8003560:	f000 f8e4 	bl	800372c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f93d 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 8003570:	e00c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f000 f934 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 8003582:	e003      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e000      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800358a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a40      	ldr	r2, [pc, #256]	; (800370c <TIM_Base_SetConfig+0x114>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d013      	beq.n	8003638 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003616:	d00f      	beq.n	8003638 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3d      	ldr	r2, [pc, #244]	; (8003710 <TIM_Base_SetConfig+0x118>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00b      	beq.n	8003638 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3c      	ldr	r2, [pc, #240]	; (8003714 <TIM_Base_SetConfig+0x11c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d007      	beq.n	8003638 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <TIM_Base_SetConfig+0x120>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <TIM_Base_SetConfig+0x40>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a3a      	ldr	r2, [pc, #232]	; (800371c <TIM_Base_SetConfig+0x124>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2f      	ldr	r2, [pc, #188]	; (800370c <TIM_Base_SetConfig+0x114>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01f      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d01b      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2c      	ldr	r2, [pc, #176]	; (8003710 <TIM_Base_SetConfig+0x118>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d017      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <TIM_Base_SetConfig+0x11c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <TIM_Base_SetConfig+0x120>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00f      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a29      	ldr	r2, [pc, #164]	; (800371c <TIM_Base_SetConfig+0x124>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00b      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a28      	ldr	r2, [pc, #160]	; (8003720 <TIM_Base_SetConfig+0x128>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <TIM_Base_SetConfig+0x12c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_Base_SetConfig+0x9a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <TIM_Base_SetConfig+0x130>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d108      	bne.n	80036a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a10      	ldr	r2, [pc, #64]	; (800370c <TIM_Base_SetConfig+0x114>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00f      	beq.n	80036f0 <TIM_Base_SetConfig+0xf8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a12      	ldr	r2, [pc, #72]	; (800371c <TIM_Base_SetConfig+0x124>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00b      	beq.n	80036f0 <TIM_Base_SetConfig+0xf8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a11      	ldr	r2, [pc, #68]	; (8003720 <TIM_Base_SetConfig+0x128>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <TIM_Base_SetConfig+0xf8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <TIM_Base_SetConfig+0x12c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <TIM_Base_SetConfig+0xf8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <TIM_Base_SetConfig+0x130>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d103      	bne.n	80036f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	615a      	str	r2, [r3, #20]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40013400 	.word	0x40013400
 8003720:	40014000 	.word	0x40014000
 8003724:	40014400 	.word	0x40014400
 8003728:	40014800 	.word	0x40014800

0800372c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 030a 	bic.w	r3, r3, #10
 8003768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800378a:	b480      	push	{r7}
 800378c:	b087      	sub	sp, #28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 0210 	bic.w	r2, r3, #16
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	031b      	lsls	r3, r3, #12
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	621a      	str	r2, [r3, #32]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	f043 0307 	orr.w	r3, r3, #7
 800380c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	021a      	lsls	r2, r3, #8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	431a      	orrs	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003874:	2302      	movs	r3, #2
 8003876:	e068      	b.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2e      	ldr	r2, [pc, #184]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2d      	ldr	r2, [pc, #180]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d108      	bne.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ea:	d018      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10c      	bne.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4313      	orrs	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40013400 	.word	0x40013400
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40014000 	.word	0x40014000

08003970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e040      	b.n	8003a40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fb48 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fae0 	bl	8003fb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f825 	bl	8003a48 <UART_SetConfig>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e01b      	b.n	8003a40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fb5f 	bl	80040fc <UART_CheckIdleState>
 8003a3e:	4603      	mov	r3, r0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b08a      	sub	sp, #40	; 0x28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4ba4      	ldr	r3, [pc, #656]	; (8003d08 <UART_SetConfig+0x2c0>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a99      	ldr	r2, [pc, #612]	; (8003d0c <UART_SetConfig+0x2c4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a90      	ldr	r2, [pc, #576]	; (8003d10 <UART_SetConfig+0x2c8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d126      	bne.n	8003b20 <UART_SetConfig+0xd8>
 8003ad2:	4b90      	ldr	r3, [pc, #576]	; (8003d14 <UART_SetConfig+0x2cc>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d81b      	bhi.n	8003b18 <UART_SetConfig+0xd0>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <UART_SetConfig+0xa0>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003af9 	.word	0x08003af9
 8003aec:	08003b09 	.word	0x08003b09
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003b11 	.word	0x08003b11
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e116      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b00:	2302      	movs	r3, #2
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e112      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0e:	e10e      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b10:	2308      	movs	r3, #8
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b16:	e10a      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e106      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7c      	ldr	r2, [pc, #496]	; (8003d18 <UART_SetConfig+0x2d0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d138      	bne.n	8003b9c <UART_SetConfig+0x154>
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <UART_SetConfig+0x2cc>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d82d      	bhi.n	8003b94 <UART_SetConfig+0x14c>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <UART_SetConfig+0xf8>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003b95 	.word	0x08003b95
 8003b48:	08003b95 	.word	0x08003b95
 8003b4c:	08003b95 	.word	0x08003b95
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003b95 	.word	0x08003b95
 8003b58:	08003b95 	.word	0x08003b95
 8003b5c:	08003b95 	.word	0x08003b95
 8003b60:	08003b7d 	.word	0x08003b7d
 8003b64:	08003b95 	.word	0x08003b95
 8003b68:	08003b95 	.word	0x08003b95
 8003b6c:	08003b95 	.word	0x08003b95
 8003b70:	08003b8d 	.word	0x08003b8d
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7a:	e0d8      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e0d4      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b84:	2304      	movs	r3, #4
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e0d0      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e0cc      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b94:	2310      	movs	r3, #16
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e0c8      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <UART_SetConfig+0x2d4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d125      	bne.n	8003bf2 <UART_SetConfig+0x1aa>
 8003ba6:	4b5b      	ldr	r3, [pc, #364]	; (8003d14 <UART_SetConfig+0x2cc>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bb0:	2b30      	cmp	r3, #48	; 0x30
 8003bb2:	d016      	beq.n	8003be2 <UART_SetConfig+0x19a>
 8003bb4:	2b30      	cmp	r3, #48	; 0x30
 8003bb6:	d818      	bhi.n	8003bea <UART_SetConfig+0x1a2>
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d00a      	beq.n	8003bd2 <UART_SetConfig+0x18a>
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d814      	bhi.n	8003bea <UART_SetConfig+0x1a2>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <UART_SetConfig+0x182>
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d008      	beq.n	8003bda <UART_SetConfig+0x192>
 8003bc8:	e00f      	b.n	8003bea <UART_SetConfig+0x1a2>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd0:	e0ad      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd8:	e0a9      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003bda:	2304      	movs	r3, #4
 8003bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be0:	e0a5      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003be2:	2308      	movs	r3, #8
 8003be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be8:	e0a1      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003bea:	2310      	movs	r3, #16
 8003bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf0:	e09d      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <UART_SetConfig+0x2d8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d125      	bne.n	8003c48 <UART_SetConfig+0x200>
 8003bfc:	4b45      	ldr	r3, [pc, #276]	; (8003d14 <UART_SetConfig+0x2cc>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c06:	2bc0      	cmp	r3, #192	; 0xc0
 8003c08:	d016      	beq.n	8003c38 <UART_SetConfig+0x1f0>
 8003c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c0c:	d818      	bhi.n	8003c40 <UART_SetConfig+0x1f8>
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d00a      	beq.n	8003c28 <UART_SetConfig+0x1e0>
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d814      	bhi.n	8003c40 <UART_SetConfig+0x1f8>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <UART_SetConfig+0x1d8>
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d008      	beq.n	8003c30 <UART_SetConfig+0x1e8>
 8003c1e:	e00f      	b.n	8003c40 <UART_SetConfig+0x1f8>
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e082      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e07e      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c30:	2304      	movs	r3, #4
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e07a      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3e:	e076      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e072      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a35      	ldr	r2, [pc, #212]	; (8003d24 <UART_SetConfig+0x2dc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d12a      	bne.n	8003ca8 <UART_SetConfig+0x260>
 8003c52:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <UART_SetConfig+0x2cc>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c60:	d01a      	beq.n	8003c98 <UART_SetConfig+0x250>
 8003c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c66:	d81b      	bhi.n	8003ca0 <UART_SetConfig+0x258>
 8003c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6c:	d00c      	beq.n	8003c88 <UART_SetConfig+0x240>
 8003c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c72:	d815      	bhi.n	8003ca0 <UART_SetConfig+0x258>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <UART_SetConfig+0x238>
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7c:	d008      	beq.n	8003c90 <UART_SetConfig+0x248>
 8003c7e:	e00f      	b.n	8003ca0 <UART_SetConfig+0x258>
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e052      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e04e      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e04a      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9e:	e046      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca6:	e042      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <UART_SetConfig+0x2c4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d13a      	bne.n	8003d28 <UART_SetConfig+0x2e0>
 8003cb2:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <UART_SetConfig+0x2cc>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc0:	d01a      	beq.n	8003cf8 <UART_SetConfig+0x2b0>
 8003cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc6:	d81b      	bhi.n	8003d00 <UART_SetConfig+0x2b8>
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ccc:	d00c      	beq.n	8003ce8 <UART_SetConfig+0x2a0>
 8003cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd2:	d815      	bhi.n	8003d00 <UART_SetConfig+0x2b8>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <UART_SetConfig+0x298>
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d008      	beq.n	8003cf0 <UART_SetConfig+0x2a8>
 8003cde:	e00f      	b.n	8003d00 <UART_SetConfig+0x2b8>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e022      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e01e      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e01a      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e016      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003d00:	2310      	movs	r3, #16
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d06:	e012      	b.n	8003d2e <UART_SetConfig+0x2e6>
 8003d08:	efff69f3 	.word	0xefff69f3
 8003d0c:	40008000 	.word	0x40008000
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40004400 	.word	0x40004400
 8003d1c:	40004800 	.word	0x40004800
 8003d20:	40004c00 	.word	0x40004c00
 8003d24:	40005000 	.word	0x40005000
 8003d28:	2310      	movs	r3, #16
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a9f      	ldr	r2, [pc, #636]	; (8003fb0 <UART_SetConfig+0x568>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d17a      	bne.n	8003e2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d824      	bhi.n	8003d8a <UART_SetConfig+0x342>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x300>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d8b 	.word	0x08003d8b
 8003d50:	08003d75 	.word	0x08003d75
 8003d54:	08003d8b 	.word	0x08003d8b
 8003d58:	08003d7b 	.word	0x08003d7b
 8003d5c:	08003d8b 	.word	0x08003d8b
 8003d60:	08003d8b 	.word	0x08003d8b
 8003d64:	08003d8b 	.word	0x08003d8b
 8003d68:	08003d83 	.word	0x08003d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fb7e 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8003d70:	61f8      	str	r0, [r7, #28]
        break;
 8003d72:	e010      	b.n	8003d96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d74:	4b8f      	ldr	r3, [pc, #572]	; (8003fb4 <UART_SetConfig+0x56c>)
 8003d76:	61fb      	str	r3, [r7, #28]
        break;
 8003d78:	e00d      	b.n	8003d96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7a:	f7fe fadf 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8003d7e:	61f8      	str	r0, [r7, #28]
        break;
 8003d80:	e009      	b.n	8003d96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d86:	61fb      	str	r3, [r7, #28]
        break;
 8003d88:	e005      	b.n	8003d96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80fb 	beq.w	8003f94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d305      	bcc.n	8003dba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d903      	bls.n	8003dc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dc0:	e0e8      	b.n	8003f94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	461c      	mov	r4, r3
 8003dc8:	4615      	mov	r5, r2
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	022b      	lsls	r3, r5, #8
 8003dd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dd8:	0222      	lsls	r2, r4, #8
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	6849      	ldr	r1, [r1, #4]
 8003dde:	0849      	lsrs	r1, r1, #1
 8003de0:	2000      	movs	r0, #0
 8003de2:	4688      	mov	r8, r1
 8003de4:	4681      	mov	r9, r0
 8003de6:	eb12 0a08 	adds.w	sl, r2, r8
 8003dea:	eb43 0b09 	adc.w	fp, r3, r9
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dfc:	4650      	mov	r0, sl
 8003dfe:	4659      	mov	r1, fp
 8003e00:	f7fc f9e6 	bl	80001d0 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e12:	d308      	bcc.n	8003e26 <UART_SetConfig+0x3de>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1a:	d204      	bcs.n	8003e26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	e0b6      	b.n	8003f94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e2c:	e0b2      	b.n	8003f94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e36:	d15e      	bne.n	8003ef6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d828      	bhi.n	8003e92 <UART_SetConfig+0x44a>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x400>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08003e93 	.word	0x08003e93
 8003e58:	08003e83 	.word	0x08003e83
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fafe 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8003e70:	61f8      	str	r0, [r7, #28]
        break;
 8003e72:	e014      	b.n	8003e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe fb10 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 8003e78:	61f8      	str	r0, [r7, #28]
        break;
 8003e7a:	e010      	b.n	8003e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b4d      	ldr	r3, [pc, #308]	; (8003fb4 <UART_SetConfig+0x56c>)
 8003e7e:	61fb      	str	r3, [r7, #28]
        break;
 8003e80:	e00d      	b.n	8003e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fe fa5b 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8003e86:	61f8      	str	r0, [r7, #28]
        break;
 8003e88:	e009      	b.n	8003e9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	61fb      	str	r3, [r7, #28]
        break;
 8003e90:	e005      	b.n	8003e9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d077      	beq.n	8003f94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005a      	lsls	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	441a      	add	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b0f      	cmp	r3, #15
 8003ebe:	d916      	bls.n	8003eee <UART_SetConfig+0x4a6>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d212      	bcs.n	8003eee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f023 030f 	bic.w	r3, r3, #15
 8003ed0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	8afb      	ldrh	r3, [r7, #22]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	8afa      	ldrh	r2, [r7, #22]
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	e052      	b.n	8003f94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ef4:	e04e      	b.n	8003f94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d827      	bhi.n	8003f4e <UART_SetConfig+0x506>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x4bc>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f4f 	.word	0x08003f4f
 8003f14:	08003f3f 	.word	0x08003f3f
 8003f18:	08003f4f 	.word	0x08003f4f
 8003f1c:	08003f4f 	.word	0x08003f4f
 8003f20:	08003f4f 	.word	0x08003f4f
 8003f24:	08003f47 	.word	0x08003f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7fe faa0 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8003f2c:	61f8      	str	r0, [r7, #28]
        break;
 8003f2e:	e014      	b.n	8003f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7fe fab2 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 8003f34:	61f8      	str	r0, [r7, #28]
        break;
 8003f36:	e010      	b.n	8003f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <UART_SetConfig+0x56c>)
 8003f3a:	61fb      	str	r3, [r7, #28]
        break;
 8003f3c:	e00d      	b.n	8003f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3e:	f7fe f9fd 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8003f42:	61f8      	str	r0, [r7, #28]
        break;
 8003f44:	e009      	b.n	8003f5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	61fb      	str	r3, [r7, #28]
        break;
 8003f4c:	e005      	b.n	8003f5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f58:	bf00      	nop
    }

    if (pclk != 0U)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d019      	beq.n	8003f94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	085a      	lsrs	r2, r3, #1
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	441a      	add	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	d909      	bls.n	8003f8e <UART_SetConfig+0x546>
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d205      	bcs.n	8003f8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	e002      	b.n	8003f94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	40008000 	.word	0x40008000
 8003fb4:	00f42400 	.word	0x00f42400

08003fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01a      	beq.n	80040ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b6:	d10a      	bne.n	80040ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b098      	sub	sp, #96	; 0x60
 8004100:	af02      	add	r7, sp, #8
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800410c:	f7fd f90e 	bl	800132c <HAL_GetTick>
 8004110:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d12e      	bne.n	800417e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f88c 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d021      	beq.n	800417e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414e:	653b      	str	r3, [r7, #80]	; 0x50
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004158:	647b      	str	r3, [r7, #68]	; 0x44
 800415a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800415e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e062      	b.n	8004244 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b04      	cmp	r3, #4
 800418a:	d149      	bne.n	8004220 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800418c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f856 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03c      	beq.n	8004220 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	623b      	str	r3, [r7, #32]
   return(result);
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
 80041c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f8:	61fa      	str	r2, [r7, #28]
 80041fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	617b      	str	r3, [r7, #20]
   return(result);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e011      	b.n	8004244 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3758      	adds	r7, #88	; 0x58
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	4613      	mov	r3, r2
 800425a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425c:	e049      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d045      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fd f861 	bl	800132c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <UART_WaitOnFlagUntilTimeout+0x30>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e048      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d031      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b08      	cmp	r3, #8
 800429a:	d110      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f838 	bl	800431a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2208      	movs	r2, #8
 80042ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e029      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042cc:	d111      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f81e 	bl	800431a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d0a6      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800431a:	b480      	push	{r7}
 800431c:	b095      	sub	sp, #84	; 0x54
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004340:	643b      	str	r3, [r7, #64]	; 0x40
 8004342:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e6      	bne.n	8004322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	61fb      	str	r3, [r7, #28]
   return(result);
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800437a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438c:	2b01      	cmp	r3, #1
 800438e:	d118      	bne.n	80043c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	60bb      	str	r3, [r7, #8]
   return(result);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f023 0310 	bic.w	r3, r3, #16
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	613b      	str	r3, [r7, #16]
   return(result);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e6      	bne.n	8004390 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043d6:	bf00      	nop
 80043d8:	3754      	adds	r7, #84	; 0x54
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <__NVIC_SetPriority>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db0a      	blt.n	800440e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	490c      	ldr	r1, [pc, #48]	; (8004430 <__NVIC_SetPriority+0x4c>)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	0112      	lsls	r2, r2, #4
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	440b      	add	r3, r1
 8004408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800440c:	e00a      	b.n	8004424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4908      	ldr	r1, [pc, #32]	; (8004434 <__NVIC_SetPriority+0x50>)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	3b04      	subs	r3, #4
 800441c:	0112      	lsls	r2, r2, #4
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	440b      	add	r3, r1
 8004422:	761a      	strb	r2, [r3, #24]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000e100 	.word	0xe000e100
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <SysTick_Handler+0x1c>)
 800443e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004440:	f001 fdaa 	bl	8005f98 <xTaskGetSchedulerState>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d001      	beq.n	800444e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800444a:	f002 fb95 	bl	8006b78 <xPortSysTickHandler>
  }
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	e000e010 	.word	0xe000e010

08004458 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800445c:	2100      	movs	r1, #0
 800445e:	f06f 0004 	mvn.w	r0, #4
 8004462:	f7ff ffbf 	bl	80043e4 <__NVIC_SetPriority>
#endif
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004472:	f3ef 8305 	mrs	r3, IPSR
 8004476:	603b      	str	r3, [r7, #0]
  return(result);
 8004478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800447e:	f06f 0305 	mvn.w	r3, #5
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e00c      	b.n	80044a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <osKernelInitialize+0x44>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <osKernelInitialize+0x44>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004494:	2300      	movs	r3, #0
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	e002      	b.n	80044a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
 800449e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044a0:	687b      	ldr	r3, [r7, #4]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000180 	.word	0x20000180

080044b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ba:	f3ef 8305 	mrs	r3, IPSR
 80044be:	603b      	str	r3, [r7, #0]
  return(result);
 80044c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80044c6:	f06f 0305 	mvn.w	r3, #5
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	e010      	b.n	80044f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <osKernelStart+0x48>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d109      	bne.n	80044ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044d6:	f7ff ffbf 	bl	8004458 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044da:	4b08      	ldr	r3, [pc, #32]	; (80044fc <osKernelStart+0x48>)
 80044dc:	2202      	movs	r2, #2
 80044de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044e0:	f001 f912 	bl	8005708 <vTaskStartScheduler>
      stat = osOK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	e002      	b.n	80044f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044f0:	687b      	ldr	r3, [r7, #4]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000180 	.word	0x20000180

08004500 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b08e      	sub	sp, #56	; 0x38
 8004504:	af04      	add	r7, sp, #16
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004510:	f3ef 8305 	mrs	r3, IPSR
 8004514:	617b      	str	r3, [r7, #20]
  return(result);
 8004516:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004518:	2b00      	cmp	r3, #0
 800451a:	d17e      	bne.n	800461a <osThreadNew+0x11a>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d07b      	beq.n	800461a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004526:	2318      	movs	r3, #24
 8004528:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d045      	beq.n	80045c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <osThreadNew+0x48>
        name = attr->name;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <osThreadNew+0x6e>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b38      	cmp	r3, #56	; 0x38
 8004560:	d805      	bhi.n	800456e <osThreadNew+0x6e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <osThreadNew+0x72>
        return (NULL);
 800456e:	2300      	movs	r3, #0
 8004570:	e054      	b.n	800461c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <osThreadNew+0xa8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b5b      	cmp	r3, #91	; 0x5b
 8004590:	d90a      	bls.n	80045a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <osThreadNew+0xa8>
        mem = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e010      	b.n	80045ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10c      	bne.n	80045ca <osThreadNew+0xca>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <osThreadNew+0xca>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <osThreadNew+0xca>
          mem = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	e001      	b.n	80045ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d110      	bne.n	80045f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d8:	9202      	str	r2, [sp, #8]
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 feb8 	bl	800535c <xTaskCreateStatic>
 80045ec:	4603      	mov	r3, r0
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	e013      	b.n	800461a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d110      	bne.n	800461a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 ff03 	bl	8005416 <xTaskCreate>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <osThreadNew+0x11a>
            hTask = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800461a:	693b      	ldr	r3, [r7, #16]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800462c:	f3ef 8305 	mrs	r3, IPSR
 8004630:	60bb      	str	r3, [r7, #8]
  return(result);
 8004632:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <osDelay+0x1c>
    stat = osErrorISR;
 8004638:	f06f 0305 	mvn.w	r3, #5
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e007      	b.n	8004650 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <osDelay+0x2c>
      vTaskDelay(ticks);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 f828 	bl	80056a0 <vTaskDelay>
    }
  }

  return (stat);
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800465a:	b580      	push	{r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466a:	f3ef 8305 	mrs	r3, IPSR
 800466e:	613b      	str	r3, [r7, #16]
  return(result);
 8004670:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004672:	2b00      	cmp	r3, #0
 8004674:	d15f      	bne.n	8004736 <osMessageQueueNew+0xdc>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05c      	beq.n	8004736 <osMessageQueueNew+0xdc>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d059      	beq.n	8004736 <osMessageQueueNew+0xdc>
    mem = -1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d029      	beq.n	80046e2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <osMessageQueueNew+0x62>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b4f      	cmp	r3, #79	; 0x4f
 800469c:	d90e      	bls.n	80046bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <osMessageQueueNew+0x62>
        mem = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e014      	b.n	80046e6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d110      	bne.n	80046e6 <osMessageQueueNew+0x8c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10c      	bne.n	80046e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d108      	bne.n	80046e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d104      	bne.n	80046e6 <osMessageQueueNew+0x8c>
          mem = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	e001      	b.n	80046e6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10b      	bne.n	8004704 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2100      	movs	r1, #0
 80046f6:	9100      	str	r1, [sp, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f970 	bl	80049e0 <xQueueGenericCreateStatic>
 8004700:	61f8      	str	r0, [r7, #28]
 8004702:	e008      	b.n	8004716 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800470a:	2200      	movs	r2, #0
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f9de 	bl	8004ad0 <xQueueGenericCreate>
 8004714:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <osMessageQueueNew+0xd0>
        name = attr->name;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e001      	b.n	800472e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	69f8      	ldr	r0, [r7, #28]
 8004732:	f000 fdb5 	bl	80052a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004736:	69fb      	ldr	r3, [r7, #28]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a07      	ldr	r2, [pc, #28]	; (800476c <vApplicationGetIdleTaskMemory+0x2c>)
 8004750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4a06      	ldr	r2, [pc, #24]	; (8004770 <vApplicationGetIdleTaskMemory+0x30>)
 8004756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000184 	.word	0x20000184
 8004770:	200001e0 	.word	0x200001e0

08004774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a06      	ldr	r2, [pc, #24]	; (80047a4 <vApplicationGetTimerTaskMemory+0x30>)
 800478a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	200003e0 	.word	0x200003e0
 80047a4:	2000043c 	.word	0x2000043c

080047a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f103 0208 	add.w	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295
 80047c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f103 0208 	add.w	r2, r3, #8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f103 0208 	add.w	r2, r3, #8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	601a      	str	r2, [r3, #0]
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d103      	bne.n	800486a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e00c      	b.n	8004884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3308      	adds	r3, #8
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e002      	b.n	8004878 <vListInsert+0x2e>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	d2f6      	bcs.n	8004872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6852      	ldr	r2, [r2, #4]
 80048dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d103      	bne.n	80048f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800493a:	f002 f88b 	bl	8006a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	441a      	add	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	3b01      	subs	r3, #1
 800496c:	68f9      	ldr	r1, [r7, #12]
 800496e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	441a      	add	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	22ff      	movs	r2, #255	; 0xff
 8004986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d114      	bne.n	80049ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3310      	adds	r3, #16
 800499c:	4618      	mov	r0, r3
 800499e:	f001 f93d 	bl	8005c1c <xTaskRemoveFromEventList>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d012      	beq.n	80049ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <xQueueGenericReset+0xcc>)
 80049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	e009      	b.n	80049ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3310      	adds	r3, #16
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fef2 	bl	80047a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff feed 	bl	80047a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049ce:	f002 f871 	bl	8006ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049d2:	2301      	movs	r3, #1
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <xQueueGenericCreateStatic+0x52>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <xQueueGenericCreateStatic+0x56>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <xQueueGenericCreateStatic+0x58>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	623b      	str	r3, [r7, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <xQueueGenericCreateStatic+0x7e>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <xQueueGenericCreateStatic+0x82>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <xQueueGenericCreateStatic+0x84>
 8004a62:	2300      	movs	r3, #0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	61fb      	str	r3, [r7, #28]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a7e:	2350      	movs	r3, #80	; 0x50
 8004a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d00a      	beq.n	8004a9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	61bb      	str	r3, [r7, #24]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ab2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f83f 	bl	8004b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3730      	adds	r7, #48	; 0x30
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	613b      	str	r3, [r7, #16]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	3350      	adds	r3, #80	; 0x50
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f002 f8c5 	bl	8006c98 <pvPortMalloc>
 8004b0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d011      	beq.n	8004b3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	3350      	adds	r3, #80	; 0x50
 8004b1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b28:	79fa      	ldrb	r2, [r7, #7]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f805 	bl	8004b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b72:	2101      	movs	r1, #1
 8004b74:	69b8      	ldr	r0, [r7, #24]
 8004b76:	f7ff fecb 	bl	8004910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08e      	sub	sp, #56	; 0x38
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSend+0x32>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <xQueueGenericSend+0x40>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <xQueueGenericSend+0x44>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <xQueueGenericSend+0x46>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <xQueueGenericSend+0x60>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSend+0x6e>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericSend+0x72>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericSend+0x74>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueGenericSend+0x8e>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c1a:	f001 f9bd 	bl	8005f98 <xTaskGetSchedulerState>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <xQueueGenericSend+0x9e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <xQueueGenericSend+0xa2>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <xQueueGenericSend+0xa4>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <xQueueGenericSend+0xbe>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	61fb      	str	r3, [r7, #28]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c4a:	f001 ff03 	bl	8006a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <xQueueGenericSend+0xd4>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d129      	bne.n	8004cb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c66:	f000 fa0b 	bl	8005080 <prvCopyDataToQueue>
 8004c6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	3324      	adds	r3, #36	; 0x24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 ffcf 	bl	8005c1c <xTaskRemoveFromEventList>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c84:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <xQueueGenericSend+0x1f8>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	e00a      	b.n	8004cac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <xQueueGenericSend+0x1f8>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cac:	f001 ff02 	bl	8006ab4 <vPortExitCritical>
				return pdPASS;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e063      	b.n	8004d7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cba:	f001 fefb 	bl	8006ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e05c      	b.n	8004d7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 f809 	bl	8005ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd6:	f001 feed 	bl	8006ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cda:	f000 fd7b 	bl	80057d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cde:	f001 feb9 	bl	8006a54 <vPortEnterCritical>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce8:	b25b      	sxtb	r3, r3
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d103      	bne.n	8004cf8 <xQueueGenericSend+0x16c>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d103      	bne.n	8004d0e <xQueueGenericSend+0x182>
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0e:	f001 fed1 	bl	8006ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d12:	1d3a      	adds	r2, r7, #4
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fff8 	bl	8005d10 <xTaskCheckForTimeOut>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d124      	bne.n	8004d70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d28:	f000 faa2 	bl	8005270 <prvIsQueueFull>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d018      	beq.n	8004d64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	3310      	adds	r3, #16
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 ff1e 	bl	8005b7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d42:	f000 fa2d 	bl	80051a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d46:	f000 fd53 	bl	80057f0 <xTaskResumeAll>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f af7c 	bne.w	8004c4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d52:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <xQueueGenericSend+0x1f8>)
 8004d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	e772      	b.n	8004c4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d66:	f000 fa1b 	bl	80051a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6a:	f000 fd41 	bl	80057f0 <xTaskResumeAll>
 8004d6e:	e76c      	b.n	8004c4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d72:	f000 fa15 	bl	80051a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d76:	f000 fd3b 	bl	80057f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3738      	adds	r7, #56	; 0x38
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b090      	sub	sp, #64	; 0x40
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x3c>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <xQueueGenericSendFromISR+0x40>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <xQueueGenericSendFromISR+0x42>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericSendFromISR+0x6a>
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <xQueueGenericSendFromISR+0x6e>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueGenericSendFromISR+0x70>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	623b      	str	r3, [r7, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e12:	f001 ff01 	bl	8006c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e16:	f3ef 8211 	mrs	r2, BASEPRI
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <xQueueGenericSendFromISR+0xbc>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d12f      	bne.n	8004ea4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e5a:	f000 f911 	bl	8005080 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d112      	bne.n	8004e8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d016      	beq.n	8004e9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fed1 	bl	8005c1c <xTaskRemoveFromEventList>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e007      	b.n	8004e9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e92:	3301      	adds	r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	b25a      	sxtb	r2, r3
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004ea2:	e001      	b.n	8004ea8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004eb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3740      	adds	r7, #64	; 0x40
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xQueueReceive+0x30>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	623b      	str	r3, [r7, #32]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <xQueueReceive+0x3e>
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <xQueueReceive+0x42>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueReceive+0x44>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueReceive+0x5e>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	61fb      	str	r3, [r7, #28]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f1e:	f001 f83b 	bl	8005f98 <xTaskGetSchedulerState>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <xQueueReceive+0x6e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <xQueueReceive+0x72>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <xQueueReceive+0x74>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <xQueueReceive+0x8e>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	61bb      	str	r3, [r7, #24]
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f4e:	f001 fd81 	bl	8006a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01f      	beq.n	8004f9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f62:	f000 f8f7 	bl	8005154 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00f      	beq.n	8004f96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	3310      	adds	r3, #16
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fe4e 	bl	8005c1c <xTaskRemoveFromEventList>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f86:	4b3d      	ldr	r3, [pc, #244]	; (800507c <xQueueReceive+0x1bc>)
 8004f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f96:	f001 fd8d 	bl	8006ab4 <vPortExitCritical>
				return pdPASS;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e069      	b.n	8005072 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fa4:	f001 fd86 	bl	8006ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e062      	b.n	8005072 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb2:	f107 0310 	add.w	r3, r7, #16
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fe94 	bl	8005ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc0:	f001 fd78 	bl	8006ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fc4:	f000 fc06 	bl	80057d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc8:	f001 fd44 	bl	8006a54 <vPortEnterCritical>
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d103      	bne.n	8004fe2 <xQueueReceive+0x122>
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d103      	bne.n	8004ff8 <xQueueReceive+0x138>
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff8:	f001 fd5c 	bl	8006ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ffc:	1d3a      	adds	r2, r7, #4
 8004ffe:	f107 0310 	add.w	r3, r7, #16
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fe83 	bl	8005d10 <xTaskCheckForTimeOut>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d123      	bne.n	8005058 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005012:	f000 f917 	bl	8005244 <prvIsQueueEmpty>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fda9 	bl	8005b7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800502a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502c:	f000 f8b8 	bl	80051a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005030:	f000 fbde 	bl	80057f0 <xTaskResumeAll>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d189      	bne.n	8004f4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <xQueueReceive+0x1bc>)
 800503c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	e780      	b.n	8004f4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800504c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504e:	f000 f8a7 	bl	80051a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005052:	f000 fbcd 	bl	80057f0 <xTaskResumeAll>
 8005056:	e77a      	b.n	8004f4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505a:	f000 f8a1 	bl	80051a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800505e:	f000 fbc7 	bl	80057f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005064:	f000 f8ee 	bl	8005244 <prvIsQueueEmpty>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	f43f af6f 	beq.w	8004f4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005070:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005072:	4618      	mov	r0, r3
 8005074:	3730      	adds	r7, #48	; 0x30
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10d      	bne.n	80050ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d14d      	bne.n	8005142 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff92 	bl	8005fd4 <xTaskPriorityDisinherit>
 80050b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	e043      	b.n	8005142 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d119      	bne.n	80050f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6858      	ldr	r0, [r3, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	461a      	mov	r2, r3
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	f001 fffa 	bl	80070c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d32b      	bcc.n	8005142 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e026      	b.n	8005142 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68d8      	ldr	r0, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	461a      	mov	r2, r3
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	f001 ffe0 	bl	80070c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	425b      	negs	r3, r3
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d207      	bcs.n	8005130 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	425b      	negs	r3, r3
 800512a:	441a      	add	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d105      	bne.n	8005142 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3b01      	subs	r3, #1
 8005140:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800514a:	697b      	ldr	r3, [r7, #20]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	441a      	add	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d303      	bcc.n	8005188 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68d9      	ldr	r1, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	461a      	mov	r2, r3
 8005192:	6838      	ldr	r0, [r7, #0]
 8005194:	f001 ff96 	bl	80070c4 <memcpy>
	}
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051a8:	f001 fc54 	bl	8006a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051b4:	e011      	b.n	80051da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d012      	beq.n	80051e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3324      	adds	r3, #36	; 0x24
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fd2a 	bl	8005c1c <xTaskRemoveFromEventList>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051ce:	f000 fe01 	bl	8005dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	dce9      	bgt.n	80051b6 <prvUnlockQueue+0x16>
 80051e2:	e000      	b.n	80051e6 <prvUnlockQueue+0x46>
					break;
 80051e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	22ff      	movs	r2, #255	; 0xff
 80051ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051ee:	f001 fc61 	bl	8006ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051f2:	f001 fc2f 	bl	8006a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051fe:	e011      	b.n	8005224 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d012      	beq.n	800522e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3310      	adds	r3, #16
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fd05 	bl	8005c1c <xTaskRemoveFromEventList>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005218:	f000 fddc 	bl	8005dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800521c:	7bbb      	ldrb	r3, [r7, #14]
 800521e:	3b01      	subs	r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005228:	2b00      	cmp	r3, #0
 800522a:	dce9      	bgt.n	8005200 <prvUnlockQueue+0x60>
 800522c:	e000      	b.n	8005230 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800522e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	22ff      	movs	r2, #255	; 0xff
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005238:	f001 fc3c 	bl	8006ab4 <vPortExitCritical>
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800524c:	f001 fc02 	bl	8006a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e001      	b.n	8005262 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005262:	f001 fc27 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005278:	f001 fbec 	bl	8006a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	429a      	cmp	r2, r3
 8005286:	d102      	bne.n	800528e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e001      	b.n	8005292 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005292:	f001 fc0f 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 8005296:	68fb      	ldr	r3, [r7, #12]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e014      	b.n	80052da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052b0:	4a0f      	ldr	r2, [pc, #60]	; (80052f0 <vQueueAddToRegistry+0x50>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052bc:	490c      	ldr	r1, [pc, #48]	; (80052f0 <vQueueAddToRegistry+0x50>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052c6:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <vQueueAddToRegistry+0x50>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052d2:	e006      	b.n	80052e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b07      	cmp	r3, #7
 80052de:	d9e7      	bls.n	80052b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	2000083c 	.word	0x2000083c

080052f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005304:	f001 fba6 	bl	8006a54 <vPortEnterCritical>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530e:	b25b      	sxtb	r3, r3
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d103      	bne.n	800531e <vQueueWaitForMessageRestricted+0x2a>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d103      	bne.n	8005334 <vQueueWaitForMessageRestricted+0x40>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	f001 fbbe 	bl	8006ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fc3b 	bl	8005bc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff ff26 	bl	80051a0 <prvUnlockQueue>
	}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	623b      	str	r3, [r7, #32]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61fb      	str	r3, [r7, #28]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053a2:	235c      	movs	r3, #92	; 0x5c
 80053a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b5c      	cmp	r3, #92	; 0x5c
 80053aa:	d00a      	beq.n	80053c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	61bb      	str	r3, [r7, #24]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01e      	beq.n	8005408 <xTaskCreateStatic+0xac>
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053e2:	2300      	movs	r3, #0
 80053e4:	9303      	str	r3, [sp, #12]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f850 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005402:	f000 f8dd 	bl	80055c0 <prvAddNewTaskToReadyList>
 8005406:	e001      	b.n	800540c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800540c:	697b      	ldr	r3, [r7, #20]
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005416:	b580      	push	{r7, lr}
 8005418:	b08c      	sub	sp, #48	; 0x30
 800541a:	af04      	add	r7, sp, #16
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fc34 	bl	8006c98 <pvPortMalloc>
 8005430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005438:	205c      	movs	r0, #92	; 0x5c
 800543a:	f001 fc2d 	bl	8006c98 <pvPortMalloc>
 800543e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
 800544c:	e005      	b.n	800545a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f001 fcee 	bl	8006e30 <vPortFree>
 8005454:	e001      	b.n	800545a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d017      	beq.n	8005490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	2300      	movs	r3, #0
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f80e 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005484:	69f8      	ldr	r0, [r7, #28]
 8005486:	f000 f89b 	bl	80055c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e002      	b.n	8005496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005496:	69bb      	ldr	r3, [r7, #24]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	461a      	mov	r2, r3
 80054b8:	21a5      	movs	r1, #165	; 0xa5
 80054ba:	f001 fdd7 	bl	800706c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054c8:	3b01      	subs	r3, #1
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f023 0307 	bic.w	r3, r3, #7
 80054d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	617b      	str	r3, [r7, #20]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01f      	beq.n	800553e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e012      	b.n	800552a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	7819      	ldrb	r1, [r3, #0]
 800550c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	3334      	adds	r3, #52	; 0x34
 8005514:	460a      	mov	r2, r1
 8005516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	3301      	adds	r3, #1
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b0f      	cmp	r3, #15
 800552e:	d9e9      	bls.n	8005504 <prvInitialiseNewTask+0x64>
 8005530:	e000      	b.n	8005534 <prvInitialiseNewTask+0x94>
			{
				break;
 8005532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800553c:	e003      	b.n	8005546 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	2b37      	cmp	r3, #55	; 0x37
 800554a:	d901      	bls.n	8005550 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800554c:	2337      	movs	r3, #55	; 0x37
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005554:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f93e 	bl	80047e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	3318      	adds	r3, #24
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff f939 	bl	80047e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2200      	movs	r2, #0
 8005590:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68f9      	ldr	r1, [r7, #12]
 800559e:	69b8      	ldr	r0, [r7, #24]
 80055a0:	f001 f928 	bl	80067f4 <pxPortInitialiseStack>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055b6:	bf00      	nop
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055c8:	f001 fa44 	bl	8006a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055cc:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <prvAddNewTaskToReadyList+0xc4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <prvAddNewTaskToReadyList+0xc4>)
 80055d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055d6:	4b2c      	ldr	r3, [pc, #176]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055de:	4a2a      	ldr	r2, [pc, #168]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <prvAddNewTaskToReadyList+0xc4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d110      	bne.n	800560e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055ec:	f000 fc16 	bl	8005e1c <prvInitialiseTaskLists>
 80055f0:	e00d      	b.n	800560e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <prvAddNewTaskToReadyList+0xcc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055fa:	4b23      	ldr	r3, [pc, #140]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d802      	bhi.n	800560e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <prvAddNewTaskToReadyList+0xd0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <prvAddNewTaskToReadyList+0xd0>)
 8005616:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <prvAddNewTaskToReadyList+0xd0>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <prvAddNewTaskToReadyList+0xd4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d903      	bls.n	8005634 <prvAddNewTaskToReadyList+0x74>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4a18      	ldr	r2, [pc, #96]	; (8005694 <prvAddNewTaskToReadyList+0xd4>)
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvAddNewTaskToReadyList+0xd8>)
 8005642:	441a      	add	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7ff f8d9 	bl	8004802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005650:	f001 fa30 	bl	8006ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005654:	4b0d      	ldr	r3, [pc, #52]	; (800568c <prvAddNewTaskToReadyList+0xcc>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	429a      	cmp	r2, r3
 8005668:	d207      	bcs.n	800567a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <prvAddNewTaskToReadyList+0xdc>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000d50 	.word	0x20000d50
 8005688:	2000087c 	.word	0x2000087c
 800568c:	20000d5c 	.word	0x20000d5c
 8005690:	20000d6c 	.word	0x20000d6c
 8005694:	20000d58 	.word	0x20000d58
 8005698:	20000880 	.word	0x20000880
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d017      	beq.n	80056e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <vTaskDelay+0x60>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <vTaskDelay+0x30>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60bb      	str	r3, [r7, #8]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056d0:	f000 f880 	bl	80057d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056d4:	2100      	movs	r1, #0
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fcea 	bl	80060b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056dc:	f000 f888 	bl	80057f0 <xTaskResumeAll>
 80056e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <vTaskDelay+0x64>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000d78 	.word	0x20000d78
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005716:	463a      	mov	r2, r7
 8005718:	1d39      	adds	r1, r7, #4
 800571a:	f107 0308 	add.w	r3, r7, #8
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff f80e 	bl	8004740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	9202      	str	r2, [sp, #8]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	2300      	movs	r3, #0
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2300      	movs	r3, #0
 8005734:	460a      	mov	r2, r1
 8005736:	4921      	ldr	r1, [pc, #132]	; (80057bc <vTaskStartScheduler+0xb4>)
 8005738:	4821      	ldr	r0, [pc, #132]	; (80057c0 <vTaskStartScheduler+0xb8>)
 800573a:	f7ff fe0f 	bl	800535c <xTaskCreateStatic>
 800573e:	4603      	mov	r3, r0
 8005740:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <vTaskStartScheduler+0xbc>)
 8005742:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005744:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <vTaskStartScheduler+0xbc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e001      	b.n	8005756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d102      	bne.n	8005762 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800575c:	f000 fcfc 	bl	8006158 <xTimerCreateTimerTask>
 8005760:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d116      	bne.n	8005796 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	613b      	str	r3, [r7, #16]
}
 800577a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <vTaskStartScheduler+0xc0>)
 800577e:	f04f 32ff 	mov.w	r2, #4294967295
 8005782:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <vTaskStartScheduler+0xc4>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <vTaskStartScheduler+0xc8>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005790:	f001 f8be 	bl	8006910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005794:	e00e      	b.n	80057b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d10a      	bne.n	80057b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60fb      	str	r3, [r7, #12]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <vTaskStartScheduler+0xaa>
}
 80057b4:	bf00      	nop
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	08007148 	.word	0x08007148
 80057c0:	08005ded 	.word	0x08005ded
 80057c4:	20000d74 	.word	0x20000d74
 80057c8:	20000d70 	.word	0x20000d70
 80057cc:	20000d5c 	.word	0x20000d5c
 80057d0:	20000d54 	.word	0x20000d54

080057d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <vTaskSuspendAll+0x18>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	4a03      	ldr	r2, [pc, #12]	; (80057ec <vTaskSuspendAll+0x18>)
 80057e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057e2:	bf00      	nop
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	20000d78 	.word	0x20000d78

080057f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057fe:	4b42      	ldr	r3, [pc, #264]	; (8005908 <xTaskResumeAll+0x118>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <xTaskResumeAll+0x2c>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	603b      	str	r3, [r7, #0]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800581c:	f001 f91a 	bl	8006a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005820:	4b39      	ldr	r3, [pc, #228]	; (8005908 <xTaskResumeAll+0x118>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3b01      	subs	r3, #1
 8005826:	4a38      	ldr	r2, [pc, #224]	; (8005908 <xTaskResumeAll+0x118>)
 8005828:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582a:	4b37      	ldr	r3, [pc, #220]	; (8005908 <xTaskResumeAll+0x118>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d162      	bne.n	80058f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <xTaskResumeAll+0x11c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d05e      	beq.n	80058f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800583a:	e02f      	b.n	800589c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800583c:	4b34      	ldr	r3, [pc, #208]	; (8005910 <xTaskResumeAll+0x120>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3318      	adds	r3, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f837 	bl	80048bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff f832 	bl	80048bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	4b2d      	ldr	r3, [pc, #180]	; (8005914 <xTaskResumeAll+0x124>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d903      	bls.n	800586c <xTaskResumeAll+0x7c>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <xTaskResumeAll+0x124>)
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <xTaskResumeAll+0x128>)
 800587a:	441a      	add	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7fe ffbd 	bl	8004802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4b23      	ldr	r3, [pc, #140]	; (800591c <xTaskResumeAll+0x12c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	429a      	cmp	r2, r3
 8005894:	d302      	bcc.n	800589c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005896:	4b22      	ldr	r3, [pc, #136]	; (8005920 <xTaskResumeAll+0x130>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800589c:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <xTaskResumeAll+0x120>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1cb      	bne.n	800583c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058aa:	f000 fb55 	bl	8005f58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <xTaskResumeAll+0x134>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d010      	beq.n	80058dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058ba:	f000 f847 	bl	800594c <xTaskIncrementTick>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058c4:	4b16      	ldr	r3, [pc, #88]	; (8005920 <xTaskResumeAll+0x130>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f1      	bne.n	80058ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058d6:	4b13      	ldr	r3, [pc, #76]	; (8005924 <xTaskResumeAll+0x134>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058dc:	4b10      	ldr	r3, [pc, #64]	; (8005920 <xTaskResumeAll+0x130>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d009      	beq.n	80058f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058e8:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <xTaskResumeAll+0x138>)
 80058ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058f8:	f001 f8dc 	bl	8006ab4 <vPortExitCritical>

	return xAlreadyYielded;
 80058fc:	68bb      	ldr	r3, [r7, #8]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000d78 	.word	0x20000d78
 800590c:	20000d50 	.word	0x20000d50
 8005910:	20000d10 	.word	0x20000d10
 8005914:	20000d58 	.word	0x20000d58
 8005918:	20000880 	.word	0x20000880
 800591c:	2000087c 	.word	0x2000087c
 8005920:	20000d64 	.word	0x20000d64
 8005924:	20000d60 	.word	0x20000d60
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <xTaskGetTickCount+0x1c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005938:	687b      	ldr	r3, [r7, #4]
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000d54 	.word	0x20000d54

0800594c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b4f      	ldr	r3, [pc, #316]	; (8005a94 <xTaskIncrementTick+0x148>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 808f 	bne.w	8005a7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005960:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <xTaskIncrementTick+0x14c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005968:	4a4b      	ldr	r2, [pc, #300]	; (8005a98 <xTaskIncrementTick+0x14c>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d120      	bne.n	80059b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005974:	4b49      	ldr	r3, [pc, #292]	; (8005a9c <xTaskIncrementTick+0x150>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <xTaskIncrementTick+0x48>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	603b      	str	r3, [r7, #0]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <xTaskIncrementTick+0x46>
 8005994:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <xTaskIncrementTick+0x150>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	4b41      	ldr	r3, [pc, #260]	; (8005aa0 <xTaskIncrementTick+0x154>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <xTaskIncrementTick+0x150>)
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4a3f      	ldr	r2, [pc, #252]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b3e      	ldr	r3, [pc, #248]	; (8005aa4 <xTaskIncrementTick+0x158>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	4a3d      	ldr	r2, [pc, #244]	; (8005aa4 <xTaskIncrementTick+0x158>)
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	f000 fad1 	bl	8005f58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059b6:	4b3c      	ldr	r3, [pc, #240]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d349      	bcc.n	8005a54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c0:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <xTaskIncrementTick+0x150>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 80059cc:	f04f 32ff 	mov.w	r2, #4294967295
 80059d0:	601a      	str	r2, [r3, #0]
					break;
 80059d2:	e03f      	b.n	8005a54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d4:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <xTaskIncrementTick+0x150>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d203      	bcs.n	80059f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059ec:	4a2e      	ldr	r2, [pc, #184]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059f2:	e02f      	b.n	8005a54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe ff5f 	bl	80048bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3318      	adds	r3, #24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe ff56 	bl	80048bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <xTaskIncrementTick+0x160>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d903      	bls.n	8005a24 <xTaskIncrementTick+0xd8>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4a22      	ldr	r2, [pc, #136]	; (8005aac <xTaskIncrementTick+0x160>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a32:	441a      	add	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f7fe fee1 	bl	8004802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3b8      	bcc.n	80059c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a52:	e7b5      	b.n	80059c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a54:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	4915      	ldr	r1, [pc, #84]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d901      	bls.n	8005a70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <xTaskIncrementTick+0x16c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e004      	b.n	8005a88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <xTaskIncrementTick+0x170>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <xTaskIncrementTick+0x170>)
 8005a86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a88:	697b      	ldr	r3, [r7, #20]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000d78 	.word	0x20000d78
 8005a98:	20000d54 	.word	0x20000d54
 8005a9c:	20000d08 	.word	0x20000d08
 8005aa0:	20000d0c 	.word	0x20000d0c
 8005aa4:	20000d68 	.word	0x20000d68
 8005aa8:	20000d70 	.word	0x20000d70
 8005aac:	20000d58 	.word	0x20000d58
 8005ab0:	20000880 	.word	0x20000880
 8005ab4:	2000087c 	.word	0x2000087c
 8005ab8:	20000d64 	.word	0x20000d64
 8005abc:	20000d60 	.word	0x20000d60

08005ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ac6:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <vTaskSwitchContext+0xa8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ace:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <vTaskSwitchContext+0xac>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ad4:	e041      	b.n	8005b5a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005ad6:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <vTaskSwitchContext+0xac>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005adc:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <vTaskSwitchContext+0xb0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e010      	b.n	8005b06 <vTaskSwitchContext+0x46>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <vTaskSwitchContext+0x40>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	607b      	str	r3, [r7, #4]
}
 8005afc:	bf00      	nop
 8005afe:	e7fe      	b.n	8005afe <vTaskSwitchContext+0x3e>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	491b      	ldr	r1, [pc, #108]	; (8005b74 <vTaskSwitchContext+0xb4>)
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0e4      	beq.n	8005ae4 <vTaskSwitchContext+0x24>
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4a13      	ldr	r2, [pc, #76]	; (8005b74 <vTaskSwitchContext+0xb4>)
 8005b26:	4413      	add	r3, r2
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	605a      	str	r2, [r3, #4]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d104      	bne.n	8005b4a <vTaskSwitchContext+0x8a>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <vTaskSwitchContext+0xb8>)
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	4a06      	ldr	r2, [pc, #24]	; (8005b70 <vTaskSwitchContext+0xb0>)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6013      	str	r3, [r2, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000d78 	.word	0x20000d78
 8005b6c:	20000d64 	.word	0x20000d64
 8005b70:	20000d58 	.word	0x20000d58
 8005b74:	20000880 	.word	0x20000880
 8005b78:	2000087c 	.word	0x2000087c

08005b7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	60fb      	str	r3, [r7, #12]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ba2:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <vTaskPlaceOnEventList+0x44>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fe fe4d 	bl	800484a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	6838      	ldr	r0, [r7, #0]
 8005bb4:	f000 fa7c 	bl	80060b0 <prvAddCurrentTaskToDelayedList>
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	2000087c 	.word	0x2000087c

08005bc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	617b      	str	r3, [r7, #20]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <vTaskPlaceOnEventListRestricted+0x54>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3318      	adds	r3, #24
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7fe fe04 	bl	8004802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295
 8005c04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	68b8      	ldr	r0, [r7, #8]
 8005c0a:	f000 fa51 	bl	80060b0 <prvAddCurrentTaskToDelayedList>
	}
 8005c0e:	bf00      	nop
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	2000087c 	.word	0x2000087c

08005c1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60fb      	str	r3, [r7, #12]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fe35 	bl	80048bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c52:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <xTaskRemoveFromEventList+0xb0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11d      	bne.n	8005c96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fe2c 	bl	80048bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c68:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <xTaskRemoveFromEventList+0xb4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d903      	bls.n	8005c78 <xTaskRemoveFromEventList+0x5c>
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <xTaskRemoveFromEventList+0xb4>)
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <xTaskRemoveFromEventList+0xb8>)
 8005c86:	441a      	add	r2, r3
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f7fe fdb7 	bl	8004802 <vListInsertEnd>
 8005c94:	e005      	b.n	8005ca2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3318      	adds	r3, #24
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	480e      	ldr	r0, [pc, #56]	; (8005cd8 <xTaskRemoveFromEventList+0xbc>)
 8005c9e:	f7fe fdb0 	bl	8004802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <xTaskRemoveFromEventList+0xc0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d905      	bls.n	8005cbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <xTaskRemoveFromEventList+0xc4>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e001      	b.n	8005cc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cc0:	697b      	ldr	r3, [r7, #20]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000d78 	.word	0x20000d78
 8005cd0:	20000d58 	.word	0x20000d58
 8005cd4:	20000880 	.word	0x20000880
 8005cd8:	20000d10 	.word	0x20000d10
 8005cdc:	2000087c 	.word	0x2000087c
 8005ce0:	20000d64 	.word	0x20000d64

08005ce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <vTaskInternalSetTimeOutState+0x24>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <vTaskInternalSetTimeOutState+0x28>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	605a      	str	r2, [r3, #4]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	20000d68 	.word	0x20000d68
 8005d0c:	20000d54 	.word	0x20000d54

08005d10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	613b      	str	r3, [r7, #16]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	60fb      	str	r3, [r7, #12]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d52:	f000 fe7f 	bl	8006a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d56:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <xTaskCheckForTimeOut+0xbc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d102      	bne.n	8005d76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61fb      	str	r3, [r7, #28]
 8005d74:	e023      	b.n	8005dbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <xTaskCheckForTimeOut+0xc0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d007      	beq.n	8005d92 <xTaskCheckForTimeOut+0x82>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d302      	bcc.n	8005d92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	e015      	b.n	8005dbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d20b      	bcs.n	8005db4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff ff9b 	bl	8005ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e004      	b.n	8005dbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dbe:	f000 fe79 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000d54 	.word	0x20000d54
 8005dd0:	20000d68 	.word	0x20000d68

08005dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dd8:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <vTaskMissedYield+0x14>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000d64 	.word	0x20000d64

08005dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005df4:	f000 f852 	bl	8005e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <prvIdleTask+0x28>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d9f9      	bls.n	8005df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <prvIdleTask+0x2c>)
 8005e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e10:	e7f0      	b.n	8005df4 <prvIdleTask+0x8>
 8005e12:	bf00      	nop
 8005e14:	20000880 	.word	0x20000880
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
 8005e26:	e00c      	b.n	8005e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <prvInitialiseTaskLists+0x60>)
 8005e34:	4413      	add	r3, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fcb6 	bl	80047a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b37      	cmp	r3, #55	; 0x37
 8005e46:	d9ef      	bls.n	8005e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e48:	480d      	ldr	r0, [pc, #52]	; (8005e80 <prvInitialiseTaskLists+0x64>)
 8005e4a:	f7fe fcad 	bl	80047a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e4e:	480d      	ldr	r0, [pc, #52]	; (8005e84 <prvInitialiseTaskLists+0x68>)
 8005e50:	f7fe fcaa 	bl	80047a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e54:	480c      	ldr	r0, [pc, #48]	; (8005e88 <prvInitialiseTaskLists+0x6c>)
 8005e56:	f7fe fca7 	bl	80047a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e5a:	480c      	ldr	r0, [pc, #48]	; (8005e8c <prvInitialiseTaskLists+0x70>)
 8005e5c:	f7fe fca4 	bl	80047a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e60:	480b      	ldr	r0, [pc, #44]	; (8005e90 <prvInitialiseTaskLists+0x74>)
 8005e62:	f7fe fca1 	bl	80047a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <prvInitialiseTaskLists+0x78>)
 8005e68:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <prvInitialiseTaskLists+0x64>)
 8005e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <prvInitialiseTaskLists+0x7c>)
 8005e6e:	4a05      	ldr	r2, [pc, #20]	; (8005e84 <prvInitialiseTaskLists+0x68>)
 8005e70:	601a      	str	r2, [r3, #0]
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000880 	.word	0x20000880
 8005e80:	20000ce0 	.word	0x20000ce0
 8005e84:	20000cf4 	.word	0x20000cf4
 8005e88:	20000d10 	.word	0x20000d10
 8005e8c:	20000d24 	.word	0x20000d24
 8005e90:	20000d3c 	.word	0x20000d3c
 8005e94:	20000d08 	.word	0x20000d08
 8005e98:	20000d0c 	.word	0x20000d0c

08005e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ea2:	e019      	b.n	8005ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ea4:	f000 fdd6 	bl	8006a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea8:	4b10      	ldr	r3, [pc, #64]	; (8005eec <prvCheckTasksWaitingTermination+0x50>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe fd01 	bl	80048bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <prvCheckTasksWaitingTermination+0x54>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	4a0b      	ldr	r2, [pc, #44]	; (8005ef0 <prvCheckTasksWaitingTermination+0x54>)
 8005ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <prvCheckTasksWaitingTermination+0x58>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	4a0a      	ldr	r2, [pc, #40]	; (8005ef4 <prvCheckTasksWaitingTermination+0x58>)
 8005ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ece:	f000 fdf1 	bl	8006ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f810 	bl	8005ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <prvCheckTasksWaitingTermination+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e1      	bne.n	8005ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000d24 	.word	0x20000d24
 8005ef0:	20000d50 	.word	0x20000d50
 8005ef4:	20000d38 	.word	0x20000d38

08005ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 ff8e 	bl	8006e30 <vPortFree>
				vPortFree( pxTCB );
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 ff8b 	bl	8006e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f1a:	e018      	b.n	8005f4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d103      	bne.n	8005f2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 ff82 	bl	8006e30 <vPortFree>
	}
 8005f2c:	e00f      	b.n	8005f4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d00a      	beq.n	8005f4e <prvDeleteTCB+0x56>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60fb      	str	r3, [r7, #12]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <prvDeleteTCB+0x54>
	}
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <prvResetNextTaskUnblockTime+0x38>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d104      	bne.n	8005f72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <prvResetNextTaskUnblockTime+0x3c>)
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f70:	e008      	b.n	8005f84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <prvResetNextTaskUnblockTime+0x38>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a04      	ldr	r2, [pc, #16]	; (8005f94 <prvResetNextTaskUnblockTime+0x3c>)
 8005f82:	6013      	str	r3, [r2, #0]
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000d08 	.word	0x20000d08
 8005f94:	20000d70 	.word	0x20000d70

08005f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <xTaskGetSchedulerState+0x34>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	e008      	b.n	8005fbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <xTaskGetSchedulerState+0x38>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	607b      	str	r3, [r7, #4]
 8005fb8:	e001      	b.n	8005fbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fbe:	687b      	ldr	r3, [r7, #4]
	}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000d5c 	.word	0x20000d5c
 8005fd0:	20000d78 	.word	0x20000d78

08005fd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d056      	beq.n	8006098 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fea:	4b2e      	ldr	r3, [pc, #184]	; (80060a4 <xTaskPriorityDisinherit+0xd0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d00a      	beq.n	800600a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60fb      	str	r3, [r7, #12]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60bb      	str	r3, [r7, #8]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602c:	1e5a      	subs	r2, r3, #1
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603a:	429a      	cmp	r2, r3
 800603c:	d02c      	beq.n	8006098 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006042:	2b00      	cmp	r3, #0
 8006044:	d128      	bne.n	8006098 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fc36 	bl	80048bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <xTaskPriorityDisinherit+0xd4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d903      	bls.n	8006078 <xTaskPriorityDisinherit+0xa4>
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <xTaskPriorityDisinherit+0xd4>)
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4a09      	ldr	r2, [pc, #36]	; (80060ac <xTaskPriorityDisinherit+0xd8>)
 8006086:	441a      	add	r2, r3
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f7fe fbb7 	bl	8004802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006098:	697b      	ldr	r3, [r7, #20]
	}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	2000087c 	.word	0x2000087c
 80060a8:	20000d58 	.word	0x20000d58
 80060ac:	20000880 	.word	0x20000880

080060b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ba:	4b21      	ldr	r3, [pc, #132]	; (8006140 <prvAddCurrentTaskToDelayedList+0x90>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c0:	4b20      	ldr	r3, [pc, #128]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fbf8 	bl	80048bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d10a      	bne.n	80060ea <prvAddCurrentTaskToDelayedList+0x3a>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060da:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4819      	ldr	r0, [pc, #100]	; (8006148 <prvAddCurrentTaskToDelayedList+0x98>)
 80060e4:	f7fe fb8d 	bl	8004802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060e8:	e026      	b.n	8006138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d209      	bcs.n	8006116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3304      	adds	r3, #4
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	f7fe fb9b 	bl	800484a <vListInsert>
}
 8006114:	e010      	b.n	8006138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006116:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f7fe fb91 	bl	800484a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	d202      	bcs.n	8006138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006132:	4a08      	ldr	r2, [pc, #32]	; (8006154 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6013      	str	r3, [r2, #0]
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000d54 	.word	0x20000d54
 8006144:	2000087c 	.word	0x2000087c
 8006148:	20000d3c 	.word	0x20000d3c
 800614c:	20000d0c 	.word	0x20000d0c
 8006150:	20000d08 	.word	0x20000d08
 8006154:	20000d70 	.word	0x20000d70

08006158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006162:	f000 fb07 	bl	8006774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006166:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <xTimerCreateTimerTask+0x80>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d021      	beq.n	80061b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006176:	1d3a      	adds	r2, r7, #4
 8006178:	f107 0108 	add.w	r1, r7, #8
 800617c:	f107 030c 	add.w	r3, r7, #12
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe faf7 	bl	8004774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	9202      	str	r2, [sp, #8]
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	2302      	movs	r3, #2
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2300      	movs	r3, #0
 8006196:	460a      	mov	r2, r1
 8006198:	4910      	ldr	r1, [pc, #64]	; (80061dc <xTimerCreateTimerTask+0x84>)
 800619a:	4811      	ldr	r0, [pc, #68]	; (80061e0 <xTimerCreateTimerTask+0x88>)
 800619c:	f7ff f8de 	bl	800535c <xTaskCreateStatic>
 80061a0:	4603      	mov	r3, r0
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <xTimerCreateTimerTask+0x8c>)
 80061a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061a6:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <xTimerCreateTimerTask+0x8c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061ae:	2301      	movs	r3, #1
 80061b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	613b      	str	r3, [r7, #16]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061ce:	697b      	ldr	r3, [r7, #20]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000dac 	.word	0x20000dac
 80061dc:	08007150 	.word	0x08007150
 80061e0:	0800631d 	.word	0x0800631d
 80061e4:	20000db0 	.word	0x20000db0

080061e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	623b      	str	r3, [r7, #32]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006216:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <xTimerGenericCommand+0x98>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02a      	beq.n	8006274 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b05      	cmp	r3, #5
 800622e:	dc18      	bgt.n	8006262 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006230:	f7ff feb2 	bl	8005f98 <xTaskGetSchedulerState>
 8006234:	4603      	mov	r3, r0
 8006236:	2b02      	cmp	r3, #2
 8006238:	d109      	bne.n	800624e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <xTimerGenericCommand+0x98>)
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f107 0110 	add.w	r1, r7, #16
 8006242:	2300      	movs	r3, #0
 8006244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006246:	f7fe fca1 	bl	8004b8c <xQueueGenericSend>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
 800624c:	e012      	b.n	8006274 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <xTimerGenericCommand+0x98>)
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f107 0110 	add.w	r1, r7, #16
 8006256:	2300      	movs	r3, #0
 8006258:	2200      	movs	r2, #0
 800625a:	f7fe fc97 	bl	8004b8c <xQueueGenericSend>
 800625e:	6278      	str	r0, [r7, #36]	; 0x24
 8006260:	e008      	b.n	8006274 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <xTimerGenericCommand+0x98>)
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f107 0110 	add.w	r1, r7, #16
 800626a:	2300      	movs	r3, #0
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	f7fe fd8b 	bl	8004d88 <xQueueGenericSendFromISR>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006276:	4618      	mov	r0, r3
 8006278:	3728      	adds	r7, #40	; 0x28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000dac 	.word	0x20000dac

08006284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <prvProcessExpiredTimer+0x94>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fb0d 	bl	80048bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d022      	beq.n	80062f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	18d1      	adds	r1, r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	6978      	ldr	r0, [r7, #20]
 80062be:	f000 f8d1 	bl	8006464 <prvInsertTimerInActiveList>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01f      	beq.n	8006308 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062c8:	2300      	movs	r3, #0
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2300      	movs	r3, #0
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	2100      	movs	r1, #0
 80062d2:	6978      	ldr	r0, [r7, #20]
 80062d4:	f7ff ff88 	bl	80061e8 <xTimerGenericCommand>
 80062d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d113      	bne.n	8006308 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	b2da      	uxtb	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	6978      	ldr	r0, [r7, #20]
 800630e:	4798      	blx	r3
}
 8006310:	bf00      	nop
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000da4 	.word	0x20000da4

0800631c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006324:	f107 0308 	add.w	r3, r7, #8
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f857 	bl	80063dc <prvGetNextExpireTime>
 800632e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4619      	mov	r1, r3
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f803 	bl	8006340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800633a:	f000 f8d5 	bl	80064e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800633e:	e7f1      	b.n	8006324 <prvTimerTask+0x8>

08006340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800634a:	f7ff fa43 	bl	80057d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800634e:	f107 0308 	add.w	r3, r7, #8
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f866 	bl	8006424 <prvSampleTimeNow>
 8006358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d130      	bne.n	80063c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <prvProcessTimerOrBlockTask+0x3c>
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	429a      	cmp	r2, r3
 800636c:	d806      	bhi.n	800637c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800636e:	f7ff fa3f 	bl	80057f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff ff85 	bl	8006284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800637a:	e024      	b.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <prvProcessTimerOrBlockTask+0x90>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <prvProcessTimerOrBlockTask+0x50>
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <prvProcessTimerOrBlockTask+0x52>
 8006390:	2300      	movs	r3, #0
 8006392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <prvProcessTimerOrBlockTask+0x94>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4619      	mov	r1, r3
 80063a2:	f7fe ffa7 	bl	80052f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063a6:	f7ff fa23 	bl	80057f0 <xTaskResumeAll>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <prvProcessTimerOrBlockTask+0x98>)
 80063b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	f3bf 8f6f 	isb	sy
}
 80063c0:	e001      	b.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063c2:	f7ff fa15 	bl	80057f0 <xTaskResumeAll>
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000da8 	.word	0x20000da8
 80063d4:	20000dac 	.word	0x20000dac
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <prvGetNextExpireTime+0x44>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <prvGetNextExpireTime+0x16>
 80063ee:	2201      	movs	r2, #1
 80063f0:	e000      	b.n	80063f4 <prvGetNextExpireTime+0x18>
 80063f2:	2200      	movs	r2, #0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <prvGetNextExpireTime+0x44>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e001      	b.n	8006410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006410:	68fb      	ldr	r3, [r7, #12]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000da4 	.word	0x20000da4

08006424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800642c:	f7ff fa7e 	bl	800592c <xTaskGetTickCount>
 8006430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <prvSampleTimeNow+0x3c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d205      	bcs.n	8006448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800643c:	f000 f936 	bl	80066ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e002      	b.n	800644e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800644e:	4a04      	ldr	r2, [pc, #16]	; (8006460 <prvSampleTimeNow+0x3c>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000db4 	.word	0x20000db4

08006464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d812      	bhi.n	80064b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e01b      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800649e:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <prvInsertTimerInActiveList+0x7c>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe f9ce 	bl	800484a <vListInsert>
 80064ae:	e012      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d206      	bcs.n	80064c6 <prvInsertTimerInActiveList+0x62>
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e007      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <prvInsertTimerInActiveList+0x80>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fe f9ba 	bl	800484a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064d6:	697b      	ldr	r3, [r7, #20]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20000da8 	.word	0x20000da8
 80064e4:	20000da4 	.word	0x20000da4

080064e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	; 0x38
 80064ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ee:	e0ca      	b.n	8006686 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da18      	bge.n	8006528 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	3304      	adds	r3, #4
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	61fb      	str	r3, [r7, #28]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651e:	6850      	ldr	r0, [r2, #4]
 8006520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006522:	6892      	ldr	r2, [r2, #8]
 8006524:	4611      	mov	r1, r2
 8006526:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f2c0 80ab 	blt.w	8006686 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe f9bb 	bl	80048bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006546:	463b      	mov	r3, r7
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff ff6b 	bl	8006424 <prvSampleTimeNow>
 800654e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b09      	cmp	r3, #9
 8006554:	f200 8096 	bhi.w	8006684 <prvProcessReceivedCommands+0x19c>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <prvProcessReceivedCommands+0x78>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006589 	.word	0x08006589
 8006564:	08006589 	.word	0x08006589
 8006568:	08006589 	.word	0x08006589
 800656c:	080065fd 	.word	0x080065fd
 8006570:	08006611 	.word	0x08006611
 8006574:	0800665b 	.word	0x0800665b
 8006578:	08006589 	.word	0x08006589
 800657c:	08006589 	.word	0x08006589
 8006580:	080065fd 	.word	0x080065fd
 8006584:	08006611 	.word	0x08006611
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	18d1      	adds	r1, r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a8:	f7ff ff5c 	bl	8006464 <prvInsertTimerInActiveList>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d069      	beq.n	8006686 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d05e      	beq.n	8006686 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	441a      	add	r2, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	2100      	movs	r1, #0
 80065d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065da:	f7ff fe05 	bl	80061e8 <xTimerGenericCommand>
 80065de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d14f      	bne.n	8006686 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	61bb      	str	r3, [r7, #24]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800660e:	e03a      	b.n	8006686 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	b2da      	uxtb	r2, r3
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	617b      	str	r3, [r7, #20]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	18d1      	adds	r1, r2, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006654:	f7ff ff06 	bl	8006464 <prvInsertTimerInActiveList>
					break;
 8006658:	e015      	b.n	8006686 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666a:	f000 fbe1 	bl	8006e30 <vPortFree>
 800666e:	e00a      	b.n	8006686 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006682:	e000      	b.n	8006686 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006684:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006686:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <prvProcessReceivedCommands+0x1c0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	1d39      	adds	r1, r7, #4
 800668c:	2200      	movs	r2, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe fc16 	bl	8004ec0 <xQueueReceive>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	f47f af2a 	bne.w	80064f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3730      	adds	r7, #48	; 0x30
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000dac 	.word	0x20000dac

080066ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066b2:	e048      	b.n	8006746 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <prvSwitchTimerLists+0xc0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066be:	4b2b      	ldr	r3, [pc, #172]	; (800676c <prvSwitchTimerLists+0xc0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe f8f5 	bl	80048bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02e      	beq.n	8006746 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d90e      	bls.n	8006718 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <prvSwitchTimerLists+0xc0>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3304      	adds	r3, #4
 800670e:	4619      	mov	r1, r3
 8006710:	4610      	mov	r0, r2
 8006712:	f7fe f89a 	bl	800484a <vListInsert>
 8006716:	e016      	b.n	8006746 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	2300      	movs	r3, #0
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	2100      	movs	r1, #0
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fd60 	bl	80061e8 <xTimerGenericCommand>
 8006728:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	603b      	str	r3, [r7, #0]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <prvSwitchTimerLists+0xc0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1b1      	bne.n	80066b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <prvSwitchTimerLists+0xc0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <prvSwitchTimerLists+0xc4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a04      	ldr	r2, [pc, #16]	; (800676c <prvSwitchTimerLists+0xc0>)
 800675c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800675e:	4a04      	ldr	r2, [pc, #16]	; (8006770 <prvSwitchTimerLists+0xc4>)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	6013      	str	r3, [r2, #0]
}
 8006764:	bf00      	nop
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000da4 	.word	0x20000da4
 8006770:	20000da8 	.word	0x20000da8

08006774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800677a:	f000 f96b 	bl	8006a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d120      	bne.n	80067c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006786:	4814      	ldr	r0, [pc, #80]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 8006788:	f7fe f80e 	bl	80047a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800678c:	4813      	ldr	r0, [pc, #76]	; (80067dc <prvCheckForValidListAndQueue+0x68>)
 800678e:	f7fe f80b 	bl	80047a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <prvCheckForValidListAndQueue+0x6c>)
 8006794:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 8006796:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <prvCheckForValidListAndQueue+0x70>)
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <prvCheckForValidListAndQueue+0x68>)
 800679c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800679e:	2300      	movs	r3, #0
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <prvCheckForValidListAndQueue+0x74>)
 80067a4:	4a11      	ldr	r2, [pc, #68]	; (80067ec <prvCheckForValidListAndQueue+0x78>)
 80067a6:	2110      	movs	r1, #16
 80067a8:	200a      	movs	r0, #10
 80067aa:	f7fe f919 	bl	80049e0 <xQueueGenericCreateStatic>
 80067ae:	4603      	mov	r3, r0
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 80067b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	490b      	ldr	r1, [pc, #44]	; (80067f0 <prvCheckForValidListAndQueue+0x7c>)
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fd6c 	bl	80052a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067c8:	f000 f974 	bl	8006ab4 <vPortExitCritical>
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000dac 	.word	0x20000dac
 80067d8:	20000d7c 	.word	0x20000d7c
 80067dc:	20000d90 	.word	0x20000d90
 80067e0:	20000da4 	.word	0x20000da4
 80067e4:	20000da8 	.word	0x20000da8
 80067e8:	20000e58 	.word	0x20000e58
 80067ec:	20000db8 	.word	0x20000db8
 80067f0:	08007158 	.word	0x08007158

080067f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3b04      	subs	r3, #4
 8006804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800680c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b04      	subs	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f023 0201 	bic.w	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b04      	subs	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006824:	4a0c      	ldr	r2, [pc, #48]	; (8006858 <pxPortInitialiseStack+0x64>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b14      	subs	r3, #20
 800682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b04      	subs	r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f06f 0202 	mvn.w	r2, #2
 8006842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3b20      	subs	r3, #32
 8006848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	0800685d 	.word	0x0800685d

0800685c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <prvTaskExitError+0x54>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d00a      	beq.n	8006886 <prvTaskExitError+0x2a>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <prvTaskExitError+0x28>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60bb      	str	r3, [r7, #8]
}
 8006898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800689a:	bf00      	nop
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0fc      	beq.n	800689c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20000014 	.word	0x20000014
	...

080068c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <pxCurrentTCBConst2>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	f380 8809 	msr	PSP, r0
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8811 	msr	BASEPRI, r0
 80068da:	4770      	bx	lr
 80068dc:	f3af 8000 	nop.w

080068e0 <pxCurrentTCBConst2>:
 80068e0:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068e8:	4808      	ldr	r0, [pc, #32]	; (800690c <prvPortStartFirstTask+0x24>)
 80068ea:	6800      	ldr	r0, [r0, #0]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f380 8808 	msr	MSP, r0
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8814 	msr	CONTROL, r0
 80068fa:	b662      	cpsie	i
 80068fc:	b661      	cpsie	f
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	df00      	svc	0
 8006908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800690a:	bf00      	nop
 800690c:	e000ed08 	.word	0xe000ed08

08006910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006916:	4b46      	ldr	r3, [pc, #280]	; (8006a30 <xPortStartScheduler+0x120>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a46      	ldr	r2, [pc, #280]	; (8006a34 <xPortStartScheduler+0x124>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10a      	bne.n	8006936 <xPortStartScheduler+0x26>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	613b      	str	r3, [r7, #16]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006936:	4b3e      	ldr	r3, [pc, #248]	; (8006a30 <xPortStartScheduler+0x120>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a3f      	ldr	r2, [pc, #252]	; (8006a38 <xPortStartScheduler+0x128>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10a      	bne.n	8006956 <xPortStartScheduler+0x46>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006956:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <xPortStartScheduler+0x12c>)
 8006958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	22ff      	movs	r2, #255	; 0xff
 8006966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006978:	b2da      	uxtb	r2, r3
 800697a:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <xPortStartScheduler+0x130>)
 800697c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800697e:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <xPortStartScheduler+0x134>)
 8006980:	2207      	movs	r2, #7
 8006982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006984:	e009      	b.n	800699a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006986:	4b2f      	ldr	r3, [pc, #188]	; (8006a44 <xPortStartScheduler+0x134>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3b01      	subs	r3, #1
 800698c:	4a2d      	ldr	r2, [pc, #180]	; (8006a44 <xPortStartScheduler+0x134>)
 800698e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d0ef      	beq.n	8006986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069a6:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <xPortStartScheduler+0x134>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1c3 0307 	rsb	r3, r3, #7
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d00a      	beq.n	80069c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	60bb      	str	r3, [r7, #8]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069c8:	4b1e      	ldr	r3, [pc, #120]	; (8006a44 <xPortStartScheduler+0x134>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <xPortStartScheduler+0x134>)
 80069d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069d2:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <xPortStartScheduler+0x134>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069da:	4a1a      	ldr	r2, [pc, #104]	; (8006a44 <xPortStartScheduler+0x134>)
 80069dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <xPortStartScheduler+0x138>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <xPortStartScheduler+0x138>)
 80069ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <xPortStartScheduler+0x138>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <xPortStartScheduler+0x138>)
 80069f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069fe:	f000 f8dd 	bl	8006bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <xPortStartScheduler+0x13c>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a08:	f000 f8fc 	bl	8006c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a0c:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <xPortStartScheduler+0x140>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0f      	ldr	r2, [pc, #60]	; (8006a50 <xPortStartScheduler+0x140>)
 8006a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a18:	f7ff ff66 	bl	80068e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a1c:	f7ff f850 	bl	8005ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8006a20:	f7ff ff1c 	bl	800685c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	e000ed00 	.word	0xe000ed00
 8006a34:	410fc271 	.word	0x410fc271
 8006a38:	410fc270 	.word	0x410fc270
 8006a3c:	e000e400 	.word	0xe000e400
 8006a40:	20000ea8 	.word	0x20000ea8
 8006a44:	20000eac 	.word	0x20000eac
 8006a48:	e000ed20 	.word	0xe000ed20
 8006a4c:	20000014 	.word	0x20000014
 8006a50:	e000ef34 	.word	0xe000ef34

08006a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	607b      	str	r3, [r7, #4]
}
 8006a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <vPortEnterCritical+0x58>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <vPortEnterCritical+0x58>)
 8006a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <vPortEnterCritical+0x58>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10f      	bne.n	8006aa0 <vPortEnterCritical+0x4c>
	{
 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <vPortEnterCritical+0x5c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	603b      	str	r3, [r7, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <vPortEnterCritical+0x4a>
	}
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20000014 	.word	0x20000014
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aba:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <vPortExitCritical+0x50>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <vPortExitCritical+0x24>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	607b      	str	r3, [r7, #4]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <vPortExitCritical+0x50>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <vPortExitCritical+0x50>)
 8006ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <vPortExitCritical+0x50>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d105      	bne.n	8006af6 <vPortExitCritical+0x42>
 8006aea:	2300      	movs	r3, #0
 8006aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f383 8811 	msr	BASEPRI, r3
}
 8006af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000014 	.word	0x20000014
	...

08006b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b10:	f3ef 8009 	mrs	r0, PSP
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <pxCurrentTCBConst>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	f01e 0f10 	tst.w	lr, #16
 8006b20:	bf08      	it	eq
 8006b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	6010      	str	r0, [r2, #0]
 8006b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b34:	f380 8811 	msr	BASEPRI, r0
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f7fe ffbe 	bl	8005ac0 <vTaskSwitchContext>
 8006b44:	f04f 0000 	mov.w	r0, #0
 8006b48:	f380 8811 	msr	BASEPRI, r0
 8006b4c:	bc09      	pop	{r0, r3}
 8006b4e:	6819      	ldr	r1, [r3, #0]
 8006b50:	6808      	ldr	r0, [r1, #0]
 8006b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b56:	f01e 0f10 	tst.w	lr, #16
 8006b5a:	bf08      	it	eq
 8006b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b60:	f380 8809 	msr	PSP, r0
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w

08006b70 <pxCurrentTCBConst>:
 8006b70:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop

08006b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b92:	f7fe fedb 	bl	800594c <xTaskIncrementTick>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <xPortSysTickHandler+0x40>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f383 8811 	msr	BASEPRI, r3
}
 8006bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <vPortSetupTimerInterrupt+0x34>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <vPortSetupTimerInterrupt+0x38>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <vPortSetupTimerInterrupt+0x3c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <vPortSetupTimerInterrupt+0x40>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	099b      	lsrs	r3, r3, #6
 8006bd8:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <vPortSetupTimerInterrupt+0x44>)
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bde:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <vPortSetupTimerInterrupt+0x34>)
 8006be0:	2207      	movs	r2, #7
 8006be2:	601a      	str	r2, [r3, #0]
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	e000e010 	.word	0xe000e010
 8006bf4:	e000e018 	.word	0xe000e018
 8006bf8:	20000008 	.word	0x20000008
 8006bfc:	10624dd3 	.word	0x10624dd3
 8006c00:	e000e014 	.word	0xe000e014

08006c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c14 <vPortEnableVFP+0x10>
 8006c08:	6801      	ldr	r1, [r0, #0]
 8006c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c0e:	6001      	str	r1, [r0, #0]
 8006c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c12:	bf00      	nop
 8006c14:	e000ed88 	.word	0xe000ed88

08006c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c1e:	f3ef 8305 	mrs	r3, IPSR
 8006c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	d914      	bls.n	8006c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c2a:	4a17      	ldr	r2, [pc, #92]	; (8006c88 <vPortValidateInterruptPriority+0x70>)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c34:	4b15      	ldr	r3, [pc, #84]	; (8006c8c <vPortValidateInterruptPriority+0x74>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	7afa      	ldrb	r2, [r7, #11]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d20a      	bcs.n	8006c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	607b      	str	r3, [r7, #4]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <vPortValidateInterruptPriority+0x78>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <vPortValidateInterruptPriority+0x7c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d90a      	bls.n	8006c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	603b      	str	r3, [r7, #0]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <vPortValidateInterruptPriority+0x60>
	}
 8006c7a:	bf00      	nop
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	e000e3f0 	.word	0xe000e3f0
 8006c8c:	20000ea8 	.word	0x20000ea8
 8006c90:	e000ed0c 	.word	0xe000ed0c
 8006c94:	20000eac 	.word	0x20000eac

08006c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ca4:	f7fe fd96 	bl	80057d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ca8:	4b5b      	ldr	r3, [pc, #364]	; (8006e18 <pvPortMalloc+0x180>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cb0:	f000 f920 	bl	8006ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cb4:	4b59      	ldr	r3, [pc, #356]	; (8006e1c <pvPortMalloc+0x184>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 8093 	bne.w	8006de8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01d      	beq.n	8006d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006cc8:	2208      	movs	r2, #8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4413      	add	r3, r2
 8006cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d014      	beq.n	8006d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f023 0307 	bic.w	r3, r3, #7
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <pvPortMalloc+0x6c>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	617b      	str	r3, [r7, #20]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d06e      	beq.n	8006de8 <pvPortMalloc+0x150>
 8006d0a:	4b45      	ldr	r3, [pc, #276]	; (8006e20 <pvPortMalloc+0x188>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d869      	bhi.n	8006de8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d14:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <pvPortMalloc+0x18c>)
 8006d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d18:	4b42      	ldr	r3, [pc, #264]	; (8006e24 <pvPortMalloc+0x18c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d1e:	e004      	b.n	8006d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <pvPortMalloc+0xa4>
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f1      	bne.n	8006d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d3c:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <pvPortMalloc+0x180>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d050      	beq.n	8006de8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	4413      	add	r3, r2
 8006d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	2308      	movs	r3, #8
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d91f      	bls.n	8006da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <pvPortMalloc+0xf8>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	613b      	str	r3, [r7, #16]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006da2:	69b8      	ldr	r0, [r7, #24]
 8006da4:	f000 f908 	bl	8006fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <pvPortMalloc+0x188>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <pvPortMalloc+0x188>)
 8006db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006db6:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <pvPortMalloc+0x188>)
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <pvPortMalloc+0x190>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d203      	bcs.n	8006dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dc2:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <pvPortMalloc+0x188>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <pvPortMalloc+0x190>)
 8006dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <pvPortMalloc+0x184>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <pvPortMalloc+0x194>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3301      	adds	r3, #1
 8006de4:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <pvPortMalloc+0x194>)
 8006de6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006de8:	f7fe fd02 	bl	80057f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <pvPortMalloc+0x174>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60fb      	str	r3, [r7, #12]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <pvPortMalloc+0x172>
	return pvReturn;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3728      	adds	r7, #40	; 0x28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20002240 	.word	0x20002240
 8006e1c:	20002254 	.word	0x20002254
 8006e20:	20002244 	.word	0x20002244
 8006e24:	20002238 	.word	0x20002238
 8006e28:	20002248 	.word	0x20002248
 8006e2c:	2000224c 	.word	0x2000224c

08006e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d04d      	beq.n	8006ede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e42:	2308      	movs	r3, #8
 8006e44:	425b      	negs	r3, r3
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4413      	add	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <vPortFree+0xb8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <vPortFree+0x44>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60fb      	str	r3, [r7, #12]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <vPortFree+0x62>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60bb      	str	r3, [r7, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <vPortFree+0xb8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01e      	beq.n	8006ede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11a      	bne.n	8006ede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <vPortFree+0xb8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006eb8:	f7fe fc8c 	bl	80057d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <vPortFree+0xbc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	4a09      	ldr	r2, [pc, #36]	; (8006eec <vPortFree+0xbc>)
 8006ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eca:	6938      	ldr	r0, [r7, #16]
 8006ecc:	f000 f874 	bl	8006fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <vPortFree+0xc0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	4a06      	ldr	r2, [pc, #24]	; (8006ef0 <vPortFree+0xc0>)
 8006ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eda:	f7fe fc89 	bl	80057f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ede:	bf00      	nop
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20002254 	.word	0x20002254
 8006eec:	20002244 	.word	0x20002244
 8006ef0:	20002250 	.word	0x20002250

08006ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8006efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f00:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <prvHeapInit+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3307      	adds	r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <prvHeapInit+0xac>)
 8006f24:	4413      	add	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f40:	2208      	movs	r2, #8
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0307 	bic.w	r3, r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <prvHeapInit+0xb8>)
 8006f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <prvHeapInit+0xbc>)
 8006f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <prvHeapInit+0xc0>)
 8006f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000eb0 	.word	0x20000eb0
 8006fa4:	20002238 	.word	0x20002238
 8006fa8:	20002240 	.word	0x20002240
 8006fac:	20002248 	.word	0x20002248
 8006fb0:	20002244 	.word	0x20002244
 8006fb4:	20002254 	.word	0x20002254

08006fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fc0:	4b28      	ldr	r3, [pc, #160]	; (8007064 <prvInsertBlockIntoFreeList+0xac>)
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e002      	b.n	8006fcc <prvInsertBlockIntoFreeList+0x14>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d8f7      	bhi.n	8006fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d108      	bne.n	8006ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d118      	bne.n	8007040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d00d      	beq.n	8007036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	441a      	add	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e008      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007036:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e003      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d002      	beq.n	8007056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20002238 	.word	0x20002238
 8007068:	20002240 	.word	0x20002240

0800706c <memset>:
 800706c:	4402      	add	r2, r0
 800706e:	4603      	mov	r3, r0
 8007070:	4293      	cmp	r3, r2
 8007072:	d100      	bne.n	8007076 <memset+0xa>
 8007074:	4770      	bx	lr
 8007076:	f803 1b01 	strb.w	r1, [r3], #1
 800707a:	e7f9      	b.n	8007070 <memset+0x4>

0800707c <__libc_init_array>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4d0d      	ldr	r5, [pc, #52]	; (80070b4 <__libc_init_array+0x38>)
 8007080:	4c0d      	ldr	r4, [pc, #52]	; (80070b8 <__libc_init_array+0x3c>)
 8007082:	1b64      	subs	r4, r4, r5
 8007084:	10a4      	asrs	r4, r4, #2
 8007086:	2600      	movs	r6, #0
 8007088:	42a6      	cmp	r6, r4
 800708a:	d109      	bne.n	80070a0 <__libc_init_array+0x24>
 800708c:	4d0b      	ldr	r5, [pc, #44]	; (80070bc <__libc_init_array+0x40>)
 800708e:	4c0c      	ldr	r4, [pc, #48]	; (80070c0 <__libc_init_array+0x44>)
 8007090:	f000 f826 	bl	80070e0 <_init>
 8007094:	1b64      	subs	r4, r4, r5
 8007096:	10a4      	asrs	r4, r4, #2
 8007098:	2600      	movs	r6, #0
 800709a:	42a6      	cmp	r6, r4
 800709c:	d105      	bne.n	80070aa <__libc_init_array+0x2e>
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a4:	4798      	blx	r3
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7ee      	b.n	8007088 <__libc_init_array+0xc>
 80070aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ae:	4798      	blx	r3
 80070b0:	3601      	adds	r6, #1
 80070b2:	e7f2      	b.n	800709a <__libc_init_array+0x1e>
 80070b4:	0800727c 	.word	0x0800727c
 80070b8:	0800727c 	.word	0x0800727c
 80070bc:	0800727c 	.word	0x0800727c
 80070c0:	08007280 	.word	0x08007280

080070c4 <memcpy>:
 80070c4:	440a      	add	r2, r1
 80070c6:	4291      	cmp	r1, r2
 80070c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070cc:	d100      	bne.n	80070d0 <memcpy+0xc>
 80070ce:	4770      	bx	lr
 80070d0:	b510      	push	{r4, lr}
 80070d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070da:	4291      	cmp	r1, r2
 80070dc:	d1f9      	bne.n	80070d2 <memcpy+0xe>
 80070de:	bd10      	pop	{r4, pc}

080070e0 <_init>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr

080070ec <_fini>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	bf00      	nop
 80070f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f2:	bc08      	pop	{r3}
 80070f4:	469e      	mov	lr, r3
 80070f6:	4770      	bx	lr
